code,data structures,dp,greedy,combinatorics,math,probabilities,number theory,binary search,constructive algorithms,brute force,strings,geometry,implementation,sortings,games,divide and conquer,hashing,two pointers,bitmasks,dfs and similar,graphs,trees,dsu,meet-in-the-middle,shortest paths,graph matchings,interactive,flows
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> i , </space/> j , </space/> k , </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 s t r i n g </space/> s 1 ; 
 c i n </space/> > > </space/> s 1 ; 
 s e t < c h a r > </space/> s ; 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( s 1 . s i z e ( ) ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> = = </space/> ( s 1 . s i z e ( ) </space/> - </space/> 1 ) ) 
 { 
 i n t </space/> c o u n t </space/> = </space/> 0 ; 
 c h a r </space/> c </space/> = </space/> s 1 [ s 1 . s i z e ( ) </space/> - </space/> 1 ] ; 
 
 f o r </space/> ( j </space/> = </space/> ( s 1 . s i z e ( ) </space/> - </space/> 2 ) ; </space/> s 1 [ j ] </space/> = = </space/> c ; </space/> j - - ) 
 { 
 c o u n t + + ; 
 } 
 
 i f </space/> ( c o u n t </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 s . i n s e r t ( c ) ; 
 } 
 e l s e 
 { 
 i f </space/> ( s 1 [ i ] </space/> ! = </space/> s 1 [ i </space/> + </space/> 1 ] ) 
 { 
 
 i n t </space/> c o u n t </space/> = </space/> 0 ; 
 c h a r </space/> c </space/> = </space/> s 1 [ i ] ; 
 
 f o r </space/> ( j </space/> = </space/> i </space/> - </space/> 1 ; </space/> s 1 [ j ] </space/> = = </space/> c ; </space/> j - - ) 
 { 
 c o u n t + + ; 
 } 
 
 i f </space/> ( c o u n t </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 s . i n s e r t ( c ) ; 
 } 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> j </space/> : </space/> s ) 
 { 
 c o u t </space/> < < </space/> j ; 
 } 
 
 c o u t </space/> < < </space/> e n d l ; 
 s . c l e a r ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" f u n </space/> m a i n ( ) 
 { 
 v a r </space/> t </space/> = </space/> r e a d L i n e ( ) </space/> ! ! . t o I n t ( ) </space/> f o r </space/> ( i </space/> i n </space/> 1 . . t ) 
 { 
 v a r </space/> N </space/> = </space/> r e a d L i n e ( ) </space/> ! ! . t o I n t ( ) </space/> v a r ( o d d , </space/> e v e n G o o d , </space/> e v e n B a d ) </space/> = </space/> l i s t O f ( 0 , </space/> 0 , </space/> 0 ) </space/> f o r </space/> ( i </space/> i n </space/> 1 . . N ) 
 { 
 v a r </space/> t m p </space/> = </space/> r e a d L i n e ( ) </space/> ! ! w h e n 
 { 
 t m p . l e n g t h </space/> % </space/> 2 </space/> = = </space/> 1 - > o d d + + </space/> t m p . c o u n t { </space/> i t </space/> = = </space/> ' 0 ' </space/> } </space/> % </space/> 2 
 = = </space/> 0 - > e v e n G o o d + + </space/> e l s e - > e v e n B a d + + 
 } 
 } 
 p r i n t l n ( N </space/> - </space/> i f </space/> ( o d d </space/> = = </space/> 0 </space/> & & </space/> e v e n B a d </space/> % </space/> 2 </space/> = = </space/> 1 ) 1 </space/> e l s e </space/> 0 ) 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> _ t ; 
 c i n </space/> > > </space/> _ t ; 
 w h i l e </space/> ( _ t - - ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 v e c t o r < p a i r < i n t , </space/> c h a r > > </space/> v ; 
 i n t </space/> d </space/> = </space/> 0 ; 
 c h a r </space/> l </space/> = </space/> ' - ' ; 
 f o r </space/> ( c h a r </space/> c </space/> : </space/> s ) 
 { 
 i f </space/> ( c </space/> ! = </space/> l ) 
 { 
 i f </space/> ( d </space/> > </space/> 0 ) 
 { 
 v . p u s h _ b a c k ( { </space/> d , </space/> l </space/> } ) ; 
 } 
 l </space/> = </space/> c ; 
 d </space/> = </space/> 1 ; 
 } 
 e l s e 
 d + + ; 
 } 
 i f </space/> ( d </space/> > </space/> 0 ) 
 { 
 v . p u s h _ b a c k ( { </space/> d , </space/> l </space/> } ) ; 
 } 
 s e t < c h a r > </space/> r ; 
 f o r </space/> ( a u t o </space/> p </space/> : </space/> v ) 
 { 
 i f </space/> ( p . f i r s t </space/> % </space/> 2 </space/> = = </space/> 1 ) 
 { 
 r . i n s e r t ( p . s e c o n d ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i t </space/> = </space/> r . b e g i n ( ) ; </space/> i t </space/> ! = </space/> r . e n d ( ) ; </space/> i t + + ) 
 { 
 c o u t </space/> < < </space/> * i t ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> y o u r </space/> c o d e </space/> g o e s </space/> h e r e 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t d : : m a p < c h a r , </space/> i n t > </space/> m s , </space/> m t ; 
 s e t < c h a r > </space/> s t , </space/> t t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 { 
 m s [ s [ i ] ] + + ; 
 m t [ t [ i ] ] + + ; 
 s t . i n s e r t ( s [ i ] ) ; 
 t t . i n s e r t ( t [ i ] ) ; 
 } 
 i n t </space/> f l a g </space/> = </space/> 0 ; 
 f o r </space/> ( c h a r </space/> c h </space/> = </space/> ' a ' ; </space/> c h </space/> < = </space/> ' z ' ; </space/> c h + + ) 
 { 
 i f </space/> ( s t . s i z e ( ) </space/> < = </space/> t t . s i z e ( ) ) 
 { 
 i f </space/> ( m s [ c h ] </space/> > </space/> 0 ) 
 { 
 i f </space/> ( m t [ c h ] </space/> > </space/> 0 ) 
 f l a g </space/> = </space/> 1 ; 
 } 
 } 
 } 
 
 i f </space/> ( f l a g ) 
 c o u t </space/> < < </space/> "" Y E S "" ; 
 e l s e 
 c o u t </space/> < < </space/> "" N O "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> o n e </space/> = </space/> 0 , </space/> z e r o </space/> = </space/> 0 , </space/> l e n </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 l e n </space/> + = </space/> s . l e n g t h ( ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . l e n g t h ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> ' 0 ' ) 
 z e r o + + ; 
 e l s e 
 o n e + + ; 
 } 
 } 
 / / </space/> c o u t < < o n e < < "" </space/> "" < < z e r o < < e n d l ; 
 i f </space/> ( l e n </space/> & </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i f </space/> ( ( o n e </space/> & </space/> 1 ) </space/> & & </space/> ( z e r o </space/> & </space/> 1 ) ) 
 { 
 c o u t </space/> < < </space/> n </space/> - </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t d : : s t r i n g </space/> t m p ; 
 s t d : : c i n </space/> > > </space/> t m p ; 
 s t d : : s e t < c h a r > </space/> r e s ; 
 
 / / </space/> t t a a b t 
 / / </space/> 0 1 2 3 4 5 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t m p . s i z e ( ) ; </space/> + + i ) 
 { 
 i f </space/> ( t m p [ i ] </space/> = = </space/> t m p [ i </space/> + </space/> 1 ] ) 
 { 
 + + i ; 
 } 
 e l s e 
 { 
 r e s . i n s e r t ( t m p [ i ] ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> n o w </space/> : </space/> r e s ) 
 { 
 s t d : : c o u t </space/> < < </space/> n o w ; 
 } 
 s t d : : c o u t </space/> < < </space/> ' \ n ' ; 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 s t d : : c i n . t i e ( n u l l p t r ) ; 
 s t d : : c o u t . t i e ( n u l l p t r ) ; 
 
 i n t </space/> t ; 
 s t d : : c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> n l </space/> ' \ n ' 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t r i n g </space/> N ; 
 c i n </space/> > > </space/> N ; 
 
 v e c t o r < i n t > </space/> e v e n , </space/> o d d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> ( i n t ) N . s i z e ( ) </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 i n t </space/> d </space/> = </space/> N [ i ] </space/> - </space/> ' 0 ' ; 
 i f </space/> ( d </space/> % </space/> 2 ) 
 o d d . p u s h _ b a c k ( d ) ; 
 e l s e 
 e v e n . p u s h _ b a c k ( d ) ; 
 } 
 
 w h i l e </space/> ( ! e v e n . e m p t y ( ) </space/> & & </space/> ! o d d . e m p t y ( ) ) 
 { 
 i n t </space/> o u t </space/> = </space/> m i n ( e v e n . b a c k ( ) , </space/> o d d . b a c k ( ) ) ; 
 c o u t </space/> < < </space/> o u t ; 
 ( o u t </space/> = = </space/> e v e n . b a c k ( ) </space/> ? </space/> e v e n </space/> : </space/> o d d ) . p o p _ b a c k ( ) ; 
 } 
 i f </space/> ( ! o d d . e m p t y ( ) ) 
 e v e n </space/> = </space/> o d d ; 
 r e v e r s e ( e v e n . b e g i n ( ) , </space/> e v e n . e n d ( ) ) ; 
 
 f o r </space/> ( i n t </space/> e </space/> : </space/> e v e n ) 
 c o u t </space/> < < </space/> e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> n l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g </space/> i n t 
 c o n s t </space/> i n t </space/> l i m </space/> = </space/> 1 e 9 </space/> + </space/> 4 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 b o o l </space/> c h e c k G o o d ( s t r i n g </space/> s ) 
 { 
 i n t </space/> n </space/> = </space/> s . l e n g t h ( ) ; 
 
 i n t </space/> c n t 0 </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> ' 0 ' ) 
 c n t 0 + + ; 
 } 
 
 i f </space/> ( c n t 0 </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 r e t u r n </space/> t r u e ; 
 r e t u r n </space/> f a l s e ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i n t </space/> t i m e s ; 
 c i n </space/> > > </space/> t i m e s ; 
 w h i l e </space/> ( t i m e s - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 i n t </space/> c n t o </space/> = </space/> 0 ; 
 i n t </space/> e v e n G o o d </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i f </space/> ( s . l e n g t h ( ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 c n t o + + ; 
 e l s e </space/> i f </space/> ( c h e c k G o o d ( s ) ) 
 { 
 e v e n G o o d + + ; 
 } 
 } 
 i f </space/> ( c n t o </space/> > </space/> 0 </space/> | | </space/> ( n </space/> - </space/> e v e n G o o d ) </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> n ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> n </space/> - </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> i , </space/> a , </space/> b , </space/> c , </space/> e , </space/> d ; 
 s t r i n g </space/> s ; 
 v e c t o r < i n t > </space/> v ; 
 c i n </space/> > > </space/> n ; 
 c </space/> = </space/> 0 ; 
 e </space/> = </space/> 0 ; 
 d </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> s ; 
 a </space/> = </space/> c o u n t ( s . b e g i n ( ) , </space/> s . e n d ( ) , </space/> ' 1 ' ) ; 
 b </space/> = </space/> c o u n t ( s . b e g i n ( ) , </space/> s . e n d ( ) , </space/> ' 0 ' ) ; 
 i f </space/> ( a </space/> = = </space/> 0 </space/> | | </space/> b </space/> = = </space/> 0 </space/> | | </space/> a </space/> % </space/> 2 </space/> = = </space/> 0 </space/> | | </space/> b </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( s . s i z e ( ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 { 
 d + + ; 
 } 
 e + + ; 
 } 
 e l s e 
 { 
 c + + ; 
 } 
 } 
 i f </space/> ( c </space/> % </space/> 2 </space/> ! = </space/> 0 </space/> & & </space/> d </space/> = = </space/> 0 ) 
 { 
 c - - ; 
 } 
 c o u t </space/> < < </space/> c </space/> + </space/> e </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s e t < c h a r > </space/> s t ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 i </space/> + = </space/> 2 ; 
 } 
 e l s e 
 { 
 s t . i n s e r t ( s [ i ] ) ; 
 i + + ; 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> u </space/> : </space/> s t ) 
 c o u t </space/> < < </space/> u ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s e t < c h a r > </space/> a n s ; 
 
 i n t </space/> i </space/> = </space/> 0 ; 
 w h i l e </space/> ( i </space/> < </space/> s . s i z e ( ) ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 a n s . i n s e r t ( s [ i ] ) ; 
 i + + ; 
 } 
 e l s e </space/> i f </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] </space/> & & </space/> a n s . f i n d ( s [ i ] ) </space/> ! = </space/> a n s . e n d ( ) ) 
 { 
 i </space/> = </space/> i </space/> + </space/> 2 ; 
 } 
 e l s e 
 { 
 i </space/> = </space/> i </space/> + </space/> 2 ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i t </space/> = </space/> a n s . b e g i n ( ) ; </space/> i t </space/> ! = </space/> a n s . e n d ( ) ; </space/> i t + + ) 
 c o u t </space/> < < </space/> * i t ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> e n d l l </space/> "" \ n "" 
 
 # d e f i n e </space/> f i n </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # d e f i n e </space/> f o u t </space/> f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s e t < c h a r > </space/> s t , </space/> s t t ; 
 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 i + + ; 
 } 
 e l s e 
 { 
 s t . i n s e r t ( s [ i ] ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> s t ) 
 { 
 c o u t </space/> < < </space/> i t ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> J A I </space/> S H R E E </space/> G A N E S H 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / / _ _ g c d ( m , </space/> n ) 
 / / </space/> m e m s e t ( d p , </space/> - 1 , </space/> s i z e o f ( d p ) ) ; 
 / / </space/> s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) , </space/> g r e a t e r < i n t > ( ) ) ; 
 # d e f i n e </space/> f o ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o l ( i , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> m a x ( a , </space/> b , </space/> c ) </space/> m a x ( a , </space/> m a x ( b , </space/> c ) ) 
 # d e f i n e </space/> m i n ( a , </space/> b , </space/> c ) </space/> m i n ( a , </space/> m i n ( b , </space/> c ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v l ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s t r i n g </space/> s 1 </space/> = </space/> "" "" ; 
 
 i n t </space/> a [ 2 6 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 i n t </space/> n </space/> = </space/> s . l e n g t h ( ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( ( i </space/> + </space/> 1 ) </space/> ! = </space/> n </space/> & & </space/> s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] ) 
 i + + ; 
 
 e l s e 
 { 
 a [ s [ i ] </space/> - </space/> ' a ' ] </space/> = </space/> 1 ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 6 ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> = = </space/> 1 ) 
 s 1 </space/> + = </space/> i </space/> + </space/> ' a ' ; 
 } 
 c o u t </space/> < < </space/> s 1 </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < i t e r a t o r > 
 # i n c l u d e </space/> < s e t > 
 # d e f i n e </space/> m x </space/> I N T _ M A X 
 # d e f i n e </space/> m n </space/> I N T _ M I N 
 # d e f i n e </space/> m k p </space/> m a k e _ p a i r 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 / / # d e f i n e </space/> f r ( i , j , n ) </space/> f o r ( </space/> i = j ; i < n ; i + + ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 i n t </space/> m </space/> = </space/> s . l e n g t h ( ) ; 
 v e c t o r < c h a r > </space/> v 1 , </space/> v 2 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> i + + ) 
 { 
 i f </space/> ( ( s [ i ] </space/> - </space/> ' 0 ' ) </space/> % </space/> 2 ) 
 v 1 . p b ( s [ i ] ) ; 
 e l s e 
 { 
 v 2 . p b ( s [ i ] ) ; 
 } 
 } 
 i n t </space/> a </space/> = </space/> v 1 . s i z e ( ) , </space/> b </space/> = </space/> v 2 . s i z e ( ) ; 
 i f </space/> ( v 1 . s i z e ( ) </space/> = = </space/> 0 </space/> | | </space/> v 2 . s i z e ( ) </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> s </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 s t r i n g </space/> a n s </space/> = </space/> "" "" ; 
 i n t </space/> i </space/> = </space/> 0 , </space/> j </space/> = </space/> 0 ; 
 w h i l e </space/> ( i </space/> < </space/> a </space/> & & </space/> j </space/> < </space/> b ) 
 { 
 i f </space/> ( v 1 [ i ] </space/> < </space/> v 2 [ j ] ) 
 { 
 a n s </space/> + = </space/> v 1 [ i + + ] ; 
 } 
 e l s e 
 a n s </space/> + = </space/> v 2 [ j + + ] ; 
 } 
 w h i l e </space/> ( i </space/> < </space/> a ) 
 a n s </space/> + = </space/> v 1 [ i + + ] ; 
 w h i l e </space/> ( j </space/> < </space/> b ) 
 a n s </space/> + = </space/> v 2 [ j + + ] ; 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s t r ; 
 c i n </space/> > > </space/> s t r ; 
 i n t </space/> n </space/> = </space/> s t r . l e n g t h ( ) ; 
 s e t < c h a r > </space/> s t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> j </space/> = </space/> i ; 
 w h i l e </space/> ( j </space/> + </space/> 1 </space/> < </space/> s t r . s i z e ( ) </space/> & & </space/> s t r [ j </space/> + </space/> 1 ] </space/> = = </space/> s t r [ i ] ) 
 j + + ; 
 i f </space/> ( ( j </space/> </space/> i ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 s t . i n s e r t ( s t r [ i ] ) ; 
 i </space/> = </space/> j ; 
 } 
 s e t < c h a r > : : i t e r a t o r </space/> i t ; 
 f o r </space/> ( i t </space/> = </space/> s t . b e g i n ( ) ; </space/> i t </space/> ! = </space/> s t . e n d ( ) ; </space/> i t + + ) 
 { 
 c o u t </space/> < < </space/> * i t ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 3 e 5 </space/> + </space/> 9 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> c n t </space/> = </space/> 0 , </space/> b a k i </space/> = </space/> 0 , </space/> z e r o </space/> = </space/> 0 , </space/> o n e </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s t r i n g </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( x . s i z e ( ) </space/> % </space/> 2 ) 
 { 
 c n t + + ; 
 } 
 i f </space/> ( 1 ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> x . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( x [ j ] </space/> = = </space/> ' 0 ' ) 
 z e r o + + ; 
 e l s e 
 o n e + + ; 
 } 
 } 
 } 
 i f </space/> ( c n t </space/> | | </space/> ( z e r o </space/> % </space/> 2 </space/> = = </space/> 0 </space/> & & </space/> o n e </space/> % </space/> 2 </space/> = = </space/> 0 ) ) 
 c o u t </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> n </space/> - </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s t r ; 
 c i n </space/> > > </space/> s t r ; 
 s e t < c h a r > </space/> a n s ; 
 i n t </space/> c t r </space/> = </space/> 1 ; 
 i f </space/> ( s t r . s i z e ( ) </space/> = = </space/> 1 ) 
 a n s . i n s e r t ( s t r [ 0 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> s t r . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s t r [ i ] </space/> = = </space/> s t r [ i </space/> - </space/> 1 ] ) 
 { 
 c t r + + ; 
 } 
 e l s e 
 { 
 i f </space/> ( c t r </space/> % </space/> 2 ) 
 { 
 a n s . i n s e r t ( s t r [ i </space/> - </space/> 1 ] ) ; 
 } 
 c t r </space/> = </space/> 1 ; 
 } 
 } 
 i f </space/> ( c t r </space/> % </space/> 2 ) 
 { 
 a n s . i n s e r t ( s t r [ s t r . s i z e ( ) </space/> - </space/> 1 ] ) ; 
 } 
 
 / / </space/> s o r t ( a n s . b e g i n ( ) , a n s . e n d ( ) ) </space/> ; 
 f o r </space/> ( c h a r </space/> i </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 s e t < c h a r > </space/> v ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i n t </space/> n </space/> = </space/> s . l e n g t h ( ) ; 
 i f </space/> ( n </space/> = = </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> s </space/> < < </space/> "" \ n "" ; 
 c o n t i n u e ; 
 } 
 s e t < c h a r > </space/> v ; 
 i n t </space/> c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 c + + ; 
 } 
 e l s e 
 { 
 i f </space/> ( ( c </space/> + </space/> 1 ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 { 
 v . i n s e r t ( s [ i ] ) ; 
 } 
 c </space/> = </space/> 0 ; 
 } 
 } 
 i f </space/> ( ( c </space/> + </space/> 1 ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 v . i n s e r t ( s [ n </space/> - </space/> 1 ] ) ; 
 f o r </space/> ( a u t o </space/> i </space/> = </space/> v . b e g i n ( ) ; </space/> i </space/> ! = </space/> v . e n d ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> * i ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 
 
 / / </space/> F u n c t i o n </space/> t o </space/> c o n v e r t </space/> V e c t o r </space/> t o </space/> S e t 
 s e t < c h a r > </space/> c o n v e r t T o S e t ( v e c t o r < c h a r > </space/> v ) 
 { 
 / / </space/> D e c l a r i n g </space/> t h e </space/> s e t 
 / / </space/> u s i n g </space/> r a n g e </space/> o f </space/> v e c t o r 
 s e t < c h a r > </space/> s ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ; 
 
 / / </space/> R e t u r n </space/> t h e </space/> r e s u l t a n t </space/> S e t 
 r e t u r n </space/> s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 s t r i n g </space/> s 1 ; 
 c i n </space/> > > </space/> s 1 ; 
 v e c t o r < c h a r > </space/> s ( s 1 . s i z e ( ) ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 s [ i ] </space/> = </space/> s 1 [ i ] ; 
 v e c t o r < c h a r > </space/> v e c t ; 
 i f </space/> ( s . s i z e ( ) </space/> = = </space/> 1 ) 
 c o u t </space/> < < </space/> s [ 0 ] </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 i f </space/> ( i </space/> = = </space/> s . s i z e ( ) </space/> - </space/> 2 ) 
 v e c t . p u s h _ b a c k ( s [ i </space/> + </space/> 1 ] ) ; 
 v e c t . p u s h _ b a c k ( s [ i ] ) ; 
 } 
 e l s e 
 { 
 i + + ; 
 i f </space/> ( i </space/> + </space/> 1 </space/> = = </space/> s . s i z e ( ) </space/> - </space/> 1 ) 
 v e c t . p u s h _ b a c k ( s [ i </space/> + </space/> 1 ] ) ; 
 } 
 } 
 / / </space/> s o r t ( v e c t . b e g i n ( ) , v e c t . e n d ( ) ) ; 
 
 
 s e t < c h a r > </space/> s 2 </space/> = </space/> c o n v e r t T o S e t ( v e c t ) ; 
 
 f o r </space/> ( s t d : : s e t < c h a r > : : i t e r a t o r </space/> i t </space/> = </space/> s 2 . b e g i n ( ) ; </space/> i t </space/> ! = </space/> s 2 . e n d ( ) ; </space/> + + i t ) 
 s t d : : c o u t </space/> < < </space/> * i t ; 
 
 s t d : : c o u t </space/> < < </space/> ' \ n ' ; 
 } 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s e t < c h a r > </space/> a n s ; 
 s </space/> + = </space/> ' </space/> ' ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) </space/> - </space/> 1 ; </space/> i + + ) 
 i f </space/> ( s [ i ] </space/> ! = </space/> s [ i </space/> + </space/> 1 ] ) 
 a n s . i n s e r t ( s [ i ] ) ; 
 e l s e 
 i + + ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> m o </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> c n t [ N ] , </space/> p [ N ] , </space/> n ; 
 l l </space/> b i n p o w ( l l </space/> t , </space/> l l </space/> b ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 t </space/> % = </space/> m o ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> ( a n s </space/> * </space/> t ) </space/> % </space/> m o ; 
 t </space/> = </space/> ( t </space/> * </space/> t ) </space/> % </space/> m o ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k ; 
 s c a n f ( "" % l l d "" , </space/> & k ) ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k ; </space/> j + + ) 
 { 
 l l </space/> z ; 
 s c a n f ( "" % l l d "" , </space/> & z ) ; 
 c n t [ z ] + + ; 
 p [ z ] </space/> = </space/> ( p [ z ] </space/> + </space/> b i n p o w ( ( l l ( n ) </space/> * </space/> k ) </space/> % </space/> m o , </space/> m o </space/> - </space/> 2 ) ) </space/> % </space/> m o ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 , </space/> t e </space/> = </space/> b i n p o w ( n , </space/> m o </space/> - </space/> 2 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 a n s </space/> = </space/> ( a n s </space/> + </space/> p [ i ] </space/> * </space/> c n t [ i ] </space/> % </space/> m o </space/> * </space/> t e </space/> % </space/> m o ) </space/> % </space/> m o ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 l o n g </space/> l o n g </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> u s [ 1 0 0 0 0 1 0 ] ; 
 
 l o n g </space/> l o n g </space/> p o w e r ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> p o w e r ( a , </space/> b </space/> / </space/> 2 ) ; 
 a n s </space/> = </space/> ( a n s </space/> * </space/> a n s ) </space/> % </space/> m o d ; 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> ( a </space/> * </space/> a n s ) </space/> % </space/> m o d ; 
 r e t u r n </space/> a n s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < v e c t o r < i n t > </space/> > </space/> p ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 p [ i ] . r e s i z e ( k ) ; 
 l l </space/> i n v </space/> = </space/> p o w e r ( k , </space/> m o d </space/> - </space/> 2 ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> p [ i ] [ j ] ; 
 u s [ p [ i ] [ j ] ] </space/> + = </space/> i n v ; 
 } 
 } 
 l l </space/> c c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k </space/> = </space/> p [ i ] . s i z e ( ) ; 
 l l </space/> k i d </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 k i d </space/> + = </space/> u s [ p [ i ] [ j ] ] ; 
 } 
 c c </space/> = </space/> ( c c </space/> + </space/> k i d ) </space/> % </space/> m o d ; 
 } 
 c c </space/> = </space/> c c </space/> * </space/> 1 l l </space/> * </space/> p o w e r ( n </space/> * </space/> 1 l l </space/> * </space/> n </space/> % </space/> m o d , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> c c </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 2 e 9 </space/> + </space/> 3 ; 
 
 
 i n t </space/> b i n _ p o w ( i n t </space/> a , </space/> i n t </space/> n ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( n ) 
 { 
 i f </space/> ( n </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( 1 l l </space/> * </space/> r e s </space/> * </space/> a ) </space/> % </space/> M O D ; 
 a </space/> = </space/> ( 1 l l </space/> * </space/> a </space/> * </space/> a ) </space/> % </space/> M O D ; 
 n </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> c n t _ i t e m _ o w n e r ( N ) ; 
 v e c t o r < v e c t o r < i n t > > </space/> l s t ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k , </space/> x ; 
 c i n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 l s t [ i ] . p u s h _ b a c k ( x ) ; 
 c n t _ i t e m _ o w n e r [ x ] + + ; 
 } 
 } 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> x </space/> : </space/> l s t [ i ] ) 
 { 
 i n t </space/> k </space/> = </space/> l s t [ i ] . s i z e ( ) ; 
 i n t </space/> q </space/> = </space/> b i n _ p o w ( ( 1 l l </space/> * </space/> n </space/> * </space/> n </space/> * </space/> k ) </space/> % </space/> M O D , </space/> M O D </space/> - </space/> 2 ) ; 
 i n t </space/> c u r </space/> = </space/> ( 1 l l </space/> * </space/> c n t _ i t e m _ o w n e r [ x ] </space/> * </space/> q ) </space/> % </space/> M O D ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> c u r ) </space/> % </space/> M O D ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) , </space/> c o u t . t i e ( n u l l p t r ) ; 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> m o </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> c n t [ N ] , </space/> p [ N ] , </space/> n ; 
 / / </space/> i n t </space/> m u l ( i n t </space/> a , </space/> i n t </space/> b ) </space/> { 
 / / </space/> r e t u r n </space/> a </space/> * </space/> 1 l l </space/> * </space/> b </space/> % </space/> m o ; 
 / / </space/> } 
 / / </space/> i n t </space/> b i n p o w ( i n t </space/> a , </space/> i n t </space/> b ) </space/> { 
 / / </space/> i n t </space/> r e s </space/> = </space/> 1 ; 
 / / </space/> w h i l e </space/> ( b ) </space/> { 
 / / </space/> i f </space/> ( b </space/> & </space/> 1 ) </space/> r e s </space/> = </space/> m u l ( r e s , </space/> a ) ; 
 / / </space/> a </space/> = </space/> m u l ( a , </space/> a ) ; 
 / / </space/> b </space/> > > = </space/> 1 ; 
 / / </space/> } 
 / / </space/> r e t u r n </space/> r e s ; 
 / / </space/> } 
 l l </space/> b i n p o w ( l l </space/> t , </space/> l l </space/> b ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 t </space/> % = </space/> m o ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> ( a n s </space/> * </space/> t ) </space/> % </space/> m o ; 
 t </space/> = </space/> ( t </space/> * </space/> t ) </space/> % </space/> m o ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k ; 
 s c a n f ( "" % l l d "" , </space/> & k ) ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k ; </space/> j + + ) 
 { 
 l l </space/> z ; 
 s c a n f ( "" % l l d "" , </space/> & z ) ; 
 c n t [ z ] + + ; 
 p [ z ] </space/> = </space/> ( p [ z ] </space/> + </space/> b i n p o w ( ( l l ( n ) </space/> * </space/> k ) </space/> % </space/> m o , </space/> m o </space/> - </space/> 2 ) ) </space/> % </space/> m o ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 , </space/> t e </space/> = </space/> b i n p o w ( n , </space/> m o </space/> - </space/> 2 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 a n s </space/> = </space/> ( a n s </space/> + </space/> p [ i ] </space/> * </space/> c n t [ i ] </space/> % </space/> m o </space/> * </space/> t e </space/> % </space/> m o ) </space/> % </space/> m o ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> r p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> r p n ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> p o w m o d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 a </space/> % = </space/> m o d ; 
 f o r </space/> ( ; </space/> b ; </space/> b </space/> > > = </space/> 1 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 # d e f i n e </space/> i n v ( a ) </space/> p o w m o d ( a , </space/> m o d </space/> - </space/> 2 ) 
 / / </space/> i n i t 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 l l </space/> c n t [ m a x n ] , </space/> s u m [ m a x n ] ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 r p ( i , </space/> n ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 r p ( j , </space/> k ) 
 { 
 l l </space/> x ; 
 c i n </space/> > > </space/> x ; 
 c n t [ x ] + + ; 
 s u m [ x ] </space/> = </space/> ( s u m [ x ] </space/> + </space/> i n v ( k ) ) </space/> % </space/> m o d ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 r p ( i , </space/> m a x n ) </space/> a n s </space/> = </space/> ( a n s </space/> + </space/> c n t [ i ] </space/> * </space/> s u m [ i ] </space/> % </space/> m o d ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> * </space/> i n v ( n ) </space/> % </space/> m o d </space/> * </space/> i n v ( n ) </space/> % </space/> m o d ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 , </space/> M </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> n , </space/> u , </space/> a n s , </space/> s z [ N ] , </space/> a [ N ] , </space/> k [ N ] ; 
 v e c t o r < i n t > </space/> v e c [ N ] ; 
 v o i d </space/> e x g c d ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t & </space/> a , </space/> i n t & </space/> b ) 
 { 
 i f </space/> ( ! y ) 
 { 
 a </space/> = </space/> 1 ; 
 b </space/> = </space/> 0 ; 
 r e t u r n ; 
 } 
 e x g c d ( y , </space/> x </space/> % </space/> y , </space/> b , </space/> a ) ; 
 b </space/> - = </space/> x </space/> / </space/> y </space/> * </space/> a ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> k </space/> + </space/> i ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k [ i ] ; </space/> j + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & u ) ; 
 v e c [ i ] . p u s h _ b a c k ( u ) ; 
 + + s z [ u ] ; 
 } 
 } 
 i n t </space/> x </space/> = </space/> 0 , </space/> y </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 e x g c d ( k [ i ] , </space/> M , </space/> x , </space/> y ) ; 
 x </space/> = </space/> ( x </space/> % </space/> M </space/> + </space/> M ) </space/> % </space/> M ; 
 i n t </space/> q </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> v e c [ i ] . s i z e ( ) ; </space/> j + + ) 
 q </space/> = </space/> ( q </space/> + </space/> s z [ v e c [ i ] [ j ] ] ) </space/> % </space/> M ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> 1 L L </space/> * </space/> x </space/> * </space/> q </space/> % </space/> M ) </space/> % </space/> M ; 
 } 
 e x g c d ( n , </space/> M , </space/> x , </space/> y ) ; 
 a n s </space/> = </space/> 1 L L </space/> * </space/> a n s </space/> * </space/> x </space/> % </space/> M </space/> * </space/> x </space/> % </space/> M ; 
 p r i n t f ( "" % d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M X </space/> = </space/> 1 e 6 </space/> + </space/> 1 ; 
 i n t </space/> f r e [ M X ] ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 l o n g </space/> l o n g </space/> b i n p o w ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b , </space/> l o n g </space/> l o n g </space/> m ) 
 { 
 a </space/> % = </space/> m ; 
 l o n g </space/> l o n g </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> i n v ( i n t </space/> n ) 
 { 
 r e t u r n </space/> b i n p o w ( n , </space/> M O D </space/> - </space/> 2 , </space/> M O D ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 i n t </space/> v a l ; 
 c i n </space/> > > </space/> v a l ; 
 a [ i ] . p u s h _ b a c k ( v a l ) ; 
 f r e [ v a l ] + + ; 
 } 
 } 
 i n t </space/> a n s </space/> = </space/> 1 ; 
 a n s </space/> * = </space/> i n v ( n ) ; 
 a n s </space/> % = </space/> M O D ; 
 a n s </space/> * = </space/> i n v ( n ) ; 
 a n s </space/> % = </space/> M O D ; 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> s u m 1 </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> a [ i ] . s i z e ( ) ; </space/> j + + ) 
 { 
 s u m 1 </space/> + = </space/> f r e [ a [ i ] [ j ] ] ; 
 s u m 1 </space/> % = </space/> M O D ; 
 } 
 s u m 1 </space/> * = </space/> i n v ( a [ i ] . s i z e ( ) ) ; 
 s u m 1 </space/> % = </space/> M O D ; 
 s u m </space/> + = </space/> s u m 1 ; 
 s u m </space/> % = </space/> M O D ; 
 } 
 a n s </space/> * = </space/> s u m ; 
 a n s </space/> % = </space/> M O D ; 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n ; 
 } 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 i n t </space/> n ; 
 v e c t o r < i n t > </space/> a [ N ] ; 
 i n t </space/> c n t [ N ] ; 
 i n t </space/> i n v [ N ] ; 
 
 i n t </space/> a d d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 a </space/> + = </space/> b ; 
 i f </space/> ( a </space/> > = </space/> M O D ) 
 a </space/> - = </space/> M O D ; 
 r e t u r n </space/> a ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> a </space/> * </space/> 1 l l </space/> * </space/> b </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> b i n p o w ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> m u l ( r e s , </space/> a ) ; 
 a </space/> = </space/> m u l ( a , </space/> a ) ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 a [ i ] . r e s i z e ( k ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] [ j ] ; 
 c n t [ a [ i ] [ j ] ] + + ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i n v [ i ] </space/> = </space/> b i n p o w ( i , </space/> M O D </space/> - </space/> 2 ) ; 
 } 
 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> x </space/> : </space/> a [ i ] ) 
 { 
 a n s </space/> = </space/> a d d ( a n s , </space/> m u l ( m u l ( i n v [ n ] , </space/> i n v [ a [ i ] . s i z e ( ) ] ) , </space/> m u l ( c n t [ x ] , </space/> i n v [ n ] ) ) ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> q p o w ( i n t </space/> x , </space/> i n t </space/> n ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( n ) 
 { 
 i f </space/> ( n </space/> & </space/> 1 ) 
 r e s </space/> = </space/> 1 l l </space/> * </space/> r e s </space/> * </space/> x </space/> % </space/> m o d ; 
 n </space/> > > = </space/> 1 ; 
 x </space/> = </space/> 1 l l </space/> * </space/> x </space/> * </space/> x </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 i n l i n e </space/> i n t </space/> i n v ( i n t </space/> x ) 
 { 
 r e t u r n </space/> q p o w ( x , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i n t </space/> c n t [ m a x n ] ; 
 v e c t o r < i n t > </space/> h a s [ m a x n ] ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> x ; 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 h a s [ i ] . r e s i z e ( x ) ; 
 f o r </space/> ( a u t o & </space/> z </space/> : </space/> h a s [ i ] ) 
 s c a n f ( "" % d "" , </space/> & z ) , </space/> + + c n t [ z ] ; 
 } 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> t m p </space/> = </space/> 1 l l </space/> * </space/> i n v ( h a s [ i ] . s i z e ( ) ) </space/> * </space/> i n v ( n ) </space/> % </space/> m o d ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> h a s [ i ] . s i z e ( ) ; </space/> + + j ) 
 { 
 i n t </space/> a n s </space/> = </space/> 1 l l </space/> * </space/> c n t [ h a s [ i ] [ j ] ] </space/> * </space/> i n v ( n ) </space/> % </space/> m o d </space/> * </space/> t m p </space/> % </space/> m o d ; 
 r e s </space/> = </space/> ( 1 l l </space/> * </space/> r e s </space/> + </space/> 1 l l </space/> * </space/> a n s ) </space/> % </space/> m o d ; 
 } 
 } 
 / / </space/> r e s </space/> = </space/> 1 l l </space/> * </space/> r e s </space/> * </space/> i n v ( 2 ) </space/> % </space/> m o d ; 
 p r i n t f ( "" % d \ n "" , </space/> r e s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < v e c t o r > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 , </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> c n t [ N ] , </space/> k [ N ] ; 
 v e c t o r < i n t > </space/> a [ N ] ; 
 i n t </space/> n ; 
 i n t </space/> i n v ( i n t </space/> a , </space/> i n t </space/> b </space/> = </space/> M O D </space/> - </space/> 2 ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 f o r </space/> ( ; </space/> b ; </space/> b </space/> > > = </space/> 1 , </space/> a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> M O D ) 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> M O D ; 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> a n s ; 
 s i g n e d </space/> m a i n ( v o i d ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % l l d "" , </space/> k </space/> + </space/> i ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 , </space/> t m p ; </space/> j </space/> < = </space/> k [ i ] ; </space/> j + + ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & t m p ) ; 
 c n t [ t m p ] + + ; 
 a [ i ] . p u s h _ b a c k ( t m p ) ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> j </space/> : </space/> a [ i ] ) 
 s u m </space/> = </space/> ( s u m </space/> + </space/> c n t [ j ] </space/> * </space/> i n v ( n ) </space/> % </space/> M O D ) </space/> % </space/> M O D ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> s u m </space/> * </space/> i n v ( k [ i ] ) </space/> % </space/> M O D ) </space/> % </space/> M O D ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s </space/> * </space/> i n v ( n ) </space/> % </space/> M O D ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n </space/> \ 
 c i n . c l o s e ( ) ; </space/> \ 
 r e t u r n </space/> 0 ; 
 # d e f i n e </space/> I N F </space/> ( ( l l ) ( 4 e 1 8 ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f i </space/> f i r s t </space/> / / </space/> p r i n t f ( "" % l l i \ n "" , c u r ) ; 
 # d e f i n e </space/> s e </space/> s e c o n d </space/> / / </space/> s c a n f ( "" % l l i "" , & n ) ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> c c [ N ] ; 
 l l </space/> p o w w ( l l </space/> n , </space/> l l </space/> p a k ) 
 { 
 l l </space/> r e t </space/> = </space/> 1 ; 
 w h i l e </space/> ( p a k ) 
 { 
 i f </space/> ( p a k </space/> % </space/> 2 ) 
 r e t </space/> = </space/> ( r e t </space/> * </space/> n ) </space/> % </space/> m o d ; 
 n </space/> = </space/> ( n </space/> * </space/> n ) </space/> % </space/> m o d ; 
 p a k </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 f i o 
 / / </space/> i f s t r e a m </space/> c i n ( "" i n . i n n "" ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> v e [ n ] ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> v e ) 
 { 
 l l </space/> a ; 
 c i n </space/> > > </space/> a ; 
 w h i l e </space/> ( a - - ) 
 { 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i . p b ( t ) ; 
 c c [ t ] + + ; 
 } 
 } 
 l l </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> v e ) 
 { 
 l l </space/> c u r </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> j </space/> : </space/> i ) 
 c u r </space/> = </space/> ( c u r </space/> + </space/> c c [ j ] </space/> * </space/> p o w w ( n , </space/> m o d </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 c u r </space/> = </space/> ( c u r </space/> * </space/> p o w w ( i . s i z e ( ) , </space/> m o d </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 r e s </space/> = </space/> ( r e s </space/> + </space/> c u r ) </space/> % </space/> m o d ; 
 } 
 r e s </space/> = </space/> ( r e s </space/> * </space/> p o w w ( n , </space/> m o d </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> r e s ; 
 / / </space/> c i n . c l o s e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 0 5 ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 i n t </space/> a d d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> ( a </space/> + = </space/> b ) </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> ( a </space/> * </space/> 1 L L </space/> * </space/> b ) </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> b i n p o w ( i n t </space/> a , </space/> i n t </space/> p , </space/> i n t </space/> m o d ) 
 { 
 i f </space/> ( p </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 i n t </space/> b </space/> = </space/> b i n p o w ( m u l ( a , </space/> a ) , </space/> p </space/> / </space/> 2 , </space/> m o d ) ; 
 i f </space/> ( p </space/> & </space/> 1 ) 
 b </space/> = </space/> m u l ( b , </space/> a ) ; 
 r e t u r n </space/> b ; 
 } 
 
 s t r u c t </space/> L 
 { 
 i n t </space/> x ; 
 L * </space/> n e x t ; 
 } </space/> * </space/> a a [ N ] ; 
 
 v o i d </space/> l i n k ( i n t </space/> i , </space/> i n t </space/> j ) 
 { 
 L * </space/> l </space/> = </space/> n e w </space/> L ( ) ; 
 l - > x </space/> = </space/> j ; 
 l - > n e x t </space/> = </space/> a a [ i ] ; 
 a a [ i ] </space/> = </space/> l ; 
 } ; 
 
 i n t </space/> i n v [ N ] , </space/> c [ N ] , </space/> d [ N ] ; 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> k , </space/> x ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d "" , </space/> & k ) ; 
 d [ i ] </space/> = </space/> k ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> + + j ) 
 { 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 l i n k ( i , </space/> x ) ; 
 c [ x ] + + ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 i n v [ i ] </space/> = </space/> b i n p o w ( i , </space/> M O D </space/> - </space/> 2 , </space/> M O D ) ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 f o r </space/> ( L * </space/> j </space/> = </space/> a a [ i ] ; </space/> j ; </space/> j </space/> = </space/> j - > n e x t ) 
 a n s </space/> = </space/> a d d ( a n s , </space/> m u l ( m u l ( i n v [ n ] , </space/> i n v [ d [ i ] ] ) , </space/> m u l ( c [ j - > x ] , </space/> i n v [ n ] ) ) ) ; 
 p r i n t f ( "" % d \ n "" , </space/> a n s ) ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O 3 , u n r o l l - l o o p s "" ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # p r a g m a </space/> p a c k ( 0 ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i i </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> M O D 2 </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> _ I N F I N I T Y </space/> 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 
 # d e f i n e </space/> f a s t </space/> i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 l l </space/> n , </space/> x </space/> = </space/> 0 , </space/> y </space/> = </space/> 1 , </space/> k [ 1 0 0 0 0 0 5 ] , </space/> a r r [ 1 0 0 0 0 0 5 ] ; 
 v e c t o r < p i i > </space/> v ; 
 l l </space/> i n v ( l l </space/> i ) 
 { 
 i f </space/> ( i </space/> = = </space/> 1 ) 
 r e t u r n </space/> 1 ; 
 r e t u r n </space/> ( M O D 2 </space/> - </space/> ( M O D 2 </space/> / </space/> i ) ) </space/> * </space/> i n v ( M O D 2 </space/> % </space/> i ) </space/> % </space/> M O D 2 ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 f a s t ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> k [ i ] ; 
 y </space/> = </space/> ( y </space/> + </space/> k [ i ] ) </space/> % </space/> M O D 2 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k [ i ] ; </space/> j + + ) 
 { 
 i n t </space/> a ; 
 c i n </space/> > > </space/> a ; 
 v . e m p l a c e _ b a c k ( m a k e _ p a i r ( i , </space/> a ) ) ; 
 a r r [ a ] + + ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> v ) 
 { 
 x </space/> = </space/> ( a r r [ i . s e c o n d ] </space/> * </space/> y </space/> + </space/> ( n </space/> * </space/> ( n </space/> * </space/> k [ i . f i r s t ] </space/> % </space/> M O D 2 ) </space/> % </space/> M O D 2 ) </space/> * </space/> x ) </space/> % </space/> M O D 2 ; 
 y </space/> = </space/> y </space/> * </space/> ( n </space/> * </space/> ( n </space/> * </space/> k [ i . f i r s t ] </space/> % </space/> M O D 2 ) </space/> % </space/> M O D 2 ) </space/> % </space/> M O D 2 ; 
 } 
 c o u t </space/> < < </space/> x </space/> * </space/> i n v ( y ) </space/> % </space/> M O D 2 </space/> < < </space/> ' \ n ' ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 6 </space/> + </space/> 1 0 0 ; 
 i n t </space/> d [ N ] ; 
 v e c t o r < i n t > </space/> t o [ N ] ; 
 l l </space/> q p o w ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> a n s </space/> % </space/> m o d </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> % </space/> m o d </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & d [ i ] ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> d [ i ] ; </space/> j + + ) 
 { 
 i n t </space/> x ; 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 t o [ i ] . p u s h _ b a c k ( x </space/> + </space/> n ) ; 
 d [ x </space/> + </space/> n ] + + ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> c </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> v </space/> : </space/> t o [ i ] ) 
 { 
 c </space/> + = </space/> d [ v ] ; 
 } 
 a n s </space/> + = </space/> ( q p o w ( 1 l l </space/> * </space/> n </space/> * </space/> n </space/> % </space/> m o d , </space/> m o d </space/> - </space/> 2 ) </space/> * </space/> q p o w ( d [ i ] , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ) </space/> * </space/> c </space/> % </space/> m o d ; 
 a n s </space/> % = </space/> m o d ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> e x o o o o o o o o r z 
 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < v e c t o r > 
 
 # d e f i n e </space/> N </space/> 1 0 0 0 0 0 5 
 # d e f i n e </space/> M </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s t d : : v e c t o r < i n t > </space/> m a p p [ N ] ; 
 
 i n t </space/> n , </space/> u , </space/> a n s </space/> = </space/> 0 ; 
 i n t </space/> s z [ N ] , </space/> a [ N ] , </space/> k [ N ] ; 
 
 v o i d </space/> e x o o o o o o o o r z ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t & </space/> a , </space/> i n t & </space/> b ) 
 { 
 i f </space/> ( ! y ) 
 { 
 a </space/> = </space/> 1 , </space/> b </space/> = </space/> 0 ; 
 r e t u r n ; 
 } 
 e x o o o o o o o o r z ( y , </space/> x </space/> % </space/> y , </space/> b , </space/> a ) ; 
 b </space/> - = </space/> x </space/> / </space/> y </space/> * </space/> a ; 
 } 
 
 s i g n e d </space/> m a i n ( v o i d ) 
 { 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> k </space/> + </space/> i ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k [ i ] ; </space/> j + + ) 
 s c a n f ( "" % d "" , </space/> & u ) , </space/> m a p p [ i ] . p u s h _ b a c k ( u ) , </space/> s z [ u ] + + ; 
 } 
 i n t </space/> x </space/> = </space/> 0 , </space/> y </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 e x o o o o o o o o r z ( k [ i ] , </space/> M , </space/> x , </space/> y ) ; 
 x </space/> = </space/> ( x </space/> % </space/> M </space/> + </space/> M ) </space/> % </space/> M ; 
 i n t </space/> q </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> m a p p [ i ] . s i z e ( ) ; </space/> j + + ) 
 q </space/> = </space/> ( q </space/> + </space/> s z [ m a p p [ i ] [ j ] ] ) </space/> % </space/> M ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> 1 L L </space/> * </space/> x </space/> * </space/> q </space/> % </space/> M ) </space/> % </space/> M ; 
 } 
 e x o o o o o o o o r z ( n , </space/> M , </space/> x , </space/> y ) ; 
 a n s </space/> = </space/> 1 L L </space/> * </space/> a n s </space/> * </space/> x </space/> % </space/> M </space/> * </space/> x </space/> % </space/> M ; 
 p r i n t f ( "" % d \ n "" , </space/> ( a n s </space/> + </space/> M ) </space/> % </space/> M ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 
 # d e f i n e </space/> e p s </space/> 1 e - 2 0 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> d b ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 t y p e d e f </space/> p a i r < d b , </space/> d b > </space/> p d d ; 
 l l </space/> p [ 1 0 0 0 0 0 6 ] , </space/> c [ 1 0 0 0 0 0 6 ] , </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> q p o w ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> d </space/> = </space/> q p o w ( n , </space/> m o d </space/> - </space/> 2 ) , </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k ; 
 c i n </space/> > > </space/> k ; 
 l l </space/> h </space/> = </space/> q p o w ( k , </space/> m o d </space/> - </space/> 2 ) ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k ; </space/> j + + ) 
 { 
 l l </space/> x ; 
 c i n </space/> > > </space/> x ; 
 p [ x ] + + ; 
 c [ x ] </space/> + = </space/> h </space/> * </space/> d </space/> % </space/> m o d ; 
 c [ x ] </space/> % = </space/> m o d ; 
 } 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 1 0 0 0 0 0 0 ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> c [ i ] </space/> % </space/> m o d </space/> * </space/> d </space/> % </space/> m o d </space/> * </space/> p [ i ] </space/> % </space/> m o d ; 
 a n s </space/> % = </space/> m o d ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> p </space/> = </space/> m a x ( a , </space/> b ) ; 
 i n t </space/> s </space/> = </space/> m i n ( a , </space/> b ) ; 
 w h i l e </space/> ( x </space/> > </space/> 0 </space/> & & </space/> p </space/> < </space/> n ) 
 { 
 p + + ; 
 x - - ; 
 } 
 w h i l e </space/> ( x </space/> > </space/> 0 </space/> & & </space/> s </space/> > </space/> 1 ) 
 { 
 s - - ; 
 x - - ; 
 } 
 
 c o u t </space/> < < </space/> p </space/> - </space/> s </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 
 v o i d </space/> b a y o ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 w h i l e </space/> ( x </space/> & & </space/> b </space/> ! = </space/> n ) 
 { 
 - - x ; 
 + + b ; 
 } 
 w h i l e </space/> ( x </space/> & & </space/> a </space/> ! = </space/> 1 ) 
 { 
 - - a ; 
 - - x ; 
 } 
 c o u t </space/> < < </space/> b </space/> - </space/> a </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> t c </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 b a y o ( ) ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t d l i b . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> I N F </space/> 0 x 3 f 3 f 3 f 3 f 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 ) 
 # d e f i n e </space/> l o w b i t ( a ) </space/> ( a </space/> & </space/> ( - a ) ) 
 # d e f i n e </space/> m e m ( a , </space/> b ) </space/> m e m s e t ( a , </space/> b , </space/> s i z e o f ( a ) ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> a , </space/> b , </space/> x ; 
 s c a n f ( "" % d </space/> % d </space/> % d </space/> % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> x </space/> > = </space/> n </space/> - </space/> 1 ) 
 { 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> 1 ) ; 
 } 
 e l s e 
 { 
 p r i n t f ( "" % d \ n "" , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i n t </space/> t , </space/> n , </space/> x , </space/> a , </space/> b ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 
 s c a n f ( "" % d </space/> % d </space/> % d </space/> % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 
 i n t </space/> m x V a l </space/> = </space/> m a x ( a , </space/> b ) ; 
 i n t </space/> m n V a l </space/> = </space/> m i n ( a , </space/> b ) ; 
 i n t </space/> d i f f 1 </space/> = </space/> n </space/> - </space/> m x V a l ; 
 i n t </space/> d i f f 2 </space/> = </space/> m n V a l </space/> - </space/> 1 ; 
 i n t </space/> m i n D </space/> = </space/> m i n ( x , </space/> d i f f 1 </space/> + </space/> d i f f 2 ) ; 
 
 p r i n t f ( "" % d \ n "" , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> m i n D ) ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 v o i d </space/> s o l v e ( ) 
 { 
 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 
 i n t </space/> a n s </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 
 i n t </space/> m x </space/> = </space/> n </space/> - </space/> 1 ; 
 c o u t </space/> < < </space/> m i n ( m x , </space/> a n s </space/> + </space/> x ) </space/> < < </space/> e n d l ; 
 } 
 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b , </space/> c , </space/> d ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b </space/> > > </space/> c </space/> > > </space/> d ; 
 i f </space/> ( c </space/> > </space/> d ) 
 s w a p ( c , </space/> d ) ; 
 c o u t </space/> < < </space/> m i n ( d </space/> - </space/> c </space/> + </space/> b , </space/> a </space/> - </space/> 1 ) </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> m a x </space/> = </space/> n </space/> - </space/> 1 ; 
 i n t </space/> a n s ; 
 i f </space/> ( a </space/> > </space/> b ) 
 a n s </space/> = </space/> a </space/> - </space/> b </space/> + </space/> x ; 
 e l s e 
 a n s </space/> = </space/> b </space/> - </space/> a </space/> + </space/> x ; 
 
 i f </space/> ( a n s </space/> > </space/> m a x ) 
 c o u t </space/> < < </space/> m a x </space/> < < </space/> "" \ n "" ; 
 
 e l s e 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t d l i b . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> I N F </space/> 0 x 3 f 3 f 3 f 3 f 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 ) 
 # d e f i n e </space/> l o w b i t ( a ) </space/> ( a </space/> & </space/> ( - a ) ) 
 # d e f i n e </space/> m e m ( a , </space/> b ) </space/> m e m s e t ( a , </space/> b , </space/> s i z e o f ( a ) ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> a , </space/> b , </space/> x ; 
 s c a n f ( "" % d </space/> % d </space/> % d </space/> % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> x </space/> > = </space/> n </space/> - </space/> 1 ) 
 { 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> 1 ) ; 
 } 
 e l s e 
 { 
 p r i n t f ( "" % d \ n "" , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 a n s </space/> = </space/> s t d : : m i n ( n </space/> - </space/> 1 , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f a s t _ i o </space/> \ 
 { </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 } 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> b s </space/> b i n a r y _ s e a r c h 
 # d e f i n e </space/> p o p b </space/> p o p _ b a c k 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> c c c </space/> c o u t </space/> < < </space/> 1 </space/> < < </space/> "" </space/> "" ; 
 # d e f i n e </space/> p r i n ( v ) </space/> \ 
 { </space/> \ 
 f o r </space/> ( a u t o </space/> u </space/> : </space/> v ) </space/> \ 
 c o u t </space/> < < </space/> u </space/> < < </space/> "" </space/> "" ; </space/> \ 
 c o u t </space/> < < </space/> e n d l ; </space/> \ 
 } 
 # d e f i n e </space/> f o r n ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( n ) ; </space/> i + + ) 
 # d e f i n e </space/> l e n ( ) </space/> l e n g t h ( ) 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i n t ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v l l ; 
 t y p e d e f </space/> v e c t o r < b o o l > </space/> v b o o l ; 
 t y p e d e f </space/> v e c t o r < d o u b l e > </space/> v d o u b l e ; 
 t y p e d e f </space/> p a i r < d o u b l e , </space/> d o u b l e > </space/> p d d ; 
 t y p e d e f </space/> p a i r < b o o l , </space/> b o o l > </space/> p b b ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> I N T _ M A X ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> M O D _ 2 </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i f s t r e a m </space/> f i n ( "" t e s t . t x t "" ) ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> a n s </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 a n s </space/> = </space/> m i n ( n </space/> - </space/> 1 , </space/> x </space/> + </space/> a n s ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t _ i o ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> d e b u g ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> s z ( a ) </space/> i n t ( ( a ) . s i z e ( ) ) 
 # d e f i n e </space/> F ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> F 1 ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> d F ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > </space/> ( b ) ; </space/> i - - ) 
 # d e f i n e </space/> d F 1 ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> ( b ) ; </space/> i - - ) 
 # d e f i n e </space/> Y E S </space/> c o u t </space/> < < </space/> "" Y E S \ n "" 
 # d e f i n e </space/> N O </space/> c o u t </space/> < < </space/> "" N O \ n "" 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 6 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 l l </space/> n , </space/> m , </space/> k ; 
 
 i n l i n e </space/> v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 i n t </space/> a n s </space/> = </space/> b </space/> - </space/> a ; 
 i f </space/> ( x </space/> < </space/> ( a </space/> - </space/> 1 ) </space/> + </space/> ( n </space/> - </space/> b ) ) 
 { 
 a n s </space/> + = </space/> x ; 
 } 
 e l s e 
 a n s </space/> = </space/> n </space/> - </space/> 1 ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * </space/> - - - - - - - - - - - - - - - - - - - - - - 
 / </space/> A n s h u m a n </space/> S i n g h </space/> / 
 / </space/> l m s _ d e a d s h o t </space/> / 
 / </space/> P r a c t i c e </space/> p r o b l e m s </space/> / 
 / </space/> 1 6 - 0 3 - 2 0 2 1 </space/> / 
 - - - - - - - - - - - - - - - - - - - - - - * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> f a s t i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> t t </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> f i r </space/> f i r s t 
 # d e f i n e </space/> s e c </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v t </space/> v e c t o r < l l > 
 # d e f i n e </space/> v p i </space/> v e c t o r < p a i r < i n t , </space/> i n t > </space/> > 
 # d e f i n e </space/> v p l l </space/> v e c t o r < p a i r < l l , </space/> l l > </space/> > 
 # d e f i n e </space/> v v i </space/> v e c t o r < v e c t o r < i n t > </space/> > 
 # d e f i n e </space/> v v l l </space/> v e c t o r < v e c t o r < l l > </space/> > 
 # d e f i n e </space/> v v p i </space/> v e c t o r < v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> > 
 # d e f i n e </space/> v v p l l </space/> v e c t o r < v e c t o r < p a i r < l l , </space/> l l > </space/> > </space/> > 
 # d e f i n e </space/> m a x n </space/> 1 0 0 0 0 5 
 # d e f i n e </space/> i n f </space/> 1 0 0 0 0 0 0 0 0 0 
 i n t </space/> m a i n ( ) 
 { 
 t t 
 { 
 l l </space/> n , </space/> x , </space/> a , </space/> b , </space/> t e m p </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> m i n ( n </space/> - </space/> 1 , </space/> a b s ( b </space/> - </space/> a ) </space/> + </space/> x ) </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> t , </space/> n , </space/> a , </space/> b , </space/> x , </space/> u , </space/> v ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 u </space/> = </space/> m a x ( 1 , </space/> a </space/> - </space/> x ) ; 
 x </space/> = </space/> x </space/> - </space/> ( a </space/> - </space/> u ) ; 
 v </space/> = </space/> m i n ( n , </space/> b </space/> + </space/> x ) ; 
 c o u t </space/> < < </space/> v </space/> - </space/> u </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i n c l u d e </space/> < s t r i n g > 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i n t </space/> v </space/> = </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ; 
 
 i f </space/> ( v </space/> < </space/> n </space/> - </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> v ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> n </space/> - </space/> 1 ; 
 } 
 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
 
 
 / * </space/> i n t </space/> n , m ; 
 c i n </space/> > > n > > m ; 
 
 s t r i n g </space/> s 1 [ n ] ; 
 s t r i n g </space/> s 2 [ m ] ; 
 f o r ( i n t </space/> i = 0 ; i < n ; i + + ) { 
 c i n </space/> > > </space/> s 1 [ i ] ; 
 } 
 
 f o r ( i n t </space/> i = 0 ; i < m ; i + + ) { 
 c i n </space/> > > </space/> s 2 [ i ] ; 
 } 
 
 i n t </space/> q ; 
 c i n </space/> > > q ; 
 w h i l e ( q - - ) { 
 
 
 c o u t </space/> < < </space/> s 1 [ q % n ] + s 2 [ q % m ] </space/> < < e n d l ; 
 
 * / 
 
 
 / * 
 i n t </space/> n ; 
 c i n > > n ; 
 v e c t o r < i n t > </space/> v ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> d a t a ; 
 c i n > > d a t a ; 
 v . p u s h _ b a c k ( d a t a ) ; 
 } 
 / / f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 / / { 
 / / </space/> c o u t < < v [ i ] < < "" </space/> "" ; 
 / / } 
 f o r </space/> ( a u t o </space/> i t r </space/> = </space/> v . b e g i n ( ) ; </space/> i t r </space/> ! = </space/> v . e n d ( ) ; </space/> i t r + + ) 
 { 
 c o u t < < * i t r < < "" </space/> "" ; 
 } 
 c o u t < < e n d l ; 
 s o r t ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ; 
 s o r t ( v . r b e g i n ( ) , </space/> v . r e n d ( ) ) ; 
 f o r </space/> ( i n t </space/> e l e m e n t </space/> : </space/> v ) 
 { 
 c o u t < < e l e m e n t < < "" </space/> "" ; 
 } 
 * / 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> s s </space/> s t r i n g 
 # d e f i n e </space/> c h </space/> c h a r 
 # d e f i n e </space/> a s </space/> 2 0 0 0 0 5 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t ; 
 c i n > > t ; 
 w h i l e ( t - - ) 
 { 
 
 l l </space/> n , x , a , b ; 
 c i n > > n > > x > > a > > b ; 
 i f ( a > b ) 
 { 
 s w a p ( a , </space/> b ) ; 
 } 
 w h i l e ( ( a ) </space/> & & </space/> ( x ) ) 
 { 
 i f ( ( a - 1 ) ) 
 { 
 a - - ; </space/> x - - ; 
 } 
 e l s e </space/> { 
 b r e a k ; 
 } 
 } 
 w h i l e ( ( b ) </space/> & & </space/> ( x ) ) 
 { 
 i f ( ( b + 1 ) < = n ) 
 { 
 b + + ; </space/> x - - ; 
 } 
 e l s e </space/> { 
 b r e a k ; 
 } 
 } 
 c o u t < < a b s ( a - b ) < < e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t r i n g . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l i ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 / / </space/> c o u t < < "" a "" ; 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> d i s t ; 
 i f </space/> ( f a b s ( a </space/> - </space/> b ) </space/> + </space/> x </space/> < = </space/> n </space/> - </space/> 1 ) 
 { 
 d i s t </space/> = </space/> f a b s ( a </space/> - </space/> b ) </space/> + </space/> x ; 
 c o u t </space/> < < </space/> d i s t </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 e l s e 
 { 
 d i s t </space/> = </space/> n </space/> - </space/> 1 ; 
 c o u t </space/> < < </space/> d i s t </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l i </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < c h a r > </space/> v c ; 
 t y p e d e f </space/> v e c t o r < i n t > : : i t e r a t o r </space/> v i t ; 
 t y p e d e f </space/> s e t < i n t > </space/> s i ; 
 t y p e d e f </space/> s e t < c h a r > </space/> s c ; 
 t y p e d e f </space/> s e t < i n t > : : i t e r a t o r </space/> s i t ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> t e s t c a s e </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 # d e f i n e </space/> g e t f o r ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> s o r t _ a r r a y </space/> s o r t ( v i . b e g i n ( ) , </space/> v i . e n d ( ) ) ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 t e s t c a s e 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a b s ( a </space/> - </space/> b ) </space/> < < </space/> e n d l ; 
 c o n t i n u e ; 
 } 
 e l s e </space/> i f </space/> ( a </space/> = = </space/> 1 </space/> & & </space/> b </space/> = = </space/> n </space/> | | </space/> b </space/> = = </space/> 1 </space/> & & </space/> a </space/> = = </space/> n ) 
 { 
 c o u t </space/> < < </space/> a b s ( a </space/> - </space/> b ) </space/> < < </space/> e n d l ; 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 i f </space/> ( a </space/> < </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 i f </space/> ( x </space/> > = </space/> n </space/> - </space/> a ) 
 { 
 x </space/> = </space/> x </space/> - </space/> ( n </space/> - </space/> a ) ; 
 a </space/> = </space/> n ; 
 } 
 e l s e 
 { 
 a </space/> = </space/> a </space/> + </space/> x ; 
 x </space/> = </space/> 0 ; 
 } 
 i f </space/> ( x </space/> > = </space/> b </space/> - </space/> 1 ) 
 { 
 x </space/> = </space/> x </space/> - </space/> ( b </space/> - </space/> 1 ) ; 
 b </space/> = </space/> 1 ; 
 } 
 e l s e 
 { 
 b </space/> = </space/> b </space/> - </space/> x ; 
 } 
 } 
 c o u t </space/> < < </space/> a b s ( a </space/> - </space/> b ) </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s t d l i b . h > 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> x , </space/> a , </space/> b ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 s c a n f ( "" % d % d % d % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> x </space/> < </space/> n ) 
 p r i n t f ( "" % d \ n "" , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 e l s e 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> 1 ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b , </space/> t ; 
 s c a n f ( "" % d % d % d % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 t </space/> = </space/> b </space/> - </space/> a ; 
 } 
 e l s e 
 { 
 t </space/> = </space/> a </space/> - </space/> b ; 
 } 
 i f </space/> ( t </space/> + </space/> x </space/> > = </space/> n ) 
 { 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> 1 ) ; 
 } 
 e l s e 
 { 
 p r i n t f ( "" % d \ n "" , </space/> t </space/> + </space/> x ) ; 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> m i n ( n </space/> - </space/> 1 , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) </space/> < < </space/> "" \ n "" ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> t , </space/> b , </space/> x , </space/> a ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 s u m </space/> = </space/> n </space/> - </space/> m a x ( a , </space/> b ) </space/> + </space/> m i n ( a , </space/> b ) </space/> - </space/> 1 ; 
 i n t </space/> c h a 1 </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i n t </space/> a n s ; 
 a n s </space/> = </space/> m i n ( n </space/> - </space/> 1 , </space/> c h a 1 </space/> + </space/> x ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> f o r ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) </space/> { c i n </space/> > > </space/> a [ i ] ; } 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> m i n ( a b s ( a </space/> - </space/> b ) </space/> + </space/> x , </space/> n </space/> - </space/> 1 ) </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 / / </space/> s o l v e ( ) ; 
 
 c o u t . f l u s h ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t d l i b > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < c l i m i t s > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a r r a y > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < s t d b o o l . h > 
 # d e f i n e </space/> f a s t _ i o </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> s q r ( x ) </space/> ( ( x ) </space/> * </space/> ( x ) ) 
 # d e f i n e </space/> M A X ( a , </space/> b ) </space/> ( a </space/> > </space/> b </space/> ? </space/> a </space/> : </space/> b ) 
 # d e f i n e </space/> M I N ( a , </space/> b ) </space/> ( a </space/> < </space/> b </space/> ? </space/> a </space/> : </space/> b ) 
 # d e f i n e </space/> s c a n ( x ) </space/> c i n </space/> > > </space/> x 
 # d e f i n e </space/> p r i n t ( x ) </space/> c o u t </space/> < < </space/> x 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> f o r 0 ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o r 1 ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> S I Z E </space/> 1 0 0 0 0 5 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 s c a n f ( "" % d </space/> % d </space/> % d </space/> % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 
 i n t </space/> m x </space/> = </space/> M I N ( n </space/> - </space/> 1 , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 
 p r i n t f ( "" % d \ n "" , </space/> m x ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> T ; 
 s c a n f ( "" % d "" , </space/> & T ) ; 
 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 
 c o u t </space/> < < </space/> m i n ( n </space/> - </space/> 1 , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> c u r </space/> = </space/> n </space/> - </space/> m a x ( a , </space/> b ) </space/> + </space/> m i n ( a , </space/> b ) </space/> - </space/> 1 ; 
 x </space/> = </space/> ( x </space/> > </space/> c u r ) </space/> ? </space/> c u r </space/> : </space/> x ; 
 c o u t </space/> < < </space/> m a x ( a , </space/> b ) </space/> - </space/> m i n ( a , </space/> b ) </space/> + </space/> x </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b , </space/> m , </space/> m n , </space/> i ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 m </space/> = </space/> m a x ( a , </space/> b ) ; 
 m n </space/> = </space/> m i n ( a , </space/> b ) ; 
 i n t </space/> c </space/> = </space/> 0 ; 
 i f </space/> ( m </space/> + </space/> x </space/> < = </space/> n ) 
 { 
 m </space/> = </space/> m </space/> + </space/> x ; 
 c </space/> = </space/> x ; 
 } 
 e l s e 
 { 
 f o r </space/> ( i </space/> = </space/> 1 ; ; </space/> i + + ) 
 { 
 i f </space/> ( c </space/> < </space/> x </space/> & & </space/> m </space/> < </space/> n ) 
 { 
 c + + ; 
 m + + ; 
 } 
 e l s e 
 b r e a k ; 
 } 
 } 
 i n t </space/> k </space/> = </space/> x </space/> - </space/> c ; 
 i f </space/> ( m n </space/> - </space/> k </space/> > </space/> 0 ) 
 m n </space/> = </space/> m n </space/> - </space/> k ; 
 e l s e 
 { 
 f o r </space/> ( i </space/> = </space/> 1 ; ; </space/> i + + ) 
 { 
 i f </space/> ( m n </space/> > </space/> 1 </space/> & & </space/> k </space/> > </space/> 0 ) 
 { 
 m n - - ; 
 k - - ; 
 } 
 e l s e 
 b r e a k ; 
 } 
 } 
 c o u t </space/> < < </space/> m </space/> - </space/> m n </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 # d e f i n e </space/> F o r ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( i n t ) n ; </space/> + + i ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 / / # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( ( x ) . s i z e ( ) ) 
 # d e f i n e </space/> l l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> a r </space/> a r r a y 
 # d e f i n e </space/> I N F </space/> 1 e 1 8 ; 
 # d e f i n e </space/> a l l ( v ) </space/> ( v ) . b e g i n ( ) , </space/> ( v ) . e n d ( ) 
 # d e f i n e </space/> m e m 1 ( a ) </space/> m e m s e t ( a , </space/> - 1 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> m e m 0 ( a ) </space/> m e m s e t ( a , </space/> 0 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> p p c </space/> _ _ b u i l t i n _ p o p c o u n t 
 # d e f i n e </space/> p p c l l </space/> _ _ b u i l t i n _ p o p c o u n t l l 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> M 2 </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> m i n ( a b s ( b </space/> - </space/> a ) </space/> + </space/> x , </space/> n </space/> - </space/> 1 ) </space/> < < </space/> e n d l ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 # i f d e f </space/> N C R 
 i n i t ( ) ; 
 # e n d i f 
 i n t </space/> t </space/> = </space/> 1 ; 
 
 c i n </space/> > > </space/> t ; 
 
 i n t </space/> a </space/> = </space/> 1 ; 
 w h i l e </space/> ( t - - ) 
 { 
 / / </space/> c o u t < < "" C a s e </space/> # "" < < a < < "" : </space/> "" ; 
 s o l v e ( ) ; 
 a </space/> + = </space/> 1 ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 
 v e c t o r < i n t > </space/> v ( n ) , </space/> w ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & v [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & w [ i ] ) ; 
 } 
 
 l o n g </space/> l o n g </space/> x </space/> = </space/> 0 , </space/> y </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l o n g </space/> l o n g </space/> n e x t X </space/> = </space/> m a x ( x , </space/> y </space/> + </space/> v [ i ] ) ; 
 l o n g </space/> l o n g </space/> n e x t Y </space/> = </space/> m a x ( y , </space/> w [ i ] </space/> + </space/> x ) ; 
 x </space/> = </space/> n e x t X ; 
 y </space/> = </space/> n e x t Y ; 
 } 
 c o u t </space/> < < </space/> m a x ( x , </space/> y ) </space/> < < </space/> "" \ n "" ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f r ( a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v i i </space/> v e c t o r < i i > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> I N F </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
 # d e f i n e </space/> f a s t _ i o </space/> i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) , </space/> c i n . t i e ( N U L L ) , </space/> c o u t . t i e ( N U L L ) ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 l l </space/> t , </space/> i , </space/> j , </space/> n , </space/> k , </space/> a n s , </space/> t 1 , </space/> t 2 , </space/> t 3 , </space/> t 4 , </space/> x ; 
 m a p < l l , </space/> l l > </space/> m p ; 
 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 f a s t _ i o ; 
 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 m p [ x ] + + ; 
 } 
 l l </space/> s e t s </space/> = </space/> ( n </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 a n s </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> m p ) 
 { 
 t 1 </space/> = </space/> x . s e </space/> / </space/> 2 ; 
 a n s </space/> + = </space/> 2 </space/> * </space/> t 1 ; 
 s e t s </space/> - = </space/> t 1 ; 
 x . s e </space/> % = </space/> 2 ; 
 } 
 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> m p ) 
 { 
 i f </space/> ( s e t s </space/> = = </space/> 0 ) 
 b r e a k ; 
 i f </space/> ( x . s e </space/> = = </space/> 0 ) 
 c o n t i n u e ; 
 a n s </space/> + = </space/> 1 ; 
 s e t s </space/> - = </space/> 1 ; 
 x . s e - - ; 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f a s t </space/> i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 
 i n t </space/> a [ 2 0 0 0 0 1 ] ; 
 i n t </space/> v [ 2 1 ] ; 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 l o n g </space/> l o n g </space/> f o r m a r e ( i n t </space/> x ) 
 { 
 i n t </space/> l </space/> = </space/> 0 ; 
 w h i l e </space/> ( x </space/> > </space/> 0 ) 
 { 
 v [ + + l ] </space/> = </space/> x </space/> % </space/> 1 0 ; 
 v [ + + l ] </space/> = </space/> x </space/> % </space/> 1 0 ; 
 x </space/> / = </space/> 1 0 ; 
 } 
 l o n g </space/> l o n g </space/> y </space/> = </space/> 0 ; 
 i n t </space/> i ; 
 f o r </space/> ( i </space/> = </space/> l ; </space/> i </space/> > = </space/> 1 ; </space/> i - - ) 
 y </space/> = </space/> ( y </space/> * </space/> 1 0 </space/> + </space/> v [ i ] ) </space/> % </space/> M O D ; 
 r e t u r n </space/> y ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> n , </space/> i , </space/> s u m </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s u m </space/> = </space/> ( s u m </space/> + </space/> n </space/> * </space/> f o r m a r e ( a [ i ] ) </space/> % </space/> M O D ) </space/> % </space/> M O D ; 
 c o u t </space/> < < </space/> s u m ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 5 </space/> + </space/> 1 ; 
 l l </space/> p [ 3 2 ] , </space/> a [ m a x n ] , </space/> c n t [ 1 2 ] , </space/> a n s ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 p [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 3 0 ; </space/> + + i ) 
 p [ i ] </space/> = </space/> ( p [ i </space/> - </space/> 1 ] </space/> * </space/> 1 0 ) </space/> % </space/> m o d ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & a [ i ] ) ; 
 c n t [ t o _ s t r i n g ( a [ i ] ) . s i z e ( ) ] + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 s t r i n g </space/> s </space/> = </space/> t o _ s t r i n g ( a [ i ] ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> 1 0 ; </space/> + + j ) 
 { 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> s . s i z e ( ) </space/> - </space/> 1 , </space/> n o w </space/> = </space/> 0 , </space/> f l a g </space/> = </space/> j ; </space/> k </space/> > = </space/> 0 ; </space/> - - k , </space/> + + n o w ) 
 { 
 i f </space/> ( f l a g ) 
 n o w + + , </space/> f l a g - - ; 
 s u m </space/> + = </space/> p [ n o w ] </space/> * </space/> ( s [ k ] </space/> - </space/> ' 0 ' ) ; 
 } 
 / / </space/> c o u t < < s u m < < e n d l ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> s . s i z e ( ) </space/> - </space/> 1 , </space/> n o w </space/> = </space/> 0 , </space/> f l a g </space/> = </space/> j ; </space/> k </space/> > = </space/> 0 ; </space/> - - k , </space/> + + n o w ) 
 { 
 s u m </space/> + = </space/> p [ n o w ] </space/> * </space/> ( s [ k ] </space/> - </space/> ' 0 ' ) ; 
 i f </space/> ( f l a g ) 
 n o w + + , </space/> f l a g - - ; 
 } 
 / / </space/> c o u t < < s u m < < e n d l < < e n d l ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> ( s u m </space/> * </space/> c n t [ j ] ) </space/> % </space/> m o d ) </space/> % </space/> m o d ; 
 } 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> S I </space/> = </space/> 1 e 5 </space/> + </space/> 7 ; 
 l l </space/> I N F </space/> = </space/> 8 e 1 8 </space/> + </space/> 7 ; 
 i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 l l </space/> n , </space/> a [ S I ] , </space/> b [ S I ] ; 
 l l </space/> d p [ 5 ] [ S I ] ; 
 l l </space/> s o l v e ( i n t </space/> l , </space/> i n t </space/> i n ) 
 { 
 i f </space/> ( i n </space/> = = </space/> n ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( d p [ l ] [ i n ] </space/> ! = </space/> - 1 ) 
 r e t u r n </space/> d p [ l ] [ i n ] ; 
 l l </space/> a n s 1 </space/> = </space/> 0 , </space/> a n s 2 </space/> = </space/> 0 , </space/> a n s 3 </space/> = </space/> 0 ; 
 a n s 1 </space/> = </space/> s o l v e ( 0 , </space/> i n </space/> + </space/> 1 ) ; 
 i f </space/> ( l </space/> ! = </space/> 1 ) 
 a n s 2 </space/> = </space/> s o l v e ( 1 , </space/> i n </space/> + </space/> 1 ) </space/> + </space/> a [ i n ] ; 
 i f </space/> ( l </space/> ! = </space/> 2 ) 
 a n s 3 </space/> = </space/> s o l v e ( 2 , </space/> i n </space/> + </space/> 1 ) </space/> + </space/> b [ i n ] ; 
 r e t u r n </space/> d p [ l ] [ i n ] </space/> = </space/> m a x ( m a x ( a n s 1 , </space/> a n s 2 ) , </space/> a n s 3 ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 m e m s e t ( d p , </space/> - 1 , </space/> s i z e o f </space/> d p ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 c o u t </space/> < < </space/> s o l v e ( 0 , </space/> 0 ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n , </space/> k ; 
 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 
 l l </space/> a [ n ] ; 
 
 l l </space/> b [ k ] </space/> = </space/> { </space/> 0 </space/> } ; 
 
 l l </space/> c </space/> = </space/> c e i l ( 1 . 0 </space/> * </space/> n </space/> / </space/> 2 ) ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 b [ a [ i ] </space/> - </space/> 1 ] </space/> + = </space/> 1 ; 
 } 
 l l </space/> s u m _ e </space/> = </space/> 0 , </space/> s u m _ o </space/> = </space/> 0 , </space/> t </space/> = </space/> 0 ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> k ; </space/> i + + ) 
 { 
 i f </space/> ( b [ i ] </space/> % </space/> 2 </space/> = = </space/> 1 ) 
 { 
 t </space/> + = </space/> 1 ; 
 } 
 } 
 
 l l </space/> a n s </space/> = </space/> t </space/> / </space/> 2 ; 
 
 c o u t </space/> < < </space/> n </space/> - </space/> a n s ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 U s e r n a m e </space/> : </space/> m o o n d a n c e r 
 N a m e </space/> : </space/> M o o n </space/> D a n c e r 
 * / 
 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] [ 2 ] ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 ; </space/> + + j ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> a [ i ] [ j ] ; 
 } 
 } 
 i n t </space/> a n s </space/> = </space/> m a x ( a [ 0 ] [ 0 ] , </space/> a [ 0 ] [ 1 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> c u r </space/> = </space/> a [ i </space/> - </space/> 1 ] [ 1 ] ; 
 i f </space/> ( i </space/> > = </space/> 2 ) 
 { 
 c u r </space/> = </space/> m a x ( c u r , </space/> a [ i </space/> - </space/> 2 ] [ 0 ] ) ; 
 c u r </space/> = </space/> m a x ( c u r , </space/> a [ i </space/> - </space/> 2 ] [ 1 ] ) ; 
 } 
 a [ i ] [ 0 ] </space/> + = </space/> c u r ; 
 c u r </space/> = </space/> a [ i </space/> - </space/> 1 ] [ 0 ] ; 
 i f </space/> ( i </space/> > = </space/> 2 ) 
 { 
 c u r </space/> = </space/> m a x ( c u r , </space/> a [ i </space/> - </space/> 2 ] [ 0 ] ) ; 
 c u r </space/> = </space/> m a x ( c u r , </space/> a [ i </space/> - </space/> 2 ] [ 1 ] ) ; 
 } 
 a [ i ] [ 1 ] </space/> + = </space/> c u r ; 
 } 
 c o u t </space/> < < </space/> m a x ( a [ n </space/> - </space/> 1 ] [ 0 ] , </space/> a [ n </space/> - </space/> 1 ] [ 1 ] ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l o n g </space/> l o n g </space/> a [ 1 0 0 0 0 5 ] , </space/> b [ 1 0 0 0 0 5 ] , </space/> n o [ 1 0 0 0 0 5 ] , </space/> u p [ 1 0 0 0 0 5 ] , </space/> d o w n [ 1 0 0 0 0 5 ] ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 n o [ 0 ] </space/> = </space/> 0 ; 
 u p [ 0 ] </space/> = </space/> a [ 0 ] ; 
 d o w n [ 0 ] </space/> = </space/> b [ 0 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 n o [ i ] </space/> = </space/> m a x ( u p [ i </space/> - </space/> 1 ] , </space/> d o w n [ i </space/> - </space/> 1 ] ) ; 
 u p [ i ] </space/> = </space/> m a x ( d o w n [ i </space/> - </space/> 1 ] , </space/> n o [ i </space/> - </space/> 1 ] ) </space/> + </space/> a [ i ] ; 
 d o w n [ i ] </space/> = </space/> m a x ( u p [ i </space/> - </space/> 1 ] , </space/> n o [ i </space/> - </space/> 1 ] ) </space/> + </space/> b [ i ] ; 
 } 
 i n t </space/> a n s </space/> = </space/> m a x ( u p [ n </space/> - </space/> 1 ] , </space/> m a x ( n o [ n </space/> - </space/> 1 ] , </space/> d o w n [ n </space/> - </space/> 1 ] ) ) ; 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> a [ n </space/> + </space/> 1 ] [ 2 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] [ 0 ] ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] [ 1 ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 a [ i ] [ 0 ] </space/> = </space/> m a x ( a [ i </space/> - </space/> 1 ] [ 0 ] , </space/> a [ i </space/> - </space/> 1 ] [ 1 ] </space/> + </space/> a [ i ] [ 0 ] ) ; 
 a [ i ] [ 1 ] </space/> = </space/> m a x ( a [ i </space/> - </space/> 1 ] [ 1 ] , </space/> a [ i </space/> - </space/> 1 ] [ 0 ] </space/> + </space/> a [ i ] [ 1 ] ) ; 
 } 
 
 c o u t </space/> < < </space/> m a x ( a [ n ] [ 0 ] , </space/> a [ n ] [ 1 ] ) </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> a l l ( a ) </space/> ( a ) . b e g i n ( ) , </space/> ( a ) . e n d ( ) 
 # d e f i n e </space/> m e m 0 ( a ) </space/> m e m s e t ( a , </space/> 0 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> i n t m x </space/> 1 0 0 0 0 0 0 0 0 7 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l i </space/> i , </space/> j , </space/> n , </space/> s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 l l i </space/> h [ 2 ] [ n ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 ; </space/> i + + ) 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 c i n </space/> > > </space/> h [ i ] [ j ] ; 
 l l i </space/> d p [ 2 ] [ n </space/> + </space/> 1 ] ; 
 d p [ 0 ] [ 0 ] </space/> = </space/> d p [ 1 ] [ 0 ] </space/> = </space/> 0 ; 
 d p [ 0 ] [ 1 ] </space/> = </space/> h [ 0 ] [ 0 ] ; 
 d p [ 1 ] [ 1 ] </space/> = </space/> h [ 1 ] [ 0 ] ; 
 f o r </space/> ( i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 d p [ 0 ] [ i ] </space/> = </space/> m a x ( d p [ 1 ] [ i </space/> - </space/> 1 ] , </space/> d p [ 1 ] [ i </space/> - </space/> 2 ] ) </space/> + </space/> h [ 0 ] [ i </space/> - </space/> 1 ] ; 
 d p [ 1 ] [ i ] </space/> = </space/> m a x ( d p [ 0 ] [ i </space/> - </space/> 1 ] , </space/> d p [ 0 ] [ i </space/> - </space/> 2 ] ) </space/> + </space/> h [ 1 ] [ i </space/> - </space/> 1 ] ; 
 } 
 c o u t </space/> < < </space/> m a x ( { </space/> d p [ 0 ] [ n ] , </space/> d p [ 0 ] [ n </space/> - </space/> 1 ] , </space/> d p [ 1 ] [ n ] , </space/> d p [ 1 ] [ n </space/> - </space/> 1 ] </space/> } ) </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 / / </space/> 	 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> n , </space/> k , </space/> e a t , </space/> i , </space/> x </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 x </space/> + = </space/> i ; 
 e a t </space/> = </space/> n </space/> - </space/> i ; 
 i f </space/> ( x </space/> - </space/> e a t </space/> = = </space/> k ) 
 { 
 b r e a k ; 
 } 
 } 
 c o u t </space/> < < </space/> e a t </space/> < < </space/> e n d l ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ n ] </space/> = </space/> { </space/> 0 </space/> } , </space/> b [ n ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 l l </space/> c [ n ] , </space/> d [ n ] ; 
 c [ n </space/> - </space/> 1 ] </space/> = </space/> a [ n </space/> - </space/> 1 ] ; 
 d [ n </space/> - </space/> 1 ] </space/> = </space/> b [ n </space/> - </space/> 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n </space/> - </space/> 2 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 c [ i ] </space/> = </space/> m a x ( ( a [ i ] </space/> + </space/> d [ i </space/> + </space/> 1 ] ) , </space/> c [ i </space/> + </space/> 1 ] ) ; 
 d [ i ] </space/> = </space/> m a x ( b [ i ] </space/> + </space/> c [ i </space/> + </space/> 1 ] , </space/> d [ i </space/> + </space/> 1 ] ) ; 
 } 
 c o u t </space/> < < </space/> m a x ( c [ 0 ] , </space/> d [ 0 ] ) ; 
 r e t u r n </space/> 0 ; 
 } 
 / * # i n c l u d e < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n > > n ; 
 l l </space/> a [ n ] = { 0 } , b [ n ] = { 0 } ; 
 f o r ( i n t </space/> i = 0 ; i < n ; i + + ) 
 c i n > > a [ i ] ; 
 f o r ( i n t </space/> i = 0 ; i < n ; i + + ) 
 c i n > > b [ i ] ; 
 l l </space/> c [ n ] , d [ n ] ; 
 c [ n - 1 ] = a [ n - 1 ] ; 
 d [ n - 1 ] = b [ n - 1 ] ; 
 f o r ( i n t </space/> i = n - 2 ; i > = 0 ; i - - ) 
 { 
 c [ i ] = m a x ( ( a [ i ] + d [ i + 1 ] ) , c [ i + 1 ] ) ; 
 d [ i ] = m a x ( b [ i ] + c [ i + 1 ] , d [ i + 1 ] ) ; 
 } 
 c o u t < < m a x ( c [ 0 ] , d [ 0 ] ) ; 
 r e t u r n </space/> 0 ; 
 } * /",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> c l r ( a ) </space/> m e m s e t ( a , </space/> 0 , </space/> s i z e o f </space/> a ) ; 
 # d e f i n e </space/> r e v ( a ) </space/> r e v e r s e ( a . b e g i n ( ) , </space/> a . e n d ( ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e m </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> f a s t ( ) </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( ) ; </space/> \ 
 c o u t . t i e ( ) ; 
 # d e f i n e </space/> t i m e ( ) </space/> \ 
 c e r r </space/> < < </space/> e n d l </space/> < < </space/> "" t i m e </space/> t a k e n </space/> : </space/> "" </space/> < < </space/> ( f l o a t ) c l o c k ( ) </space/> / </space/> C L O C K S _ P E R _ S E C </space/> < < </space/> "" </space/> s e c s "" </space/> < < </space/> e n d l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ 2 ] [ n </space/> + </space/> 1 ] ; 
 c l r ( a ) ; 
 f o r </space/> ( l l </space/> k </space/> = </space/> 0 ; </space/> k </space/> < </space/> 2 ; </space/> k + + ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ k ] [ i ] ; 
 } 
 } 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 f o r </space/> ( l l </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 ; </space/> j + + ) 
 { 
 a [ j ] [ i ] </space/> = </space/> m a x ( a [ j ] [ i </space/> + </space/> 1 ] , </space/> a [ ! j ] [ i </space/> + </space/> 1 ] </space/> + </space/> a [ j ] [ i ] ) ; 
 } 
 } 
 c o u t </space/> < < </space/> m a x ( a [ 0 ] [ 0 ] , </space/> a [ 1 ] [ 0 ] ) </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ( ) ; 
 i n t </space/> k s e </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> k s e ; 
 w h i l e </space/> ( k s e - - ) 
 { 
 s o l v e ( ) ; 
 / / </space/> t i m e ( ) ; 
 } 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 l l </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 l l </space/> n u m C a n d y 1 </space/> = </space/> 0 , </space/> n u m C a n d y 2 </space/> = </space/> 0 ; 
 n u m C a n d y 1 </space/> + = </space/> 2 </space/> * </space/> n </space/> + </space/> 3 ; 
 n u m C a n d y 2 </space/> + = </space/> 2 </space/> * </space/> n </space/> + </space/> 3 ; 
 d o u b l e </space/> t e m p </space/> = </space/> d o u b l e ( 8 </space/> * </space/> n </space/> + </space/> 8 </space/> * </space/> k </space/> + </space/> 9 ) ; 
 t e m p </space/> = </space/> s q r t ( t e m p ) ; 
 n u m C a n d y 1 </space/> + = </space/> t e m p ; 
 n u m C a n d y 2 </space/> - = </space/> t e m p ; 
 n u m C a n d y 1 </space/> / = </space/> 2 ; 
 n u m C a n d y 2 </space/> / = </space/> 2 ; 
 i f </space/> ( n u m C a n d y 2 </space/> < </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> n u m C a n d y 1 ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> n u m C a n d y 2 ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 4 ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 l l </space/> a [ 2 ] [ N ] , </space/> d p [ 2 ] [ N ] ; 
 i n t </space/> n ; 
 i n t </space/> m a i n ( ) 
 { 
 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 ; </space/> + + i ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> + + j ) 
 { 
 c i n </space/> > > </space/> a [ i ] [ j ] ; 
 } 
 } 
 d p [ 0 ] [ 1 ] </space/> = </space/> a [ 0 ] [ 1 ] ; 
 d p [ 1 ] [ 1 ] </space/> = </space/> a [ 1 ] [ 1 ] ; 
 
 l l </space/> a n s </space/> = </space/> m a x ( d p [ 0 ] [ 1 ] , </space/> d p [ 1 ] [ 1 ] ) ; 
 f o r </space/> ( i n t </space/> i d x </space/> = </space/> 2 ; </space/> i d x </space/> < = </space/> n ; </space/> + + i d x ) 
 { 
 
 d p [ 0 ] [ i d x ] </space/> = </space/> m a x ( d p [ 1 ] [ i d x </space/> - </space/> 1 ] </space/> + </space/> a [ 0 ] [ i d x ] , </space/> d p [ 0 ] [ i d x </space/> - </space/> 1 ] ) ; 
 d p [ 1 ] [ i d x ] </space/> = </space/> m a x ( d p [ 0 ] [ i d x </space/> - </space/> 1 ] </space/> + </space/> a [ 1 ] [ i d x ] , </space/> d p [ 1 ] [ i d x </space/> - </space/> 1 ] ) ; 
 a n s </space/> = </space/> m a x ( a n s , </space/> m a x ( d p [ 0 ] [ i d x ] , </space/> d p [ 1 ] [ i d x ] ) ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 i n t </space/> n ; 
 i n t </space/> a [ N ] , </space/> b [ N ] ; 
 l o n g </space/> l o n g </space/> d p [ N ] [ 2 ] ; 
 l o n g </space/> l o n g </space/> s e f ( i n t </space/> i d x , </space/> b o o l </space/> f ) 
 { 
 r e t u r n </space/> f </space/> ? </space/> a [ i d x ] </space/> : </space/> b [ i d x ] ; 
 } 
 l o n g </space/> l o n g </space/> g o ( i n t </space/> i d x , </space/> b o o l </space/> f ) 
 { 
 i f </space/> ( i d x </space/> > = </space/> n ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( ~ d p [ i d x ] [ f ] ) 
 r e t u r n </space/> d p [ i d x ] [ f ] ; 
 r e t u r n </space/> d p [ i d x ] [ f ] </space/> = </space/> m a x ( g o ( i d x </space/> + </space/> 1 , </space/> ! f ) </space/> + </space/> s e f ( i d x , </space/> f ) , </space/> g o ( i d x </space/> + </space/> 1 , </space/> f ) ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 m e m s e t ( d p , </space/> - 1 , </space/> s i z e o f </space/> d p ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> b [ i ] ; 
 c o u t </space/> < < </space/> m a x ( g o ( 0 , </space/> 0 ) , </space/> g o ( 0 , </space/> 1 ) ) </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l i </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f o r i t ( i t , </space/> a ) </space/> f o r </space/> ( _ _ t y p e o f ( a . b e g i n ( ) ) </space/> i t </space/> = </space/> a . b e g i n ( ) ; </space/> i t </space/> ! = </space/> a . e n d ( ) ; </space/> i t + + ) 
 # d e f i n e </space/> f o r i ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> j </space/> = </space/> i ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p p </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 b o o l </space/> i s V ( c h a r </space/> c h ) 
 { 
 r e t u r n </space/> ( c h </space/> = = </space/> ' a ' </space/> | | </space/> c h </space/> = = </space/> ' e ' </space/> | | </space/> c h </space/> = = </space/> ' i ' </space/> | | </space/> c h </space/> = = </space/> ' o ' </space/> | | </space/> c h </space/> = = </space/> ' u ' ) ; 
 } 
 v o i d </space/> t c ( ) 
 { 
 
 i n t </space/> n , </space/> x , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 l l i </space/> l </space/> = </space/> - 1 , </space/> h i </space/> = </space/> n </space/> + </space/> 1 , </space/> m i d ; 
 l l i </space/> a n s ; 
 w h i l e </space/> ( h i </space/> - </space/> l </space/> > </space/> 1 ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> ( h i </space/> - </space/> l ) </space/> / </space/> 2 ; 
 l o n g </space/> l o n g </space/> v a l </space/> = </space/> ( n </space/> - </space/> m i d ) </space/> * </space/> ( n </space/> - </space/> m i d </space/> + </space/> 1 ) </space/> / </space/> 2 </space/> - </space/> m i d ; 
 i f </space/> ( v a l </space/> > </space/> k ) 
 { 
 l </space/> = </space/> m i d ; 
 } 
 e l s e 
 h i </space/> = </space/> m i d ; 
 } 
 c o u t </space/> < < </space/> ( h i ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 c o u t . t i e ( n u l l p t r ) ; 
 
 / / </space/> l l i </space/> q ; </space/> c i n > > q ; </space/> w h i l e ( q - - ) 
 
 t c ( ) ; 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> n l </space/> "" \ n "" 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 l l </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 l l </space/> i </space/> = </space/> 1 ; 
 w h i l e </space/> ( i </space/> < = </space/> n ) 
 { 
 l l </space/> s </space/> = </space/> ( i </space/> * </space/> ( i </space/> + </space/> 1 ) ) </space/> / </space/> 2 ; 
 i f </space/> ( s </space/> - </space/> n </space/> + </space/> i </space/> = = </space/> k ) 
 { 
 c o u t </space/> < < </space/> n </space/> - </space/> i ; 
 r e t u r n ; 
 } 
 i + + ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 
 l l </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> I O S </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 m a p < i n t , </space/> i n t > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 m [ x ] + + ; 
 } 
 i n t </space/> c n t </space/> = </space/> 0 , </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> k ; </space/> i + + ) 
 { 
 i f </space/> ( m [ i ] </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 a n s </space/> + = </space/> m [ i ] ; 
 e l s e 
 { 
 a n s </space/> + = </space/> m [ i ] </space/> - </space/> 1 ; 
 c n t + + ; 
 } 
 } 
 a n s </space/> + = </space/> ( c n t </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 
 c o n s t </space/> i n t </space/> m a x _ n </space/> = </space/> 1 0 0 0 0 5 ; 
 i n t </space/> h e i g h t 1 [ m a x _ n ] ; 
 i n t </space/> h e i g h t 2 [ m a x _ n ] ; 
 l l </space/> d p [ m a x _ n ] [ 3 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> h e i g h t 1 [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> h e i g h t 2 [ i ] ; 
 } 
 
 d p [ 0 ] [ 0 ] </space/> = </space/> h e i g h t 1 [ 0 ] ; </space/> / / </space/> P i c k </space/> t h e </space/> i - t h </space/> p l a y e r </space/> f r o m </space/> t h e </space/> f i r s t </space/> r o w 
 d p [ 0 ] [ 1 ] </space/> = </space/> h e i g h t 2 [ 0 ] ; </space/> / / </space/> P i c k </space/> t h e </space/> i - t h </space/> p l a y e r </space/> f r o m </space/> t h e </space/> s e c o n d </space/> r o w 
 d p [ 0 ] [ 2 ] </space/> = </space/> 0 ; </space/> / / </space/> S k i p </space/> t h e </space/> i - t h </space/> p i c k </space/> - - </space/> c o m e s </space/> i n </space/> h a n d y </space/> i f </space/> a </space/> t a l l e r </space/> s t u d e n t </space/> i n </space/> o n e </space/> p a r t i c u l a r </space/> l i n e 
 / / </space/> d o e s n ' t </space/> a l i g n </space/> w i t h </space/> t h e </space/> a l t e r n a t i n g </space/> p a t t e r n </space/> o f </space/> t h e </space/> g r e a t e r </space/> s u m </space/> p a t h 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 d p [ i ] [ 0 ] </space/> = </space/> m a x ( d p [ i </space/> - </space/> 1 ] [ 1 ] , </space/> d p [ i </space/> - </space/> 1 ] [ 2 ] ) </space/> + </space/> h e i g h t 1 [ i ] ; 
 d p [ i ] [ 1 ] </space/> = </space/> m a x ( d p [ i </space/> - </space/> 1 ] [ 0 ] , </space/> d p [ i </space/> - </space/> 1 ] [ 2 ] ) </space/> + </space/> h e i g h t 2 [ i ] ; 
 d p [ i ] [ 2 ] </space/> = </space/> m a x ( { </space/> d p [ i </space/> - </space/> 1 ] [ 0 ] , </space/> d p [ i </space/> - </space/> 1 ] [ 1 ] , </space/> d p [ i </space/> - </space/> 1 ] [ 2 ] </space/> } ) ; 
 } 
 c o u t </space/> < < </space/> m a x ( { </space/> d p [ n </space/> - </space/> 1 ] [ 0 ] , </space/> d p [ n </space/> - </space/> 1 ] [ 1 ] , </space/> d p [ n </space/> - </space/> 1 ] [ 2 ] </space/> } ) </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> i n t </space/> n , </space/> k , </space/> t e m p ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 t e m p </space/> = </space/> s q r t ( ( 8 </space/> * </space/> n ) </space/> + </space/> 9 </space/> + </space/> ( 8 </space/> * </space/> k ) ) ; 
 l l </space/> i n t </space/> a 1 , </space/> a 2 ; 
 a 1 </space/> = </space/> ( ( 2 </space/> * </space/> n ) </space/> + </space/> 3 </space/> + </space/> t e m p ) </space/> / </space/> 2 ; 
 a 2 </space/> = </space/> ( ( 2 </space/> * </space/> n ) </space/> + </space/> 3 </space/> - </space/> t e m p ) </space/> / </space/> 2 ; 
 i f </space/> ( a 1 </space/> < = </space/> n ) 
 { 
 c o u t </space/> < < </space/> a 1 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> a 2 </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n . t i e ( 0 ) ; 
 c i n . s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 l o n g </space/> l o n g </space/> n , </space/> q , </space/> a [ 2 ] [ 1 0 0 0 0 2 ] , </space/> s 1 [ 1 0 0 0 0 2 ] , </space/> s 2 [ 1 0 0 0 0 2 ] , </space/> l , </space/> r ; 
 b o o l </space/> c a m b i o </space/> = </space/> f a l s e ; 
 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ 0 ] [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ 1 ] [ i ] ; 
 s 1 [ 0 ] </space/> = </space/> 0 ; 
 s 2 [ 0 ] </space/> = </space/> 0 ; 
 s 1 [ 1 ] </space/> = </space/> a [ 0 ] [ 1 ] ; 
 s 2 [ 1 ] </space/> = </space/> a [ 1 ] [ 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s 1 [ i ] </space/> = </space/> m a x ( s 2 [ i </space/> - </space/> 2 ] , </space/> s 2 [ i </space/> - </space/> 1 ] ) </space/> + </space/> a [ 0 ] [ i ] ; 
 s 2 [ i ] </space/> = </space/> m a x ( s 1 [ i </space/> - </space/> 2 ] , </space/> s 1 [ i </space/> - </space/> 1 ] ) </space/> + </space/> a [ 1 ] [ i ] ; 
 } 
 / * 	 f o r </space/> ( i n t </space/> i = 0 ; i < = n ; i + + ) </space/> c o u t </space/> < < </space/> s 1 [ i ] </space/> < < </space/> "" </space/> "" ; </space/> c o u t </space/> < < </space/> e n d l ; 
 	 f o r </space/> ( i n t </space/> i = 0 ; i < = n ; i + + ) </space/> c o u t </space/> < < </space/> s 2 [ i ] </space/> < < </space/> "" </space/> "" ; </space/> c o u t </space/> < < </space/> e n d l ; 
 * / </space/> c o u t </space/> < < </space/> m a x ( s 1 [ n ] , </space/> s 2 [ n ] ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < u t i l i t y > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 1 0 0 0 0 5 ; 
 
 l l </space/> n , </space/> d p [ M ] [ 3 ] , </space/> a [ M ] , </space/> b [ M ] ; 
 
 i n l i n e </space/> l l </space/> s o l v e ( i n t </space/> i , </space/> i n t </space/> t ) 
 { 
 i f </space/> ( i </space/> = = </space/> n ) 
 r e t u r n </space/> 0 ; 
 l l & </space/> r e t </space/> = </space/> d p [ i ] [ t ] ; 
 i f </space/> ( r e t </space/> ! = </space/> - 1 ) 
 r e t u r n </space/> r e t ; 
 r e t </space/> = </space/> s o l v e ( i </space/> + </space/> 1 , </space/> t ) ; 
 i f </space/> ( t </space/> ! = </space/> 1 ) 
 r e t </space/> = </space/> m a x ( r e t , </space/> s o l v e ( i </space/> + </space/> 1 , </space/> 1 ) </space/> + </space/> a [ i ] ) ; 
 i f </space/> ( t </space/> ! = </space/> 2 ) 
 r e t </space/> = </space/> m a x ( r e t , </space/> s o l v e ( i </space/> + </space/> 1 , </space/> 2 ) </space/> + </space/> b [ i ] ) ; 
 r e t u r n </space/> r e t ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 m e m s e t ( d p , </space/> - 1 , </space/> s i z e o f </space/> d p ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> b [ i ] ; 
 c o u t </space/> < < </space/> s o l v e ( 0 , </space/> 0 ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 0 e 5 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 1 0 e 9 </space/> + </space/> 7 ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> l [ 2 ] [ n ] ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 ; </space/> j + + ) 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> l [ j ] [ i ] ; 
 } 
 l l </space/> d p [ 2 ] [ 3 ] ; 
 / / </space/> d p [ 0 ] [ 0 ] </space/> = </space/> d p [ 0 ] [ 1 ] </space/> = </space/> d p [ 0 ] [ 2 ] </space/> = </space/> 0 ; 
 d p [ 0 ] [ 0 ] </space/> = </space/> l [ 0 ] [ 0 ] ; 
 d p [ 0 ] [ 1 ] </space/> = </space/> l [ 1 ] [ 0 ] ; 
 d p [ 0 ] [ 2 ] </space/> = </space/> 0 ; 
 d p [ 1 ] [ 0 ] </space/> = </space/> l [ 0 ] [ 0 ] ; 
 d p [ 1 ] [ 1 ] </space/> = </space/> l [ 1 ] [ 0 ] ; 
 d p [ 1 ] [ 2 ] </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 d p [ 1 ] [ 0 ] </space/> = </space/> m a x ( d p [ 0 ] [ 1 ] </space/> + </space/> l [ 0 ] [ i ] , </space/> m a x ( d p [ 0 ] [ 2 ] </space/> + </space/> l [ 0 ] [ i ] , </space/> l [ 0 ] [ i ] ) ) ; 
 d p [ 1 ] [ 1 ] </space/> = </space/> m a x ( d p [ 0 ] [ 0 ] </space/> + </space/> l [ 1 ] [ i ] , </space/> m a x ( d p [ 0 ] [ 2 ] </space/> + </space/> l [ 1 ] [ i ] , </space/> l [ 1 ] [ i ] ) ) ; 
 d p [ 1 ] [ 2 ] </space/> = </space/> m a x ( d p [ 0 ] [ 0 ] , </space/> d p [ 0 ] [ 1 ] ) ; 
 d p [ 0 ] [ 0 ] </space/> = </space/> d p [ 1 ] [ 0 ] ; 
 d p [ 0 ] [ 1 ] </space/> = </space/> d p [ 1 ] [ 1 ] ; 
 d p [ 0 ] [ 2 ] </space/> = </space/> d p [ 1 ] [ 2 ] ; 
 } 
 c o u t </space/> < < </space/> m a x ( d p [ 1 ] [ 0 ] , </space/> m a x ( d p [ 1 ] [ 1 ] , </space/> d p [ 1 ] [ 2 ] ) ) </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ n </space/> + </space/> 1 ] ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> t e n </space/> = </space/> 1 ; 
 w h i l e </space/> ( a [ i ] </space/> > </space/> 0 ) 
 { 
 l l </space/> d i g i t </space/> = </space/> a [ i ] </space/> % </space/> 1 0 ; 
 a n s </space/> = </space/> ( ( ( ( n </space/> * </space/> d i g i t ) </space/> % </space/> m o d ) </space/> * </space/> t e n ) </space/> % </space/> m o d </space/> + </space/> a n s ) </space/> % </space/> m o d ; 
 t e n </space/> = </space/> ( t e n </space/> * </space/> 1 0 ) </space/> % </space/> m o d ; 
 a n s </space/> = </space/> ( ( ( ( n </space/> * </space/> d i g i t ) </space/> % </space/> m o d ) </space/> * </space/> t e n ) </space/> % </space/> m o d </space/> + </space/> a n s ) </space/> % </space/> m o d ; 
 t e n </space/> = </space/> ( t e n </space/> * </space/> 1 0 ) </space/> % </space/> m o d ; 
 a [ i ] </space/> / = </space/> 1 0 ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < m a p > 
 
 # d e f i n e </space/> f o r n ( i , </space/> e ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> f o r s n ( i , </space/> s , </space/> e ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> s ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> r f o r n ( i , </space/> s ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> s ; </space/> ~ i ; </space/> i - - ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 i n t </space/> a [ n ] ; 
 m a p < i n t , </space/> i n t > </space/> b ; 
 f o r n ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a [ i ] </space/> % = </space/> n ; 
 } 
 f o r n ( i , </space/> n ) 
 { 
 i n t </space/> t m p ; 
 c i n </space/> > > </space/> t m p ; 
 b [ t m p </space/> % </space/> n ] + + ; 
 } 
 
 f o r n ( i , </space/> n ) 
 { 
 i n t </space/> a n s ; 
 i f </space/> ( b . c o u n t ( ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ) ) 
 a n s </space/> = </space/> ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ; 
 e l s e </space/> i f </space/> ( b . u p p e r _ b o u n d ( ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ) </space/> ! = </space/> b . e n d ( ) ) 
 a n s </space/> = </space/> ( * b . u p p e r _ b o u n d ( ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ) ) . f f ; 
 e l s e 
 a n s </space/> = </space/> ( * b . l o w e r _ b o u n d ( 0 ) ) . f f ; 
 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> a n s ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 b [ a n s ] - - ; 
 i f </space/> ( ! b [ a n s ] ) 
 b . e r a s e ( a n s ) ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f d e f </space/> k 4 d r o i d 3 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 / / </space/> i n t </space/> t ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 / / </space/> w h i l e ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 / / # d e f i n e </space/> i n t </space/> i n t 6 4 _ t 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> z ( n ) , </space/> a n s ( n ) ; 
 m u l t i s e t < i n t > </space/> m ; 
 f o r </space/> ( i n t & </space/> i t </space/> : </space/> z ) 
 { 
 c i n </space/> > > </space/> i t ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> x ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 m . i n s e r t ( x ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k </space/> = </space/> * m . b e g i n ( ) ; 
 a u t o </space/> i t </space/> = </space/> m . l o w e r _ b o u n d ( n </space/> - </space/> z [ i ] ) ; 
 i f </space/> ( i t </space/> ! = </space/> m . e n d ( ) ) 
 { 
 i f </space/> ( ( z [ i ] </space/> + </space/> k ) </space/> % </space/> n </space/> < </space/> ( z [ i ] </space/> + </space/> * i t ) </space/> % </space/> n ) 
 { 
 a n s [ i ] </space/> = </space/> ( z [ i ] </space/> + </space/> k ) </space/> % </space/> n ; 
 m . e r a s e ( m . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 a n s [ i ] </space/> = </space/> ( z [ i ] </space/> + </space/> * i t ) </space/> % </space/> n ; 
 m . e r a s e ( i t ) ; 
 } 
 } 
 e l s e 
 { 
 a n s [ i ] </space/> = </space/> ( z [ i ] </space/> + </space/> k ) </space/> % </space/> n ; 
 m . e r a s e ( m . b e g i n ( ) ) ; 
 } 
 } 
 f o r </space/> ( i n t & </space/> i t </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> a l l ( x ) </space/> b e g i n ( x ) , </space/> e n d ( x ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v i </space/> v ( n ) , </space/> u ( n ) ; 
 m u l t i s e t < i n t > </space/> m ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> v [ i ] , </space/> v [ i ] </space/> % = </space/> n ; 
 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> u [ i ] , </space/> m . i n s e r t ( u [ i ] </space/> % </space/> n ) ; 
 v i </space/> r e s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t </space/> = </space/> m . l o w e r _ b o u n d ( n </space/> - </space/> v [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> m . e n d ( ) ) 
 { 
 i t </space/> = </space/> m . b e g i n ( ) ; 
 } 
 r e s . p u s h _ b a c k ( ( v [ i ] </space/> + </space/> * i t ) </space/> % </space/> n ) ; 
 m . e r a s e ( i t ) ; 
 } 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> r e s ) 
 { 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 r e t u r n ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 i n t </space/> T C </space/> = </space/> 1 ; </space/> / / </space/> c i n > > T C ; 
 w h i l e </space/> ( T C - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> I N e e d T o S p e e d </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> p e r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 0 0 0 1 7 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ n </space/> + </space/> 1 7 ] ; 
 l l </space/> b [ n </space/> + </space/> 1 7 ] ; 
 m u l t i s e t < l l > </space/> s ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> b [ i ] , </space/> s . i n s e r t ( b [ i ] ) ; 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> ! = </space/> s . e n d ( ) ) 
 c o u t </space/> < < </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" , </space/> s . e r a s e ( i t ) ; 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( * s . b e g i n ( ) </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( s . b e g i n ( ) ) ; 
 } 
 } 
 } 
 m a i n ( ) 
 { 
 I N e e d T o S p e e d </space/> l l </space/> t 2 4 </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t 2 4 ; 
 w h i l e </space/> ( t 2 4 - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> _ _ i n t 1 2 8 </space/> l x ; 
 # d e f i n e </space/> c e i l ( n , </space/> m ) </space/> ( ( n </space/> / </space/> m ) </space/> + </space/> ( n </space/> % </space/> m </space/> ? </space/> 1 </space/> : </space/> 0 ) ) 
 # d e f i n e </space/> m o d ( n , </space/> m ) </space/> ( ( ( n </space/> % </space/> m ) </space/> + </space/> m ) </space/> % </space/> m ) 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> r a l l ( x ) </space/> ( x ) . r b e g i n ( ) , </space/> ( x ) . r e n d ( ) 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 / / </space/> f r e o p e n ( "" c h e s s . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a ( n ) , </space/> b ( n ) ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 c i n </space/> > > </space/> i ; 
 m u l t i s e t < i n t > </space/> s ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> b ) 
 c i n </space/> > > </space/> i , </space/> s . i n s e r t ( i ) ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 { 
 i n t </space/> c u r </space/> = </space/> n </space/> - </space/> i ; 
 i f </space/> ( c u r </space/> = = </space/> n ) 
 c u r </space/> = </space/> 0 ; 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( c u r ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( i </space/> + </space/> * i t ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( i t ) ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p p i </space/> p a i r < i n t , </space/> p i > 
 # d e f i n e </space/> p p l </space/> p a i r < l l , </space/> p l > 
 / / </space/> # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> I N F </space/> 1 e 7 
 v e c t o r < v e c t o r < i n t > > </space/> g r a p h ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < i n t > </space/> a ( n ) ; 
 m u l t i s e t < i n t > </space/> c n t ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 c i n </space/> > > </space/> i ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> i n ; 
 c i n </space/> > > </space/> i n ; 
 c n t . i n s e r t ( i n ) ; 
 } 
 
 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 { 
 a u t o </space/> i t </space/> = </space/> c n t . l o w e r _ b o u n d ( n </space/> - </space/> i ) ; 
 i f </space/> ( i t </space/> = = </space/> c n t . e n d ( ) ) 
 i t </space/> = </space/> c n t . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( i </space/> + </space/> * i t ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 c n t . e r a s e ( i t ) ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> i o _ b o o s t </space/> \ 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( n u l l p t r ) ; </space/> \ 
 c o u t . t i e ( n u l l p t r ) ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> u l l i ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l i ; 
 t y p e d e f </space/> u n s i g n e d </space/> i n t </space/> u i ; 
 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 2 0 0 0 0 5 ; 
 i n t </space/> N , </space/> a [ M A X N ] , </space/> b [ M A X N ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> N ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 m u l t i s e t < i n t > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 s . i n s e r t ( b [ i ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i n t </space/> e </space/> = </space/> 0 ; 
 i f </space/> ( a [ i ] </space/> ! = </space/> 0 ) 
 e </space/> = </space/> N </space/> - </space/> a [ i ] ; 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( e ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> N </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( i t ) ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s e t < i n t > </space/> d i v i s o r s ( i n t </space/> v a l ) 
 { 
 s e t < i n t > </space/> o u t p u t ; 
 i n t </space/> n u m </space/> = </space/> v a l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> * </space/> i </space/> < = </space/> v a l ; </space/> i + + ) 
 i f </space/> ( n u m </space/> % </space/> i </space/> = = </space/> 0 ) 
 i f </space/> ( n u m </space/> % </space/> i </space/> = = </space/> 0 ) 
 { 
 o u t p u t . i n s e r t ( i ) ; 
 o u t p u t . i n s e r t ( n u m </space/> / </space/> i ) ; 
 } 
 r e t u r n </space/> o u t p u t ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 m u l t i s e t < i n t > </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n u m ; 
 c i n </space/> > > </space/> n u m ; 
 b . i n s e r t ( n u m ) ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> v a l </space/> = </space/> n </space/> - </space/> a [ i ] , </space/> v a l _ </space/> = </space/> * b . b e g i n ( ) ; 
 a u t o </space/> i t </space/> = </space/> b . l o w e r _ b o u n d ( v a l ) ; 
 i f </space/> ( i t </space/> = = </space/> b . e n d ( ) </space/> | | </space/> ( v a l _ </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> n ) 
 { 
 c o u t </space/> < < </space/> ( v a l _ </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 b . e r a s e ( b . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 b . e r a s e ( i t ) ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> a [ 2 0 0 0 0 0 ] , </space/> b [ 2 0 0 0 0 0 ] ; 
 m u l t i s e t < i n t > </space/> s ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> k ; 
 s . i n s e r t ( k ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> a n s </space/> = </space/> ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ; 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( a n s ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 { 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 } 
 b [ i ] </space/> = </space/> * i t ; 
 s . e r a s e ( i t ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> ( b [ i ] </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> e l </space/> ' \ n ' 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p l d </space/> p a i r < l d , </space/> l d > 
 # d e f i n e </space/> p f f </space/> p a i r < f l o a t , </space/> f l o a t > 
 # d e f i n e </space/> v e c ( i n t ) </space/> v e c t o r < i n t > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> p </space/> p u s h 
 # d e f i n e </space/> m m s ( v , </space/> i ) </space/> m e m s e t ( v , </space/> i , </space/> s i z e o f </space/> v ) 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> a l l r ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 # d e f i n e </space/> M A X </space/> 1 0 0 0 0 0 0 5 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> f i l e ( ) 
 { 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 } 
 v o i d </space/> z u k a ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 z u k a ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 m u l t i s e t < l l > </space/> s ; 
 v e c ( l l ) </space/> a ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> i n ; 
 c i n </space/> > > </space/> i n ; 
 a . p b ( i n ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> i n ; 
 c i n </space/> > > </space/> i n ; 
 s . i n s e r t ( i n ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> ( * i t ) ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 s . e r a s e ( i t ) ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 s e t < p a i r < i n t , </space/> i n t > > </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n 1 ; 
 c i n </space/> > > </space/> n 1 ; 
 b . i n s e r t ( { </space/> n 1 , </space/> i </space/> } ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t 1 </space/> = </space/> b . l o w e r _ b o u n d ( { </space/> n </space/> - </space/> a [ i ] , </space/> 0 </space/> } ) ; 
 i f </space/> ( i t 1 </space/> ! = </space/> b . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> ( ( * i t 1 ) . f i r s t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 b . e r a s e ( i t 1 ) ; 
 } 
 e l s e 
 { 
 i t 1 </space/> = </space/> b . l o w e r _ b o u n d ( { </space/> 0 , </space/> 0 </space/> } ) ; 
 c o u t </space/> < < </space/> ( ( * i t 1 ) . f i r s t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 b . e r a s e ( i t 1 ) ; 
 } 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> i n s </space/> i n s e r t 
 # d e f i n e </space/> s z ( x ) </space/> ( l o n g </space/> l o n g ) </space/> x . s i z e ( ) 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> a ( n , </space/> 0 ) , </space/> b ( n , </space/> 0 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 m u l t i s e t < l l > </space/> x ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 x . i n s e r t ( b [ i ] </space/> % </space/> n ) ; 
 } 
 v e c t o r < l l > </space/> c ( n , </space/> 0 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> v a l </space/> = </space/> a [ i ] </space/> % </space/> n ; 
 l l </space/> r e q </space/> = </space/> ( n </space/> - </space/> v a l ) </space/> % </space/> n ; 
 a u t o </space/> i t </space/> = </space/> x . l o w e r _ b o u n d ( r e q ) ; 
 i f </space/> ( i t </space/> = = </space/> x . e n d ( ) ) 
 { 
 a u t o </space/> i t 2 </space/> = </space/> x . b e g i n ( ) ; 
 c [ i ] </space/> = </space/> ( v a l </space/> + </space/> * i t 2 ) </space/> % </space/> n ; 
 x . e r a s e ( i t 2 ) ; 
 c o n t i n u e ; 
 } 
 c [ i ] </space/> = </space/> ( v a l </space/> + </space/> * i t ) </space/> % </space/> n ; 
 x . e r a s e ( i t ) ; 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> c [ i ] </space/> < < </space/> "" </space/> "" ; 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 l l </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> t e j i </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> f f </space/> f i r s t 
 / / </space/> # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> p i i </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> f ( i , </space/> x , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> x ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n , </space/> x ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> v ( n ) ; 
 m u l t i s e t < l l > </space/> s ; 
 f ( i , </space/> 0 , </space/> n ) </space/> c i n </space/> > > </space/> v [ i ] ; 
 f ( i , </space/> 0 , </space/> n ) 
 { 
 c i n </space/> > > </space/> x ; 
 s . i n s e r t ( x ) ; 
 } 
 / / </space/> c i n > > a [ i ] ; 
 / / </space/> s o r t ( a l l ( a ) ) ; 
 f ( i , </space/> 0 , </space/> n ) 
 { 
 a u t o </space/> y </space/> = </space/> s . l b ( n </space/> - </space/> v [ i ] ) ; 
 / / </space/> l l </space/> x = l b ( a l l ( a ) , n - v [ i ] ) - v . b e g i n ( ) ; 
 
 i f </space/> ( y </space/> = = </space/> s . e n d ( ) ) 
 y </space/> = </space/> s . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( v [ i ] </space/> + </space/> * y ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( y ) ; 
 } 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 
 t e j i ; 
 l l </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 f ( i , </space/> 0 , </space/> t ) </space/> s o l v e ( ) ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> p o p f </space/> p o p _ f r o n t 
 # d e f i n e </space/> p o p b </space/> p o p _ b a c k 
 # d e f i n e </space/> M O D 1 </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> M O D 2 </space/> 9 9 8 2 4 4 3 5 3 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 i n t </space/> c o n s t </space/> M A X </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 ; 
 / * 
 * / 
 / / </space/> p r i n t f ( "" % . 1 0 l f \ n "" , a n s ) ; 
 / / </space/> c o u t < < f i x e d < < s e t p r e c i s i o n ( 2 0 ) < < a n s < < e n d l ; 
 / / </space/> s t o l l </space/> s t r i n g </space/> - > </space/> l o n g </space/> l o n g 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> b [ n ] ; 
 m u l t i s e t < i n t > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> a ; 
 c i n </space/> > > </space/> a ; 
 s . i n s e r t ( a ) ; 
 } 
 i n t </space/> a n s [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> p </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> b [ i ] ) ; 
 i f </space/> ( p </space/> = = </space/> s . e n d ( ) ) 
 p </space/> = </space/> s . b e g i n ( ) ; 
 a n s [ i ] </space/> = </space/> ( b [ i ] </space/> + </space/> * p ) </space/> % </space/> n ; 
 s . e r a s e ( p ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 / * i n t </space/> t ; 
 	 c i n > > t ; 
 	 w h i l e ( t - - ) * / </space/> s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( i n t </space/> a r g c , </space/> c o n s t </space/> c h a r * </space/> a r g v [ ] ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 m u l t i s e t < i n t > </space/> b ; 
 i n t </space/> a [ n ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> e l e ; 
 c i n </space/> > > </space/> e l e ; 
 b . i n s e r t ( e l e ) ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t r </space/> = </space/> b . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 
 i f </space/> ( i t r </space/> = = </space/> b . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * b . b e g i n ( ) ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 b . e r a s e ( b . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * i t r ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 b . e r a s e ( i t r ) ; 
 } 
 } 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> a ( n ) , </space/> b ( n ) ; 
 f o r </space/> ( a u t o & </space/> i t </space/> : </space/> a ) 
 c i n </space/> > > </space/> i t ; 
 f o r </space/> ( a u t o & </space/> i t </space/> : </space/> b ) 
 c i n </space/> > > </space/> i t ; 
 l l </space/> m i n a </space/> = </space/> * m i n _ e l e m e n t ( a . b e g i n ( ) , </space/> a . e n d ( ) ) ; 
 l l </space/> m i n b </space/> = </space/> * m i n _ e l e m e n t ( b . b e g i n ( ) , </space/> b . e n d ( ) ) ; 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> = </space/> s u m </space/> + </space/> m a x ( a [ i ] </space/> - </space/> m i n a , </space/> b [ i ] </space/> - </space/> m i n b ) ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> N ; 
 c i n </space/> > > </space/> N ; 
 i n t </space/> c m i n </space/> = </space/> 1 0 0 0 0 0 0 0 0 1 , </space/> o m i n </space/> = </space/> 1 0 0 0 0 0 0 0 0 1 ; 
 v e c t o r < i n t > </space/> c a n d i e s ( N ) , </space/> o r a n g e s ( N ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i f </space/> ( t </space/> < </space/> c m i n ) 
 { 
 c m i n </space/> = </space/> t ; 
 } 
 c a n d i e s [ i ] </space/> = </space/> t ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i f </space/> ( t </space/> < </space/> o m i n ) 
 { 
 o m i n </space/> = </space/> t ; 
 } 
 o r a n g e s [ i ] </space/> = </space/> t ; 
 } 
 
 u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> r e s u l t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 r e s u l t </space/> + = </space/> m a x ( c a n d i e s [ i ] </space/> - </space/> c m i n , </space/> o r a n g e s [ i ] </space/> - </space/> o m i n ) ; 
 } 
 c o u t </space/> < < </space/> r e s u l t </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> u l l i ; 
 
 v e c t o r < u l l i > </space/> g e t A r r a y ( u l l i </space/> l i m i t ) 
 { 
 v e c t o r < u l l i > </space/> a r r a y ; 
 
 w h i l e </space/> ( l i m i t - - ) 
 { 
 u l l i </space/> x ; 
 c i n </space/> > > </space/> x ; 
 
 a r r a y . p u s h _ b a c k ( x ) ; 
 } 
 
 r e t u r n </space/> a r r a y ; 
 } 
 
 u l l i </space/> g e t M i n i ( v e c t o r < u l l i > </space/> a ) 
 { 
 u l l i </space/> m i n i </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 0 0 ; 
 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a ) 
 { 
 i f </space/> ( x </space/> < </space/> m i n i ) 
 m i n i </space/> = </space/> x ; 
 } 
 r e t u r n </space/> m i n i ; 
 } 
 
 u l l i </space/> g e t M o v e s ( v e c t o r < u l l i > </space/> c a n d y , </space/> v e c t o r < u l l i > </space/> o r a n g e ) 
 { 
 u l l i </space/> m i n i C a n d y </space/> = </space/> g e t M i n i ( c a n d y ) ; 
 u l l i </space/> m i n i O r a n g e </space/> = </space/> g e t M i n i ( o r a n g e ) ; 
 
 u l l i </space/> m o v e s </space/> = </space/> 0 ; 
 
 f o r </space/> ( u l l i </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> c a n d y . s i z e ( ) ; </space/> i + + ) 
 { 
 u l l i </space/> c a n d y M o v e </space/> = </space/> c a n d y [ i ] </space/> - </space/> m i n i C a n d y ; 
 u l l i </space/> o r a n g e M o v e </space/> = </space/> o r a n g e [ i ] </space/> - </space/> m i n i O r a n g e ; 
 
 m o v e s </space/> + = </space/> m a x ( c a n d y M o v e , </space/> o r a n g e M o v e ) ; 
 } 
 
 r e t u r n </space/> m o v e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 u l l i </space/> t C a s e ; 
 c i n </space/> > > </space/> t C a s e ; 
 
 w h i l e </space/> ( t C a s e - - ) 
 { 
 u l l i </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < u l l i > </space/> c a n d y L i s t </space/> = </space/> g e t A r r a y ( n ) ; 
 v e c t o r < u l l i > </space/> o r a n g e L i s t </space/> = </space/> g e t A r r a y ( n ) ; 
 
 u l l i </space/> m o v e </space/> = </space/> g e t M o v e s ( c a n d y L i s t , </space/> o r a n g e L i s t ) ; 
 
 c o u t </space/> < < </space/> m o v e </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> M A X </space/> = </space/> 5 5 ; 
 i n t </space/> a [ M A X ] , </space/> b [ M A X ] ; 
 i n t </space/> M i n ( i n t , </space/> i n t ) ; 
 i n t </space/> M a x ( i n t , </space/> i n t ) ; 
 v o i d </space/> s o l v e ( ) ; 
 i n t </space/> m a i n ( ) 
 { 
 s t d : : i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 s t d : : c i n . t i e ( N U L L ) ; 
 
 i n t </space/> t </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
 i n t </space/> M i n ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> > </space/> b ) 
 r e t u r n </space/> b ; 
 
 r e t u r n </space/> a ; 
 } 
 i n t </space/> M a x ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> > </space/> b ) 
 r e t u r n </space/> a ; 
 
 r e t u r n </space/> b ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 i n t </space/> m n 1 </space/> = </space/> 1 e 9 </space/> + </space/> 5 , </space/> m n 2 </space/> = </space/> 1 e 9 </space/> + </space/> 5 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 m n 1 </space/> = </space/> M i n ( m n 1 , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & b [ j ] ) ; 
 m n 2 </space/> = </space/> M i n ( m n 2 , </space/> b [ j ] ) ; 
 } 
 l l </space/> l l C n t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 l l C n t </space/> + = </space/> M a x ( ( a [ i ] </space/> - </space/> m n 1 ) , </space/> ( b [ i ] </space/> - </space/> m n 2 ) ) ; 
 
 p r i n t f ( "" % l l d \ n "" , </space/> l l C n t ) ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l </space/> v e c t o r < l o n g </space/> l o n g > 
 # d e f i n e </space/> m i i </space/> m a p < i n t , </space/> i n t > 
 # d e f i n e </space/> p q b </space/> p r i o r i t y _ q u e u e < i n t > 
 # d e f i n e </space/> p q s </space/> p r i o r i t y _ q u e u e < i n t , </space/> v i , </space/> g r e a t e r < i n t > </space/> > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> i n f </space/> 1 e 1 8 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> w ( t ) </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 # d e f i n e </space/> f ( i , </space/> x ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> x ; </space/> i + + ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 i n t </space/> b [ n ] ; 
 f ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 } 
 i n t </space/> m i n a </space/> = </space/> * m i n _ e l e m e n t ( a , </space/> a </space/> + </space/> n ) ; 
 i n t </space/> m i n b </space/> = </space/> * m i n _ e l e m e n t ( b , </space/> b </space/> + </space/> n ) ; 
 f ( i , </space/> n ) 
 { 
 a [ i ] </space/> - = </space/> m i n a ; 
 b [ i ] </space/> - = </space/> m i n b ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f ( i , </space/> n ) 
 { 
 a n s </space/> + = </space/> ( l l ) ( m a x ( a [ i ] , </space/> b [ i ] ) ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 w ( t ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ n ] , </space/> b [ n ] , </space/> i , </space/> a M i n </space/> = </space/> 1 e 9 , </space/> b M i n </space/> = </space/> 1 e 9 , </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a M i n </space/> = </space/> m i n ( a M i n , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 b M i n </space/> = </space/> m i n ( b M i n , </space/> b [ i ] ) ; 
 } 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 a n s </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> a M i n , </space/> b [ i ] </space/> - </space/> b M i n ) ; 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 c o u t . p r e c i s i o n ( 1 0 ) ; 
 c o u t </space/> < < </space/> f i x e d ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n ; 
 l o n g </space/> l o n g </space/> a [ 5 2 ] , </space/> b [ 5 2 ] , </space/> m a </space/> = </space/> 0 , </space/> m b </space/> = </space/> 0 , </space/> c </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 } 
 m a </space/> = </space/> * m i n _ e l e m e n t ( a , </space/> a </space/> + </space/> n ) ; 
 m b </space/> = </space/> * m i n _ e l e m e n t ( b , </space/> b </space/> + </space/> n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> m a , </space/> b [ i ] </space/> - </space/> m b ) ; 
 } 
 c o u t </space/> < < </space/> c </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c l i m i t s > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> l o n g </space/> c o u n t </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l o n g </space/> l o n g </space/> a [ n ] ; 
 l o n g </space/> l o n g </space/> b [ n ] ; 
 l o n g </space/> l o n g </space/> a m i n </space/> = </space/> I N T _ M A X ; 
 l o n g </space/> l o n g </space/> b m i n </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a m i n </space/> = </space/> m i n ( a [ i ] , </space/> a m i n ) ; 
 } 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 b m i n </space/> = </space/> m i n ( b [ i ] , </space/> b m i n ) ; 
 } 
 / / </space/> c o u t < < a m i n < < "" </space/> "" < < b m i n < < e n d l ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l o n g </space/> l o n g </space/> x </space/> = </space/> a [ i ] </space/> - </space/> a m i n ; 
 l o n g </space/> l o n g </space/> y </space/> = </space/> b [ i ] </space/> - </space/> b m i n ; 
 l o n g </space/> l o n g </space/> z </space/> = </space/> m i n ( x , </space/> y ) ; 
 c o u n t </space/> + = </space/> z ; 
 x </space/> = </space/> x </space/> - </space/> z ; 
 y </space/> = </space/> y </space/> - </space/> z ; 
 c o u n t </space/> + = </space/> x ; 
 c o u n t </space/> + = </space/> y ; 
 / / </space/> c o u t < < c o u n t < < "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> c o u n t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> i , </space/> j , </space/> m i n i m u m 1 , </space/> m i n i m u m 2 , </space/> x , </space/> y ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> m o v </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 } 
 
 m i n i m u m 1 </space/> = </space/> a [ 0 ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> < </space/> m i n i m u m 1 ) 
 { 
 m i n i m u m 1 </space/> = </space/> a [ i ] ; 
 } 
 } 
 / / </space/> c o u t < < "" M i n i m u m 1 : </space/> "" < < m i n i m u m 1 < < e n d l ; 
 m i n i m u m 2 </space/> = </space/> b [ 0 ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( b [ i ] </space/> < </space/> m i n i m u m 2 ) 
 { 
 m i n i m u m 2 </space/> = </space/> b [ i ] ; 
 } 
 } 
 / / </space/> c o u t < < "" M i n i m u m 2 : </space/> "" < < m i n i m u m 2 < < e n d l ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 x </space/> = </space/> a [ i ] </space/> - </space/> m i n i m u m 1 ; 
 y </space/> = </space/> b [ i ] </space/> - </space/> m i n i m u m 2 ; 
 / / </space/> c o u t < < "" x : </space/> "" < < x < < "" </space/> y : </space/> "" < < y < < e n d l ; 
 m o v </space/> + = </space/> m a x ( x , </space/> y ) ; 
 / / </space/> c o u t < < "" M o v : </space/> "" < < m o v < < e n d l ; 
 } 
 c o u t </space/> < < </space/> m o v </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l o n g </space/> l o n g </space/> a [ n ] , </space/> b [ n ] , </space/> m n A </space/> = </space/> I N T _ M A X , </space/> m n B </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m n A </space/> = </space/> m i n ( m n A , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m n B </space/> = </space/> m i n ( m n B , </space/> b [ i ] ) ; 
 } 
 l o n g </space/> l o n g </space/> c n t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> > </space/> m n A </space/> & & </space/> b [ i ] </space/> > </space/> m n B ) 
 { 
 i f </space/> ( a [ i ] </space/> - </space/> m n A </space/> > </space/> b [ i ] </space/> - </space/> m n B ) 
 { 
 c n t </space/> + = </space/> a [ i ] </space/> - </space/> m n A ; 
 } 
 e l s e 
 { 
 c n t </space/> + = </space/> b [ i ] </space/> - </space/> m n B ; 
 } 
 } 
 e l s e </space/> i f </space/> ( a [ i ] </space/> > </space/> m n A ) 
 { 
 c n t </space/> + = </space/> a [ i ] </space/> - </space/> m n A ; 
 } 
 e l s e </space/> i f </space/> ( b [ i ] </space/> > </space/> m n B ) 
 { 
 c n t </space/> + = </space/> b [ i ] </space/> - </space/> m n B ; 
 } 
 } 
 c o u t </space/> < < </space/> c n t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m i ( i n t </space/> a r [ ] , </space/> i n t </space/> s ) ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 i n t </space/> n , </space/> m i a </space/> = </space/> 0 , </space/> m i b </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> s u m </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 c i n </space/> > > </space/> a [ j ] ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 c i n </space/> > > </space/> b [ j ] ; 
 m i a </space/> = </space/> m i ( a , </space/> n ) ; 
 m i b </space/> = </space/> m i ( b , </space/> n ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 i f </space/> ( a [ j ] </space/> > </space/> m i a </space/> | | </space/> b [ j ] </space/> > </space/> m i b ) 
 s u m </space/> + = </space/> m a x ( ( a [ j ] </space/> - </space/> m i a ) , </space/> ( b [ j ] </space/> - </space/> m i b ) ) ; 
 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
 
 i n t </space/> m i ( i n t </space/> a r [ ] , </space/> i n t </space/> s ) 
 { 
 i n t </space/> m i </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s ; </space/> i + + ) 
 m i </space/> = </space/> m i n ( a r [ i ] , </space/> m i ) ; 
 r e t u r n </space/> m i ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < i t e r a t o r > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < t u p l e > 
 # i n c l u d e </space/> < s t r i n g > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> n u m e r i c _ l i m i t s < i n t > : : m a x ( ) </space/> / </space/> 2 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 0 ; </space/> t </space/> < </space/> T ; </space/> + + t ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> A ( n ) , </space/> B ( n ) ; 
 f o r </space/> ( i n t & </space/> a </space/> : </space/> A ) 
 c i n </space/> > > </space/> a ; 
 f o r </space/> ( i n t & </space/> b </space/> : </space/> B ) 
 c i n </space/> > > </space/> b ; 
 i n t </space/> m a </space/> = </space/> * m i n _ e l e m e n t ( A . b e g i n ( ) , </space/> A . e n d ( ) ) ; 
 i n t </space/> m b </space/> = </space/> * m i n _ e l e m e n t ( B . b e g i n ( ) , </space/> B . e n d ( ) ) ; 
 a u t o </space/> a n s </space/> = </space/> 0 u l l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> d a </space/> = </space/> A [ i ] </space/> - </space/> m a ; 
 i n t </space/> d b </space/> = </space/> B [ i ] </space/> - </space/> m b ; 
 a n s </space/> + = </space/> m a x ( d a , </space/> d b ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] , </space/> m i n a </space/> = </space/> I N T _ M A X , </space/> m i n b </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m i n a </space/> = </space/> m i n ( m i n a , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m i n b </space/> = </space/> m i n ( m i n b , </space/> b [ i ] ) ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> > </space/> m i n a </space/> & & </space/> b [ i ] </space/> > </space/> m i n b ) 
 { 
 i n t </space/> t </space/> = </space/> m i n ( a [ i ] </space/> - </space/> m i n a , </space/> b [ i ] </space/> - </space/> m i n b ) ; 
 a n s </space/> + = </space/> t ; 
 a [ i ] </space/> - = </space/> t ; 
 b [ i ] </space/> - = </space/> t ; 
 } 
 i f </space/> ( a [ i ] </space/> > </space/> m i n a ) 
 { 
 a n s </space/> + = </space/> ( a [ i ] </space/> - </space/> m i n a ) ; 
 } 
 e l s e </space/> i f </space/> ( b [ i ] </space/> > </space/> m i n b ) 
 { 
 a n s </space/> + = </space/> ( b [ i ] </space/> - </space/> m i n b ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 c o u t </space/> < < </space/> "" \ n T i m e </space/> E l a p s e d : </space/> "" </space/> < < </space/> 1 . 0 </space/> * </space/> c l o c k ( ) </space/> / </space/> C L O C K S _ P E R _ S E C </space/> < < </space/> "" </space/> s e c \ n "" ; 
 # e n d i f 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> L L </space/> = </space/> l o n g </space/> l o n g ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] ; 
 i n t </space/> m a </space/> = </space/> I N T _ M A X , </space/> m b </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m a </space/> = </space/> m i n ( m a , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m b </space/> = </space/> m i n ( m b , </space/> b [ i ] ) ; 
 } 
 L L </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> + = </space/> ( L L ) ( m a x ( a [ i ] </space/> - </space/> m a , </space/> b [ i ] </space/> - </space/> m b ) ) ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> n l </space/> "" \ n "" 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] , </space/> m a </space/> = </space/> I N T _ M A X , </space/> m b </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m a </space/> = </space/> m i n ( m a , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m b </space/> = </space/> m i n ( m b , </space/> b [ i ] ) ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> m a , </space/> b [ i ] </space/> - </space/> m b ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> n l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 
 l l </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> c h e a c k ( ) 
 { 
 l o n g </space/> l o n g </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l o n g </space/> l o n g </space/> a r r [ n ] , </space/> b r r [ n ] ; 
 c i n </space/> > > </space/> a r r [ 0 ] ; 
 l o n g </space/> l o n g </space/> t o p m i n </space/> = </space/> a r r [ 0 ] ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 t o p m i n </space/> = </space/> m i n ( t o p m i n , </space/> a r r [ i ] ) ; 
 } 
 c i n </space/> > > </space/> b r r [ 0 ] ; 
 l o n g </space/> l o n g </space/> b o t t o m m i n </space/> = </space/> b r r [ 0 ] ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b r r [ i ] ; 
 b o t t o m m i n </space/> = </space/> m i n ( b o t t o m m i n , </space/> b r r [ i ] ) ; 
 } 
 l o n g </space/> l o n g </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> + = </space/> m a x ( a r r [ i ] </space/> - </space/> t o p m i n , </space/> b r r [ i ] </space/> - </space/> b o t t o m m i n ) ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - </space/> > </space/> 0 ) 
 { 
 c h e a c k ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c h r o n o > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 l l </space/> a [ 1 2 3 4 5 6 7 ] , </space/> b [ 1 2 3 4 5 6 7 ] , </space/> c , </space/> d , </space/> e , </space/> f , </space/> g , </space/> h , </space/> i , </space/> j , </space/> k , </space/> l , </space/> m , </space/> n , </space/> t , </space/> a n s , </space/> s u m , </space/> n u m , </space/> t e s 1 , </space/> t e s 2 , </space/> x , </space/> y ; 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 x </space/> = </space/> 1 2 3 4 5 6 7 8 9 0 0 ; 
 y </space/> = </space/> x ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 x </space/> = </space/> m i n ( x , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 y </space/> = </space/> m i n ( y , </space/> b [ i ] ) ; 
 } 
 s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> x , </space/> b [ i ] </space/> - </space/> y ) ; 
 } 
 c o u t </space/> < < </space/> s u m ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t o t a l _ t e s t c a s e ; 
 c i n </space/> > > </space/> t o t a l _ t e s t c a s e ; 
 w h i l e </space/> ( t o t a l _ t e s t c a s e - - ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l o n g </space/> l o n g </space/> i n t </space/> a r r [ n ] , </space/> a r r 2 [ n ] , </space/> m i n 1 , </space/> m i n 2 ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 m i n 1 </space/> = </space/> a r r [ i ] ; 
 e l s e </space/> i f </space/> ( a r r [ i ] </space/> < </space/> m i n 1 ) 
 m i n 1 </space/> = </space/> a r r [ i ] ; 
 } 
 f o r </space/> ( l o n g </space/> l o n g </space/> i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r 2 [ i ] ; 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 m i n 2 </space/> = </space/> a r r 2 [ i ] ; 
 e l s e </space/> i f </space/> ( a r r 2 [ i ] </space/> < </space/> m i n 2 ) 
 m i n 2 </space/> = </space/> a r r 2 [ i ] ; 
 } 
 l o n g </space/> l o n g </space/> i n t </space/> a n s </space/> = </space/> 0 ; 
 
 f o r </space/> ( l o n g </space/> l o n g </space/> i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 
 l o n g </space/> l o n g </space/> i n t </space/> b o t h 1 </space/> = </space/> ( a r r [ i ] </space/> - </space/> m i n 1 ) ; 
 l o n g </space/> l o n g </space/> i n t </space/> b o t h 2 </space/> = </space/> ( a r r 2 [ i ] </space/> - </space/> m i n 2 ) , </space/> b o t h ; 
 i f </space/> ( b o t h 1 </space/> < </space/> b o t h 2 ) 
 { 
 b o t h </space/> = </space/> b o t h 1 ; 
 } 
 e l s e 
 b o t h </space/> = </space/> b o t h 2 ; 
 l o n g </space/> l o n g </space/> i n t </space/> o n e 1 </space/> = </space/> a r r [ i ] </space/> - </space/> m i n 1 </space/> - </space/> b o t h , </space/> o n e 2 </space/> = </space/> a r r 2 [ i ] </space/> - </space/> m i n 2 </space/> - </space/> b o t h ; 
 a n s </space/> + = </space/> b o t h </space/> + </space/> o n e 1 </space/> + </space/> o n e 2 ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> E x a m p l e 
 / / </space/> i n p u t C o p y 
 / / </space/> 5 
 / / </space/> 3 
 / / </space/> 3 </space/> 5 </space/> 6 
 / / </space/> 3 </space/> 2 </space/> 3 
 / / </space/> 5 
 / / </space/> 1 </space/> 2 </space/> 3 </space/> 4 </space/> 5 
 / / </space/> 5 </space/> 4 </space/> 3 </space/> 2 </space/> 1 
 / / </space/> 3 
 / / </space/> 1 </space/> 1 </space/> 1 
 / / </space/> 2 </space/> 2 </space/> 2 
 / / </space/> 6 
 / / </space/> 1 </space/> 1 0 0 0 0 0 0 0 0 0 </space/> 1 0 0 0 0 0 0 0 0 0 </space/> 1 0 0 0 0 0 0 0 0 0 </space/> 1 0 0 0 0 0 0 0 0 0 </space/> 1 0 0 0 0 0 0 0 0 0 
 / / </space/> 1 </space/> 1 </space/> 1 </space/> 1 </space/> 1 </space/> 1 
 / / </space/> 3 
 / / </space/> 1 0 </space/> 1 2 </space/> 8 
 / / </space/> 7 </space/> 5 </space/> 4 
 / / </space/> o u t p u t C o p y 
 / / </space/> 6 
 / / </space/> 1 6 
 / / </space/> 0 
 / / </space/> 4 9 9 9 9 9 9 9 9 5 
 / / </space/> 7 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i l l </space/> i n t </space/> l o n g </space/> l o n g 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> y o u r </space/> c o d e </space/> g o e s </space/> h e r e 
 i l l </space/> t , </space/> i ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 i l l </space/> n u m , </space/> j ; 
 c i n </space/> > > </space/> n u m ; 
 i l l </space/> a [ n u m ] , </space/> b [ n u m ] ; 
 i l l </space/> m i n 1 </space/> = </space/> I N T _ M A X , </space/> m i n 2 </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n u m ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> a [ j ] ; 
 m i n 1 </space/> = </space/> m i n ( m i n 1 , </space/> a [ j ] ) ; 
 } 
 / / </space/> c o u t < < m i n 1 < < e n d l ; 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n u m ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> b [ j ] ; 
 m i n 2 </space/> = </space/> m i n ( m i n 2 , </space/> b [ j ] ) ; 
 } 
 
 i l l </space/> m a x 3 , </space/> t 3 , </space/> t 4 , </space/> m i n 3 , </space/> t 1 , </space/> t 2 , </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n u m ; </space/> j + + ) 
 { 
 
 t 3 </space/> = </space/> a [ j ] </space/> - </space/> m i n 1 ; 
 t 4 </space/> = </space/> b [ j ] </space/> - </space/> m i n 2 ; 
 
 m a x 3 </space/> = </space/> m a x ( t 3 , </space/> t 4 ) ; 
 
 a n s </space/> = </space/> a n s </space/> + </space/> m a x 3 ; 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < l o n g </space/> i n t > </space/> a ( n ) ; 
 v e c t o r < l o n g </space/> i n t > </space/> b ( n ) ; 
 l o n g </space/> i n t </space/> A </space/> = </space/> 1 0 0 0 0 0 0 0 0 1 ; 
 l o n g </space/> i n t </space/> B </space/> = </space/> 1 0 0 0 0 0 0 0 0 1 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 i f </space/> ( a [ i ] </space/> < </space/> A ) 
 A </space/> = </space/> a [ i ] ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 
 i f </space/> ( b [ i ] </space/> < </space/> B ) 
 B </space/> = </space/> b [ i ] ; 
 } 
 
 
 i n t </space/> i </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> i n t </space/> c o u n t </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u n t </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> A , </space/> b [ i ] </space/> - </space/> B ) ; 
 } 
 c o u t </space/> < < </space/> c o u n t </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 r e p ( i , </space/> t ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 i n t </space/> b [ n ] ; 
 i n t </space/> m i n a </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 i n t </space/> m i n b </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 r e p ( j , </space/> n ) 
 { 
 c i n </space/> > > </space/> a [ j ] ; 
 m i n a </space/> = </space/> m i n ( m i n a , </space/> a [ j ] ) ; 
 } 
 r e p ( j , </space/> n ) 
 { 
 c i n </space/> > > </space/> b [ j ] ; 
 m i n b </space/> = </space/> m i n ( m i n b , </space/> b [ j ] ) ; 
 } 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 r e p ( j , </space/> n ) 
 { 
 i f </space/> ( a [ j ] </space/> = = </space/> m i n a </space/> & & </space/> b [ j ] </space/> = = </space/> m i n b ) 
 c o n t i n u e ; 
 i n t </space/> t e m p </space/> = </space/> m i n ( a [ j ] </space/> - </space/> m i n a , </space/> b [ j ] </space/> - </space/> m i n b ) ; 
 / / </space/> c o u t < < t e m p < < e n d l ; 
 a n s </space/> + = </space/> ( a [ j ] </space/> - </space/> m i n a </space/> + </space/> b [ j ] </space/> - </space/> m i n b </space/> - </space/> t e m p ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 
 # d e f i n e </space/> m a x ( A , </space/> B ) </space/> ( ( A ) </space/> > </space/> ( B ) </space/> ? </space/> ( A ) </space/> : </space/> ( B ) ) 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> i , </space/> a [ 5 1 ] , </space/> b [ 5 1 ] ; 
 l o n g </space/> l o n g </space/> m o v e s </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 b [ n ] </space/> = </space/> a [ n ] </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d "" , </space/> a </space/> + </space/> i ) ; 
 i f </space/> ( a [ i ] </space/> < </space/> a [ n ] ) 
 a [ n ] </space/> = </space/> a [ i ] ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d "" , </space/> b </space/> + </space/> i ) ; 
 i f </space/> ( b [ i ] </space/> < </space/> b [ n ] ) 
 b [ n ] </space/> = </space/> b [ i ] ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 m o v e s </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> a [ n ] , </space/> b [ i ] </space/> - </space/> b [ n ] ) ; 
 p r i n t f ( "" % I 6 4 d \ n "" , </space/> m o v e s ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 u s i n g </space/> V </space/> = </space/> v e c t o r < T > ; 
 t e m p l a t e </space/> < c l a s s </space/> T , </space/> c l a s s </space/> U > 
 u s i n g </space/> M </space/> = </space/> u n o r d e r e d _ m a p < T , </space/> U > ; 
 u s i n g </space/> F </space/> = </space/> d o u b l e ; 
 u s i n g </space/> S </space/> = </space/> s t r i n g ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> v i </space/> = </space/> V < i n t > ; 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> r e p i ( i , </space/> s , </space/> e ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> s ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 r e p ( t i , </space/> t ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v i </space/> a ( n ) , </space/> b ( n ) ; 
 r e p ( i , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 r e p ( i , </space/> n ) </space/> c i n </space/> > > </space/> b [ i ] ; 
 i n t </space/> m a </space/> = </space/> * m i n _ e l e m e n t ( a l l ( a ) ) ; 
 i n t </space/> m b </space/> = </space/> * m i n _ e l e m e n t ( a l l ( b ) ) ; 
 l l </space/> s </space/> = </space/> 0 ; 
 r e p ( i , </space/> n ) 
 { 
 i n t </space/> a 2 </space/> = </space/> a [ i ] </space/> - </space/> m a , </space/> b 2 </space/> = </space/> b [ i ] </space/> - </space/> m b ; 
 i n t </space/> c </space/> = </space/> m i n ( a 2 , </space/> b 2 ) ; 
 s </space/> + = </space/> a 2 </space/> + </space/> b 2 </space/> - </space/> c ; 
 } 
 c o u t </space/> < < </space/> s </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> n ; 
 l l </space/> s u m </space/> = </space/> 0 ; 
 i n t </space/> a [ n ] ; 
 i n t </space/> b [ n ] ; 
 i n t </space/> m i n a </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 , </space/> m i n b </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> a [ j ] ; 
 i f </space/> ( a [ j ] </space/> < </space/> m i n a ) 
 { 
 m i n a </space/> = </space/> a [ j ] ; 
 } 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> b [ j ] ; 
 i f </space/> ( b [ j ] </space/> < </space/> m i n b ) 
 { 
 m i n b </space/> = </space/> b [ j ] ; 
 } 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 i f </space/> ( b [ j ] </space/> - </space/> m i n b </space/> > </space/> a [ j ] </space/> - </space/> m i n a ) 
 { 
 s u m </space/> + = </space/> b [ j ] </space/> - </space/> m i n b ; 
 } 
 e l s e 
 { 
 s u m </space/> + = </space/> a [ j ] </space/> - </space/> m i n a ; 
 } 
 / / </space/> c o u t < < s u m < < e n d l ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> t c ; 
 c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> n , </space/> a m </space/> = </space/> I N T _ M A X , </space/> b m </space/> = </space/> I N T _ M A X , </space/> i , </space/> a n s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l o n g </space/> l o n g </space/> i n t > </space/> a ( n ) , </space/> b ( n ) ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a m </space/> = </space/> m i n ( a m , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 b m </space/> = </space/> m i n ( b m , </space/> b [ i ] ) ; 
 } 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a [ i ] </space/> - = </space/> a m ; 
 b [ i ] </space/> - = </space/> b m ; 
 a n s </space/> + = </space/> m a x ( a [ i ] , </space/> b [ i ] ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f o r e ( i , </space/> l , </space/> r ) </space/> \ 
 f o r </space/> ( a u t o </space/> i </space/> = </space/> ( l ) </space/> - </space/> ( ( l ) </space/> > </space/> ( r ) ) ; </space/> i </space/> ! = </space/> ( r ) </space/> - </space/> ( ( l ) </space/> > </space/> ( r ) ) ; </space/> i </space/> + = </space/> 1 </space/> - </space/> 2 </space/> * </space/> ( ( l ) </space/> > </space/> ( r ) ) ) 
 # d e f i n e </space/> c e i l ( n , </space/> k ) </space/> ( ( ( n ) </space/> + </space/> ( ( k ) - 1 ) ) </space/> / </space/> ( k ) ) 
 # d e f i n e </space/> a l l ( a ) </space/> b e g i n ( a ) , </space/> e n d ( a ) 
 # d e f i n e </space/> s z ( a ) </space/> i n t ( a . s i z e ( ) ) 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 
 # i f d e f </space/> L O C A L 
 # i n c l u d e </space/> "" . . / d e b u g . h "" 
 # e l s e 
 # d e f i n e </space/> d e b u g ( . . . ) 
 # e n d i f 
 
 u s i n g </space/> l l i </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> l d </space/> = </space/> l o n g </space/> d o u b l e ; 
 u s i n g </space/> i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 u s i n g </space/> v i </space/> = </space/> v e c t o r < i n t > ; 
 u s i n g </space/> v i i </space/> = </space/> v e c t o r < i i > ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 i n t </space/> a , </space/> b ; 
 # d e f i n e </space/> s q ( x ) </space/> ( x ) </space/> * </space/> ( x ) 
 
 v o i d </space/> t e s t C a s e ( ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 
 c o u t </space/> < < </space/> m i n ( { </space/> s q ( m a x ( a </space/> + </space/> a , </space/> b ) ) , </space/> s q ( m a x ( b </space/> + </space/> b , </space/> a ) ) , </space/> s q ( m a x ( a </space/> + </space/> b , </space/> b ) ) </space/> } ) </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n . t i e ( 0 ) - > s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t c ; 
 c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 t e s t C a s e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 l o n g </space/> t ; 
 s c a n f ( "" % l d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> a , </space/> b ; 
 s c a n f ( "" % l d </space/> % l d "" , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 l o n g </space/> x </space/> = </space/> a ; 
 a </space/> = </space/> b ; 
 b </space/> = </space/> x ; 
 } 
 l o n g </space/> s i d e </space/> = </space/> ( 2 </space/> * </space/> a </space/> > </space/> b ) </space/> ? </space/> ( 2 </space/> * </space/> a ) </space/> : </space/> b ; 
 p r i n t f ( "" % l d \ n "" , </space/> s i d e </space/> * </space/> s i d e ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( b </space/> > </space/> a ) 
 s w a p ( a , </space/> b ) ; 
 
 c o u t </space/> < < </space/> m a x ( 2 </space/> * </space/> b , </space/> a ) </space/> * </space/> m a x ( 2 </space/> * </space/> b , </space/> a ) </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> s o l ; 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 s o l </space/> = </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) ; 
 } 
 e l s e 
 { 
 s o l </space/> = </space/> m a x ( a , </space/> 2 </space/> * </space/> b ) ; 
 } 
 c o u t </space/> < < </space/> s o l </space/> * </space/> s o l </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 c o u t </space/> < < </space/> ( 2 </space/> * </space/> a </space/> * </space/> 2 </space/> * </space/> b ) </space/> < < </space/> e n d l ; 
 e l s e </space/> i f </space/> ( a </space/> > </space/> b ) 
 { 
 i f </space/> ( 2 </space/> * </space/> b </space/> > </space/> a ) 
 c o u t </space/> < < </space/> ( 4 </space/> * </space/> b </space/> * </space/> b ) </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> ( a </space/> * </space/> a ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i f </space/> ( 2 </space/> * </space/> a </space/> > </space/> b ) 
 c o u t </space/> < < </space/> ( 4 </space/> * </space/> a </space/> * </space/> a ) </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> ( b </space/> * </space/> b ) </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 c o u t </space/> < < </space/> m a x ( m a x ( n , </space/> m ) , </space/> ( m i n ( n , </space/> m ) ) </space/> * </space/> 2 ) </space/> * </space/> m a x ( m a x ( n , </space/> m ) , </space/> ( m i n ( n , </space/> m ) ) </space/> * </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> a , </space/> b , </space/> x , </space/> y , </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 x </space/> = </space/> m a x ( a , </space/> b ) ; 
 y </space/> = </space/> m i n ( a , </space/> b ) ; 
 
 i f </space/> ( y </space/> * </space/> 2 </space/> > </space/> x ) 
 { 
 c o u t </space/> < < </space/> ( y </space/> * </space/> 2 ) </space/> * </space/> ( y </space/> * </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> x </space/> * </space/> x </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> M E M ( a , </space/> b ) </space/> m e m s e t ( a , </space/> ( b ) , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> F O R ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> R F O R ( i , </space/> n ) </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 # d e f i n e </space/> a l l ( c o n t ) </space/> c o n t . b e g i n ( ) , </space/> c o n t . e n d ( ) 
 # d e f i n e </space/> r a l l ( c o n t ) </space/> c o n t . e n d ( ) , </space/> c o n t . b e g i n ( ) 
 # d e f i n e </space/> E A C H ( i t , </space/> l ) </space/> f o r </space/> ( a u t o </space/> i t </space/> = </space/> l . b e g i n ( ) ; </space/> i t </space/> ! = </space/> l . e n d ( ) ; </space/> i t + + ) 
 # d e f i n e </space/> I N ( A , </space/> B , </space/> C ) </space/> a s s e r t ( B </space/> < = </space/> A </space/> & & </space/> A </space/> < = </space/> C ) 
 # d e f i n e </space/> M P </space/> m a k e _ p a i r 
 # d e f i n e </space/> P B </space/> p u s h _ b a c k 
 # d e f i n e </space/> I N F </space/> ( i n t ) 1 e 9 
 # d e f i n e </space/> E P S </space/> 1 e - 9 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> r e a d ( t y p e ) </space/> r e a d I n t < t y p e > ( ) 
 # d e f i n e </space/> p r i n t ( t ) </space/> c o u t </space/> < < </space/> t </space/> < < </space/> e n d l 
 # d e f i n e </space/> L L </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> v t </space/> v e c t o r 
 c o n s t </space/> i n t </space/> a m a x </space/> = </space/> 1 0 0 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> s i d e </space/> = </space/> m i n ( m a x ( 2 </space/> * </space/> b , </space/> a ) , </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) ) ; 
 c o u t </space/> < < </space/> s i d e </space/> * </space/> s i d e </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> i , </space/> j , </space/> t , </space/> a , </space/> b , </space/> c ; 
 c i n </space/> > > </space/> t ; 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 a </space/> * = </space/> 2 ; 
 b </space/> * = </space/> 2 ; 
 c o u t </space/> < < </space/> a </space/> * </space/> b </space/> < < </space/> e n d l ; 
 } 
 
 e l s e </space/> i f </space/> ( a </space/> > </space/> b ) 
 { 
 i f </space/> ( b </space/> > = </space/> c e i l ( a </space/> / </space/> 2 . 0 ) ) 
 { 
 c </space/> = </space/> ( b </space/> * </space/> 2 ) </space/> - </space/> a ; 
 a </space/> + = </space/> c ; 
 c o u t </space/> < < </space/> a </space/> * </space/> b </space/> * </space/> 2 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 c o u t </space/> < < </space/> a </space/> * </space/> a </space/> < < </space/> e n d l ; 
 } 
 
 e l s e 
 { 
 i f </space/> ( a </space/> > = </space/> c e i l ( b </space/> / </space/> 2 . 0 ) ) 
 { 
 c </space/> = </space/> ( a </space/> * </space/> 2 ) </space/> - </space/> b ; 
 b </space/> + = </space/> c ; 
 c o u t </space/> < < </space/> a </space/> * </space/> b </space/> * </space/> 2 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 c o u t </space/> < < </space/> b </space/> * </space/> b </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> x , </space/> y ; 
 c i n </space/> > > </space/> x </space/> > > </space/> y ; 
 i n t </space/> r e s ; 
 i f </space/> ( m i n ( x , </space/> y ) </space/> * </space/> 2 </space/> < </space/> m a x ( x , </space/> y ) ) 
 { 
 r e s </space/> = </space/> m a x ( x , </space/> y ) ; 
 } 
 e l s e 
 { 
 r e s </space/> = </space/> m i n ( x , </space/> y ) </space/> * </space/> 2 ; 
 } 
 r e s </space/> = </space/> p o w ( ( r e s ) , </space/> 2 ) ; 
 c o u t </space/> < < </space/> r e s </space/> < < </space/> e n d l ; 
 } 
 } 
 / * </space/> s t u f f </space/> y o u </space/> s h o u l d </space/> l o o k </space/> f o r 
 * </space/> i n t </space/> o v e r f l o w , </space/> a r r a y </space/> b o u n d s 
 * </space/> s p e c i a l </space/> c a s e s </space/> ( n = 1 ? ) 
 * </space/> d o </space/> s m t h </space/> i n s t e a d </space/> o f </space/> n o t h i n g </space/> a n d </space/> s t a y </space/> o r g a n i z e d 
 * </space/> W R I T E </space/> S T U F F </space/> D O W N 
 * </space/> D O N ' T </space/> G E T </space/> S T U C K </space/> O N </space/> O N E </space/> A P P R O A C H 
 * / 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < n u m e r i c > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / * 
 c o n s t </space/> i n t </space/> M A X _ I N T </space/> = </space/> 1 0 0 ; 
 t e m p l a t e < c l a s s </space/> t > 
 c l a s s </space/> S t a c k { 
 p r i v a t e : 
 t </space/> i t e m [ M A X _ I N T ] ; 
 i n t </space/> t o p ; 
 p u b l i c : 
 v o i d </space/> p u s h ( t </space/> e l e m e n t ) { 
 t o p + + ; 
 i t e m [ t o p ] </space/> = </space/> e l e m e n t ; 
 } 
 b o o l </space/> e m p t y ( ) { 
 i f ( t o p </space/> = = </space/> - 1 ) { 
 r e t u r n </space/> t r u e ; 
 } e l s e { 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 v o i d </space/> p o p ( ) { 
 i f ( e m p t y ( ) ) { 
 c o u t </space/> < < </space/> "" S o r r y </space/> t h i s </space/> s t a c k </space/> i s </space/> e m p t y . "" </space/> < < </space/> "" \ n "" ; 
 } e l s e { 
 t o p - - ; 
 } 
 } 
 v o i d </space/> p o p ( t </space/> & e l e m e n t ) { 
 i f ( e m p t y ( ) ) { 
 c o u t </space/> < < </space/> "" S o r r y </space/> t h i s </space/> s t a c k </space/> i s </space/> e m p t y . "" </space/> < < </space/> "" \ n "" ; 
 } e l s e { 
 e l e m e n t </space/> = </space/> i t e m [ t o p ] ; 
 t o p - - ; 
 } 
 } 
 v o i d </space/> g e t T o p ( t </space/> & s t a c k T o p ) { 
 s t a c k T o p </space/> = </space/> i t e m [ t o p ] ; 
 c o u t </space/> < < </space/> s t a c k T o p </space/> < < </space/> "" \ n "" ; 
 } 
 v o i d </space/> p r i n t ( ) { 
 f o r ( i n t </space/> i </space/> = </space/> t o p ; </space/> i > = 0 ; </space/> i - - ) { 
 c o u t </space/> < < </space/> i t e m [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 } ; 
 i n t </space/> c o u n t e r [ 1 0 0 0 0 1 ] ; 
 * / 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a </space/> = </space/> 0 , </space/> b </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> l e n g t h 1 </space/> = </space/> m a x ( a , </space/> 2 </space/> * </space/> b ) ; 
 i n t </space/> l e n g t h 2 </space/> = </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) ; 
 i n t </space/> l e n g t h </space/> = </space/> m i n ( l e n g t h 1 , </space/> l e n g t h 2 ) ; 
 c o u t </space/> < < </space/> l e n g t h </space/> * </space/> l e n g t h </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> u l l i ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> t C a s e ; 
 c i n </space/> > > </space/> t C a s e ; 
 
 w h i l e </space/> ( t C a s e - - ) 
 { 
 i n t </space/> m , </space/> n ; 
 c i n </space/> > > </space/> m </space/> > > </space/> n ; 
 
 i n t </space/> m a x i </space/> = </space/> m a x ( m , </space/> n ) ; 
 i n t </space/> m i n i </space/> = </space/> m i n ( m , </space/> n ) ; 
 
 i f </space/> ( m a x i </space/> = = </space/> m i n i ) 
 { 
 c o u t </space/> < < </space/> p o w ( m a x i </space/> * </space/> 2 , </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 e l s e </space/> i f </space/> ( m i n i </space/> * </space/> 2 </space/> < = </space/> m a x i ) 
 { 
 c o u t </space/> < < </space/> p o w ( m a x i , </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> p o w ( m i n i </space/> * </space/> 2 , </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> i , </space/> j , </space/> x , </space/> t , </space/> a , </space/> b , </space/> r </space/> = </space/> 0 , </space/> m a x </space/> = </space/> 0 ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> x ; 
 
 w h i l e </space/> ( x - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 t </space/> = </space/> s t d : : m i n ( a , </space/> b ) ; 
 n </space/> = </space/> s t d : : m a x ( a , </space/> b ) ; 
 
 i f </space/> ( t </space/> * </space/> 2 </space/> > = </space/> n ) 
 c o u t </space/> < < </space/> 2 </space/> * </space/> t </space/> * </space/> 2 </space/> * </space/> t </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 c o u t </space/> < < </space/> n </space/> * </space/> n </space/> < < </space/> e n d l ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 i f </space/> ( 2 </space/> * </space/> a </space/> > </space/> b ) 
 c o u t </space/> < < </space/> 4 </space/> * </space/> a </space/> * </space/> a </space/> < < </space/> "" \ n "" ; 
 e l s e 
 c o u t </space/> < < </space/> b </space/> * </space/> b </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 i f </space/> ( 2 </space/> * </space/> b </space/> > </space/> a ) 
 c o u t </space/> < < </space/> 4 </space/> * </space/> b </space/> * </space/> b </space/> < < </space/> "" \ n "" ; 
 e l s e 
 c o u t </space/> < < </space/> a </space/> * </space/> a </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l o n g </space/> l o n g </space/> a , </space/> b , </space/> c ; 
 m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 c </space/> = </space/> m i n ( a , </space/> b ) ; 
 a </space/> + = </space/> ( b </space/> - </space/> c ) ; 
 i f </space/> ( a </space/> < = </space/> ( 2 </space/> * </space/> c ) ) 
 c o u t </space/> < < </space/> ( 4 </space/> * </space/> c </space/> * </space/> c ) </space/> < < </space/> ' \ n ' ; 
 e l s e 
 c o u t </space/> < < </space/> ( a </space/> * </space/> a ) </space/> < < </space/> ' \ n ' ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" - O 3 "" ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / / # d e f i n e </space/> f ( i , x , n ) </space/> f o r ( l l </space/> i = x ; i < n ; i + + ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> d e b u g ( x ) </space/> c o u t </space/> < < </space/> x </space/> < < </space/> "" \ n "" ; 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> b s </space/> b i n a r y _ s e a r c h 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 
 l l </space/> n , </space/> k , </space/> a , </space/> b , </space/> c , </space/> d , </space/> x , </space/> y , </space/> z , </space/> q ; 
 s t r i n g </space/> s ; 
 l l </space/> a r r [ 1 0 0 0 0 0 0 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 / / </space/> s t d : : c o u t </space/> < < </space/> f i x e d < < </space/> s t d : : s e t p r e c i s i o n ( 9 ) </space/> < < </space/> ' \ n ' ; 
 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l l </space/> a n s </space/> = </space/> m i n ( a , </space/> b ) </space/> * </space/> 2 ; 
 a n s </space/> = </space/> m a x ( a n s , </space/> m a x ( a , </space/> b ) ) ; 
 c o u t </space/> < < </space/> a n s </space/> * </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 
 i f </space/> ( b </space/> * </space/> 2 </space/> > = </space/> a ) 
 { 
 
 c o u t </space/> < < </space/> ( b </space/> + </space/> b ) </space/> * </space/> ( b </space/> + </space/> b ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a ) </space/> * </space/> ( a ) </space/> < < </space/> e n d l ; 
 } 
 } 
 e l s e </space/> i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> ( b </space/> + </space/> b ) </space/> * </space/> ( b </space/> + </space/> b ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i f </space/> ( a </space/> * </space/> 2 </space/> > = </space/> b ) 
 { 
 
 c o u t </space/> < < </space/> ( a </space/> + </space/> a ) </space/> * </space/> ( a </space/> + </space/> a ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( b ) </space/> * </space/> ( b ) </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> l o n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> m i n ( a , </space/> b ) , </space/> a n s 1 </space/> = </space/> 0 ; 
 a n s </space/> * = </space/> 2 ; 
 c o u t </space/> < < </space/> m a x ( a n s , </space/> m a x ( a , </space/> b ) ) </space/> * </space/> m a x ( a n s , </space/> m a x ( a , </space/> b ) ) </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; </space/> / / </space/> n u m b e r </space/> o f </space/> t e s t </space/> c a s e 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 s c a n f ( "" % d % d "" , </space/> & a , </space/> & b ) ; 
 i n t </space/> r e s </space/> = </space/> 0 ; </space/> / / </space/> t h e </space/> m i n u m a m </space/> s q u a r 
 i f </space/> ( a </space/> < = </space/> b ) 
 { 
 a </space/> * = </space/> 2 ; 
 i f </space/> ( a </space/> > </space/> b ) 
 b </space/> + = </space/> a </space/> - </space/> b ; 
 e l s e 
 a </space/> + = </space/> b </space/> - </space/> a ; 
 r e s </space/> = </space/> a </space/> * </space/> b ; 
 } 
 e l s e 
 { 
 b </space/> * = </space/> 2 ; 
 i f </space/> ( b </space/> > </space/> a ) 
 a </space/> + = </space/> b </space/> - </space/> a ; 
 e l s e 
 b </space/> + = </space/> a </space/> - </space/> b ; 
 r e s </space/> = </space/> a </space/> * </space/> b ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> r e s ) ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n 1 </space/> = </space/> 0 , </space/> n 2 </space/> = </space/> 0 , </space/> n 3 </space/> = </space/> 0 ; 
 i n t </space/> a </space/> = </space/> 0 , </space/> b </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 n 1 </space/> = </space/> m a x ( a , </space/> 2 </space/> * </space/> b ) ; 
 n 2 </space/> = </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) ; 
 n 3 </space/> = </space/> m i n ( n 1 , </space/> n 2 ) ; 
 c o u t </space/> < < </space/> n 3 </space/> * </space/> n 3 </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> a , </space/> b ; 
 
 i n l i n e </space/> v o i d </space/> s o l v e ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & a , </space/> & b ) ; 
 i n t </space/> l e n </space/> = </space/> m i n ( m a x ( 2 </space/> * </space/> a , </space/> b ) , </space/> m a x ( a , </space/> 2 </space/> * </space/> b ) ) ; 
 c o u t </space/> < < </space/> 1 l l </space/> * </space/> l e n </space/> * </space/> l e n </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T </space/> = </space/> 1 ; 
 s c a n f ( "" % d "" , </space/> & T ) ; 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # d e f i n e </space/> _ C R T _ S E C U R E _ N O _ W A R N I N G S 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> I O </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l p 1 ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> l p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> m e m ( n , </space/> x ) </space/> m e m s e t ( n , </space/> x , </space/> s i z e o f ( n ) ) 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> r e </space/> r e t u r n 
 # d e f i n e </space/> s z </space/> s i z e ( ) 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 5 e 5 </space/> + </space/> 5 ; 
 l l </space/> t , </space/> n , </space/> m ; 
 l l </space/> a 1 [ N ] , </space/> a 2 [ N ] ; 
 v e c t o r < s e t < i n t > > </space/> v ( 2 6 ) ; 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> I O ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 / / </space/> f r e o p e n ( "" o u t . o u t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l l </space/> a n </space/> = </space/> m a x ( 2 </space/> * </space/> m i n ( n , </space/> m ) , </space/> m a x ( n , </space/> m ) ) ; 
 c o u t </space/> < < </space/> a n </space/> * </space/> a n </space/> < < </space/> e n d l ; 
 } 
 } 
 
 / * 
 
 * /",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> x </space/> = </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) , </space/> y </space/> = </space/> m a x ( 2 </space/> * </space/> b , </space/> a ) ; 
 i n t </space/> a n s </space/> = </space/> m i n ( x , </space/> y ) ; 
 c o u t </space/> < < </space/> a n s </space/> * </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> n ; 
 c i n </space/> > > </space/> n ; 
 w h i l e </space/> ( n - - ) 
 { 
 i n t </space/> m , </space/> k ; 
 c i n </space/> > > </space/> m </space/> > > </space/> k ; 
 i f </space/> ( ( m </space/> > </space/> k </space/> * </space/> 2 ) </space/> | | </space/> ( m </space/> * </space/> 2 </space/> < </space/> k ) ) 
 { 
 l o n g </space/> l o n g </space/> w </space/> = </space/> m a x ( k , </space/> m ) ; 
 c o u t </space/> < < </space/> w </space/> * </space/> w </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e </space/> i f </space/> ( m </space/> = = </space/> k ) 
 { 
 l o n g </space/> l o n g </space/> l </space/> = </space/> m ; 
 l </space/> = </space/> l </space/> * </space/> 2 ; 
 c o u t </space/> < < </space/> l </space/> * </space/> l </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 l o n g </space/> l o n g </space/> b </space/> = </space/> m i n ( k , </space/> m ) ; 
 b </space/> = </space/> b </space/> * </space/> 2 ; 
 c o u t </space/> < < </space/> b </space/> * </space/> b </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t o t a l _ t e s t c a s e ; 
 c i n </space/> > > </space/> t o t a l _ t e s t c a s e ; 
 w h i l e </space/> ( t o t a l _ t e s t c a s e - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 i n t </space/> t e m p </space/> = </space/> b ; 
 b </space/> = </space/> a ; 
 a </space/> = </space/> t e m p ; 
 } 
 i f </space/> ( ( 2 </space/> * </space/> a ) </space/> > = </space/> b ) 
 { 
 c o u t </space/> < < </space/> 2 </space/> * </space/> a </space/> * </space/> 2 </space/> * </space/> a </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> b </space/> * </space/> b </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( b </space/> > </space/> a ) 
 { 
 i n t </space/> t </space/> = </space/> a ; 
 a </space/> = </space/> b ; 
 b </space/> = </space/> t ; 
 } 
 i f </space/> ( a </space/> > = </space/> 2 </space/> * </space/> b ) 
 { 
 c o u t </space/> < < </space/> a </space/> * </space/> a </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> 4 </space/> * </space/> b </space/> * </space/> b </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> y </space/> = </space/> m i n ( a , </space/> b ) ; 
 i n t </space/> u </space/> = </space/> m a x ( a , </space/> b ) ; 
 c o u t </space/> < < </space/> m a x ( 2 </space/> * </space/> y </space/> * </space/> 2 </space/> * </space/> y , </space/> u </space/> * </space/> u ) </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 # d e f i n e </space/> f i ( n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , "" w "" , s t d o u t ) ; 
 # e n d i f 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> 4 </space/> * </space/> ( a </space/> * </space/> b ) </space/> < < </space/> e n d l ; 
 c o n t i n u e ; 
 } 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 i f </space/> ( 2 </space/> * </space/> a </space/> > = </space/> b ) 
 { 
 i n t </space/> a n s </space/> = </space/> 2 </space/> * </space/> a </space/> * </space/> 2 </space/> * </space/> a ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i n t </space/> a n s </space/> = </space/> b </space/> * </space/> b ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 i f </space/> ( 2 </space/> * </space/> b </space/> > = </space/> a ) 
 { 
 i n t </space/> a n s </space/> = </space/> 2 </space/> * </space/> b </space/> * </space/> 2 </space/> * </space/> b ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i n t </space/> a n s </space/> = </space/> a </space/> * </space/> a ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 c o n t i n u e ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> n l i n e </space/> "" \ n "" 
 c o n s t </space/> l l </space/> M </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 5 ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 v e c t o r < l l > </space/> d i v ( N </space/> + </space/> 2 , </space/> 0 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i f </space/> ( d i v [ i ] </space/> = = </space/> 0 ) 
 { 
 f o r </space/> ( l l </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> N ; </space/> j </space/> + = </space/> i ) 
 { 
 d i v [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 l l </space/> n , </space/> x ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> a ( n </space/> + </space/> 3 , </space/> - 1 ) , </space/> b ( n </space/> + </space/> 3 , </space/> - 1 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 l l </space/> p </space/> = </space/> d i v [ x ] ; 
 i f </space/> ( d i v [ x ] ) 
 { 
 w h i l e </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 { 
 x </space/> / = </space/> p ; 
 } 
 i f </space/> ( x </space/> ! = </space/> 1 ) 
 { 
 a [ i ] </space/> = </space/> x ; 
 b [ i ] </space/> = </space/> p ; 
 } 
 } 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> n l i n e ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> "" </space/> "" ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 1 ; 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 5 e 5 </space/> + </space/> 2 ; 
 
 i n t </space/> a n s 1 [ M ] , </space/> a n s 2 [ M ] ; 
 b i t s e t < N > </space/> v ; 
 i n t </space/> s p [ N ] ; 
 
 v o i d </space/> s i e v e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> i </space/> + = </space/> 2 ) 
 { 
 s p [ i ] </space/> = </space/> 2 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> N ; </space/> i </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( ! v [ i ] ) 
 { 
 s p [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i ; </space/> 1 L L </space/> * </space/> j </space/> * </space/> i </space/> < </space/> N ; </space/> j </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( ! v [ j </space/> * </space/> i ] ) 
 { 
 v [ j </space/> * </space/> i ] </space/> = </space/> 1 ; 
 s p [ j </space/> * </space/> i ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s i e v e ( ) ; 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 a n s 1 [ i ] </space/> = </space/> a n s 2 [ i ] </space/> = </space/> - 1 ; 
 i n t </space/> x ; 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 i n t </space/> s m o l l </space/> = </space/> s p [ x ] ; 
 w h i l e </space/> ( x </space/> % </space/> s m o l l </space/> = = </space/> 0 ) 
 { 
 x </space/> / = </space/> s m o l l ; 
 } 
 i f </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s 1 [ i ] </space/> = </space/> x ; 
 a n s 2 [ i ] </space/> = </space/> s m o l l ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 p r i n t f ( "" % d </space/> "" , </space/> a n s 1 [ i ] ) ; 
 } 
 p u t s ( "" "" ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 p r i n t f ( "" % d </space/> "" , </space/> a n s 2 [ i ] ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 c o n s t </space/> i n t </space/> m x </space/> = </space/> 1 e 4 </space/> + </space/> 7 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> a r [ m x ] ; 
 v e c t o r < i n t > </space/> p r i m e ; 
 
 v o i d </space/> s e i v e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> m x ; </space/> i + + ) 
 { 
 i f </space/> ( a r [ i ] </space/> = = </space/> f a l s e ) 
 { 
 p r i m e . p u s h _ b a c k ( i ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> + </space/> i ; </space/> j </space/> < </space/> m x ; </space/> j </space/> + = </space/> i ) 
 { 
 a r [ j ] </space/> = </space/> t r u e ; 
 } 
 } 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s e i v e ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a n s [ 2 ] [ n </space/> + </space/> 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 v e c t o r < i n t > </space/> u p r i m e ; 
 i n t </space/> a ; 
 c i n </space/> > > </space/> a ; 
 i n t </space/> j </space/> = </space/> 0 ; 
 w h i l e </space/> ( p r i m e [ j ] </space/> * </space/> p r i m e [ j ] </space/> < = </space/> a ) 
 { 
 i f </space/> ( a </space/> % </space/> p r i m e [ j ] </space/> = = </space/> 0 ) 
 { 
 u p r i m e . p u s h _ b a c k ( p r i m e [ j ] ) ; 
 w h i l e </space/> ( a </space/> % </space/> p r i m e [ j ] </space/> = = </space/> 0 ) 
 a </space/> / = </space/> p r i m e [ j ] ; 
 } 
 j + + ; 
 } 
 i f </space/> ( a </space/> > </space/> 1 ) 
 u p r i m e . p u s h _ b a c k ( a ) ; 
 i f </space/> ( u p r i m e . s i z e ( ) </space/> < </space/> 2 ) 
 { 
 a n s [ 0 ] [ i ] </space/> = </space/> - 1 ; 
 a n s [ 1 ] [ i ] </space/> = </space/> - 1 ; 
 } 
 e l s e </space/> i f </space/> ( u p r i m e . s i z e ( ) </space/> = = </space/> 2 ) 
 { 
 a n s [ 0 ] [ i ] </space/> = </space/> u p r i m e [ 0 ] ; 
 a n s [ 1 ] [ i ] </space/> = </space/> u p r i m e [ 1 ] ; 
 } 
 e l s e 
 { 
 a n s [ 0 ] [ i ] </space/> = </space/> u p r i m e [ 0 ] ; 
 a n s [ 1 ] [ i ] </space/> = </space/> u p r i m e [ 1 ] ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 2 ; </space/> k </space/> < </space/> u p r i m e . s i z e ( ) ; </space/> k + + ) 
 a n s [ 1 ] [ i ] </space/> * = </space/> u p r i m e [ k ] ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s [ 0 ] [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s [ 1 ] [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M A X _ N </space/> = </space/> 1 e 7 </space/> + </space/> 5 ; 
 b i t s e t < M A X _ N > </space/> n o t _ p r i m e ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 5 e 5 </space/> + </space/> 5 ; 
 i n t </space/> a n s w e r [ N ] [ 2 ] , </space/> x , </space/> n ; 
 v e c t o r < i n t > </space/> p r i m e s ; 
 
 v o i d </space/> c i u r ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> 1 e 7 ; </space/> i + + ) 
 i f </space/> ( ! n o t _ p r i m e [ i ] ) 
 { 
 p r i m e s . p u s h _ b a c k ( i ) ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> j </space/> = </space/> ( l o n g </space/> l o n g ) i </space/> * </space/> i ; </space/> j </space/> < = </space/> 1 e 7 ; </space/> j </space/> + = </space/> i ) 
 n o t _ p r i m e [ j ] </space/> = </space/> 1 ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ; 
 c i u r ( ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 
 i n t </space/> d 2 </space/> = </space/> 1 ; 
 i n t </space/> d 1 </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> d i v i </space/> : </space/> p r i m e s ) 
 { 
 i f </space/> ( x </space/> % </space/> d i v i </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( d 1 </space/> = = </space/> 0 ) 
 d 1 </space/> = </space/> d i v i ; 
 e l s e 
 d 2 </space/> * = </space/> d i v i ; 
 
 w h i l e </space/> ( x </space/> % </space/> d i v i </space/> = = </space/> 0 ) 
 x </space/> / = </space/> d i v i ; 
 } 
 i f </space/> ( ! n o t _ p r i m e [ x ] ) 
 { 
 d 2 </space/> * = </space/> x ; 
 b r e a k ; 
 } 
 } 
 
 i f </space/> ( d 1 </space/> = = </space/> d 2 </space/> | | </space/> d 2 </space/> = = </space/> 1 </space/> | | </space/> d 1 </space/> = = </space/> 0 ) 
 a n s w e r [ i ] [ 0 ] </space/> = </space/> a n s w e r [ i ] [ 1 ] </space/> = </space/> - 1 ; 
 e l s e 
 { 
 a n s w e r [ i ] [ 0 ] </space/> = </space/> d 1 ; 
 a n s w e r [ i ] [ 1 ] </space/> = </space/> d 2 ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s w e r [ i ] [ 0 ] </space/> < < </space/> "" </space/> "" ; 
 
 c o u t </space/> < < </space/> "" \ n "" ; 
 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> j + + ) 
 c o u t </space/> < < </space/> a n s w e r [ j ] [ 1 ] </space/> < < </space/> "" </space/> "" ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < b i t s e t > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 b i t s e t < 1 0 0 0 0 0 1 0 > </space/> b s ; 
 i n t </space/> n , </space/> a [ 5 0 0 0 1 0 ] , </space/> d [ 5 0 0 0 1 0 ] [ 2 ] , </space/> u s [ 1 0 0 0 0 0 1 0 ] , </space/> m ; 
 
 v o i d </space/> s i e v e ( i n t </space/> n ) 
 { 
 b s . s e t ( ) ; 
 b s [ 0 ] </space/> = </space/> b s [ 1 ] </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( b s [ i ] ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < = </space/> 1 0 0 0 0 0 0 0 ; </space/> j </space/> + = </space/> i ) 
 { 
 b s [ j ] </space/> = </space/> 0 ; 
 u s [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 s i e v e ( 3 1 6 2 ) ; 
 c i n </space/> > > </space/> n ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x </space/> = </space/> a [ i ] ; 
 i f </space/> ( ! b s [ x ] ) 
 { 
 i n t </space/> p </space/> = </space/> u s [ x ] ; 
 w h i l e </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 x </space/> / = </space/> p ; 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 d [ i ] [ 0 ] </space/> = </space/> d [ i ] [ 1 ] </space/> = </space/> - 1 ; 
 } 
 e l s e 
 d [ i ] [ 0 ] </space/> = </space/> p , </space/> d [ i ] [ 1 ] </space/> = </space/> x ; 
 } 
 e l s e 
 d [ i ] [ 0 ] </space/> = </space/> d [ i ] [ 1 ] </space/> = </space/> - 1 ; 
 } 
 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 ; </space/> j + + ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> d [ i ] [ j ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s o l v e ( ) ; 
 / / 	 s y s t e m ( "" p a u s e "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 5 ; 
 i n t </space/> s p r i m e [ N ] ; 
 b o o l </space/> m a r k [ N ] ; 
 
 v o i d </space/> s i e v e ( ) 
 { 
 i n t </space/> i , </space/> j ; 
 i n t </space/> n </space/> = </space/> N </space/> - </space/> 3 ; 
 s p r i m e [ 1 ] </space/> = </space/> 2 ; 
 
 f o r </space/> ( i </space/> = </space/> 2 ; </space/> i </space/> < </space/> n ; </space/> i </space/> + = </space/> 2 ) 
 s p r i m e [ i ] </space/> = </space/> 2 ; 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( ! m a r k [ i ] ) 
 { 
 f o r </space/> ( j </space/> = </space/> i ; </space/> j </space/> < </space/> n ; </space/> j </space/> + = </space/> 2 </space/> * </space/> i ) 
 { 
 m a r k [ j ] </space/> = </space/> t r u e ; 
 i f </space/> ( s p r i m e [ j ] </space/> = = </space/> 0 ) 
 s p r i m e [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s i e v e ( ) ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r [ n ] [ 2 ] , </space/> i , </space/> j , </space/> a , </space/> d 1 ; 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a ; 
 d 1 </space/> = </space/> 1 ; 
 i n t </space/> s d i v </space/> = </space/> s p r i m e [ a ] ; 
 w h i l e </space/> ( a </space/> % </space/> s d i v </space/> = = </space/> 0 ) 
 { 
 a </space/> / = </space/> s d i v ; 
 d 1 </space/> * = </space/> s d i v ; 
 } 
 i f </space/> ( a </space/> = = </space/> 1 ) 
 { 
 a r [ i ] [ 0 ] </space/> = </space/> - 1 ; 
 a r [ i ] [ 1 ] </space/> = </space/> - 1 ; 
 } 
 e l s e 
 { 
 a r [ i ] [ 0 ] </space/> = </space/> d 1 ; 
 a r [ i ] [ 1 ] </space/> = </space/> a ; 
 } 
 } 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 ; </space/> i + + ) 
 { 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 c o u t </space/> < < </space/> a r [ j ] [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 } 
 v e c t o r < i n t > </space/> a ( 1 e 7 </space/> + </space/> 1 , </space/> 0 ) ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> v ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> 1 e 7 ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> ! = </space/> 0 ) 
 { 
 c o n t i n u e ; 
 } 
 i n t </space/> j </space/> = </space/> 1 ; 
 w h i l e </space/> ( i </space/> * </space/> j </space/> < = </space/> 1 e 7 ) 
 { 
 i f </space/> ( a [ i </space/> * </space/> j ] </space/> ! = </space/> 0 ) 
 { 
 j + + ; 
 c o n t i n u e ; 
 } 
 a [ i </space/> * </space/> j ] </space/> = </space/> i ; 
 j + + ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> p 1 </space/> = </space/> 1 , </space/> p 2 </space/> = </space/> a [ a r r [ i ] ] ; 
 w h i l e </space/> ( a r r [ i ] </space/> ! = </space/> 1 ) 
 { 
 i n t </space/> v a l </space/> = </space/> a [ a r r [ i ] ] ; 
 w h i l e </space/> ( a r r [ i ] </space/> % </space/> v a l </space/> = = </space/> 0 ) 
 { 
 a r r [ i ] </space/> = </space/> a r r [ i ] </space/> / </space/> v a l ; 
 } 
 p 1 </space/> = </space/> p 1 </space/> * </space/> v a l ; 
 } 
 i f </space/> ( p 1 </space/> ! = </space/> p 2 </space/> & & </space/> p 1 </space/> ! = </space/> p 1 </space/> / </space/> p 2 ) 
 { 
 v . p u s h _ b a c k ( m a k e _ p a i r ( p 1 </space/> / </space/> p 2 , </space/> p 2 ) ) ; 
 } 
 e l s e 
 { 
 v . p u s h _ b a c k ( m a k e _ p a i r ( - 1 , </space/> - 1 ) ) ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> v [ i ] . f i r s t </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> v [ i ] . s e c o n d </space/> < < </space/> "" </space/> "" ; 
 } 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> N N </space/> 5 0 0 1 0 0 
 # d e f i n e </space/> M M </space/> 1 0 0 0 1 0 0 0 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> I N T </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> p i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 
 i n t </space/> a [ N N ] , </space/> f l a g [ M M ] ; 
 i n t </space/> a n s [ N N ] [ 2 ] ; 
 
 v o i d </space/> p r e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> M M ; </space/> i + + ) 
 { 
 i f </space/> ( f l a g [ i ] ) 
 c o n t i n u e ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i ; </space/> j </space/> < </space/> M M ; </space/> j </space/> + = </space/> i ) 
 f l a g [ j ] </space/> = </space/> i ; 
 } 
 } 
 
 p i i </space/> c a l c ( i n t </space/> x ) 
 { 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 r e t u r n </space/> p i i ( - 1 , </space/> - 1 ) ; 
 i f </space/> ( f l a g [ x ] </space/> = = </space/> x ) 
 r e t u r n </space/> p i i ( - 1 , </space/> - 1 ) ; 
 i n t </space/> p </space/> = </space/> f l a g [ x ] , </space/> t </space/> = </space/> 1 ; 
 w h i l e </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 t </space/> * = </space/> p , </space/> x </space/> / = </space/> p ; 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 r e t u r n </space/> p i i ( - 1 , </space/> - 1 ) ; 
 r e t u r n </space/> p i i ( t , </space/> x ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t . o u t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 p r e ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 a u t o </space/> p </space/> = </space/> c a l c ( a [ i ] ) ; 
 a n s [ i ] [ 0 ] </space/> = </space/> p . f i r s t ; 
 a n s [ i ] [ 1 ] </space/> = </space/> p . s e c o n d ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % d </space/> "" , </space/> a n s [ i ] [ 0 ] ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % d </space/> "" , </space/> a n s [ i ] [ 1 ] ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 c o n s t </space/> d o u b l e </space/> e p s </space/> = </space/> 1 e - 8 ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 2 0 0 0 0 0 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> M A X A </space/> = </space/> 1 e 7 ; 
 
 i n t </space/> a [ m a x n ] ; 
 v e c t o r < i n t > </space/> p r i m e s ; 
 i n t </space/> m i n d [ M A X A </space/> + </space/> 5 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> M A X A ; </space/> i + + ) 
 { 
 i f </space/> ( m i n d [ i ] </space/> = = </space/> 0 ) 
 { 
 p r i m e s . e m p l a c e _ b a c k ( i ) ; 
 m i n d [ i ] </space/> = </space/> i ; 
 } 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> p r i m e s ) 
 { 
 i f </space/> ( x </space/> > </space/> m i n d [ i ] </space/> | | </space/> x </space/> > </space/> M A X A </space/> / </space/> i ) 
 { 
 b r e a k ; 
 } 
 m i n d [ i </space/> * </space/> x ] </space/> = </space/> x ; 
 } 
 } 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> v e c 1 ; 
 v e c t o r < i n t > </space/> v e c 2 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> a </space/> = </space/> 1 ; 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i n t </space/> s </space/> = </space/> m i n d [ x ] ; 
 / / </space/> c o u t </space/> < < </space/> m i n d [ x ] </space/> < < </space/> e n d l ; 
 w h i l e </space/> ( x </space/> % </space/> s </space/> = = </space/> 0 ) 
 { 
 a </space/> * = </space/> s ; 
 x </space/> / = </space/> s ; 
 } 
 / / </space/> c o u t </space/> < < </space/> a </space/> < < </space/> "" </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 v e c 1 . e m p l a c e _ b a c k ( - 1 ) ; 
 v e c 2 . e m p l a c e _ b a c k ( - 1 ) ; 
 } 
 e l s e 
 { 
 v e c 1 . e m p l a c e _ b a c k ( a ) ; 
 v e c 2 . e m p l a c e _ b a c k ( x ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> v e c 1 ) 
 { 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> v e c 2 ) 
 { 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v e c t o r < i n t > </space/> p r i m e s ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> * </space/> i </space/> < = </space/> 1 0 0 0 0 0 0 0 ; </space/> i + + ) 
 { 
 b o o l </space/> g o o d </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> p r i m e </space/> : </space/> p r i m e s ) 
 { 
 i f </space/> ( i </space/> % </space/> p r i m e </space/> = = </space/> 0 ) 
 { 
 g o o d </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( g o o d ) 
 p r i m e s . p u s h _ b a c k ( i ) ; 
 } 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l o n g </space/> l o n g </space/> i n t > </space/> a ( n ) , </space/> b ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n u m ; 
 c i n </space/> > > </space/> n u m ; 
 l o n g </space/> l o n g </space/> i n t </space/> d 1 </space/> = </space/> 1 , </space/> d 2 </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> p r i m e s . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( n u m </space/> % </space/> p r i m e s [ j ] </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( d 1 </space/> = = </space/> 1 ) 
 d 1 </space/> * = </space/> p r i m e s [ j ] ; 
 e l s e 
 d 2 </space/> * = </space/> p r i m e s [ j ] ; 
 
 w h i l e </space/> ( n u m </space/> % </space/> p r i m e s [ j ] </space/> = = </space/> 0 ) 
 n u m </space/> / = </space/> p r i m e s [ j ] ; 
 } 
 } 
 i f </space/> ( n u m </space/> > </space/> 1 ) 
 d 2 </space/> * = </space/> n u m ; 
 i f </space/> ( d 1 </space/> = = </space/> 1 </space/> | | </space/> d 2 </space/> = = </space/> 1 ) 
 { 
 a [ i ] </space/> = </space/> - 1 ; 
 b [ i ] </space/> = </space/> - 1 ; 
 } 
 e l s e 
 { 
 a [ i ] </space/> = </space/> d 1 ; 
 b [ i ] </space/> = </space/> d 2 ; 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> b ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> i d x </space/> = </space/> 0 , </space/> l </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ s e t < i n t > </space/> s 1 ; 
 i n t </space/> t [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> x ; 
 s 1 . i n s e r t ( x ) ; 
 i f </space/> ( l </space/> ! = </space/> s 1 . s i z e ( ) ) 
 { 
 l + + ; 
 t [ i d x + + ] </space/> = </space/> x ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> i d x ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> t [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> i ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> v ( 2 </space/> * </space/> n ) , </space/> v e c ; 
 s e t < i n t > </space/> s ; 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> v [ i ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s . f i n d ( v [ i ] ) </space/> = = </space/> s . e n d ( ) ) 
 { 
 s . i n s e r t ( v [ i ] ) ; 
 v e c . p u s h _ b a c k ( v [ i ] ) ; 
 } 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> v e c [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 9 
 # d e f i n e </space/> l p ( i , </space/> n ) </space/> f o r </space/> ( s i z e _ t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> c h a r </space/> n l </space/> = </space/> ' \ n ' ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> p ( 2 </space/> * </space/> n ) ; 
 l p ( i , </space/> 2 </space/> * </space/> n ) 
 { 
 c i n </space/> > > </space/> p [ i ] ; 
 } 
 s e t < i n t > </space/> v i s ; 
 v e c t o r < i n t > </space/> r e s ; 
 l p ( i , </space/> 2 </space/> * </space/> n ) 
 { 
 i f </space/> ( ! v i s . c o u n t ( p [ i ] ) ) 
 { 
 r e s . p u s h _ b a c k ( p [ i ] ) ; 
 v i s . i n s e r t ( p [ i ] ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> e l </space/> : </space/> r e s ) 
 { 
 c o u t </space/> < < </space/> e l </space/> < < </space/> ' </space/> ' ; 
 } 
 c o u t </space/> < < </space/> n l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m o d </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ 2 </space/> * </space/> n ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 
 i n t </space/> v i s [ n </space/> + </space/> 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( v i s [ a [ i ] ] </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; 
 v i s [ a [ i ] ] </space/> = </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 s e t < i n t > </space/> s ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( s . f i n d ( x ) </space/> = = </space/> s . e n d ( ) ) 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 s . i n s e r t ( x ) ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < n u m e r i c > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 v e c t o r < i n t > </space/> v ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r ; 
 i n t </space/> f r e q [ n </space/> + </space/> 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> a r r ; 
 i f </space/> ( f r e q [ a r r ] </space/> = = </space/> 0 ) 
 { 
 f r e q [ a r r ] + + ; 
 v . p u s h _ b a c k ( a r r ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> v ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( i n t </space/> a r g c , </space/> c h a r </space/> c o n s t * </space/> a r g v [ ] ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - </space/> > </space/> 0 ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * * 
 a u t h o r : </space/> B i j o y </space/> S i n g h </space/> R a j p u t 
 "" </space/> N a m </space/> T h o </space/> S u n a h i </space/> H o g a </space/> "" 
 * * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> k ; 
 m a p < i n t , </space/> i n t > </space/> m p ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> k ; 
 i f </space/> ( m p [ k ] ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> k </space/> < < </space/> "" </space/> "" ; 
 m p [ k ] </space/> = </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n , </space/> x , </space/> y , </space/> z ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ s e t < i n t > </space/> a ; 
 v e c t o r < i n t > </space/> a n s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( a . f i n d ( x ) </space/> = = </space/> a . e n d ( ) ) 
 a n s . p u s h _ b a c k ( x ) ; 
 a . i n s e r t ( x ) ; 
 } 
 / / </space/> r e v e r s e ( a n s . b e g i n ( ) , a n s . e n d ( ) ) ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" e . i n "" , "" r "" , </space/> s t d i n ) ; 
 l l </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 / / </space/> c o u t < < "" C a s e </space/> "" < < i < < "" : </space/> "" ; 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> E x a m p l e 
 / / </space/> i n p u t C o p y 
 / / </space/> 5 
 / / </space/> 2 
 / / </space/> 1 </space/> 1 </space/> 2 </space/> 2 
 / / </space/> 4 
 / / </space/> 1 </space/> 3 </space/> 1 </space/> 4 </space/> 3 </space/> 4 </space/> 2 </space/> 2 
 / / </space/> 5 
 / / </space/> 1 </space/> 2 </space/> 1 </space/> 2 </space/> 3 </space/> 4 </space/> 3 </space/> 5 </space/> 4 </space/> 5 
 / / </space/> 3 
 / / </space/> 1 </space/> 2 </space/> 3 </space/> 1 </space/> 2 </space/> 3 
 / / </space/> 4 
 / / </space/> 2 </space/> 3 </space/> 2 </space/> 4 </space/> 1 </space/> 3 </space/> 4 </space/> 1 
 / / </space/> o u t p u t C o p y 
 / / </space/> 1 </space/> 2 
 / / </space/> 1 </space/> 3 </space/> 4 </space/> 2 
 / / </space/> 1 </space/> 2 </space/> 3 </space/> 4 </space/> 5 
 / / </space/> 1 </space/> 2 </space/> 3 
 / / </space/> 2 </space/> 3 </space/> 4 </space/> 1 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i l l </space/> i n t </space/> l o n g </space/> l o n g 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> y o u r </space/> c o d e </space/> g o e s </space/> h e r e 
 i l l </space/> t , </space/> i ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 i l l </space/> n u m ; 
 c i n </space/> > > </space/> n u m ; 
 m a p < i l l , </space/> i l l > </space/> m ; 
 i l l </space/> t 1 , </space/> j ; 
 
 f o r </space/> ( j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> ( 2 </space/> * </space/> n u m ) ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> t 1 ; 
 i f </space/> ( m [ t 1 ] </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> t 1 </space/> < < </space/> "" </space/> "" ; 
 m [ t 1 ] + + ; 
 } 
 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> p r i n t D i s t i n c t ( i n t </space/> a r r [ ] , </space/> i n t </space/> n ) 
 { 
 / / </space/> P i c k </space/> a l l </space/> e l e m e n t s </space/> o n e </space/> b y </space/> o n e 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 / / </space/> C h e c k </space/> i f </space/> t h e </space/> p i c k e d </space/> e l e m e n t </space/> i s </space/> a l r e a d y </space/> p r i n t e d 
 i n t </space/> j ; 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> i ; </space/> j + + ) 
 i f </space/> ( a r r [ i ] </space/> = = </space/> a r r [ j ] ) 
 b r e a k ; 
 
 / / </space/> I f </space/> n o t </space/> p r i n t e d </space/> e a r l i e r , </space/> t h e n </space/> p r i n t </space/> i t 
 i f </space/> ( i </space/> = = </space/> j ) 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ n </space/> * </space/> 2 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 } 
 p r i n t D i s t i n c t ( a r r , </space/> n </space/> * </space/> 2 ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> x ; 
 i n t </space/> a r r [ n </space/> * </space/> 2 ] </space/> = </space/> { } ; 
 i n t </space/> c o u n </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 i n t </space/> f l a g </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> i ; </space/> j + + ) 
 { 
 i f </space/> ( x </space/> = = </space/> a r r [ j ] ) 
 { 
 f l a g </space/> = </space/> 1 ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( f l a g </space/> = = </space/> 0 ) 
 { 
 a r r [ c o u n ] </space/> = </space/> x ; 
 c o u n + + ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> c o u n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
 / * </space/> s t u f f </space/> y o u </space/> s h o u l d </space/> l o o k </space/> f o r 
 * </space/> i n t </space/> o v e r f l o w , </space/> a r r a y </space/> b o u n d s 
 * </space/> s p e c i a l </space/> c a s e s </space/> ( n = 1 ? ) 
 * </space/> d o </space/> s m t h </space/> i n s t e a d </space/> o f </space/> n o t h i n g </space/> a n d </space/> s t a y </space/> o r g a n i z e d 
 * </space/> W R I T E </space/> S T U F F </space/> D O W N 
 * </space/> D O N ' T </space/> G E T </space/> S T U C K </space/> O N </space/> O N E </space/> A P P R O A C H 
 * / 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 m a i n ( ) 
 { 
 i n t </space/> t t ; 
 c i n </space/> > > </space/> t t ; 
 w h i l e </space/> ( t t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> v ( n </space/> * </space/> 2 ) , </space/> a n s ; 
 f o r </space/> ( i n t & </space/> x </space/> : </space/> v ) 
 c i n </space/> > > </space/> x ; 
 a n s . p u s h _ b a c k ( v [ 0 ] ) ; 
 f o r </space/> ( s i z e _ t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 b o o l </space/> e x i s t </space/> = </space/> t r u e ; 
 f o r </space/> ( s i z e _ t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> a n s . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( v [ i ] </space/> = = </space/> a n s [ j ] ) 
 { 
 e x i s t </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( e x i s t ) 
 a n s . p u s h _ b a c k ( v [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 
 i n t </space/> t , </space/> n , </space/> i , </space/> j ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r [ n </space/> * </space/> 2 ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r [ i ] ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 f o r </space/> ( j </space/> = </space/> i </space/> + </space/> 1 ; </space/> j </space/> < </space/> n </space/> * </space/> 2 ; </space/> j + + ) 
 { 
 i f </space/> ( a r [ i ] </space/> = = </space/> a r [ j ] ) 
 { 
 c o u t </space/> < < </space/> a r [ i ] </space/> < < </space/> "" </space/> "" ; 
 b r e a k ; 
 } 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ 2 </space/> * </space/> n </space/> + </space/> 1 ] , </space/> f l a g [ 2 </space/> * </space/> n </space/> + </space/> 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a r r [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( f l a g [ a r r [ i ] ] </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; 
 f l a g [ a r r [ i ] ] </space/> = </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < c m a t h > 
 / / 
 # i n c l u d e </space/> < c s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 m a p < i n t , </space/> i n t > </space/> m p ; 
 s t r i n g </space/> s t r ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 m p . c l e a r ( ) ; 
 s t r i n g </space/> s t r T e m p </space/> = </space/> "" "" ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n </space/> * </space/> 2 ; </space/> j + + ) 
 { 
 i n t </space/> t e m p ; 
 c i n </space/> > > </space/> t e m p ; 
 i f </space/> ( ! m p . c o u n t ( t e m p ) ) 
 { 
 m p [ t e m p ] + + ; 
 s t r T e m p </space/> + = </space/> t o _ s t r i n g ( t e m p ) </space/> + </space/> ' </space/> ' ; 
 } 
 } 
 s t r </space/> + = </space/> s t r T e m p </space/> + </space/> ' \ n ' ; 
 } 
 c o u t </space/> < < </space/> s t r ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 b o o l </space/> v i s i t e d A r r a y [ 5 5 ] </space/> = </space/> { </space/> f a l s e </space/> } ; 
 i n t </space/> i n p u t [ 1 1 0 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> i n p u t [ i ] ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( v i s i t e d A r r a y [ i n p u t [ i ] ] </space/> = = </space/> f a l s e ) 
 { 
 c o u t </space/> < < </space/> i n p u t [ i ] </space/> < < </space/> "" </space/> "" ; 
 v i s i t e d A r r a y [ i n p u t [ i ] ] </space/> = </space/> t r u e ; 
 } 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> x </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 a [ x </space/> - </space/> 1 ] + + ; 
 i f </space/> ( a [ x </space/> - </space/> 1 ] </space/> > </space/> 1 ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> _ i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ 1 0 5 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> c o u n t i n g [ 1 0 5 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c o u n t i n g [ a [ i ] ] + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( c o u n t i n g [ a [ i ] ] </space/> = = </space/> 2 ) 
 { 
 c o u n t i n g [ a [ i ] ] - - ; 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 _ i o ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t t ; 
 c i n </space/> > > </space/> t t ; 
 w h i l e </space/> ( t t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ 2 </space/> * </space/> n ] , </space/> b [ 2 </space/> * </space/> n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 </space/> * </space/> n ; </space/> j + + ) 
 { 
 b [ j ] </space/> = </space/> 0 ; 
 } 
 i n t </space/> x </space/> = </space/> 0 , </space/> f l a g </space/> = </space/> 0 , </space/> t e m p ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 </space/> * </space/> n ; </space/> j + + ) 
 { 
 i f </space/> ( b [ j ] </space/> = = </space/> a [ i ] ) 
 { 
 f l a g </space/> = </space/> 1 ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( f l a g </space/> = = </space/> 0 ) 
 { 
 t e m p </space/> = </space/> a [ i ] ; 
 a [ i ] </space/> = </space/> b [ x ] ; 
 b [ x ] </space/> = </space/> t e m p ; 
 x + + ; 
 } 
 f l a g </space/> = </space/> 0 ; 
 } 
 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> x ; </space/> j + + ) 
 { 
 c o u t </space/> < < </space/> b [ j ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> t , </space/> n , </space/> x ; 
 b i t s e t < 5 5 > </space/> f ; 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( ! f [ x ] ) 
 { 
 c o u t </space/> < < </space/> x </space/> < < </space/> ' </space/> ' ; 
 f [ x ] </space/> = </space/> 1 ; 
 } 
 } 
 f . r e s e t ( ) ; 
 c o u t </space/> < < </space/> ' \ n ' ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ s e t < i n t > </space/> s ; 
 i n t </space/> a ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> + </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a ; 
 i f </space/> ( s . f i n d ( a ) </space/> = = </space/> s . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> a </space/> < < </space/> "" </space/> "" ; 
 s . i n s e r t ( a ) ; 
 } 
 e l s e 
 c o n t i n u e ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 u n o r d e r e d _ s e t < i n t > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> t e m p ; 
 c i n </space/> > > </space/> t e m p ; 
 
 i f </space/> ( s . c o u n t ( t e m p ) </space/> = = </space/> 0 ) 
 { 
 s . i n s e r t ( t e m p ) ; 
 c o u t </space/> < < </space/> t e m p </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < v e c t o r > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> n u m b e r ; 
 v e c t o r < i n t > </space/> v ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 v . c l e a r ( ) ; 
 b o o l </space/> s e e n [ 5 1 ] </space/> = </space/> { </space/> f a l s e </space/> } ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> l l </space/> = </space/> 2 </space/> * </space/> n ; 
 w h i l e </space/> ( l l - - ) 
 { 
 c i n </space/> > > </space/> n u m b e r ; 
 i f </space/> ( ! s e e n [ n u m b e r ] ) 
 { 
 s e e n [ n u m b e r ] </space/> = </space/> t r u e ; 
 / * </space/> c o u t </space/> < < </space/> n u m b e r </space/> < < </space/> "" </space/> "" ; </space/> * / 
 v . p u s h _ b a c k ( n u m b e r ) ; 
 } 
 } 
 / * </space/> c o u t </space/> < < </space/> "" P r i n t i n g </space/> a n s w e r </space/> "" </space/> < < </space/> e n d l ; </space/> * / 
 / / </space/> p r i n t </space/> a n s w e r 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> v [ i ] ; 
 i f </space/> ( i </space/> < </space/> v . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> ' </space/> ' ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < i n t > </space/> a ( 2 </space/> * </space/> n ) ; 
 s e t < i n t > </space/> s ; 
 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n </space/> = </space/> s . s i z e ( ) ; 
 c i n </space/> > > </space/> a [ i ] ; 
 s . i n s e r t ( a [ i ] ) ; 
 
 i f </space/> ( s . s i z e ( ) </space/> > </space/> n ) 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < m a t h . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> q u e [ 2 </space/> * </space/> n ] ; 
 i n t </space/> a r r [ n ] ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 a r r [ j ] </space/> = </space/> 0 ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 </space/> * </space/> n ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> q u e [ j ] ; 
 i f </space/> ( a r r [ q u e [ j ] </space/> - </space/> 1 ] </space/> = = </space/> 0 ) 
 { 
 a r r [ q u e [ j ] </space/> - </space/> 1 ] + + ; 
 c o u t </space/> < < </space/> q u e [ j ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / / # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 1 ; </space/> k </space/> < = </space/> t ; </space/> k + + ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ 2 </space/> * </space/> n </space/> + </space/> 1 ] , </space/> a r r 1 [ n </space/> + </space/> 1 ] , </space/> a r r 2 [ n </space/> + </space/> 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a r r [ i ] ; 
 i n t </space/> n u m </space/> = </space/> 0 , </space/> j </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 n u m </space/> = </space/> a r r [ i ] ; 
 i f </space/> ( a r r 2 [ n u m ] </space/> ! = </space/> 1 ) 
 a r r 2 [ n u m ] </space/> = </space/> 1 ; 
 e l s e </space/> i f </space/> ( a r r 2 [ n u m ] </space/> = = </space/> 1 ) 
 { 
 a r r 1 [ j ] </space/> = </space/> n u m ; 
 j + + ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a r r 1 [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> a , </space/> b , </space/> c , </space/> d </space/> = </space/> 0 , </space/> e , </space/> f , </space/> x , </space/> y , </space/> z , </space/> w ; 
 v e c t o r < l o n g </space/> l o n g > </space/> v , </space/> s ; 
 c i n </space/> > > </space/> a ; 
 f o r </space/> ( i n t </space/> g </space/> = </space/> 0 ; </space/> g </space/> < </space/> a ; </space/> g + + ) 
 { 
 c i n </space/> > > </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> b ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> c ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> v . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( c </space/> = = </space/> v [ j ] ) 
 { 
 d + + ; 
 } 
 } 
 i f </space/> ( d </space/> = = </space/> 0 ) 
 { 
 v . p u s h _ b a c k ( c ) ; 
 } 
 d </space/> = </space/> 0 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> v [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 v . c l e a r ( ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> r e s t o r i n g ( v e c t o r < i n t > </space/> p e r m u t a t i o n , </space/> i n t </space/> n ) 
 { 
 v e c t o r < b o o l > </space/> f o u n d ( n , </space/> f a l s e ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> p e r m u t a t i o n . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( ! f o u n d [ p e r m u t a t i o n [ i ] </space/> - </space/> 1 ] ) 
 { 
 f o u n d [ p e r m u t a t i o n [ i ] </space/> - </space/> 1 ] </space/> = </space/> t r u e ; 
 c o u t </space/> < < </space/> p e r m u t a t i o n [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> p e r m u t a t i o n ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n </space/> * </space/> 2 ; </space/> j + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 p e r m u t a t i o n . p u s h _ b a c k ( x ) ; 
 } 
 r e s t o r i n g ( p e r m u t a t i o n , </space/> n ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i n t </space/> n ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ 2 </space/> * </space/> n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> i ; </space/> j + + ) 
 { 
 i f </space/> ( a r r [ j ] </space/> = = </space/> a r r [ i ] ) 
 { 
 a r r [ i ] </space/> = </space/> 0 ; 
 } 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a r r [ i ] </space/> ! = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> I s _ r e p e a t ( i n t </space/> a [ ] , </space/> i n t </space/> e n d ) 
 { 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 0 ; </space/> k </space/> < </space/> e n d ; </space/> k + + ) 
 { 
 i f </space/> ( a [ k ] </space/> = = </space/> a [ e n d ] ) 
 { 
 r e t u r n </space/> 1 ; 
 b r e a k ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> n , </space/> i ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> d </space/> = </space/> 2 </space/> * </space/> n ; 
 i n t </space/> a [ d ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 
 i n t </space/> b [ n ] ; 
 i n t </space/> j </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> c </space/> = </space/> I s _ r e p e a t ( a , </space/> i ) ; 
 i f </space/> ( c </space/> = = </space/> 0 ) 
 { 
 b [ j + + ] </space/> = </space/> a [ i ] ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> l </space/> = </space/> 0 ; </space/> l </space/> < </space/> n ; </space/> l + + ) 
 { 
 c o u t </space/> < < </space/> b [ l ] </space/> < < </space/> "" </space/> "" ; 
 } 
 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> d b ( a ) </space/> c o u t </space/> < < </space/> # a </space/> < < </space/> "" = "" </space/> < < </space/> ( a ) </space/> < < </space/> ' \ n ' ; 
 # d e f i n e </space/> D B ( a ) </space/> \ 
 { </space/> \ 
 c o u t </space/> < < </space/> # a </space/> < < </space/> "" </space/> "" ; </space/> \ 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a ) </space/> \ 
 c o u t </space/> < < </space/> x </space/> < < </space/> ' </space/> ' ; </space/> \ 
 c o u t </space/> < < </space/> ' \ n ' ; </space/> \ 
 } 
 # d e f i n e </space/> D B B ( a ) </space/> \ 
 { </space/> \ 
 c o u t </space/> < < </space/> # a </space/> < < </space/> "" </space/> "" ; </space/> \ 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a ) </space/> \ 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> ' </space/> ' </space/> < < </space/> x . s e c o n d </space/> < < </space/> "" </space/> "" ; </space/> \ 
 c o u t </space/> < < </space/> ' \ n ' ; </space/> \ 
 } 
 # d e f i n e </space/> b b </space/> b e g i n ( ) 
 # d e f i n e </space/> e e </space/> e n d ( ) 
 # d e f i n e </space/> s s </space/> s i z e ( ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> t e </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> a ; 
 c i n </space/> > > </space/> a ; 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' b ' ; </space/> c - - ) 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a . s s ; </space/> i + + ) 
 i f </space/> ( a [ i ] </space/> = = </space/> c </space/> & & </space/> ( i </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> a [ i </space/> - </space/> 1 ] </space/> = = </space/> c </space/> - </space/> 1 </space/> | | </space/> i </space/> < </space/> a . s s </space/> - </space/> 1 </space/> & & </space/> a [ i </space/> + </space/> 1 ] </space/> = = </space/> c </space/> - </space/> 1 ) ) 
 { 
 a . e r a s e ( a . b b </space/> + </space/> i ) ; 
 i </space/> = </space/> - 1 ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> a . s s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> d e b u g ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> i s </space/> "" </space/> < < </space/> x </space/> < < </space/> ' \ n ' ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 5 e 2 </space/> + </space/> 2 ; 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( 3 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 v e c t o r < i n t > </space/> a ; 
 f o r </space/> ( a u t o & </space/> x </space/> : </space/> s ) 
 { 
 a . p u s h _ b a c k ( x </space/> - </space/> ' a ' ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 5 0 ; </space/> i </space/> > = </space/> 0 ; </space/> - - i ) 
 { 
 v e c t o r < i n t > </space/> b ; 
 f o r </space/> ( a u t o & </space/> x </space/> : </space/> a ) 
 { 
 i f </space/> ( ! b . e m p t y ( ) </space/> a n d </space/> b . b a c k ( ) </space/> = = </space/> x </space/> - </space/> 1 </space/> a n d </space/> b . b a c k ( ) </space/> = = </space/> i </space/> / </space/> 2 ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 b . p u s h _ b a c k ( x ) ; 
 } 
 } 
 a </space/> = </space/> b ; 
 r e v e r s e ( a . b e g i n ( ) , </space/> a . e n d ( ) ) ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> a . s i z e ( ) </space/> < < </space/> ' \ n ' ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 m a p < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > </space/> a ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 l o n g </space/> l o n g </space/> n , </space/> i , </space/> b , </space/> a n s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> a l p h a b e t </space/> = </space/> "" a b c d e f g h i j k l m n o p q r s t u v w x y z "" ; 
 c h a r </space/> c ; 
 c i n </space/> > > </space/> s ; 
 f o r </space/> ( c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' b ' ; </space/> c - - ) 
 { 
 i </space/> = </space/> 0 ; 
 w h i l e </space/> ( i </space/> < </space/> s . s i z e ( ) ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> c ) 
 i + + ; 
 e l s e 
 { 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( s [ i </space/> + </space/> 1 ] </space/> = = </space/> a l p h a b e t [ c </space/> - </space/> ' a ' </space/> - </space/> 1 ] ) 
 { 
 / / </space/> c o u t </space/> < < </space/> s [ i ] </space/> < < </space/> e n d l ; 
 s . e r a s e ( i , </space/> 1 ) ; 
 a n s + + ; 
 } 
 e l s e 
 i + + ; 
 } 
 e l s e 
 { 
 i f </space/> ( i </space/> = = </space/> s . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> = = </space/> a l p h a b e t [ c </space/> - </space/> ' a ' </space/> - </space/> 1 ] ) 
 { 
 / / </space/> c o u t </space/> < < </space/> s [ i ] </space/> < < </space/> e n d l ; 
 s . e r a s e ( i , </space/> 1 ) ; 
 a n s + + ; 
 
 i - - ; 
 } 
 e l s e 
 i + + ; 
 } 
 e l s e 
 { 
 / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> e n d l ; 
 i f </space/> ( s [ i </space/> + </space/> 1 ] </space/> = = </space/> a l p h a b e t [ c </space/> - </space/> ' a ' </space/> - </space/> 1 ] ) 
 { 
 / / </space/> c o u t </space/> < < </space/> s [ i ] </space/> < < </space/> e n d l ; 
 s . e r a s e ( i , </space/> 1 ) ; 
 a n s + + ; 
 
 i - - ; 
 } 
 e l s e 
 { 
 i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> = = </space/> a l p h a b e t [ c </space/> - </space/> ' a ' </space/> - </space/> 1 ] ) 
 { 
 / / </space/> c o u t </space/> < < </space/> s [ i ] </space/> < < </space/> e n d l ; 
 s . e r a s e ( i , </space/> 1 ) ; 
 a n s + + ; 
 
 i - - ; 
 } 
 e l s e 
 { 
 i + + ; 
 } 
 } 
 } 
 } 
 } 
 / / </space/> c o u t </space/> < < </space/> s </space/> < < </space/> e n d l ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 4 </space/> * </space/> 1 e 5 </space/> + </space/> 7 ; 
 l o n g </space/> l o n g </space/> c n t [ 2 </space/> * </space/> M A X N ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 b o o l </space/> o k </space/> = </space/> t r u e ; 
 w h i l e </space/> ( o k ) 
 { 
 o k </space/> = </space/> f a l s e ; 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' a ' ; </space/> c - - ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> c ) 
 { 
 
 i f </space/> ( ( i </space/> ! = </space/> 0 </space/> & & </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> c </space/> - </space/> 1 ) 
 | | </space/> ( i </space/> + </space/> 1 </space/> < </space/> ( i n t ) s . s i z e ( ) </space/> & & </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> c </space/> - </space/> 1 ) ) 
 { 
 a n s + + ; 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> i ) ; 
 o k </space/> = </space/> t r u e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( o k ) 
 b r e a k ; 
 } 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> </space/> </space/> . c p p </space/> : </space/> </space/> </space/> </space/> </space/> "" m a i n "" . </space/> </space/> </space/> 
 / / </space/> </space/> </space/> . 
 / / 
 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t r i n g > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 w h i l e </space/> ( t r u e ) 
 { 
 i n t </space/> b e s t </space/> = </space/> - 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( ( ( i </space/> > </space/> 0 </space/> & & </space/> s [ i </space/> - </space/> 1 ] </space/> + </space/> 1 </space/> = = </space/> s [ i ] ) </space/> | | </space/> ( i </space/> + </space/> 1 </space/> < </space/> s . s i z e ( ) </space/> & & </space/> s [ i </space/> + </space/> 1 ] </space/> + </space/> 1 </space/> = = </space/> s [ i ] ) ) 
 & & </space/> ( b e s t </space/> = = </space/> - 1 </space/> | | </space/> s [ b e s t ] </space/> < </space/> s [ i ] ) ) 
 b e s t </space/> = </space/> i ; 
 } 
 i f </space/> ( b e s t </space/> = = </space/> - 1 ) 
 b r e a k ; 
 s t r i n g </space/> s _ </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> = = </space/> b e s t ) 
 c o n t i n u e ; 
 s _ </space/> + = </space/> s [ i ] ; 
 } 
 s </space/> = </space/> s _ ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) ; 
 } 
 
 / / </space/> </space/> : </space/> C T R L + F 5 </space/> </space/> </space/> "" "" </space/> > </space/> "" </space/> </space/> "" 
 / / </space/> </space/> : </space/> F 5 </space/> </space/> </space/> "" "" </space/> > </space/> "" </space/> "" 
 
 / / </space/> </space/> </space/> </space/> 
 / / </space/> 1 . </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> . 
 / / </space/> 2 . </space/> </space/> </space/> T e a m </space/> E x p l o r e r </space/> </space/> </space/> </space/> </space/> </space/> . 
 / / </space/> 3 . </space/> </space/> </space/> "" </space/> "" </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> . 
 / / </space/> 4 . </space/> </space/> </space/> "" </space/> "" </space/> </space/> </space/> . 
 / / </space/> 5 . </space/> </space/> </space/> </space/> </space/> "" "" </space/> > </space/> "" </space/> </space/> "" , </space/> </space/> 
 / / </space/> </space/> , </space/> </space/> "" "" </space/> > </space/> "" </space/> </space/> "" , </space/> </space/> </space/> </space/> 
 / / </space/> </space/> </space/> . 
 / / </space/> 6 . </space/> </space/> </space/> </space/> </space/> </space/> , </space/> </space/> </space/> </space/> "" "" </space/> > </space/> "" "" </space/> > </space/> "" "" </space/> 
 / / </space/> </space/> S L N - . 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < u t i l i t y > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 v e c t o r < l l > </space/> a b c ( 4 e 5 </space/> + </space/> 2 , </space/> 0 ) ; 
 
 v e c t o r < l l > </space/> d e f ( 4 e 5 </space/> + </space/> 2 , </space/> 0 ) ; 
 
 v e c t o r < l l > </space/> a b c 2 ; 
 
 v e c t o r < l l > </space/> d e f 2 ; 
 
 v e c t o r < l l > </space/> t i m e ; 
 
 c i n . t i e ( 0 ) ; 
 l l </space/> a </space/> = </space/> 0 , </space/> b </space/> = </space/> 0 , </space/> c , </space/> d , </space/> n , </space/> m , </space/> r e s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s t r ; 
 c i n </space/> > > </space/> s t r ; 
 w h i l e </space/> ( 1 ) 
 { 
 l l </space/> i x </space/> = </space/> - 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s t r . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> + </space/> 1 </space/> < </space/> s t r . s i z e ( ) </space/> & & </space/> s t r [ i ] </space/> - </space/> 1 </space/> = = </space/> s t r [ i </space/> + </space/> 1 ] ) 
 { 
 i f </space/> ( i x </space/> = = </space/> - 1 </space/> | | </space/> s t r [ i ] </space/> > </space/> s t r [ i x ] ) 
 { 
 i x </space/> = </space/> i ; 
 } 
 } 
 i f </space/> ( i </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> s t r [ i ] </space/> - </space/> 1 </space/> = = </space/> s t r [ i </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( i x </space/> = = </space/> - 1 </space/> | | </space/> s t r [ i ] </space/> > </space/> s t r [ i x ] ) 
 { 
 i x </space/> = </space/> i ; 
 } 
 } 
 } 
 i f </space/> ( i x </space/> ! = </space/> - 1 ) 
 { 
 s t r . e r a s e ( i x , </space/> 1 ) ; 
 r e s + + ; 
 } 
 e l s e 
 b r e a k ; 
 } 
 c o u t </space/> < < </space/> r e s ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> e l </space/> "" \ n "" 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 
 
 b o o l </space/> i s P o w e r ( l l </space/> x ) 
 { 
 r e t u r n </space/> x </space/> & & </space/> ( ! ( x </space/> & </space/> ( x </space/> - </space/> 1 ) ) ) ; 
 } 
 l l </space/> f a c ( l l </space/> n ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n ; </space/> i </space/> > = </space/> 1 ; </space/> i - - ) 
 { 
 a n s </space/> * = </space/> n ; 
 n - - ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 l l </space/> n c r ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 l l </space/> a n s </space/> = </space/> f a c ( n ) </space/> / </space/> ( f a c ( n </space/> - </space/> r ) </space/> * </space/> f a c ( r ) ) ; 
 r e t u r n </space/> a n s ; 
 } 
 l l </space/> s u m ( l l </space/> n ) 
 { 
 l l </space/> m </space/> = </space/> n ; 
 l l </space/> s </space/> = </space/> 0 ; 
 w h i l e </space/> ( m ) 
 { 
 s </space/> + = </space/> m </space/> % </space/> 1 0 ; 
 m </space/> / = </space/> 1 0 ; 
 } 
 r e t u r n </space/> s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> ' z ' ; </space/> i </space/> > = </space/> ' b ' ; </space/> i - - ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> i 
 & & </space/> ( s [ j </space/> + </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 </space/> & & </space/> j </space/> + </space/> 1 </space/> < </space/> s . s i z e ( ) </space/> | | </space/> s [ j </space/> - </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 </space/> & & </space/> j </space/> - </space/> 1 </space/> > = </space/> 0 ) ) 
 { 
 s . e r a s e ( j , </space/> 1 ) ; 
 j </space/> = </space/> - 1 ; 
 } 
 } 
 } 
 / / </space/> c o u t < < s < < e l ; 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) </space/> < < </space/> e l ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 l l </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> m a x x </space/> = </space/> 1 e 2 </space/> + </space/> 1 ; 
 s t r i n g </space/> s ; 
 i n t </space/> n , </space/> p o s ; 
 
 i n l i n e </space/> i n t </space/> c h e c k ( ) 
 { 
 c h a r </space/> _ m a x </space/> = </space/> ' a ' ; 
 i n t </space/> f l a g </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> - </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> 1 </space/> | | </space/> s [ i ] </space/> - </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> 1 ) 
 { 
 i f </space/> ( _ m a x </space/> < </space/> s [ i ] ) 
 { 
 _ m a x </space/> = </space/> s [ i ] ; 
 p o s </space/> = </space/> i ; 
 f l a g </space/> = </space/> 1 ; 
 } 
 } 
 } 
 r e t u r n </space/> f l a g ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 c i n </space/> > > </space/> s ; 
 s </space/> = </space/> ' @ ' </space/> + </space/> s </space/> + </space/> ' # ' ; 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 w h i l e </space/> ( c h e c k ( ) ) 
 { 
 s . e r a s e ( p o s , </space/> 1 ) ; 
 n - - ; 
 c n t + + ; 
 } 
 c o u t </space/> < < </space/> c n t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 o s t r e a m & </space/> o p e r a t o r < < ( o s t r e a m & </space/> i n , </space/> v e c t o r < T > & </space/> a r r ) 
 { 
 f o r </space/> ( T & </space/> i </space/> : </space/> a r r ) 
 { 
 i n </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 } 
 r e t u r n </space/> i n ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 f o r </space/> ( c h a r </space/> x </space/> = </space/> ' z ' ; </space/> x </space/> > </space/> ' a ' ; </space/> - - x ) 
 { 
 f o r </space/> ( i n t </space/> q </space/> = </space/> 0 ; </space/> q </space/> < </space/> n ; </space/> + + q ) 
 { 
 v e c t o r < b o o l > </space/> d e l ( s . s i z e ( ) , </space/> f a l s e ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> + + i ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> x ) 
 c o n t i n u e ; 
 i n t </space/> l </space/> = </space/> m a x ( 0 , </space/> i </space/> - </space/> 1 ) , </space/> r </space/> = </space/> m i n ( ( i n t ) s . s i z e ( ) </space/> - </space/> 1 , </space/> i </space/> + </space/> 1 ) ; 
 i f </space/> ( s [ l ] </space/> = = </space/> s [ i ] </space/> - </space/> 1 </space/> | | </space/> s [ r ] </space/> = = </space/> s [ i ] </space/> - </space/> 1 ) 
 { 
 d e l [ i ] </space/> = </space/> t r u e ; 
 } 
 } 
 s t r i n g </space/> n e w s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> + + i ) 
 { 
 i f </space/> ( ! d e l [ i ] ) 
 n e w s . p u s h _ b a c k ( s [ i ] ) ; 
 } 
 s </space/> = </space/> n e w s ; 
 } 
 } 
 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d b o o l . h > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s t d l i b . h > 
 # i n c l u d e </space/> < s t r i n g . h > 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> l e n , </space/> n </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & l e n ) ; 
 c h a r </space/> * s </space/> = </space/> ( c h a r </space/> * ) m a l l o c ( l e n </space/> + </space/> 1 ) , </space/> q , </space/> * c </space/> = </space/> s , </space/> * p ; 
 s c a n f ( "" % s "" , </space/> s ) ; 
 f o r </space/> ( q </space/> = </space/> ' z ' ; </space/> q </space/> ! = </space/> ' a ' ; </space/> q - - ) 
 { 
 c </space/> = </space/> s ; 
 w h i l e </space/> ( * c ) 
 { 
 i f </space/> ( * c </space/> = = </space/> q </space/> & & </space/> ( ( c </space/> ! = </space/> s </space/> & & </space/> * ( c </space/> - </space/> 1 ) </space/> = = </space/> q </space/> - </space/> 1 ) </space/> | | </space/> * ( c </space/> + </space/> 1 ) </space/> = = </space/> q </space/> - </space/> 1 ) ) 
 { 
 n + + ; 
 p </space/> = </space/> c ; 
 i f </space/> ( * ( c </space/> - </space/> 1 ) </space/> = = </space/> * c ) 
 c - - ; 
 w h i l e </space/> ( * p ) 
 { 
 * p </space/> = </space/> * ( p </space/> + </space/> 1 ) ; 
 p + + ; 
 } 
 } 
 e l s e 
 c + + ; 
 } 
 } 
 p r i n t f ( "" % d \ n "" , </space/> n ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> d o u b l e </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> m i n f </space/> - 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> m p r </space/> m a k e _ p a i r 
 # d e f i n e </space/> i n f </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' a ' ; ) 
 { 
 s t r i n g </space/> u </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> c ) 
 { 
 i f </space/> ( ( i </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> s [ i ] </space/> - </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> 1 ) 
 | | </space/> ( i </space/> + </space/> 1 </space/> < </space/> s . s i z e ( ) </space/> & & </space/> s [ i ] </space/> - </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> 1 ) ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 u </space/> + = </space/> s [ i ] ; 
 } 
 e l s e 
 u </space/> + = </space/> s [ i ] ; 
 } 
 i f </space/> ( u </space/> = = </space/> s ) 
 c - - ; 
 e l s e 
 s </space/> = </space/> u ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < s t r i n g > 
 i n t </space/> T , </space/> n ; 
 s t d : : s t r i n g </space/> s ; 
 t e m p l a t e </space/> < c l a s s </space/> I > 
 i n l i n e </space/> v o i d </space/> r e a d ( I & </space/> x ) 
 { 
 x </space/> = </space/> 0 ; 
 i n t </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c h ; 
 d o 
 { 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 f </space/> = </space/> - 1 ; 
 } </space/> w h i l e </space/> ( c h </space/> < </space/> ' 0 ' </space/> | | </space/> c h </space/> > </space/> ' 9 ' ) ; 
 d o 
 { 
 x </space/> = </space/> ( x </space/> < < </space/> 1 ) </space/> + </space/> ( x </space/> < < </space/> 3 ) </space/> + </space/> ( c h </space/> ^ </space/> 4 8 ) ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } </space/> w h i l e </space/> ( c h </space/> > = </space/> ' 0 ' </space/> & & </space/> c h </space/> < = </space/> ' 9 ' ) ; 
 x </space/> * = </space/> f ; 
 r e t u r n ; 
 } 
 v o i d </space/> s o l v e ( v o i d ) 
 { 
 r e a d ( n ) ; 
 s t d : : c i n </space/> > > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 5 ; </space/> i </space/> > = </space/> 0 ; </space/> - - i ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . l e n g t h ( ) ; </space/> + + j ) 
 { 
 i f </space/> ( s [ j ] </space/> - </space/> ' a ' </space/> = = </space/> i ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> - </space/> 1 ] </space/> + </space/> 1 </space/> & & </space/> j </space/> > </space/> 0 ) 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> j ) , </space/> - - j ; 
 i f </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> + </space/> 1 ] </space/> + </space/> 1 </space/> & & </space/> j </space/> < </space/> s . l e n g t h ( ) </space/> - </space/> 1 ) 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> j ) , </space/> - - j ; 
 } 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> s . l e n g t h ( ) </space/> - </space/> 1 ; </space/> j </space/> > = </space/> 0 ; </space/> - - j ) 
 { 
 i f </space/> ( s [ j ] </space/> - </space/> ' a ' </space/> = = </space/> i ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> - </space/> 1 ] </space/> + </space/> 1 </space/> & & </space/> j </space/> > </space/> 0 ) 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> j ) , </space/> + + j ; 
 i f </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> + </space/> 1 ] </space/> + </space/> 1 </space/> & & </space/> j </space/> < </space/> s . l e n g t h ( ) </space/> - </space/> 1 ) 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> j ) , </space/> + + j ; 
 } 
 } 
 } 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> ( i n t ) s . l e n g t h ( ) ) ; 
 r e t u r n ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 T </space/> = </space/> 1 ; 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s t r i n g </space/> s ; 
 i n t </space/> s n [ 1 0 0 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 c i n </space/> > > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 s n [ s [ i ] </space/> - </space/> ' a ' ] + + ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 2 5 ; </space/> j </space/> > = </space/> 0 ; </space/> j - - ) </space/> / / </space/> a b c </space/> b c </space/> 0 </space/> z h e n g x i a n g 
 { 
 i f </space/> ( s n [ j ] </space/> = = </space/> 0 ) 
 c o n t i n u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> - </space/> ' a ' </space/> = = </space/> j ) 
 { 
 i f </space/> ( ( s [ i </space/> - </space/> 1 ] </space/> - </space/> ' a ' </space/> = = </space/> j </space/> - </space/> 1 </space/> & & </space/> i </space/> - </space/> 1 </space/> > = </space/> 0 ) 
 | | </space/> ( s [ i </space/> + </space/> 1 ] </space/> - </space/> ' a ' </space/> = = </space/> j </space/> - </space/> 1 </space/> & & </space/> i </space/> + </space/> 1 </space/> < = </space/> s . l e n g t h ( ) ) ) 
 { 
 s . e r a s e ( i , </space/> 1 ) ; 
 i - - ; </space/> / / </space/> i + 1 - > i t h i s </space/> i s </space/> i + 1 
 a n s + + ; 
 } 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> s . l e n g t h ( ) ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) </space/> / / </space/> 3 </space/> b c d a </space/> b c a </space/> b a </space/> 0 </space/> f a n x i a n g 
 { 
 i f </space/> ( s [ i ] </space/> - </space/> ' a ' </space/> = = </space/> j ) 
 { 
 i f </space/> ( ( s [ i </space/> - </space/> 1 ] </space/> - </space/> ' a ' </space/> = = </space/> j </space/> - </space/> 1 </space/> & & </space/> i </space/> - </space/> 1 </space/> > = </space/> 0 ) 
 | | </space/> ( s [ i </space/> + </space/> 1 ] </space/> - </space/> ' a ' </space/> = = </space/> j </space/> - </space/> 1 </space/> & & </space/> i </space/> + </space/> 1 </space/> < = </space/> s . l e n g t h ( ) ) ) 
 { 
 s . e r a s e ( i , </space/> 1 ) ; 
 i + + ; 
 a n s + + ; 
 } 
 } 
 } 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> a ; 
 c i n </space/> > > </space/> a ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 0 ; 
 i n t </space/> f [ 2 0 0 ] </space/> = </space/> { } ; 
 c h a r </space/> k [ 2 0 0 ] </space/> = </space/> { } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 k [ i ] </space/> = </space/> a [ i ] ; 
 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 i n t </space/> l e n </space/> = </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> ' z ' ; </space/> i </space/> > = </space/> ' a ' ; </space/> i - - ) 
 { 
 c n t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> l e n ; </space/> j + + ) 
 f [ j ] </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> l e n ; </space/> j + + ) 
 { 
 i f </space/> ( k [ j ] </space/> = = </space/> i ) 
 { 
 i f </space/> ( ( j </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> k [ j </space/> - </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 ) </space/> | | </space/> ( j </space/> + </space/> 1 </space/> < = </space/> l e n </space/> - </space/> 1 </space/> & & </space/> k [ j </space/> + </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 ) ) 
 { 
 i n t </space/> o p </space/> = </space/> j ; 
 w h i l e </space/> ( o p </space/> < </space/> l e n ) 
 { 
 k [ o p ] </space/> = </space/> k [ o p </space/> + </space/> 1 ] ; 
 o p + + ; 
 } 
 l e n - - ; 
 a n s + + ; 
 j </space/> - = </space/> 2 ; 
 } 
 } 
 } 
 } 
 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l o n g </space/> l o n g </space/> f a c [ 2 0 0 0 0 5 ] ; 
 
 l o n g </space/> l o n g </space/> q u i c k p o w ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b ) 
 { 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 , </space/> b a s e </space/> = </space/> a ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> % </space/> 2 ) 
 a n s </space/> = </space/> a n s </space/> * </space/> b a s e </space/> % </space/> m o d ; 
 b a s e </space/> = </space/> b a s e </space/> * </space/> b a s e </space/> % </space/> m o d ; 
 b </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 l o n g </space/> l o n g </space/> i n v ( l o n g </space/> l o n g </space/> x ) 
 { 
 r e t u r n </space/> q u i c k p o w ( x , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 
 l o n g </space/> l o n g </space/> C ( i n t </space/> n , </space/> i n t </space/> m ) 
 { 
 r e t u r n </space/> f a c [ n ] </space/> * </space/> i n v ( f a c [ m ] </space/> * </space/> f a c [ n </space/> - </space/> m ] </space/> % </space/> m o d ) </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 f a c [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 f a c [ i ] </space/> = </space/> ( f a c [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> m o d ; 
 l o n g </space/> l o n g </space/> x </space/> = </space/> C ( m , </space/> n </space/> - </space/> 1 ) ; 
 x </space/> = </space/> x </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 x </space/> = </space/> x </space/> * </space/> q u i c k p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> m o d ; 
 ; 
 c o u t </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 3 ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 i n t </space/> a d d ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 x </space/> + = </space/> y ; 
 w h i l e </space/> ( x </space/> > = </space/> M O D ) 
 x </space/> - = </space/> M O D ; 
 w h i l e </space/> ( x </space/> < </space/> 0 ) 
 x </space/> + = </space/> M O D ; 
 r e t u r n </space/> x ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> ( 1 L L </space/> * </space/> x </space/> * </space/> y ) </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> b i n p o w ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i n t </space/> r e t </space/> = </space/> 1 ; 
 w h i l e </space/> ( y ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e t </space/> = </space/> m u l ( r e t , </space/> x ) ; 
 x </space/> = </space/> m u l ( x , </space/> x ) ; 
 y </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 
 i n t </space/> i n v ( i n t </space/> x ) 
 { 
 r e t u r n </space/> b i n p o w ( x , </space/> M O D </space/> - </space/> 2 ) ; 
 } 
 
 i n t </space/> d i v i d e ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> m u l ( x , </space/> i n v ( y ) ) ; 
 } 
 
 i n t </space/> f a c t [ N ] ; 
 
 i n t </space/> n C r ( i n t </space/> n , </space/> i n t </space/> r ) 
 { 
 r e t u r n </space/> d i v i d e ( f a c t [ n ] , </space/> m u l ( f a c t [ r ] , </space/> f a c t [ n </space/> - </space/> r ] ) ) ; 
 } 
 
 i n l i n e </space/> v o i d </space/> p r e c a l c ( ) 
 { 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 { 
 f a c t [ i ] </space/> = </space/> m u l ( f a c t [ i </space/> - </space/> 1 ] , </space/> i ) ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 p r e c a l c ( ) ; 
 i n t </space/> n , </space/> m ; 
 s c a n f ( "" % d </space/> % d "" , </space/> & n , </space/> & m ) ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i f </space/> ( n </space/> > </space/> 2 ) 
 { 
 a n s </space/> = </space/> m u l ( n C r ( m , </space/> n </space/> - </space/> 1 ) , </space/> m u l ( n </space/> - </space/> 2 , </space/> b i n p o w ( 2 , </space/> n </space/> - </space/> 3 ) ) ) ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 0 0 0 4 3 ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 i n t </space/> a d d ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 x </space/> + = </space/> y ; 
 w h i l e </space/> ( x </space/> > = </space/> M O D ) 
 x </space/> - = </space/> M O D ; 
 w h i l e </space/> ( x </space/> < </space/> 0 ) 
 x </space/> + = </space/> M O D ; 
 r e t u r n </space/> x ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> ( x </space/> * </space/> 1 l l </space/> * </space/> y ) </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> b i n p o w ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i n t </space/> z </space/> = </space/> 1 ; 
 w h i l e </space/> ( y ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 z </space/> = </space/> m u l ( z , </space/> x ) ; 
 x </space/> = </space/> m u l ( x , </space/> x ) ; 
 y </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> z ; 
 } 
 
 i n t </space/> i n v ( i n t </space/> x ) 
 { 
 r e t u r n </space/> b i n p o w ( x , </space/> M O D </space/> - </space/> 2 ) ; 
 } 
 
 i n t </space/> d i v i d e ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> m u l ( x , </space/> i n v ( y ) ) ; 
 } 
 
 i n t </space/> f a c t [ N ] ; 
 
 v o i d </space/> p r e c a l c ( ) 
 { 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 f a c t [ i ] </space/> = </space/> m u l ( f a c t [ i </space/> - </space/> 1 ] , </space/> i ) ; 
 } 
 
 i n t </space/> C ( i n t </space/> n , </space/> i n t </space/> k ) 
 { 
 r e t u r n </space/> d i v i d e ( f a c t [ n ] , </space/> m u l ( f a c t [ k ] , </space/> f a c t [ n </space/> - </space/> k ] ) ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 p r e c a l c ( ) ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i f </space/> ( n </space/> > </space/> 2 ) 
 a n s </space/> = </space/> m u l ( C ( m , </space/> n </space/> - </space/> 1 ) , </space/> m u l ( n </space/> - </space/> 2 , </space/> b i n p o w ( 2 , </space/> n </space/> - </space/> 3 ) ) ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> r e a d ( ) 
 { 
 i n t </space/> x </space/> = </space/> 0 , </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( c h </space/> < </space/> ' 0 ' </space/> | | </space/> c h </space/> > </space/> ' 9 ' ) 
 { 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 f </space/> = </space/> - 1 ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 w h i l e </space/> ( c h </space/> > = </space/> ' 0 ' </space/> & & </space/> c h </space/> < = </space/> ' 9 ' ) 
 { 
 x </space/> = </space/> ( x </space/> < < </space/> 3 ) </space/> + </space/> ( x </space/> < < </space/> 1 ) </space/> + </space/> c h </space/> - </space/> ' 0 ' ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 r e t u r n </space/> x </space/> * </space/> f ; 
 } 
 i n t </space/> n , </space/> m ; 
 l l </space/> a n s </space/> = </space/> 1 , </space/> t m p </space/> = </space/> 1 ; 
 l l </space/> q p ( l l </space/> x , </space/> l l </space/> p ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( p ) 
 { 
 i f </space/> ( p </space/> & </space/> 1 ) 
 r e s </space/> = </space/> 1 l l </space/> * </space/> r e s </space/> * </space/> x </space/> % </space/> m o d ; 
 x </space/> = </space/> 1 l l </space/> * </space/> x </space/> * </space/> x </space/> % </space/> m o d , </space/> p </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l l </space/> i n v ( l l </space/> x ) 
 { 
 r e t u r n </space/> q p ( x , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 n </space/> = </space/> r e a d ( ) , </space/> m </space/> = </space/> r e a d ( ) ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 p u t s ( "" 0 "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 a n s </space/> = </space/> 1 l l </space/> * </space/> a n s </space/> * </space/> i </space/> % </space/> m o d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 t m p </space/> = </space/> 1 l l </space/> * </space/> t m p </space/> * </space/> i </space/> % </space/> m o d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m </space/> - </space/> n </space/> + </space/> 1 ; </space/> i + + ) 
 t m p </space/> = </space/> 1 l l </space/> * </space/> t m p </space/> * </space/> i </space/> % </space/> m o d ; 
 a n s </space/> = </space/> 1 l l </space/> * </space/> a n s </space/> * </space/> i n v ( t m p ) </space/> % </space/> m o d </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d </space/> * </space/> q p ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> m o d ; 
 p r i n t f ( "" % l l d "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 , </space/> p </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> n , </space/> m ; 
 i n t </space/> j c [ N ] ; 
 i n t </space/> q p o w ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> p ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> p ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> C ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> j c [ a ] </space/> * </space/> q p o w ( j c [ a </space/> - </space/> b ] , </space/> p </space/> - </space/> 2 ) </space/> % </space/> p </space/> * </space/> q p o w ( j c [ b ] , </space/> p </space/> - </space/> 2 ) </space/> % </space/> p ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 ; 
 r e t u r n </space/> 0 ; 
 } 
 j c [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 { 
 j c [ i ] </space/> = </space/> j c [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> p ; 
 } 
 i n t </space/> r e s </space/> = </space/> q p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> * </space/> C ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> p </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> p ; 
 c o u t </space/> < < </space/> r e s ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 2 e 5 </space/> + </space/> 5 , </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> n , </space/> m ; 
 l l </space/> f r a c [ m a x n ] ; 
 l l </space/> q p o w ( l l </space/> b a s e , </space/> l l </space/> p ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( p ) 
 { 
 i f </space/> ( p </space/> & </space/> 1 ) 
 { 
 r e s </space/> * = </space/> b a s e ; 
 r e s </space/> % = </space/> m o d ; 
 } 
 b a s e </space/> = </space/> b a s e </space/> * </space/> b a s e </space/> % </space/> m o d ; 
 p </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l l </space/> C ( l l </space/> N , </space/> l l </space/> M ) 
 { 
 r e t u r n </space/> ( f r a c [ N ] </space/> * </space/> q p o w ( f r a c [ M ] , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ) </space/> * </space/> q p o w ( f r a c [ N </space/> - </space/> M ] , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & m ) ; 
 f r a c [ 0 ] </space/> = </space/> 1 ; 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 ; 
 r e t u r n </space/> 0 ; 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 f r a c [ i ] </space/> = </space/> f r a c [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> ( q p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> * </space/> C ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> m o d ) </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 c o n s t </space/> l l </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 ; 
 c o n s t </space/> l l </space/> m o d n </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 l l </space/> T , </space/> l e n , </space/> n u m , </space/> x ; 
 
 l l </space/> p o w e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 i f </space/> ( b </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 r e t u r n </space/> ( p o w e r ( a , </space/> b </space/> / </space/> 2 ) </space/> * </space/> p o w e r ( a , </space/> b </space/> / </space/> 2 ) ) </space/> % </space/> m o d n ; 
 r e t u r n </space/> ( p o w e r ( a , </space/> b </space/> / </space/> 2 ) </space/> * </space/> p o w e r ( a , </space/> b </space/> / </space/> 2 ) </space/> % </space/> m o d n </space/> * </space/> a ) </space/> % </space/> m o d n ; 
 } 
 l l </space/> c o u n t e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> o u t </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 o u t </space/> = </space/> ( o u t </space/> * </space/> i ) </space/> % </space/> m o d n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> a ; </space/> i + + ) 
 o u t </space/> = </space/> ( o u t </space/> * </space/> p o w e r ( i , </space/> m o d n </space/> - </space/> 2 ) ) </space/> % </space/> m o d n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> b </space/> - </space/> a ; </space/> i + + ) 
 o u t </space/> = </space/> ( o u t </space/> * </space/> p o w e r ( i , </space/> m o d n </space/> - </space/> 2 ) ) </space/> % </space/> m o d n ; 
 r e t u r n </space/> o u t ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n </space/> > > </space/> l e n </space/> > > </space/> n u m ; 
 x </space/> = </space/> ( ( l e n </space/> - </space/> 2 ) </space/> * </space/> p o w e r ( 2 , </space/> l e n </space/> - </space/> 3 ) ) </space/> % </space/> m o d n ; 
 x </space/> = </space/> ( x </space/> * </space/> c o u n t e r ( l e n </space/> - </space/> 1 , </space/> n u m ) ) </space/> % </space/> m o d n ; 
 c o u t </space/> < < </space/> x ; 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l l </space/> m o d </space/> = </space/> ( l l ) 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> f a c t [ 1 0 0 0 0 0 9 ] , </space/> i n v [ 1 0 0 0 0 0 9 ] ; 
 l l </space/> f p ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 l l </space/> a n s </space/> = </space/> f p ( a , </space/> b </space/> / </space/> 2 ) ; 
 a n s </space/> = </space/> ( a n s </space/> * </space/> a n s ) </space/> % </space/> m o d ; 
 i f </space/> ( b </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 a n s </space/> = </space/> ( a n s </space/> * </space/> ( a </space/> % </space/> m o d ) ) </space/> % </space/> m o d ; 
 r e t u r n </space/> a n s ; 
 } 
 v o i d </space/> F a c I n v ( l l </space/> n ) 
 { 
 f a c t [ 0 ] </space/> = </space/> i n v [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> ( ( i </space/> % </space/> m o d ) </space/> * </space/> f a c t [ i </space/> - </space/> 1 ] ) </space/> % </space/> m o d ; 
 i n v [ i ] </space/> = </space/> f p ( f a c t [ i ] , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 } 
 l l </space/> n c r ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 i f </space/> ( r </space/> > </space/> n ) 
 r e t u r n </space/> 0 ; 
 r e t u r n </space/> ( ( ( f a c t [ n ] </space/> * </space/> i n v [ r ] ) </space/> % </space/> m o d ) </space/> * </space/> i n v [ n </space/> - </space/> r ] ) </space/> % </space/> m o d ; 
 } 
 
 v o i d </space/> S o l v e ( ) 
 { 
 l l </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> "" \ n "" ; 
 r e t u r n ; 
 } 
 F a c I n v ( 1 0 0 0 0 0 0 ) ; 
 l l </space/> a n s </space/> = </space/> ( ( n c r ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 ) ) </space/> % </space/> m o d </space/> * </space/> f p ( 2 , </space/> n </space/> - </space/> 3 ) ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 c o u t . t i e ( n u l l p t r ) ; 
 l l </space/> t </space/> = </space/> 1 , </space/> t c </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 / / </space/> c o u t < < "" C a s e </space/> # "" < < t c + + < < "" : </space/> "" ; 
 S o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> i n v [ 2 0 0 0 0 1 ] , </space/> f a c t [ 2 0 0 0 0 1 ] ; 
 l l </space/> b i n e x p o ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> 1 l l ; 
 } 
 i f </space/> ( b </space/> = = </space/> 1 ) 
 { 
 r e t u r n </space/> a ; 
 } 
 l l </space/> t e m p </space/> = </space/> b i n e x p o ( a , </space/> b </space/> / </space/> 2 ) ; 
 i f </space/> ( b </space/> % </space/> 2 ) 
 { 
 r e t u r n </space/> ( ( ( t e m p </space/> * </space/> t e m p ) </space/> % </space/> m o d ) </space/> * </space/> a ) </space/> % </space/> m o d ; 
 } 
 e l s e 
 { 
 r e t u r n </space/> ( t e m p </space/> * </space/> t e m p ) </space/> % </space/> m o d ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n , </space/> m ; 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & m ) ; 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> i </space/> * </space/> f a c t [ i </space/> - </space/> 1 ] ; 
 f a c t [ i ] </space/> % = </space/> m o d ; 
 } 
 i n v [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 i n v [ i ] </space/> = </space/> b i n e x p o ( f a c t [ i ] , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 ; 
 } 
 e l s e 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 a n s </space/> * = </space/> f a c t [ m ] ; 
 a n s </space/> * = </space/> i n v [ m </space/> - </space/> n </space/> + </space/> 1 ] ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> i n v [ n </space/> - </space/> 1 ] ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> ( n </space/> - </space/> 2 ) ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> b i n e x p o ( 2 l l , </space/> n </space/> - </space/> 3 ) ; 
 a n s </space/> % = </space/> m o d ; 
 c o u t </space/> < < </space/> a n s ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> m a x n </space/> 2 0 0 0 0 5 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 l l </space/> i n v [ m a x n ] , </space/> s [ m a x n ] ; 
 l l </space/> k u ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 v o i d </space/> i n i t ( ) 
 { 
 s [ 0 ] </space/> = </space/> i n v [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m a x n ; </space/> i + + ) 
 { 
 s [ i ] </space/> = </space/> s [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> m o d ; 
 } 
 i n v [ m a x n ] </space/> = </space/> k u ( s [ m a x n ] , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> m a x n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 1 ; </space/> i - - ) 
 i n v [ i ] </space/> = </space/> ( i </space/> + </space/> 1 ) </space/> * </space/> i n v [ i </space/> + </space/> 1 ] </space/> % </space/> m o d ; 
 } 
 l l </space/> C ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 r e t u r n </space/> s [ a ] </space/> % </space/> m o d </space/> * </space/> i n v [ b ] </space/> % </space/> m o d </space/> * </space/> i n v [ a </space/> - </space/> b ] </space/> % </space/> m o d ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n , </space/> m ; 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & m ) ; 
 i n i t ( ) ; 
 l l </space/> t e m p </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> - </space/> 3 ; </space/> i + + ) 
 { 
 t e m p </space/> = </space/> t e m p </space/> * </space/> 2 </space/> % </space/> m o d ; 
 } 
 p r i n t f ( "" % l l d "" , </space/> ( n </space/> - </space/> 2 ) </space/> * </space/> C ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> m o d </space/> * </space/> t e m p </space/> % </space/> m o d ) ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 i n t </space/> f a c t [ N ] ; 
 
 i n t </space/> p o w e r ( i n t </space/> a , </space/> i n t </space/> b , </space/> i n t </space/> m ) 
 { 
 i n t </space/> a n s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( ( b </space/> & </space/> 1 ) ) 
 { 
 a n s </space/> = </space/> ( a n s </space/> * </space/> a ) </space/> % </space/> m ; 
 } 
 b </space/> > > = </space/> 1 ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> m ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 i n t </space/> m o d I n v e r s e ( i n t </space/> n , </space/> i n t </space/> m ) 
 { 
 r e t u r n </space/> p o w e r ( n , </space/> m </space/> - </space/> 2 , </space/> m ) ; 
 } 
 
 i n t </space/> n c r ( i n t </space/> n , </space/> i n t </space/> r ) 
 { 
 r e t u r n </space/> ( ( f a c t [ n ] </space/> * </space/> m o d I n v e r s e ( f a c t [ r ] , </space/> m o d ) ) </space/> % </space/> m o d </space/> * </space/> ( m o d I n v e r s e ( f a c t [ n </space/> - </space/> r ] , </space/> m o d ) </space/> % </space/> m o d ) ) 
 % </space/> m o d ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> n , </space/> m ; 
 s c a n f ( "" % l l d </space/> % l l d "" , </space/> & n , </space/> & m ) ; 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f a c t [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> ( f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i f </space/> ( n </space/> > </space/> 2 ) 
 { 
 a n s </space/> = </space/> ( ( n c r ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 ) ) </space/> % </space/> m o d </space/> * </space/> p o w e r ( 2 , </space/> n </space/> - </space/> 3 , </space/> m o d ) ) </space/> % </space/> m o d ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 l o n g </space/> l o n g </space/> q p o w ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b ) 
 { 
 l o n g </space/> l o n g </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> i , </space/> n , </space/> m , </space/> a n s </space/> = </space/> 1 , </space/> r e s </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 p u t c h a r ( ' 0 ' ) ; 
 r e t u r n </space/> 0 ; 
 } 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 a n s </space/> = </space/> a n s </space/> * </space/> i </space/> % </space/> m o d ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 r e s </space/> = </space/> r e s </space/> * </space/> i </space/> % </space/> m o d ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m </space/> - </space/> n </space/> + </space/> 1 ; </space/> i + + ) 
 r e s </space/> = </space/> r e s </space/> * </space/> i </space/> % </space/> m o d ; 
 a n s </space/> = </space/> ( a n s </space/> * </space/> q p o w ( r e s , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d ) </space/> * </space/> q p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 0 0 0 0 1 , </space/> P </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> n , </space/> m ; 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( y ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> x </space/> % </space/> P ; 
 x </space/> = </space/> x </space/> * </space/> x </space/> % </space/> P ; 
 y </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 p u t s ( "" 0 "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
 l l </space/> C </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> m ; </space/> i </space/> > = </space/> m </space/> - </space/> ( n </space/> - </space/> 1 ) </space/> + </space/> 1 ; </space/> i - - ) 
 C </space/> = </space/> C </space/> * </space/> i </space/> % </space/> P ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 C </space/> = </space/> C </space/> * </space/> p o w e r ( i , </space/> P </space/> - </space/> 2 ) </space/> % </space/> P ; 
 p r i n t f ( "" % l l d \ n "" , </space/> C </space/> * </space/> p o w e r ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> P </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> P ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 l l i </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 l l i </space/> p o w ( l l i </space/> x , </space/> l l i </space/> y ) 
 { 
 i f </space/> ( y </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 L L ; 
 l l i </space/> r </space/> = </space/> p o w ( x , </space/> y </space/> / </space/> 2 ) ; 
 r </space/> = </space/> r </space/> * </space/> r ; 
 r </space/> % = </space/> m o d ; 
 i f </space/> ( y </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 r </space/> * = </space/> x ; 
 r </space/> % = </space/> m o d ; 
 r e t u r n </space/> r ; 
 } 
 l l i </space/> C ( l l i </space/> x , </space/> l l i </space/> y ) 
 { 
 l l i </space/> p e r 1 </space/> = </space/> 1 L L , </space/> p e r 2 </space/> = </space/> 1 L L ; 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> x ; </space/> i + + ) 
 { 
 p e r 1 </space/> * = </space/> i ; 
 p e r 1 </space/> % = </space/> m o d ; 
 } 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> y ; </space/> i + + ) 
 { 
 p e r 2 </space/> * = </space/> i ; 
 p e r 2 </space/> % = </space/> m o d ; 
 } 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> x </space/> - </space/> y ; </space/> i + + ) 
 { 
 p e r 2 </space/> * = </space/> i ; 
 p e r 2 </space/> % = </space/> m o d ; 
 } 
 p e r 1 </space/> * = </space/> p o w ( p e r 2 , </space/> m o d </space/> - </space/> 2 ) ; 
 p e r 1 </space/> % = </space/> m o d ; 
 r e t u r n </space/> p e r 1 ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l i </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> > </space/> 2 ) 
 { 
 l l i </space/> a n s </space/> = </space/> 1 ; 
 a n s </space/> * = </space/> ( n </space/> - </space/> 2 ) ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> p o w ( 2 L L , </space/> n </space/> - </space/> 3 ) ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> C ( m , </space/> n </space/> - </space/> 1 ) ; 
 a n s </space/> % = </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 0 0 0 0 5 ; 
 i n t </space/> n , </space/> m ; 
 l l </space/> f a c [ N ] , </space/> i n v [ N ] , </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> p o w e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 , </space/> t m p </space/> = </space/> a ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> t m p </space/> % </space/> m o d ; 
 t m p </space/> = </space/> t m p </space/> * </space/> t m p </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l l </space/> C ( i n t </space/> n , </space/> i n t </space/> m ) 
 { 
 r e t u r n </space/> f a c [ n ] </space/> * </space/> i n v [ m ] </space/> % </space/> m o d </space/> * </space/> i n v [ n </space/> - </space/> m ] </space/> % </space/> m o d ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 f a c [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 f a c [ i ] </space/> = </space/> f a c [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> m o d ; 
 i n v [ i ] </space/> = </space/> p o w e r ( f a c [ i ] , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 p u t s ( "" 0 "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
 p r i n t f ( "" % l l d "" , </space/> ( p o w e r ( 2 , </space/> n </space/> - </space/> 3 ) </space/> * </space/> C ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> m o d </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d </space/> + </space/> m o d ) </space/> % </space/> m o d ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> I C </space/> "" % l l d "" 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 i n t </space/> n , </space/> m , </space/> t ; 
 
 i n t </space/> p o w _ ( i n t </space/> x , </space/> i n t </space/> p ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 f o r </space/> ( ; </space/> p ; </space/> p </space/> > > = </space/> 1 ) 
 { 
 i f </space/> ( p </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> x </space/> % </space/> M O D ; 
 x </space/> = </space/> x </space/> * </space/> x </space/> % </space/> M O D ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> g e t C ( i n t </space/> a l l , </space/> i n t </space/> s e l ) 
 { 
 i n t </space/> u </space/> = </space/> 1 , </space/> d </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> a l l ; </space/> i </space/> > </space/> a l l </space/> - </space/> s e l ; </space/> i - - ) 
 u </space/> = </space/> u </space/> * </space/> i </space/> % </space/> M O D ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> s e l ; </space/> i + + ) 
 d </space/> = </space/> d </space/> * </space/> i </space/> % </space/> M O D ; 
 r e t u r n </space/> u </space/> * </space/> p o w _ ( d , </space/> M O D </space/> - </space/> 2 ) </space/> % </space/> M O D ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 s c a n f ( I C </space/> I C , </space/> & n , </space/> & m ) ; 
 i f </space/> ( n </space/> < </space/> 3 ) 
 { 
 p u t s ( "" 0 "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
 p r i n t f ( I C , </space/> g e t C ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 l l ) </space/> % </space/> M O D </space/> * </space/> p o w _ ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> M O D ) ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < c m a t h > 
 # d e f i n e </space/> d e b u g </space/> p r i n t f ( "" H e l l o </space/> W o r l d \ n "" ) 
 # d e f i n e </space/> i o s </space/> i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 i n t </space/> a r r [ 3 0 0 0 0 5 ] </space/> = </space/> { </space/> 0 </space/> } , </space/> n , </space/> m ; 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 i n t </space/> t m p </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a r r [ i ] </space/> + </space/> x </space/> < </space/> t m p ) 
 r e t u r n </space/> f a l s e ; 
 i f </space/> ( a r r [ i ] </space/> > </space/> t m p </space/> & & </space/> m </space/> + </space/> t m p </space/> > </space/> a r r [ i ] </space/> + </space/> x ) 
 t m p </space/> = </space/> a r r [ i ] ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a r r [ i ] ; 
 i n t </space/> l e f t </space/> = </space/> 0 , </space/> r i g h t </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( l e f t </space/> < = </space/> r i g h t ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l e f t </space/> + </space/> r i g h t ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r i g h t </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l e f t </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> r i g h t </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> h t t p s : / / c o d e f o r c e s . c o m / p r o b l e m s e t / p r o b l e m / 1 1 6 9 / C 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> n , </space/> m ; 
 c o n s t </space/> i n t </space/> M A X </space/> = </space/> 3 0 0 0 0 5 ; 
 i n t </space/> a [ M A X ] ; 
 
 b o o l </space/> c h e c k ( i n t </space/> m i d ) 
 { 
 i n t </space/> p a s s </space/> = </space/> m </space/> - </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 i f </space/> ( a [ i ] </space/> > </space/> p a s s </space/> & & </space/> a [ i ] </space/> + </space/> m i d </space/> < </space/> m ) 
 r e t u r n </space/> f a l s e ; 
 i f </space/> ( a [ i ] </space/> < = </space/> p a s s ) 
 { 
 p a s s </space/> = </space/> m i n ( p a s s , </space/> a [ i ] </space/> + </space/> m i d ) ; 
 } 
 e l s e 
 p a s s </space/> = </space/> m i n ( p a s s , </space/> ( a [ i ] </space/> + </space/> m i d ) </space/> % </space/> m ) ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> - </space/> 1 ; 
 i n t </space/> a n s </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 { 
 a n s </space/> = </space/> m i d , </space/> r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> m a x n </space/> 3 0 0 0 0 5 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> n , </space/> m ; 
 i n t </space/> a [ m a x n ] ; 
 
 b o o l </space/> c h e c k ( i n t </space/> k ) 
 { 
 i n t </space/> p r e </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> > </space/> p r e ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> k </space/> > = </space/> m </space/> & & </space/> ( a [ i ] </space/> + </space/> k ) </space/> % </space/> m </space/> > = </space/> p r e ) 
 c o n t i n u e ; 
 e l s e 
 p r e </space/> = </space/> a [ i ] ; 
 } 
 e l s e </space/> i f </space/> ( a [ i ] </space/> < </space/> p r e ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> k </space/> < </space/> p r e ) 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> m i d , </space/> a n s ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 { 
 a n s </space/> = </space/> m i d ; </space/> / / 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 3 e 5 </space/> + </space/> 5 ; 
 i n t </space/> a [ m a x n ] ; 
 i n t </space/> n , </space/> m ; 
 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 i n t </space/> l a s t </space/> = </space/> a [ 0 ] ; 
 i f </space/> ( a [ 0 ] </space/> + </space/> x </space/> > = </space/> m ) 
 l a s t </space/> = </space/> 0 ; </space/> / / </space/> I f </space/> a [ 0 ] </space/> i s </space/> g r e a t e r </space/> t h a n </space/> m </space/> a f t e r </space/> x </space/> t r a n s f o r m a t i o n s , </space/> t h e n </space/> a [ 0 ] </space/> c a n </space/> b e </space/> t r e a t e d </space/> a s 
 / / </space/> 0 . 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> t e m p </space/> = </space/> - 1 ; </space/> / / </space/> S t o r e </space/> t h e </space/> o n e </space/> w i t h </space/> a [ i ] </space/> a n d </space/> l a s t . 
 i f </space/> ( a [ i ] </space/> > = </space/> l a s t ) 
 { 
 t e m p </space/> = </space/> a [ i ] ; 
 / / </space/> I f </space/> a [ i ] </space/> c a n </space/> b e </space/> l a r g e r </space/> t h a n </space/> t h e </space/> p r e v i o u s </space/> o n e </space/> a f t e r </space/> x </space/> t r a n s f o r m a t i o n s , </space/> t h e n </space/> t e m p </space/> s t o r e s 
 / / </space/> t h e </space/> p r e v i o u s </space/> v a l u e . 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> > = </space/> m </space/> & & </space/> ( a [ i ] </space/> + </space/> x ) </space/> % </space/> m </space/> > = </space/> l a s t ) 
 { 
 t e m p </space/> = </space/> l a s t ; 
 } 
 } 
 e l s e </space/> i f </space/> ( a [ i ] </space/> + </space/> x </space/> > = </space/> l a s t ) 
 t e m p </space/> = </space/> l a s t ; 
 i f </space/> ( t e m p </space/> = = </space/> - 1 ) 
 r e t u r n </space/> f a l s e ; </space/> / / </space/> C a n ' t </space/> f i n d </space/> a [ i ] </space/> l a r g e r </space/> t h a n </space/> t h e </space/> p r e v i o u s </space/> o n e . 
 l a s t </space/> = </space/> t e m p ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> + </space/> 1 , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d </space/> - </space/> 1 , </space/> a n s </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> d e b ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" = "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> t e s t </space/> \ 
 i n t </space/> T ; </space/> \ 
 c i n </space/> > > </space/> T ; </space/> \ 
 w h i l e </space/> ( T - - ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 9 </space/> + </space/> 9 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 5 0 0 5 0 0 ; 
 
 i n t </space/> n , </space/> m ; 
 
 b o o l </space/> s o l v e ( v e c t o r < i n t > & </space/> a , </space/> i n t </space/> x ) 
 { 
 i n t </space/> p r e v </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n e e d e d ; 
 i f </space/> ( p r e v </space/> < </space/> a [ i ] ) 
 { 
 n e e d e d </space/> = </space/> m </space/> - </space/> ( a [ i ] </space/> - </space/> p r e v ) ; 
 } 
 e l s e 
 { 
 n e e d e d </space/> = </space/> p r e v </space/> - </space/> a [ i ] ; 
 } 
 i f </space/> ( x </space/> > = </space/> n e e d e d ) 
 { 
 c o n t i n u e ; 
 } 
 i f </space/> ( p r e v </space/> > </space/> a [ i ] ) 
 r e t u r n </space/> f a l s e ; 
 p r e v </space/> = </space/> a [ i ] ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> L </space/> = </space/> 0 , </space/> R </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( L </space/> < = </space/> R ) 
 { 
 i n t </space/> m </space/> = </space/> ( L </space/> + </space/> R ) </space/> / </space/> 2 ; 
 i f </space/> ( s o l v e ( a , </space/> m ) ) 
 { 
 R </space/> = </space/> m </space/> - </space/> 1 ; 
 } 
 e l s e 
 { 
 L </space/> = </space/> m </space/> + </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> L ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> d p [ 1 0 0 0 0 0 5 ] , </space/> n , </space/> m , </space/> l , </space/> r , </space/> m i d , </space/> i , </space/> a [ 1 0 0 0 0 0 5 ] ; 
 i n l i n e </space/> i n t </space/> c h e c k ( i n t </space/> x x ) 
 { 
 i n t </space/> i ; 
 d p [ 1 ] </space/> = </space/> a [ 1 ] ; 
 i f </space/> ( a [ 1 ] </space/> + </space/> x x </space/> > = </space/> m ) 
 d p [ 1 ] </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x x </space/> < </space/> d p [ i </space/> - </space/> 1 ] ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( a [ i ] </space/> + </space/> x x </space/> < </space/> m </space/> + </space/> d p [ i </space/> - </space/> 1 ] ) 
 d p [ i ] </space/> = </space/> m a x ( d p [ i </space/> - </space/> 1 ] , </space/> a [ i ] ) ; 
 e l s e 
 d p [ i ] </space/> = </space/> d p [ i </space/> - </space/> 1 ] ; 
 } 
 r e t u r n </space/> 1 ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l </space/> = </space/> 0 ; 
 r </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> r </space/> > > </space/> 1 ) ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> l ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> I N e e d T o S p e e d </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> p e r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 0 0 0 1 7 ; 
 l l </space/> n , </space/> m ; 
 l l </space/> a [ 3 </space/> * </space/> N ] ; 
 l l </space/> b [ 3 </space/> * </space/> N ] ; 
 
 b o o l </space/> c h e c k ( l l </space/> k ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> b [ i ] </space/> = </space/> a [ i ] ; 
 i f </space/> ( b [ 1 ] </space/> + </space/> k </space/> > = </space/> m ) 
 b [ 1 ] </space/> = </space/> 0 ; 
 r e p ( i , </space/> 2 , </space/> n ) 
 { 
 i f </space/> ( b [ i ] </space/> < </space/> b [ i </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( b [ i ] </space/> + </space/> k </space/> > = </space/> b [ i </space/> - </space/> 1 ] ) 
 b [ i ] </space/> = </space/> b [ i </space/> - </space/> 1 ] ; 
 e l s e 
 { 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( ( b [ i ] </space/> + </space/> k ) </space/> % </space/> m </space/> > = </space/> b [ i </space/> - </space/> 1 ] </space/> & & </space/> b [ i ] </space/> + </space/> k </space/> > = </space/> m ) 
 b [ i ] </space/> = </space/> b [ i </space/> - </space/> 1 ] ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 l l </space/> l </space/> = </space/> 0 ; 
 l l </space/> r </space/> = </space/> 1 e 1 2 ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> l ; 
 } 
 m a i n ( ) 
 { 
 I N e e d T o S p e e d </space/> l l </space/> t 2 4 </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t 2 4 ; 
 w h i l e </space/> ( t 2 4 - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v v i </space/> v e c t o r < v e c t o r < i n t > </space/> > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 c o n s t </space/> i n t </space/> M X </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> l o </space/> = </space/> 0 , </space/> h i </space/> = </space/> m </space/> + </space/> 1 ; </space/> / / [ l o , </space/> h i ] 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 0 ; </space/> i + + ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l o </space/> + </space/> h i ) </space/> / </space/> 2 ; 
 i n t </space/> l s t </space/> = </space/> 0 ; 
 b o o l </space/> w o r k </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n </space/> & & </space/> w o r k ; </space/> j + + ) 
 { 
 i f </space/> ( a [ j ] </space/> < = </space/> l s t ) 
 { 
 i f </space/> ( l s t </space/> - </space/> a [ j ] </space/> > </space/> m i d ) 
 { 
 w o r k </space/> = </space/> f a l s e ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( m </space/> + </space/> l s t </space/> - </space/> a [ j ] </space/> > </space/> m i d ) 
 { 
 l s t </space/> = </space/> a [ j ] ; 
 } 
 } 
 } 
 i f </space/> ( w o r k ) 
 { 
 h i </space/> = </space/> m i d ; 
 } 
 e l s e 
 { 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> l o </space/> < < </space/> "" \ n "" ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c s t r i n g > 
 # d e f i n e </space/> m a x n </space/> 5 0 0 5 0 0 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> l , </space/> r ; 
 i n t </space/> n , </space/> m , </space/> s [ m a x n ] , </space/> w [ m a x n ] ; 
 
 i n l i n e </space/> i n t </space/> r e a d ( ) 
 { 
 i n t </space/> w </space/> = </space/> 1 , </space/> q </space/> = </space/> 0 ; 
 c h a r </space/> c h </space/> = </space/> ' </space/> ' ; 
 w h i l e </space/> ( c h </space/> ! = </space/> ' - ' </space/> & & </space/> ( c h </space/> < </space/> ' 0 ' </space/> | | </space/> c h </space/> > </space/> ' 9 ' ) ) 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 w </space/> = </space/> - 1 , </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( c h </space/> > = </space/> ' 0 ' </space/> & & </space/> c h </space/> < = </space/> ' 9 ' ) 
 q </space/> = </space/> q </space/> * </space/> 1 0 </space/> + </space/> c h </space/> - </space/> ' 0 ' , </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 r e t u r n </space/> w </space/> * </space/> q ; 
 } 
 
 i n l i n e </space/> v o i d </space/> w r i t e ( i n t </space/> x ) 
 { 
 i f </space/> ( x </space/> < </space/> 0 ) 
 { 
 x </space/> = </space/> ~ ( x </space/> - </space/> 1 ) ; 
 p u t c h a r ( ' - ' ) ; 
 } 
 i f </space/> ( x </space/> > </space/> 9 ) 
 w r i t e ( x </space/> / </space/> 1 0 ) ; 
 p u t c h a r ( x </space/> % </space/> 1 0 </space/> + </space/> ' 0 ' ) ; 
 } 
 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s [ i ] </space/> = </space/> w [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> < </space/> s [ i </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> - </space/> s [ i ] </space/> > </space/> x ) 
 r e t u r n </space/> f a l s e ; 
 s [ i ] </space/> = </space/> s [ i </space/> - </space/> 1 ] ; 
 } 
 e l s e </space/> i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> + </space/> m </space/> - </space/> s [ i ] </space/> < = </space/> x ) 
 s [ i ] </space/> = </space/> s [ i </space/> - </space/> 1 ] ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 n </space/> = </space/> r e a d ( ) ; 
 m </space/> = </space/> r e a d ( ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 w [ i ] </space/> = </space/> r e a d ( ) ; 
 } 
 r </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 w r i t e ( l ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 v e c t o r < i n t > </space/> z ( n ) ; 
 f o r </space/> ( i n t & </space/> i t </space/> : </space/> z ) 
 { 
 c i n </space/> > > </space/> i t ; 
 } 
 i n t </space/> l o </space/> = </space/> 0 , </space/> h i </space/> = </space/> k </space/> - </space/> 1 , </space/> m i d , </space/> a n s , </space/> x , </space/> p r e v ; 
 w h i l e </space/> ( l o </space/> < = </space/> h i ) 
 { 
 m i d </space/> = </space/> ( l o </space/> + </space/> h i ) </space/> > > </space/> 1 ; 
 p r e v </space/> = </space/> 0 ; 
 b o o l </space/> c h e c k </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 x </space/> = </space/> z [ i ] ; 
 i f </space/> ( p r e v </space/> > </space/> x ) 
 { 
 i f </space/> ( p r e v </space/> - </space/> x </space/> > </space/> m i d ) 
 { 
 c h e c k </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 x </space/> = </space/> p r e v ; 
 } 
 e l s e 
 { 
 i f </space/> ( p r e v </space/> < = </space/> ( x </space/> + </space/> m i d ) </space/> % </space/> k </space/> & & </space/> x </space/> > </space/> ( x </space/> + </space/> m i d ) </space/> % </space/> k ) 
 { 
 x </space/> = </space/> p r e v ; 
 } 
 } 
 p r e v </space/> = </space/> x ; 
 } 
 i f </space/> ( c h e c k ) 
 { 
 a n s </space/> = </space/> m i d ; 
 h i </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 { 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < s t r i n g > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> s z ( x ) </space/> ( ( i n t ) ( x ) . s i z e ( ) ) 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> d e b ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> ' = ' </space/> < < </space/> x </space/> < < </space/> e n d l 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 3 e 5 </space/> + </space/> 5 ; 
 l l </space/> n , </space/> m , </space/> a [ N ] , </space/> l [ N ] , </space/> r [ N ] ; 
 b o o l </space/> o k ( l l </space/> x ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l [ i ] </space/> = </space/> a [ i ] ; 
 r [ i ] </space/> = </space/> ( a [ i ] </space/> + </space/> x ) </space/> % </space/> m ; 
 } 
 l l </space/> p r e v </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( r [ i ] </space/> > = </space/> l [ i ] ) 
 { 
 i f </space/> ( p r e v </space/> > </space/> r [ i ] ) 
 { 
 r e t u r n </space/> f a l s e ; 
 } 
 p r e v </space/> = </space/> m a x ( p r e v , </space/> l [ i ] ) ; 
 } 
 e l s e 
 { 
 i f </space/> ( p r e v </space/> > </space/> r [ i ] ) 
 { 
 p r e v </space/> = </space/> m a x ( p r e v , </space/> l [ i ] ) ; 
 } 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 , </space/> l o w </space/> = </space/> 0 , </space/> h i g h </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( l o w </space/> < </space/> h i g h ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l o w </space/> + </space/> h i g h ) </space/> / </space/> 2 ; 
 i f </space/> ( o k ( m i d ) ) 
 { 
 h i g h </space/> = </space/> m i d ; 
 } 
 e l s e 
 { 
 l o w </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 a n s </space/> = </space/> l o w ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 
 # d e f i n e </space/> f o r n ( i , </space/> e ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> f o r s n ( i , </space/> s , </space/> e ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> s ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> r f o r n ( i , </space/> s ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> s ; </space/> ~ i ; </space/> i - - ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 b o o l </space/> c h e c k ( i n t </space/> x , </space/> i n t </space/> m , </space/> i n t </space/> n , </space/> v e c t o r < i n t > & </space/> a r r ) 
 { 
 i n t </space/> b a s e </space/> = </space/> 0 ; 
 f o r n ( i , </space/> n ) 
 { 
 i f </space/> ( a r r [ i ] </space/> = = </space/> b a s e ) 
 c o n t i n u e ; 
 i n t </space/> c o s t </space/> = </space/> ( m </space/> + </space/> b a s e </space/> - </space/> a r r [ i ] ) </space/> % </space/> m ; 
 i f </space/> ( c o s t </space/> > </space/> x ) 
 { 
 i f </space/> ( a r r [ i ] </space/> < </space/> b a s e ) 
 r e t u r n </space/> f a l s e ; 
 b a s e </space/> = </space/> a r r [ i ] ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 v e c t o r < i n t > </space/> a r r ( n ) ; 
 f o r n ( i , </space/> n ) </space/> c i n </space/> > > </space/> a r r [ i ] ; 
 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 
 i f </space/> ( c h e c k ( m i d , </space/> m , </space/> n , </space/> a r r ) ) 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 
 c o u t </space/> < < </space/> l </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f d e f </space/> k 4 d r o i d 3 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 / / </space/> i n t </space/> t ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 / / </space/> w h i l e ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> c h e c k ( i n t </space/> n , </space/> v e c t o r < i n t > & </space/> a , </space/> i n t </space/> m , </space/> i n t </space/> v a l ) 
 { 
 i n t </space/> c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> v a l </space/> > = </space/> m ) 
 { 
 i n t </space/> r </space/> = </space/> ( a [ i ] </space/> + </space/> v a l ) </space/> % </space/> m ; 
 i f </space/> ( r </space/> < </space/> c ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> v a l </space/> < </space/> c ) 
 r e t u r n </space/> f a l s e ; 
 c </space/> = </space/> m a x ( c , </space/> a [ i ] ) ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> v a l </space/> < </space/> c ) 
 r e t u r n </space/> f a l s e ; 
 c </space/> = </space/> m a x ( c , </space/> a [ i ] ) ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> l </space/> = </space/> - 1 , </space/> r </space/> = </space/> 1 e 9 </space/> + </space/> 2 2 8 ; 
 w h i l e </space/> ( r </space/> - </space/> l </space/> > </space/> 1 ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( n , </space/> a , </space/> m , </space/> m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d ; 
 } 
 c o u t </space/> < < </space/> r </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f d e f </space/> L O C A L 
 f r e o p e n ( "" i n . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 s o l v e ( ) ; 
 / / </space/> i n t </space/> t ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 / / </space/> w h i l e </space/> ( t - - ) 
 / / </space/> 	 s o l v e ( ) ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> M A X N </space/> 3 3 3 3 3 3 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> a n s ; 
 i n t </space/> n , </space/> m ; 
 i n t </space/> a [ M A X N ] ; 
 
 b o o l </space/> j u d g e ( i n t </space/> x ) 
 { 
 i n t </space/> m x </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> < </space/> m x ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> < </space/> m x ) 
 r e t u r n </space/> 0 ; 
 } 
 i f </space/> ( a [ i ] </space/> > </space/> m x ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> > = </space/> m </space/> & & </space/> a [ i ] </space/> + </space/> x </space/> - </space/> m </space/> > = </space/> m x ) 
 { 
 } 
 e l s e 
 m x </space/> = </space/> a [ i ] ; 
 } 
 } 
 r e t u r n </space/> 1 ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 } 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m , </space/> m i d ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> r </space/> > > </space/> 1 ; 
 i f </space/> ( j u d g e ( m i d ) ) 
 a n s </space/> = </space/> m i d , </space/> r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 p r i n t f ( "" % d "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> v [ 3 0 0 0 0 5 ] , </space/> n , </space/> m ; 
 
 b o o l </space/> v e r i f ( i n t </space/> t ) 
 { 
 i n t </space/> u </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( v [ i ] </space/> < </space/> u </space/> & & </space/> u </space/> - </space/> v [ i ] </space/> > </space/> t ) 
 r e t u r n </space/> 0 ; 
 e l s e </space/> i f </space/> ( v [ i ] </space/> > </space/> u </space/> & & </space/> u </space/> + </space/> m </space/> - </space/> v [ i ] </space/> > </space/> t ) 
 u </space/> = </space/> v [ i ] ; 
 r e t u r n </space/> 1 ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> v [ i ] ; 
 i n t </space/> s t </space/> = </space/> 0 , </space/> d r </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( s t </space/> < </space/> d r ) 
 { 
 i n t </space/> m i j </space/> = </space/> s t </space/> + </space/> ( d r </space/> - </space/> s t ) </space/> / </space/> 2 ; 
 i f </space/> ( v e r i f ( m i j ) </space/> ! = </space/> 0 ) 
 d r </space/> = </space/> m i j ; 
 e l s e 
 s t </space/> = </space/> m i j </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> s t </space/> < < </space/> ' \ n ' ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v e c t o r < i n t > </space/> a ; 
 v e c t o r < l o n g </space/> l o n g > </space/> x ; 
 i n t </space/> n , </space/> m ; 
 b o o l </space/> s o l v e ( l o n g </space/> l o n g </space/> m a x n ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 x [ i ] </space/> = </space/> a [ i ] ; 
 x [ n </space/> - </space/> 1 ] </space/> = </space/> m i n ( m </space/> - </space/> 1 L L , </space/> x [ n </space/> - </space/> 1 ] </space/> + </space/> m a x n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n </space/> - </space/> 2 ; </space/> i </space/> > = </space/> 0 ; </space/> - - i ) 
 { 
 i f </space/> ( x [ i ] </space/> < = </space/> x [ i </space/> + </space/> 1 ] ) 
 x [ i ] </space/> + = </space/> m i n ( x [ i </space/> + </space/> 1 ] </space/> - </space/> x [ i ] , </space/> m a x n ) ; 
 e l s e 
 { 
 i f </space/> ( m a x n </space/> - </space/> m </space/> + </space/> x [ i ] </space/> < </space/> 0 ) 
 r e t u r n </space/> f a l s e ; 
 x [ i ] </space/> = </space/> m i n ( x [ i </space/> + </space/> 1 ] , </space/> m a x n </space/> - </space/> m </space/> + </space/> x [ i ] ) ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 a . r e s i z e ( n ) ; 
 x . r e s i z e ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l o n g </space/> l o n g </space/> l o </space/> = </space/> 0 , </space/> h i </space/> = </space/> 1 L L </space/> < < </space/> 4 0 ; 
 w h i l e </space/> ( l o </space/> < </space/> h i ) 
 { 
 a u t o </space/> m i d </space/> = </space/> ( l o </space/> + </space/> h i ) </space/> / </space/> 2 ; 
 i f </space/> ( s o l v e ( m i d ) ) 
 h i </space/> = </space/> m i d ; 
 e l s e 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> h i </space/> < < </space/> ' \ n ' ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> v i </space/> v e c t o r < l l i > 
 # d e f i n e </space/> _ _ _ </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l i ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l o n g </space/> n , </space/> m , </space/> i , </space/> j , </space/> k , </space/> t , </space/> q , </space/> l , </space/> h , </space/> m i d ; 
 l l i </space/> m n </space/> = </space/> 1 0 0 0 0 0 0 1 0 0 , </space/> m x </space/> = </space/> - 1 L L , </space/> r e s , </space/> s u m </space/> = </space/> 0 L L ; 
 l o n g </space/> i n t </space/> a [ 3 0 0 0 0 5 ] , </space/> t e m p [ 3 0 0 0 0 5 ] ; 
 b o o l </space/> c h e c k ( l o n g </space/> i n t </space/> x ) 
 { 
 l o n g </space/> i n t </space/> l a s t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> = = </space/> l a s t ) 
 c o n t i n u e ; 
 i f </space/> ( a [ i ] </space/> > </space/> l a s t ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> > = </space/> m </space/> & & </space/> ( a [ i ] </space/> + </space/> x ) </space/> % </space/> m </space/> > = </space/> l a s t ) 
 { 
 } 
 e l s e 
 l a s t </space/> = </space/> a [ i ] ; 
 } 
 e l s e 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> < </space/> l a s t ) 
 r e t u r n </space/> 0 ; 
 } 
 } 
 r e t u r n </space/> 1 ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 _ _ _ 
 / / </space/> f r e o p e n ( "" C : \ \ U s e r s \ \ h a r s h \ \ D o c u m e n t s \ \ C o m p e t i t i v e </space/> C o d i n g \ \ i n . t x t "" , "" r "" , s t d i n ) ; 
 c i n 
 > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l </space/> = </space/> 0 , </space/> h </space/> = </space/> m ; 
 l o n g </space/> i n t </space/> a n s ; 
 w h i l e </space/> ( l </space/> < = </space/> h ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> h ) </space/> / </space/> 2 ; 
 b o o l </space/> b b </space/> = </space/> c h e c k ( m i d ) ; 
 / / </space/> c o u t < < m i d < < "" </space/> "" < < b b < < "" , \ n "" ; 
 i f </space/> ( b b ) 
 a n s </space/> = </space/> m i d , </space/> h </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p l l </space/> p a i r < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> d e b u g </space/> c o u t </space/> < < </space/> "" h e r e \ n "" 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 2 e 5 </space/> + </space/> 1 5 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n ; 
 m </space/> = </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> v ; 
 w h i l e </space/> ( m </space/> > </space/> 3 ) 
 { 
 n </space/> = </space/> m ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> * </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 { 
 m </space/> = </space/> i ; 
 i f </space/> ( ( i </space/> - </space/> 1 ) </space/> * </space/> ( i </space/> - </space/> 1 ) </space/> < </space/> n ) 
 b r e a k ; 
 v . p b ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 v . p b ( { </space/> n , </space/> m </space/> } ) ; 
 v . p b ( { </space/> n , </space/> m </space/> } ) ; 
 } 
 i f </space/> ( m </space/> = = </space/> 3 ) 
 { 
 v . p b ( { </space/> 3 , </space/> 2 </space/> } ) ; 
 v . p b ( { </space/> 3 , </space/> 2 </space/> } ) ; 
 } 
 c o u t </space/> < < </space/> v . s i z e ( ) ; 
 f o r </space/> ( a u t o </space/> p p </space/> : </space/> v ) 
 { 
 c o u t </space/> < < </space/> "" \ n "" </space/> < < </space/> p p . f </space/> < < </space/> "" </space/> "" </space/> < < </space/> p p . s ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c o u t . t i e ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( 1 2 ) ; 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < t i m e . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> k </space/> = </space/> c b r t ( n ) ; 
 l l </space/> c n t </space/> = </space/> 0 ; 
 v e c t o r < p a i r < l l , </space/> l l > > </space/> s o l ; 
 i f </space/> ( n </space/> < </space/> 1 0 ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < i < < "" </space/> "" < < i + 1 < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> i , </space/> i </space/> + </space/> 1 </space/> } ) ; 
 } 
 d o u b l e </space/> n n </space/> = </space/> n ; 
 w h i l e </space/> ( n n </space/> > </space/> 1 ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < n < < "" </space/> "" < < 2 < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> n , </space/> 2 </space/> } ) ; 
 n n </space/> / = </space/> 2 ; 
 } 
 } 
 e l s e 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 8 ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < i < < "" </space/> "" < < i + 1 < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> i , </space/> i </space/> + </space/> 1 </space/> } ) ; 
 } 
 } 
 d o u b l e </space/> n n </space/> = </space/> n ; 
 w h i l e </space/> ( n n </space/> > </space/> 1 ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < n < < "" </space/> "" < < k < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> n , </space/> 8 </space/> } ) ; 
 n n </space/> / = </space/> ( 1 . 0 </space/> * </space/> 8 ) ; 
 } 
 n n </space/> = </space/> 8 ; 
 w h i l e </space/> ( n n </space/> > </space/> 1 ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < k < < "" </space/> "" < < 2 < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> 8 , </space/> 2 </space/> } ) ; 
 n n </space/> / = </space/> 2 ; 
 } 
 } 
 c o u t </space/> < < </space/> c n t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> u </space/> : </space/> s o l ) 
 { 
 c o u t </space/> < < </space/> u . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> u . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # d e f i n e </space/> _ f o r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < </space/> ( b ) ; </space/> + + i ) 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 
 i n t </space/> f i n d ( i n t </space/> n ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> n , </space/> m i d , </space/> a n s ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 i f </space/> ( m i d </space/> > = </space/> c e i l ( 1 . 0 </space/> * </space/> n </space/> / </space/> m i d ) ) 
 { 
 a n s </space/> = </space/> m i d ; 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 { 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 v o i d </space/> s o l v e ( i n t </space/> n , </space/> v e c t o r < p i i > & </space/> a n s , </space/> i n t & </space/> m ) 
 { 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 r e t u r n ; 
 i n t </space/> y </space/> = </space/> f i n d ( n ) ; 
 m </space/> + = </space/> n </space/> - </space/> y </space/> - </space/> 1 ; 
 _ f o r ( i , </space/> y </space/> + </space/> 1 , </space/> n ) 
 { 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 } 
 m </space/> + = </space/> 2 ; 
 a n s . e m p l a c e _ b a c k ( n , </space/> y ) ; 
 a n s . e m p l a c e _ b a c k ( n , </space/> y ) ; 
 s o l v e ( y , </space/> a n s , </space/> m ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p i i > </space/> a n s ; 
 i n t </space/> m </space/> = </space/> 0 ; 
 s o l v e ( n , </space/> a n s , </space/> m ) ; 
 
 c o u t </space/> < < </space/> m </space/> < < </space/> ' \ n ' ; 
 f o r </space/> ( c o n s t </space/> a u t o & </space/> i t </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i t . f i r s t </space/> < < </space/> ' </space/> ' </space/> < < </space/> i t . s e c o n d </space/> < < </space/> ' \ n ' ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 , </space/> i n f </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t c </space/> = </space/> 1 , </space/> t </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> r s ; 
 v e c t o r < i n t > </space/> v e c ; 
 v e c . p u s h _ b a c k ( 2 ) ; 
 i n t </space/> p r v </space/> = </space/> n ; 
 w h i l e </space/> ( p r v </space/> > </space/> 2 ) 
 { 
 i n t </space/> c u r </space/> = </space/> i n t ( s q r t ( p r v </space/> - </space/> 1 ) ) ; 
 i f </space/> ( ( p r v </space/> - </space/> 1 </space/> + </space/> c u r ) </space/> / </space/> c u r </space/> > </space/> c u r ) 
 c u r + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> c u r </space/> + </space/> 1 ; </space/> i </space/> < </space/> p r v ; </space/> i + + ) 
 r s . p u s h _ b a c k ( m a k e _ p a i r ( i , </space/> p r v ) ) ; 
 r s . p u s h _ b a c k ( m a k e _ p a i r ( p r v , </space/> c u r ) ) ; 
 r s . p u s h _ b a c k ( m a k e _ p a i r ( p r v , </space/> c u r ) ) ; 
 p r v </space/> = </space/> c u r ; 
 } 
 c o u t </space/> < < </space/> r s . s i z e ( ) </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> r s ) 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s e c o n d </space/> < < </space/> "" \ n "" ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> c a l c u l a t e ( i n t </space/> n , </space/> i n t </space/> d i v ) 
 { 
 i n t </space/> c o u n t e r </space/> = </space/> 0 ; 
 w h i l e </space/> ( n </space/> ! = </space/> 1 ) 
 { 
 c o u n t e r + + ; 
 n </space/> = </space/> ( n </space/> + </space/> d i v </space/> - </space/> 1 ) </space/> / </space/> d i v ; 
 } 
 r e t u r n </space/> c o u n t e r ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t e s t ; 
 c i n </space/> > > </space/> t e s t ; 
 w h i l e </space/> ( t e s t - - ) 
 { 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> a n s ; 
 i n t </space/> n , </space/> i , </space/> f o ; 
 c i n </space/> > > </space/> n ; 
 i f </space/> ( n </space/> > </space/> 1 6 ) 
 { 
 f o r </space/> ( i </space/> = </space/> 1 7 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 f o </space/> = </space/> c a l c u l a t e ( n , </space/> 1 6 ) ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> f o ; </space/> i + + ) 
 a n s . e m p l a c e _ b a c k ( n , </space/> 1 6 ) ; 
 n </space/> = </space/> 1 6 ; 
 } 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 f o </space/> = </space/> c a l c u l a t e ( n , </space/> 2 ) ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> f o ; </space/> i + + ) 
 a n s . e m p l a c e _ b a c k ( n , </space/> 2 ) ; 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f ( n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o ( n ) </space/> f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v p </space/> v e c t o r < p i i > 
 # d e f i n e </space/> t e s t </space/> \ 
 i n t </space/> t t ; </space/> \ 
 c i n </space/> > > </space/> t t ; </space/> \ 
 w h i l e </space/> ( t t - - ) 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 v o i d </space/> f a s t i o ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" a i n . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" a o u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t i o ( ) ; 
 t e s t 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v p </space/> a n s ; 
 i f </space/> ( n </space/> < = </space/> 3 2 ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s . p b ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 i n t </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s . p b ( { </space/> n , </space/> 2 </space/> } ) ; 
 x </space/> = </space/> ( x </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 } 
 } 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 3 2 ) 
 { 
 a n s . p b ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 } 
 i n t </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s . p b ( { </space/> n , </space/> 3 2 </space/> } ) ; 
 x </space/> = </space/> ( x </space/> + </space/> 3 1 ) </space/> / </space/> 3 2 ; 
 } 
 f ( 5 ) 
 { 
 a n s . p b ( { </space/> 3 2 , </space/> 2 </space/> } ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> x . f f </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s s </space/> < < </space/> e n d l ; 
 } 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c o u t . t i e ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a n s ; 
 w h i l e </space/> ( n </space/> > </space/> 2 ) 
 { 
 i n t </space/> s </space/> = </space/> s q r t ( n ) </space/> + </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> s </space/> + </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 a n s . e m p l a c e _ b a c k ( n , </space/> s ) ; 
 a n s . e m p l a c e _ b a c k ( n , </space/> s ) ; 
 n </space/> = </space/> s ; 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> e l </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> e l . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> e l . s e c o n d </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 
 l l </space/> p o w e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 l l </space/> r e s </space/> = </space/> p o w e r ( a , </space/> b </space/> / </space/> 2 ) ; 
 r e s </space/> = </space/> r e s </space/> * </space/> r e s ; 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a ; 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( 0 ) ; 
 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> v ; 
 i n t </space/> i </space/> = </space/> n ; 
 w h i l e </space/> ( i </space/> > </space/> 2 ) 
 { 
 i n t </space/> j </space/> = </space/> i </space/> - </space/> 1 ; 
 / / </space/> l l </space/> x </space/> = </space/> ( j - 1 ) * ( j - 1 ) ; 
 w h i l e </space/> ( ( l l ) ( j </space/> - </space/> 1 ) </space/> * </space/> ( j </space/> - </space/> 1 ) </space/> > = </space/> i </space/> & & </space/> j </space/> > </space/> 2 ) 
 { 
 v . p u s h _ b a c k ( { </space/> i , </space/> j </space/> } ) ; 
 j - - ; 
 } 
 v . p u s h _ b a c k ( { </space/> j , </space/> i </space/> } ) ; 
 v . p u s h _ b a c k ( { </space/> j , </space/> i </space/> } ) ; 
 i </space/> = </space/> j ; 
 } 
 c o u t </space/> < < </space/> ( l l ) v . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> v ) 
 { 
 c o u t </space/> < < </space/> a . s e c o n d </space/> < < </space/> ' </space/> ' </space/> < < </space/> a . f i r s t </space/> < < </space/> e n d l ; 
 } 
 } 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> r e p ( i , </space/> m , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> m ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> p e r ( i , </space/> m , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> m ; </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> I N F </space/> 0 x 3 f 3 f 3 f 3 f 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> N ; 
 c i n </space/> > > </space/> N ; 
 i f </space/> ( N </space/> = = </space/> 2 ) 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> "" \ n "" ; 
 i f </space/> ( N </space/> < = </space/> 8 ) 
 { 
 i n t </space/> s u m </space/> = </space/> N </space/> - </space/> 3 ; 
 i n t </space/> x </space/> = </space/> N ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 x </space/> = </space/> c e i l ( ( d o u b l e ) x </space/> / </space/> ( d o u b l e ) 2 ) ; 
 s u m + + ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> "" \ n "" ; 
 r e p ( i , </space/> 3 , </space/> N </space/> - </space/> 1 ) </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> N </space/> < < </space/> ' \ n ' ; 
 r e p ( i , </space/> 1 , </space/> s u m </space/> - </space/> ( N </space/> - </space/> 3 ) ) 
 { 
 c o u t </space/> < < </space/> N </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 e l s e 
 { 
 i n t </space/> s u m </space/> = </space/> N </space/> - </space/> 4 ; 
 i n t </space/> x </space/> = </space/> N ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 x </space/> = </space/> c e i l ( ( d o u b l e ) x </space/> / </space/> ( d o u b l e ) 8 ) ; 
 s u m + + ; 
 } 
 s u m </space/> + = </space/> 3 ; 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> "" \ n "" ; 
 r e p ( i , </space/> 3 , </space/> N </space/> - </space/> 1 ) </space/> i f </space/> ( i </space/> ! = </space/> 8 ) </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> N </space/> < < </space/> "" \ n "" ; 
 r e p ( i , </space/> 1 , </space/> ( s u m </space/> - </space/> ( N </space/> - </space/> 1 ) ) ) </space/> c o u t </space/> < < </space/> N </space/> < < </space/> "" </space/> "" </space/> < < </space/> 8 </space/> < < </space/> "" \ n "" ; 
 r e p ( i , </space/> 1 , </space/> 3 ) </space/> c o u t </space/> < < </space/> 8 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n d l l </space/> ' \ n ' 
 v o i d </space/> s o l v e ( v o i d ) ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 l l </space/> _ _ _ ; 
 c i n </space/> > > </space/> _ _ _ ; 
 w h i l e </space/> ( _ _ _ - - ) 
 s o l v e ( ) ; 
 } 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < l l , </space/> l l > > </space/> a n s ; 
 l l </space/> i </space/> = </space/> n , </space/> j </space/> = </space/> i , </space/> c </space/> = </space/> 0 ; 
 w h i l e </space/> ( - - j </space/> > </space/> 1 ) 
 i f </space/> ( ( j </space/> - </space/> 1 ) </space/> * </space/> ( j </space/> - </space/> 1 ) </space/> < </space/> i ) 
 a n s . p u s h _ b a c k ( { </space/> i , </space/> j </space/> } ) , </space/> a n s . p u s h _ b a c k ( { </space/> i , </space/> j </space/> } ) , </space/> i </space/> = </space/> j ; 
 e l s e 
 a n s . p u s h _ b a c k ( { </space/> j , </space/> i </space/> } ) ; 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l l ; 
 f o r </space/> ( a u t o & </space/> x </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> ' </space/> ' </space/> < < </space/> x . s e c o n d </space/> < < </space/> e n d l l ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> P B </space/> p u s h _ b a c k 
 # d e f i n e </space/> M P </space/> m a k e _ p a i r 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> i , </space/> j , </space/> k , </space/> l , </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < l l , </space/> l l > </space/> > </space/> v ; 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 4 </space/> & & </space/> i </space/> ! = </space/> 1 6 ) 
 v . P B ( { </space/> i , </space/> i </space/> + </space/> 1 </space/> } ) ; 
 } 
 i f </space/> ( n </space/> > </space/> 1 6 ) 
 { 
 j </space/> = </space/> n ; 
 w h i l e </space/> ( j </space/> > </space/> 1 ) 
 { 
 v . P B ( { </space/> n , </space/> 1 6 </space/> } ) ; 
 j </space/> = </space/> ( j </space/> + </space/> 1 5 ) </space/> / </space/> 1 6 ; 
 } 
 v . P B ( { </space/> 1 6 , </space/> 4 </space/> } ) ; 
 v . P B ( { </space/> 1 6 , </space/> 4 </space/> } ) ; 
 v . P B ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 v . P B ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 } 
 e l s e 
 { 
 j </space/> = </space/> n ; 
 w h i l e </space/> ( j </space/> > </space/> 1 ) 
 { 
 v . P B ( { </space/> n , </space/> 2 </space/> } ) ; 
 j </space/> = </space/> ( j </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 } 
 i f </space/> ( n </space/> > </space/> 4 ) 
 { 
 v . P B ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 v . P B ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 } 
 } 
 c o u t </space/> < < </space/> v . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 c o u t </space/> < < </space/> v [ i ] . F </space/> < < </space/> "" </space/> "" </space/> < < </space/> v [ i ] . S </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> s p e c i a l [ 2 0 0 0 1 0 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 1 ; </space/> t </space/> < = </space/> T ; </space/> t + + ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s p e c i a l [ i ] </space/> = </space/> f a l s e ; 
 v e c t o r < i n t > </space/> v ; 
 f o r </space/> ( i n t </space/> t m p </space/> = </space/> n ; </space/> t m p </space/> > </space/> 2 ; </space/> t m p </space/> = </space/> ( i n t ) ( c e i l ( s q r t ( t m p ) ) ) ) 
 { 
 s p e c i a l [ t m p ] </space/> = </space/> t r u e ; 
 v . p u s h _ b a c k ( t m p ) ; 
 } 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> a n s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s p e c i a l [ i ] ) 
 c o n t i n u e ; 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> i , </space/> n </space/> } ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> v . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> v [ i ] , </space/> v [ i </space/> + </space/> 1 ] </space/> } ) ; 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> v [ i ] , </space/> v [ i </space/> + </space/> 1 ] </space/> } ) ; 
 } 
 e l s e 
 { 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> v [ i ] , </space/> 2 </space/> } ) ; 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> v [ i ] , </space/> 2 </space/> } ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a n s . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a n s [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> a n s [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> f a s t ( v o i d ) </space/> _ _ a t t r i b u t e _ _ ( ( c o n s t r u c t o r ) ) ; 
 v o i d </space/> f a s t ( v o i d ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> c o u n t </space/> = </space/> 0 ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a n s ; 
 c i n </space/> > > </space/> n ; 
 i f </space/> ( n </space/> < = </space/> 1 3 ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 c o u n t + + ; 
 } 
 d o u b l e </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> > </space/> 1 . 0 ) 
 { 
 a n s . e m p l a c e _ b a c k ( n , </space/> 2 ) ; 
 x </space/> = </space/> ( 1 . 0 </space/> * </space/> x ) </space/> / </space/> 2 ; 
 c o u n t + + ; 
 } 
 } 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> 1 2 ; </space/> + + i ) 
 { 
 a n s . e m p l a c e _ b a c k ( i , </space/> 1 2 ) ; 
 c o u n t + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 c o u n t + + ; 
 } 
 
 d o u b l e </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> > </space/> 1 . 0 ) 
 { 
 a n s . e m p l a c e _ b a c k ( n , </space/> 1 2 ) ; 
 x </space/> = </space/> ( 1 . 0 </space/> * </space/> x ) </space/> / </space/> 1 2 ; 
 c o u n t + + ; 
 } 
 
 x </space/> = </space/> 1 2 ; 
 w h i l e </space/> ( x </space/> > </space/> 1 . 0 ) 
 { 
 a n s . e m p l a c e _ b a c k ( 1 2 , </space/> 2 ) ; 
 x </space/> = </space/> ( 1 . 0 </space/> * </space/> x ) </space/> / </space/> 2 ; 
 c o u n t + + ; 
 } 
 } 
 
 c o u t </space/> < < </space/> c o u n t </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> c </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> c . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> c . s e c o n d </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( v o i d ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> c o u n t ( i n t </space/> n ) 
 { 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( n </space/> = = </space/> 3 ) 
 r e t u r n </space/> 2 ; 
 i f </space/> ( n </space/> = = </space/> 4 ) 
 r e t u r n </space/> 3 ; 
 i n t </space/> k </space/> = </space/> c e i l ( s q r t ( n ) ) ; 
 i n t </space/> s u m </space/> = </space/> n </space/> - </space/> k </space/> + </space/> 1 ; 
 r e t u r n </space/> s u m </space/> + </space/> c o u n t ( k ) ; 
 } 
 v o i d </space/> f u n ( i n t </space/> n ) 
 { 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 r e t u r n ; 
 i f </space/> ( n </space/> = = </space/> 3 ) 
 { 
 c o u t </space/> < < </space/> 3 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> 3 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 i n t </space/> k </space/> = </space/> c e i l ( s q r t ( n ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> k </space/> + </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> i </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> k </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> k </space/> < < </space/> e n d l ; 
 f u n ( k ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 c o u t </space/> < < </space/> c o u n t ( n ) </space/> < < </space/> e n d l ; 
 f u n ( n ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p a i i ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 1 e 9 ; 
 i n t </space/> c e i l 1 ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> % </space/> b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a </space/> / </space/> b ; 
 e l s e 
 r e t u r n </space/> a </space/> / </space/> b </space/> + </space/> 1 ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> c n t </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 i f </space/> ( n </space/> < = </space/> 8 ) 
 { 
 c n t </space/> = </space/> n </space/> - </space/> 3 ; 
 i n t </space/> t </space/> = </space/> n ; 
 w h i l e </space/> ( t </space/> > = </space/> 2 ) 
 { 
 t </space/> = </space/> c e i l 1 ( t , </space/> 2 ) ; 
 c n t + + ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> c n t ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 p r i n t f ( "" % d </space/> % d \ n "" , </space/> i , </space/> n ) ; 
 } 
 t </space/> = </space/> n ; 
 w h i l e </space/> ( t </space/> > = </space/> 2 ) 
 { 
 t </space/> = </space/> c e i l 1 ( t , </space/> 2 ) ; 
 p r i n t f ( "" % d </space/> 2 \ n "" , </space/> n ) ; 
 } 
 } 
 e l s e 
 { 
 c n t </space/> = </space/> n </space/> - </space/> 1 ; 
 i n t </space/> t </space/> = </space/> n ; 
 w h i l e </space/> ( t </space/> > = </space/> 2 ) 
 { 
 t </space/> = </space/> c e i l 1 ( t , </space/> 8 ) ; 
 c n t + + ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> c n t ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 8 ) 
 p r i n t f ( "" % d </space/> % d \ n "" , </space/> i , </space/> n ) ; 
 } 
 t </space/> = </space/> n ; 
 w h i l e </space/> ( t </space/> > = </space/> 2 ) 
 { 
 t </space/> = </space/> c e i l 1 ( t , </space/> 8 ) ; 
 p r i n t f ( "" % d </space/> 8 \ n "" , </space/> n ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 3 ; </space/> i + + ) 
 { 
 p r i n t f ( "" 8 </space/> 2 \ n "" ) ; 
 } 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 l l </space/> g c d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 e l s e 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> n m a x </space/> = </space/> 2 0 0 0 1 0 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 i n t </space/> T ; 
 i n t </space/> n , </space/> m ; 
 s t r i n g </space/> c u r ; 
 i n t </space/> q [ n m a x ] ; 
 b o o l </space/> u s e d [ n m a x ] ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> a n s ; 
 w h i l e </space/> ( n </space/> > </space/> 2 ) 
 { 
 i n t </space/> s </space/> = </space/> s q r t ( 1 . 0 </space/> * </space/> n ) ; 
 i f </space/> ( s </space/> * </space/> s </space/> < = </space/> n ) 
 s + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> s </space/> + </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s . p u s h _ b a c k ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 a n s . p u s h _ b a c k ( { </space/> n , </space/> s </space/> } ) ; 
 a n s . p u s h _ b a c k ( { </space/> n , </space/> s </space/> } ) ; 
 n </space/> = </space/> s ; 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s r a n d ( t i m e ( 0 ) ) ; 
 s t d : : i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 
 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ s e t < i n t > </space/> r o o t ; 
 i n t </space/> s </space/> = </space/> n , </space/> k </space/> = </space/> 1 , </space/> s n </space/> = </space/> n ; 
 w h i l e </space/> ( s n </space/> > </space/> 2 ) 
 { 
 s </space/> = </space/> s q r t ( s n ) ; 
 i f </space/> ( s </space/> * </space/> s </space/> ! = </space/> s n ) 
 + + s ; 
 / / </space/> c o u t < < s < < e n d l ; 
 i f </space/> ( s </space/> > </space/> 2 ) 
 { 
 + + k ; 
 r o o t . i n s e r t ( s ) ; 
 } 
 s n </space/> = </space/> s ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> ( k </space/> + </space/> 2 ) </space/> + </space/> ( k </space/> * </space/> 2 ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( r o o t . f i n d ( i ) </space/> = = </space/> r o o t . e n d ( ) ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> x </space/> = </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> k ; </space/> + + i ) 
 { 
 i n t </space/> y </space/> = </space/> s q r t ( x ) ; 
 i f </space/> ( y </space/> * </space/> y </space/> ! = </space/> x ) 
 + + y ; 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 x </space/> = </space/> y ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s e t > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b , </space/> k </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> r ; 
 i f </space/> ( a </space/> > = </space/> b ) 
 r </space/> = </space/> a </space/> - </space/> b ; 
 e l s e 
 r </space/> = </space/> b </space/> - </space/> a ; 
 i n t </space/> c </space/> = </space/> r </space/> % </space/> 1 0 ; 
 k </space/> = </space/> r </space/> / </space/> 1 0 ; 
 i f </space/> ( c </space/> ! = </space/> 0 ) 
 k + + ; 
 p r i n t f ( "" % d \ n "" , </space/> k ) ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 l o n g </space/> l o n g </space/> i n t </space/> a , </space/> b , </space/> a b s v a l ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 a b s v a l </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( a b s v a l </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a b s v a l </space/> < < </space/> e n d l ; 
 } 
 e l s e </space/> i f </space/> ( a b s v a l </space/> < = </space/> 1 0 ) 
 { 
 c o u t </space/> < < </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i f </space/> ( a b s v a l </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a b s v a l </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a b s v a l </space/> / </space/> 1 0 ) </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < i t e r a t o r > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < t u p l e > 
 # i n c l u d e </space/> < s t r i n g > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 0 ; </space/> t </space/> < </space/> T ; </space/> + + t ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 i n t </space/> a n s </space/> = </space/> ( b </space/> - </space/> a ) </space/> / </space/> 1 0 </space/> + </space/> ( b </space/> % </space/> 1 0 </space/> ! = </space/> a </space/> % </space/> 1 0 ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 i n t </space/> t </space/> = </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> 9 ; 
 t </space/> = </space/> t </space/> / </space/> 1 0 ; 
 c o u t </space/> < < </space/> t </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 c o u t </space/> < < </space/> "" \ n T i m e </space/> E l a p s e d : </space/> "" </space/> < < </space/> 1 . 0 </space/> * </space/> c l o c k ( ) </space/> / </space/> C L O C K S _ P E R _ S E C </space/> < < </space/> "" </space/> s e c \ n "" ; 
 # e n d i f 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 i n t </space/> n u m s [ ] </space/> = </space/> { </space/> 1 0 , </space/> 9 , </space/> 8 , </space/> 7 , </space/> 6 , </space/> 5 , </space/> 4 , </space/> 3 , </space/> 2 , </space/> 1 </space/> } ; 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 0 ; </space/> t </space/> < </space/> T ; </space/> t + + ) 
 { 
 i n t </space/> i </space/> = </space/> 0 ; 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> m o v e s </space/> = </space/> 0 ; 
 i n t </space/> t o c h e c k </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 w h i l e </space/> ( t o c h e c k </space/> > </space/> 0 ) 
 { 
 m o v e s </space/> + = </space/> ( t o c h e c k </space/> - </space/> ( t o c h e c k </space/> % </space/> n u m s [ i ] ) ) </space/> / </space/> n u m s [ i ] ; 
 t o c h e c k </space/> - = </space/> ( t o c h e c k </space/> - </space/> ( t o c h e c k </space/> % </space/> n u m s [ i ] ) ) ; 
 i + + ; 
 } 
 } 
 e l s e </space/> i f </space/> ( b </space/> > </space/> a ) 
 { 
 w h i l e </space/> ( t o c h e c k </space/> > </space/> 0 ) 
 { 
 m o v e s </space/> + = </space/> ( t o c h e c k </space/> - </space/> ( t o c h e c k </space/> % </space/> n u m s [ i ] ) ) </space/> / </space/> n u m s [ i ] ; 
 t o c h e c k </space/> - = </space/> ( t o c h e c k </space/> - </space/> ( t o c h e c k </space/> % </space/> n u m s [ i ] ) ) ; 
 i + + ; 
 } 
 } 
 c o u t </space/> < < </space/> m o v e s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 0 ; </space/> k </space/> < </space/> t ; </space/> k + + ) 
 { 
 l o n g </space/> l o n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 l o n g </space/> l o n g </space/> c </space/> = </space/> a ; 
 a </space/> = </space/> b ; 
 b </space/> = </space/> c ; 
 } 
 b </space/> - = </space/> a ; 
 a </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> c n t </space/> = </space/> 0 ; 
 i n t </space/> i </space/> = </space/> 1 0 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( i </space/> < </space/> 1 ) 
 { 
 b r e a k ; 
 } 
 c n t </space/> + = </space/> b </space/> / </space/> i ; 
 b </space/> = </space/> b </space/> % </space/> i ; 
 i - - ; 
 } 
 c o u t </space/> < < </space/> c n t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( b </space/> > </space/> a ) 
 { 
 c o u t </space/> < < </space/> ( b </space/> - </space/> a </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a </space/> - </space/> b </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 1 7 : 5 0 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 2 0 : 5 1 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 2 1 : 0 5 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 2 7 : 5 3 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 3 0 : 5 4 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 3 4 : 0 6 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> + + i ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> m a x x i m </space/> = </space/> a ; 
 i n t </space/> m i n n i m </space/> = </space/> b ; 
 i f </space/> ( b </space/> > </space/> a ) 
 { 
 m a x x i m </space/> = </space/> b ; 
 m i n n i m </space/> = </space/> a ; 
 } 
 
 i n t </space/> r e s u l t </space/> = </space/> ( m a x x i m </space/> - </space/> m i n n i m ) </space/> / </space/> 1 0 ; 
 i f </space/> ( ( ( m a x x i m </space/> - </space/> m i n n i m ) </space/> % </space/> 1 0 ) </space/> ! = </space/> 0 ) 
 { 
 r e s u l t </space/> = </space/> r e s u l t </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> r e s u l t </space/> < < </space/> e n d l ; 
 } 
 
 / / </space/> c o u t </space/> < < </space/> "" H e l l o </space/> w o r l d ! "" </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 / * </space/> S u n </space/> A p r </space/> 0 4 </space/> 2 0 2 1 </space/> 2 3 : 1 1 : 0 4 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> o p t i m i z e ( ) </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 o p t i m i z e ( ) ; 
 i n t </space/> i , </space/> n , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> c </space/> = </space/> 0 ; 
 i n t </space/> a n s ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> "" 0 "" </space/> < < </space/> e n d l ; 
 } 
 
 e l s e 
 { 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 a n s </space/> = </space/> a </space/> - </space/> b ; 
 i n t </space/> a n s 1 </space/> = </space/> a n s </space/> / </space/> 1 0 ; 
 
 c </space/> = </space/> c </space/> + </space/> a n s 1 ; 
 i f </space/> ( a n s </space/> = = </space/> ( a n s 1 </space/> * </space/> 1 0 ) ) 
 { 
 c o u t </space/> < < </space/> c </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> c </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
 e l s e 
 { 
 
 a n s </space/> = </space/> b </space/> - </space/> a ; 
 i n t </space/> a n s 1 </space/> = </space/> a n s </space/> / </space/> 1 0 ; 
 
 c </space/> = </space/> c </space/> + </space/> a n s 1 ; 
 i f </space/> ( a n s </space/> = = </space/> ( a n s 1 </space/> * </space/> 1 0 ) ) 
 { 
 c o u t </space/> < < </space/> c </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> c </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i n t </space/> r e t [ t ] ; 
 i n t </space/> i </space/> = </space/> 0 ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> d </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 r e t [ i + + ] </space/> = </space/> d </space/> / </space/> 1 0 </space/> + </space/> ( d </space/> % </space/> 1 0 </space/> = = </space/> 0 </space/> ? </space/> 0 </space/> : </space/> 1 ) ; 
 } 
 f o r </space/> ( i n t </space/> x </space/> : </space/> r e t ) 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> x </space/> = </space/> 1 ; 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> x ; 
 w h i l e </space/> ( x - - ) 
 { 
 l o n g </space/> l o n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 l o n g </space/> l o n g </space/> d </space/> = </space/> ( - a </space/> + </space/> b ) ; 
 i f </space/> ( d </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 l o n g </space/> l o n g </space/> t </space/> = </space/> d </space/> / </space/> 1 0 ; 
 i f </space/> ( d </space/> % </space/> 1 0 </space/> ! = </space/> 0 ) 
 t + + ; 
 c o u t </space/> < < </space/> t </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> T ; 
 i n t </space/> a , </space/> b ; 
 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d "" , </space/> & T ) ; 
 w h i l e </space/> ( T - - ) 
 { 
 s c a n f ( "" % d </space/> % d "" , </space/> & a , </space/> & b ) ; 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 i f </space/> ( a </space/> ! = </space/> b ) 
 r e s </space/> = </space/> ( a b s ( a </space/> - </space/> b ) </space/> - </space/> 1 ) </space/> / </space/> 1 0 </space/> + </space/> 1 ; 
 p r i n t f ( "" % d \ n "" , </space/> r e s ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i n t </space/> a r r [ t ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> + + i ) 
 { 
 i n t </space/> a , </space/> b , </space/> m o v e s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 a r r [ i ] </space/> = </space/> 0 ; 
 c o n t i n u e ; 
 } 
 i n t </space/> t e m p ; 
 i f </space/> ( a </space/> > </space/> b ) 
 t e m p </space/> = </space/> a </space/> - </space/> b ; 
 e l s e 
 t e m p </space/> = </space/> b </space/> - </space/> a ; 
 i f </space/> ( t e m p </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 { 
 a r r [ i ] </space/> = </space/> t e m p </space/> / </space/> 1 0 ; 
 } 
 i f </space/> ( t e m p </space/> % </space/> 1 0 </space/> ! = </space/> 0 ) 
 { 
 a r r [ i ] </space/> = </space/> ( t e m p </space/> / </space/> 1 0 </space/> + </space/> 1 ) ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> a , </space/> b , </space/> r </space/> = </space/> 0 , </space/> t e s t ; 
 d o u b l e </space/> t ; 
 c i n </space/> > > </space/> t e s t ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t e s t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 
 t </space/> = </space/> b </space/> - </space/> a ; 
 t </space/> = </space/> t </space/> / </space/> 1 0 ; 
 r </space/> = </space/> c e i l ( t ) ; 
 } 
 e l s e </space/> i f </space/> ( a </space/> > </space/> b ) 
 { 
 t </space/> = </space/> a </space/> - </space/> b ; 
 t </space/> = </space/> t </space/> / </space/> 1 0 ; 
 r </space/> = </space/> c e i l ( t ) ; 
 } 
 e l s e </space/> i f </space/> ( a </space/> = = </space/> b ) 
 { 
 r </space/> = </space/> 0 ; 
 } 
 c o u t </space/> < < </space/> r </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> a n s ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> a n s w e r ; 
 i n t </space/> c </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( c </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 { 
 a n s w e r </space/> = </space/> c </space/> / </space/> 1 0 ; 
 } 
 e l s e 
 { 
 a n s w e r </space/> = </space/> c </space/> / </space/> 1 0 </space/> + </space/> 1 ; 
 } 
 r e t u r n </space/> a n s w e r ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i n t </space/> a [ t ] , </space/> b [ t ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] </space/> > > </space/> b [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a n s ( a [ i ] , </space/> b [ i ] ) </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 i n t </space/> d i f f </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( d i f f </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> ( d i f f </space/> / </space/> 1 0 ) </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> ( d i f f </space/> / </space/> 1 0 ) </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 c o u t </space/> < < </space/> ( a b s ( n </space/> - </space/> m ) </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> a , </space/> b , </space/> i , </space/> j , </space/> c n t </space/> = </space/> 0 , </space/> c n t 1 </space/> = </space/> 0 , </space/> n , </space/> f l a g </space/> = </space/> 0 , </space/> f l a g _ m a i n </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 c o u t </space/> < < </space/> ( a </space/> - </space/> b </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 e l s e </space/> i f </space/> ( b </space/> > </space/> a ) 
 { 
 c o u t </space/> < < </space/> ( b </space/> - </space/> a </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i n c l u d e </space/> < s t r i n g . h > 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> l o o p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l i </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> r l o o p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l i </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 
 l l i </space/> c h e c k ( s t r i n g </space/> x , </space/> s t r i n g </space/> y , </space/> l l i </space/> n ) 
 { 
 l l i </space/> z </space/> = </space/> n </space/> - </space/> 1 ; 
 f o r </space/> ( l l i </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 i f </space/> ( x [ i ] </space/> = = </space/> y [ i ] ) 
 { 
 z </space/> = </space/> i ; 
 } 
 e l s e 
 { 
 b r e a k ; 
 } 
 } 
 r e t u r n </space/> z ; 
 } 
 
 l l i </space/> s r c h ( s t r i n g </space/> x , </space/> l l i </space/> n ) 
 { 
 l l i </space/> z , </space/> a , </space/> b , </space/> c ; 
 z </space/> = </space/> 0 ; 
 c </space/> = </space/> 0 ; 
 a </space/> = </space/> b </space/> = </space/> 0 ; 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( x [ i ] </space/> = = </space/> ' 0 ' ) 
 { 
 a + + ; 
 } 
 e l s e 
 { 
 b + + ; 
 } 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 z </space/> = </space/> a ; 
 c </space/> = </space/> i ; 
 } 
 } 
 r e t u r n </space/> c ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 l l i </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l i </space/> a , </space/> b , </space/> z ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 z </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 z </space/> = </space/> z </space/> / </space/> 1 0 </space/> + </space/> b o o l ( z </space/> % </space/> 1 0 ) ; 
 c o u t </space/> < < </space/> z </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> s e t u p ( ) </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> N I L </space/> - 1 
 # d e f i n e </space/> M A X </space/> 5 
 # d e f i n e </space/> M O D </space/> 1 e 9 </space/> + </space/> 7 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 m a p < s t r i n g , </space/> i n t > </space/> m ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s e t u p ( ) ; 
 / / </space/> i n i t i a l i z e ( ) ; 
 i n t </space/> t t ; 
 c i n </space/> > > </space/> t t ; 
 / / </space/> t t </space/> = </space/> 1 ; 
 w h i l e </space/> ( t t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> c n t ; 
 i n t </space/> m a i n ( ) 
 { 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 w h i l e </space/> ( n - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> c </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( c </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> c </space/> / </space/> 1 0 </space/> < < </space/> "" \ n "" ; 
 e l s e 
 c o u t </space/> < < </space/> c </space/> / </space/> 1 0 </space/> + </space/> 1 </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i n t </space/> d </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i n t </space/> r e s </space/> = </space/> ( d </space/> % </space/> 1 0 ) </space/> ? </space/> ( d </space/> / </space/> 1 0 </space/> + </space/> 1 ) </space/> : </space/> ( d </space/> / </space/> 1 0 ) ; 
 c o u t </space/> < < </space/> r e s </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b , </space/> c o u n t , </space/> n ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c o u n t </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> k </space/> = </space/> b </space/> - </space/> a ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 0 ; </space/> k </space/> ! = </space/> 0 ; </space/> i - - ) 
 { 
 n </space/> = </space/> k </space/> / </space/> i ; 
 c o u n t </space/> + = </space/> n ; 
 k </space/> = </space/> k </space/> % </space/> i ; 
 } 
 c o u t </space/> < < </space/> a b s ( c o u n t ) </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> f u ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> f d ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i n t </space/> N , </space/> P , </space/> Q , </space/> R , </space/> S , </space/> T ; 
 s t d : : c i n </space/> > > </space/> N ; 
 w h i l e </space/> ( N - - ) 
 { 
 s t d : : c i n </space/> > > </space/> S </space/> > > </space/> T ; 
 i f </space/> ( S </space/> > = </space/> T ) 
 { 
 Q </space/> = </space/> T ; 
 T </space/> = </space/> S ; 
 S </space/> = </space/> Q ; 
 } 
 i n t </space/> d i f f </space/> = </space/> T </space/> - </space/> S ; 
 i n t </space/> c o n t </space/> = </space/> 0 ; 
 w h i l e </space/> ( d i f f ) 
 { 
 i f </space/> ( d i f f </space/> > = </space/> 1 0 ) 
 { 
 i n t </space/> t m p </space/> = </space/> d i f f </space/> / </space/> 1 0 ; 
 c o n t </space/> + = </space/> t m p ; 
 d i f f </space/> - = </space/> t m p </space/> * </space/> 1 0 ; 
 } 
 e l s e 
 { 
 c o n t + + ; 
 d i f f </space/> = </space/> 0 ; 
 } 
 } 
 s t d : : c o u t </space/> < < </space/> c o n t </space/> < < </space/> s t d : : e n d l ; 
 } 
 # i f d e f </space/> D E B U G 
 
 # e n d i f 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> x , </space/> y ; 
 l o n g </space/> l o n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 x </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 y </space/> = </space/> x </space/> / </space/> 1 0 ; 
 i f </space/> ( x </space/> % </space/> 1 0 </space/> > </space/> 0 ) 
 y + + ; 
 c o u t </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> ' \ n ' ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l o n g </space/> l o n g </space/> i n t </space/> c o u n t ; 
 l o n g </space/> l o n g </space/> i n t </space/> d </space/> = </space/> a b s ( b </space/> - </space/> a ) ; 
 
 c o u n t </space/> = </space/> d </space/> / </space/> 1 0 ; 
 
 d </space/> = </space/> d </space/> % </space/> 1 0 ; 
 i f </space/> ( d ) 
 c o u n t + + ; 
 
 c o u t </space/> < < </space/> c o u n t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m a x n </space/> 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l l </space/> x </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 c o n t i n u e ; 
 } 
 l l </space/> s u m </space/> = </space/> 0 ; 
 s u m </space/> = </space/> x </space/> / </space/> 1 0 ; 
 i f </space/> ( x </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> s u m </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s t r i n g </space/> s , </space/> t ; 
 
 v o i d </space/> c h e c k ( s t r i n g & </space/> s t r ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> + </space/> 1 </space/> < </space/> s t r . s i z e ( ) ; </space/> i + + ) 
 { 
 s t r i n g </space/> a </space/> = </space/> "" "" ; 
 a </space/> + = </space/> s t r [ i ] ; 
 a </space/> + = </space/> s t r [ i </space/> + </space/> 1 ] ; 
 i f </space/> ( a </space/> = = </space/> s </space/> | | </space/> a </space/> = = </space/> t ) 
 r e t u r n ; 
 } 
 c o u t </space/> < < </space/> "" Y E S "" </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> s t r ; 
 e x i t ( 0 ) ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 v e c t o r < c h a r > </space/> v ; 
 v . p u s h _ b a c k ( ' a ' ) ; 
 v . p u s h _ b a c k ( ' b ' ) ; 
 v . p u s h _ b a c k ( ' c ' ) ; 
 d o 
 { 
 s t r i n g </space/> s </space/> = </space/> "" "" ; 
 s t r i n g </space/> t </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 ; </space/> i + + ) 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 s </space/> + = </space/> v [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n ; </space/> i + + ) 
 t </space/> + = </space/> v [ i </space/> % </space/> 3 ] ; 
 c h e c k ( s ) ; 
 c h e c k ( t ) ; 
 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ) ; 
 c o u t </space/> < < </space/> "" N O "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> d o u b l e </space/> d b ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 i n t </space/> T </space/> = </space/> 1 ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> i m p </space/> = </space/> "" a b c "" ; 
 s t r i n g </space/> a n s ; 
 d o 
 { 
 s t r i n g </space/> t 1 </space/> = </space/> "" "" ; 
 s t r i n g </space/> t 2 </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 t 1 </space/> + = </space/> i m p ; 
 t 2 </space/> + = </space/> i m p [ 0 ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 t 2 </space/> + = </space/> i m p [ 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 t 2 </space/> + = </space/> i m p [ 2 ] ; 
 b o o l </space/> o k </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( t 1 . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> s </space/> | | </space/> t 1 . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> t ) 
 { 
 o k </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( o k ) 
 { 
 a n s </space/> = </space/> t 1 ; 
 b r e a k ; 
 } 
 o k </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( t 2 . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> s </space/> | | </space/> t 2 . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> t ) 
 { 
 o k </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( o k ) 
 { 
 a n s </space/> = </space/> t 2 ; 
 b r e a k ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( i m p . b e g i n ( ) , </space/> i m p . e n d ( ) ) ) ; 
 i f </space/> ( a n s </space/> = = </space/> "" "" ) 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 e l s e 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c c t y p e > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < c t i m e > 
 # i n c l u d e </space/> < u t i l i t y > 
 # i n c l u d e </space/> < m a p > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> P ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> l l </space/> L N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> d o u b l e </space/> e p s </space/> = </space/> 1 e - 6 ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 5 0 0 1 0 ; 
 s t r i n g </space/> a b c </space/> = </space/> "" a b c "" ; 
 s t r i n g </space/> s t 1 , </space/> s t 2 ; 
 v e c t o r < s t r i n g > </space/> s t ; 
 i n t </space/> m a i n ( v o i d ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s t 1 </space/> > > </space/> s t 2 ; 
 
 d o 
 { 
 s t r i n g </space/> s t 3 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 s t 3 </space/> + = </space/> a b c ; 
 s t . p u s h _ b a c k ( s t 3 ) ; 
 s t . p u s h _ b a c k ( s t r i n g ( n , </space/> a b c [ 0 ] ) </space/> + </space/> s t r i n g ( n , </space/> a b c [ 1 ] ) </space/> + </space/> s t r i n g ( n , </space/> a b c [ 2 ] ) ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a b c . b e g i n ( ) , </space/> a b c . e n d ( ) ) ) ; 
 
 v e c t o r < s t r i n g > : : i t e r a t o r </space/> i t </space/> = </space/> s t . b e g i n ( ) ; 
 w h i l e </space/> ( i t </space/> ! = </space/> s t . e n d ( ) ) 
 { 
 s t r i n g </space/> s t 4 </space/> = </space/> * i t ; 
 i f </space/> ( s t 4 . f i n d ( s t 1 ) </space/> = = </space/> - 1 </space/> & & </space/> s t 4 . f i n d ( s t 2 ) </space/> = = </space/> - 1 ) 
 { 
 p r i n t f ( "" Y E S \ n "" ) ; 
 c o u t </space/> < < </space/> s t 4 </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 i t + + ; 
 } 
 p r i n t f ( "" N O \ n "" ) ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> x </space/> = </space/> s t r i n g ( n , </space/> ' s ' ) ; </space/> / / </space/> c o u t < < x < < e n d l ; 
 s t r i n g </space/> r </space/> = </space/> "" a b c "" ; 
 v e c t o r < s t r i n g > </space/> v ; 
 d o 
 { 
 s t r i n g </space/> x ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 x </space/> + = </space/> r ; 
 } 
 v . p u s h _ b a c k ( x ) ; 
 v . p u s h _ b a c k ( s t r i n g ( n , </space/> r [ 0 ] ) </space/> + </space/> s t r i n g ( n , </space/> r [ 1 ] ) </space/> + </space/> s t r i n g ( n , </space/> r [ 2 ] ) ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( r . b e g i n ( ) , </space/> r . e n d ( ) ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 s t r i n g </space/> d </space/> = </space/> v [ i ] ; 
 i f </space/> ( d . f i n d ( s ) </space/> = = </space/> d . n p o s </space/> & & </space/> d . f i n d ( t ) </space/> = = </space/> d . n p o s ) 
 { 
 / / </space/> c o u t < < d < < e n d l ; 
 c o u t </space/> < < </space/> "" Y E S "" 
 < < </space/> "" \ n "" </space/> < < </space/> d ; 
 r e t u r n </space/> 0 ; 
 } 
 } 
 c o u t </space/> < < </space/> "" N O "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> s f ( a ) </space/> s c a n f ( "" % d "" , </space/> & a ) 
 # d e f i n e </space/> f o r n ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c o n s t </space/> i n t </space/> m x </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 s t r i n g </space/> s , </space/> t , </space/> x </space/> = </space/> "" a b c "" ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s </space/> > > </space/> t ; 
 v e c t o r < s t r i n g > </space/> a l l ; 
 w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( x . b e g i n ( ) , </space/> x . e n d ( ) ) ) 
 { 
 s t r i n g </space/> a </space/> = </space/> "" "" , </space/> b </space/> = </space/> "" "" ; 
 f o r n ( i , </space/> n ) 
 { 
 a . p b ( x [ 0 ] ) ; 
 a . p b ( x [ 1 ] ) ; 
 a . p b ( x [ 2 ] ) ; 
 b . p b ( x [ 0 ] ) ; 
 } 
 f o r n ( i , </space/> n ) </space/> b . p b ( x [ 1 ] ) ; 
 f o r n ( i , </space/> n ) </space/> b . p b ( x [ 2 ] ) ; 
 a l l . p b ( a ) ; 
 a l l . p b ( b ) ; 
 } 
 f o r </space/> ( s t r i n g </space/> i </space/> : </space/> a l l ) 
 { 
 b o o l </space/> a n s </space/> = </space/> t r u e ; 
 f o r n ( j , </space/> 3 </space/> * </space/> n </space/> - </space/> 1 ) 
 { 
 s t r i n g </space/> s i </space/> = </space/> i . s u b s t r ( j , </space/> 2 ) ; 
 i f </space/> ( s i </space/> = = </space/> s </space/> | | </space/> s i </space/> = = </space/> t ) 
 { 
 a n s </space/> = </space/> f a l s e ; 
 } 
 } 
 i f </space/> ( a n s ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" </space/> < < </space/> i </space/> < < </space/> ' \ n ' ; 
 r e t u r n </space/> 0 ; 
 } 
 } 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 3 ; 
 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> i i ; 
 
 i n t </space/> m , </space/> n , </space/> u , </space/> v , </space/> w , </space/> b i t [ N ] ; 
 
 v e c t o r < i n t > </space/> v i [ N ] ; 
 v e c t o r < i i > </space/> v i i [ N ] ; 
 
 l o n g </space/> l o n g </space/> a n s ; 
 
 v o i d </space/> u p d ( i n t </space/> i d , </space/> i n t </space/> v a l ) 
 { 
 i d + + ; 
 f o r </space/> ( ; </space/> i d </space/> < = </space/> N ; </space/> i d </space/> + = </space/> i d </space/> & </space/> - i d ) 
 b i t [ i d ] </space/> + = </space/> v a l ; 
 } 
 
 l o n g </space/> l o n g </space/> g e t ( i n t </space/> i d ) 
 { 
 i d + + ; 
 l o n g </space/> l o n g </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( ; </space/> i d </space/> > </space/> 0 ; </space/> i d </space/> - = </space/> i d </space/> & </space/> - i d ) 
 r e s </space/> + = </space/> b i t [ i d ] ; 
 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" x . i n p "" , "" r "" , s t d i n ) ; 
 / / </space/> f r e o p e n ( "" x . o u t "" , "" w "" , s t d o u t ) ; 
 c i n </space/> > > </space/> m </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> w </space/> > > </space/> u </space/> > > </space/> v ; 
 i f </space/> ( u </space/> = = </space/> 0 </space/> & & </space/> v </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 a n s + + ; 
 v i [ u ] . p u s h _ b a c k ( w ) ; 
 v i [ v </space/> + </space/> 1 ] . p u s h _ b a c k ( - w ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> w </space/> > > </space/> u </space/> > > </space/> v ; 
 i f </space/> ( u </space/> = = </space/> 0 </space/> & & </space/> v </space/> = = </space/> 1 e 6 ) 
 a n s + + ; 
 v i i [ w ] . p u s h _ b a c k ( { </space/> u , </space/> v </space/> } ) ; 
 } 
 / / </space/> c o u t < < a n s < < e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 1 e 6 ; </space/> i + + ) 
 { 
 f o r </space/> ( a u t o </space/> v a l </space/> : </space/> v i [ i ] ) 
 { 
 i f </space/> ( v a l </space/> > = </space/> 0 ) 
 u p d ( v a l , </space/> 1 ) ; 
 e l s e 
 u p d ( - v a l , </space/> - 1 ) ; 
 } 
 f o r </space/> ( a u t o </space/> v a l </space/> : </space/> v i i [ i ] ) 
 { 
 a n s </space/> + = </space/> g e t ( v a l . s e ) </space/> - </space/> g e t ( v a l . f i </space/> - </space/> 1 ) ; 
 } 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> + </space/> 1 ; 
 r e t u r n </space/> 0 ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t e x p r </space/> i n t </space/> N </space/> = </space/> 1 e 6 ; 
 
 i n t </space/> f e n [ N </space/> + </space/> 1 ] ; 
 
 v o i d </space/> a d d ( i n t </space/> x , </space/> i n t </space/> v ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> x </space/> + </space/> 1 ; </space/> i </space/> < = </space/> N </space/> + </space/> 1 ; </space/> i </space/> + = </space/> i </space/> & </space/> - i ) 
 f e n [ i </space/> - </space/> 1 ] </space/> + = </space/> v ; 
 } 
 
 i n t </space/> s u m ( i n t </space/> x ) 
 { 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i ; </space/> i </space/> & = </space/> i </space/> - </space/> 1 ) 
 r e s </space/> + = </space/> f e n [ i </space/> - </space/> 1 ] ; 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < t u p l e < i n t , </space/> i n t , </space/> i n t > > </space/> a , </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> y </space/> > > </space/> l </space/> > > </space/> r ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> N ) 
 + + a n s ; 
 a . e m p l a c e _ b a c k ( l , </space/> y , </space/> 1 ) ; 
 a . e m p l a c e _ b a c k ( r </space/> + </space/> 1 , </space/> y , </space/> - 1 ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> + + i ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> x </space/> > > </space/> l </space/> > > </space/> r ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> N ) 
 + + a n s ; 
 b . e m p l a c e _ b a c k ( x , </space/> l , </space/> r ) ; 
 } 
 s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) ) ; 
 s o r t ( b . b e g i n ( ) , </space/> b . e n d ( ) ) ; 
 i n t </space/> i </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o [ x , </space/> l , </space/> r ] </space/> : </space/> b ) 
 { 
 w h i l e </space/> ( i </space/> < </space/> 2 </space/> * </space/> n </space/> & & </space/> g e t < 0 > ( a [ i ] ) </space/> < = </space/> x ) 
 { 
 a u t o [ t t , </space/> y , </space/> v ] </space/> = </space/> a [ i + + ] ; 
 a d d ( y , </space/> v ) ; 
 } 
 a n s </space/> + = </space/> s u m ( r </space/> + </space/> 1 ) </space/> - </space/> s u m ( l ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . H > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 5 </space/> + </space/> 4 0 ; 
 i n t </space/> n , </space/> k , </space/> a [ M A X N ] , </space/> b [ M A X N ] ; 
 i n t </space/> l , </space/> r , </space/> r e s ; 
 i n t </space/> f ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i f </space/> ( x </space/> ! = </space/> y ) 
 r e t u r n </space/> x </space/> - </space/> 3 </space/> * </space/> y </space/> * </space/> y </space/> + </space/> 3 </space/> * </space/> y </space/> - </space/> 1 ; 
 e l s e 
 r e t u r n </space/> L L O N G _ M A X ; 
 } 
 i n t </space/> q u e r y ( i n t </space/> x , </space/> i n t </space/> M ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> a [ x ] ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( f ( a [ x ] , </space/> m i d ) </space/> < = </space/> M ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 r e t u r n </space/> r ; 
 } 
 b o o l </space/> c h e c k ( i n t </space/> M ) 
 { 
 r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 b [ i ] </space/> = </space/> q u e r y ( i , </space/> M ) ; 
 r e s </space/> + = </space/> b [ i ] ; 
 } 
 r e t u r n </space/> r e s </space/> < = </space/> k ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & k ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & a [ i ] ) ; 
 l </space/> = </space/> m i n ( l , </space/> f ( a [ i ] , </space/> a [ i ] </space/> - </space/> 1 ) ) ; 
 r </space/> = </space/> m a x ( r , </space/> a [ i ] </space/> - </space/> 1 ) ; 
 } 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c h e c k ( l ) ; 
 k </space/> - = </space/> r e s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( k </space/> & & </space/> b [ i ] </space/> < </space/> a [ i ] </space/> & & </space/> f ( a [ i ] , </space/> b [ i ] ) </space/> = = </space/> r ) 
 { 
 b [ i ] + + ; 
 k - - ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % l l d </space/> "" , </space/> b [ i ] ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> m k </space/> m a k e _ p a i r 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 i n t </space/> n ; 
 l l </space/> k ; 
 l l </space/> a [ N ] , </space/> b [ N ] ; 
 
 l l </space/> c a l c ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 r e t u r n </space/> x </space/> - </space/> 3 </space/> * </space/> y </space/> * </space/> y </space/> + </space/> 3 </space/> * </space/> y </space/> - </space/> 1 ; 
 } 
 
 l l </space/> c h e c k ( l l </space/> x ) 
 { 
 l l </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 / / </space/> c o u t </space/> < < </space/> l </space/> < < </space/> "" </space/> "" </space/> < < </space/> r </space/> < < </space/> e n d l ; 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 / / </space/> c o u t </space/> < < </space/> c a l c ( a [ i ] , </space/> m i d ) </space/> < < </space/> e n d l ; 
 i f </space/> ( c a l c ( a [ i ] , </space/> m i d ) </space/> > = </space/> x ) 
 a n s </space/> = </space/> m i d , </space/> l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 
 r e s </space/> + = </space/> a n s ; 
 b [ i ] </space/> = </space/> a n s ; 
 } 
 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l l </space/> l </space/> = </space/> - 3 e 1 8 , </space/> r </space/> = </space/> 3 e 1 8 , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) </space/> > = </space/> k ) 
 { 
 a n s </space/> = </space/> m i d ; 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 e l s e 
 { 
 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 } 
 / / </space/> c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 / / </space/> c o u t </space/> < < </space/> c h e c k ( a n s ) </space/> < < </space/> e n d l ; 
 k </space/> = </space/> c h e c k ( a n s ) </space/> - </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( c a l c ( a [ i ] , </space/> b [ i ] ) </space/> = = </space/> a n s </space/> & & </space/> k ) 
 { 
 b [ i ] - - ; 
 k - - ; 
 } 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 5 ; 
 i n t </space/> n , </space/> a [ N ] , </space/> b [ N ] ; 
 l l </space/> k , </space/> L [ N ] , </space/> R [ N ] ; 
 l l </space/> c o u n t ( l l </space/> x ) 
 { 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> p l </space/> = </space/> 1 , </space/> p r </space/> = </space/> a [ i ] , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( p l </space/> < = </space/> p r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( p l </space/> + </space/> p r ) </space/> / </space/> 2 ; 
 l l </space/> s l o p </space/> = </space/> a [ i ] </space/> - </space/> 3 l l </space/> * </space/> m i d </space/> * </space/> m i d </space/> + </space/> 3 l l </space/> * </space/> m i d </space/> - </space/> 1 ; 
 i f </space/> ( s l o p </space/> > </space/> x ) 
 a n s </space/> = </space/> m i d , </space/> p l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 p r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 L [ i ] </space/> = </space/> R [ i ] </space/> = </space/> a n s ; 
 s u m </space/> + = </space/> a n s ; 
 i f </space/> ( ( + + a n s ) </space/> > </space/> a [ i ] ) 
 c o n t i n u e ; 
 i f </space/> ( a [ i ] </space/> - </space/> 3 l l </space/> * </space/> a n s </space/> * </space/> a n s </space/> + </space/> 3 l l </space/> * </space/> a n s </space/> - </space/> 1 </space/> = = </space/> x ) 
 R [ i ] + + ; 
 } 
 r e t u r n </space/> s u m ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % l l d "" , </space/> & n , </space/> & k ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 l l </space/> l </space/> = </space/> - ( 1 l l </space/> < < </space/> 6 2 ) , </space/> r </space/> = </space/> 1 l l </space/> < < </space/> 6 2 , </space/> a n s </space/> = </space/> - l </space/> - </space/> 1 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c o u n t ( m i d ) </space/> < = </space/> k ) 
 a n s </space/> = </space/> m i d , </space/> r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u n t ( a n s ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 b [ i ] </space/> = </space/> L [ i ] , </space/> k </space/> - = </space/> L [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( L [ i ] </space/> ! = </space/> R [ i ] </space/> & & </space/> k ) 
 b [ i ] + + , </space/> k - - ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % d </space/> "" , </space/> b [ i ] ) ; 
 p u t s ( "" "" ) ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
