code,data structures,dp,greedy,combinatorics,math,probabilities,number theory,binary search,constructive algorithms,brute force,strings,geometry,implementation,sortings,games,divide and conquer,hashing,two pointers,bitmasks,dfs and similar,graphs,trees,dsu,meet-in-the-middle,shortest paths,graph matchings,interactive,flows
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> i , </space/> j , </space/> k , </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 s t r i n g </space/> s 1 ; 
 c i n </space/> > > </space/> s 1 ; 
 s e t < c h a r > </space/> s ; 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( s 1 . s i z e ( ) ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> = = </space/> ( s 1 . s i z e ( ) </space/> - </space/> 1 ) ) 
 { 
 i n t </space/> c o u n t </space/> = </space/> 0 ; 
 c h a r </space/> c </space/> = </space/> s 1 [ s 1 . s i z e ( ) </space/> - </space/> 1 ] ; 
 
 f o r </space/> ( j </space/> = </space/> ( s 1 . s i z e ( ) </space/> - </space/> 2 ) ; </space/> s 1 [ j ] </space/> = = </space/> c ; </space/> j - - ) 
 { 
 c o u n t + + ; 
 } 
 
 i f </space/> ( c o u n t </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 s . i n s e r t ( c ) ; 
 } 
 e l s e 
 { 
 i f </space/> ( s 1 [ i ] </space/> ! = </space/> s 1 [ i </space/> + </space/> 1 ] ) 
 { 
 
 i n t </space/> c o u n t </space/> = </space/> 0 ; 
 c h a r </space/> c </space/> = </space/> s 1 [ i ] ; 
 
 f o r </space/> ( j </space/> = </space/> i </space/> - </space/> 1 ; </space/> s 1 [ j ] </space/> = = </space/> c ; </space/> j - - ) 
 { 
 c o u n t + + ; 
 } 
 
 i f </space/> ( c o u n t </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 s . i n s e r t ( c ) ; 
 } 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> j </space/> : </space/> s ) 
 { 
 c o u t </space/> < < </space/> j ; 
 } 
 
 c o u t </space/> < < </space/> e n d l ; 
 s . c l e a r ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" f u n </space/> m a i n ( ) 
 { 
 v a r </space/> t </space/> = </space/> r e a d L i n e ( ) </space/> ! ! . t o I n t ( ) </space/> f o r </space/> ( i </space/> i n </space/> 1 . . t ) 
 { 
 v a r </space/> N </space/> = </space/> r e a d L i n e ( ) </space/> ! ! . t o I n t ( ) </space/> v a r ( o d d , </space/> e v e n G o o d , </space/> e v e n B a d ) </space/> = </space/> l i s t O f ( 0 , </space/> 0 , </space/> 0 ) </space/> f o r </space/> ( i </space/> i n </space/> 1 . . N ) 
 { 
 v a r </space/> t m p </space/> = </space/> r e a d L i n e ( ) </space/> ! ! w h e n 
 { 
 t m p . l e n g t h </space/> % </space/> 2 </space/> = = </space/> 1 - > o d d + + </space/> t m p . c o u n t { </space/> i t </space/> = = </space/> ' 0 ' </space/> } </space/> % </space/> 2 
 = = </space/> 0 - > e v e n G o o d + + </space/> e l s e - > e v e n B a d + + 
 } 
 } 
 p r i n t l n ( N </space/> - </space/> i f </space/> ( o d d </space/> = = </space/> 0 </space/> & & </space/> e v e n B a d </space/> % </space/> 2 </space/> = = </space/> 1 ) 1 </space/> e l s e </space/> 0 ) 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O f a s t "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z a t i o n ( "" u n r o l l - l o o p s "" ) 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> I O S </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> i n s </space/> i n s e r t 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) </space/> x . s i z e ( ) 
 # d e f i n e </space/> d b g ( x ) </space/> c o u t </space/> < < </space/> x </space/> < < </space/> "" \ n "" ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> l o n g </space/> l o n g </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l o n g </space/> l o n g </space/> i n t </space/> M o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> l o n g </space/> d o u b l e </space/> P i </space/> = </space/> a c o s ( - 1 ) ; 
 c o n s t </space/> l o n g </space/> l o n g </space/> i n t </space/> I n f </space/> = </space/> 4 e 1 8 ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> c m p ( p a i r < l o n g </space/> l o n g </space/> i n t , </space/> l o n g </space/> l o n g </space/> i n t > </space/> a , </space/> p a i r < l o n g </space/> l o n g </space/> i n t , </space/> l o n g </space/> l o n g </space/> i n t > </space/> b ) 
 { 
 r e t u r n </space/> a . s e </space/> < </space/> b . s e ; 
 } 
 
 b o o l </space/> C h e c k ( v e c t o r < p a i r < l o n g </space/> l o n g </space/> i n t , </space/> l o n g </space/> l o n g </space/> i n t > </space/> > </space/> v , </space/> l o n g </space/> l o n g </space/> i n t </space/> s , </space/> l o n g </space/> l o n g </space/> i n t </space/> v a l ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> t o t </space/> = </space/> 0 , </space/> n </space/> = </space/> s z ( v ) , </space/> c u </space/> = </space/> 0 , </space/> c d </space/> = </space/> 0 , </space/> i d x </space/> = </space/> 0 ; 
 v e c t o r < p a i r < l o n g </space/> l o n g </space/> i n t , </space/> l o n g </space/> l o n g </space/> i n t > </space/> > </space/> x ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( v [ i ] . f i </space/> > </space/> v a l ) 
 { 
 t o t </space/> + = </space/> v [ i ] . f i ; 
 c u + + ; 
 } 
 e l s e </space/> i f </space/> ( v [ i ] . s e </space/> < </space/> v a l ) 
 { 
 t o t </space/> + = </space/> v [ i ] . f i ; 
 c d + + ; 
 } 
 e l s e 
 x . p b ( v [ i ] ) ; 
 } 
 i f </space/> ( c d </space/> > </space/> ( n </space/> + </space/> 1 ) </space/> / </space/> 2 ) 
 r e t u r n </space/> f a l s e ; 
 s o r t ( x . b e g i n ( ) , </space/> x . e n d ( ) , </space/> _ _ g r e a t e r ( ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s z ( x ) ; </space/> i + + ) 
 { 
 i f </space/> ( c u </space/> < </space/> ( n </space/> + </space/> 1 ) </space/> / </space/> 2 ) 
 { 
 t o t </space/> + = </space/> v a l ; 
 c u + + ; 
 } 
 e l s e 
 { 
 t o t </space/> + = </space/> x [ i ] . f i ; 
 c d + + ; 
 } 
 } 
 i f </space/> ( c u </space/> ! = </space/> ( n </space/> + </space/> 1 ) </space/> / </space/> 2 ) 
 r e t u r n </space/> f a l s e ; 
 i f </space/> ( t o t </space/> > </space/> s ) 
 r e t u r n </space/> f a l s e ; 
 r e t u r n </space/> t r u e ; 
 } 
 
 v o i d </space/> T e s t C a s e ( ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> n , </space/> s ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s ; 
 v e c t o r < p a i r < l o n g </space/> l o n g </space/> i n t , </space/> l o n g </space/> l o n g </space/> i n t > </space/> > </space/> v ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> v [ i ] . f i </space/> > > </space/> v [ i ] . s e ; 
 l o n g </space/> l o n g </space/> i n t </space/> l b , </space/> u b , </space/> a n s ; 
 s o r t ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ; 
 l b </space/> = </space/> v [ n </space/> / </space/> 2 ] . f i ; 
 s o r t ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> c m p ) ; 
 u b </space/> = </space/> v [ n </space/> / </space/> 2 ] . s e ; 
 a n s </space/> = </space/> l b ; 
 w h i l e </space/> ( l b </space/> < = </space/> u b ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> m i d </space/> = </space/> ( l b </space/> + </space/> u b ) </space/> / </space/> 2 ; 
 i f </space/> ( C h e c k ( v , </space/> s , </space/> m i d ) ) 
 { 
 a n s </space/> = </space/> m a x ( a n s , </space/> m i d ) ; 
 l b </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 e l s e 
 u b </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> T </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 T e s t C a s e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> _ t ; 
 c i n </space/> > > </space/> _ t ; 
 w h i l e </space/> ( _ t - - ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 v e c t o r < p a i r < i n t , </space/> c h a r > > </space/> v ; 
 i n t </space/> d </space/> = </space/> 0 ; 
 c h a r </space/> l </space/> = </space/> ' - ' ; 
 f o r </space/> ( c h a r </space/> c </space/> : </space/> s ) 
 { 
 i f </space/> ( c </space/> ! = </space/> l ) 
 { 
 i f </space/> ( d </space/> > </space/> 0 ) 
 { 
 v . p u s h _ b a c k ( { </space/> d , </space/> l </space/> } ) ; 
 } 
 l </space/> = </space/> c ; 
 d </space/> = </space/> 1 ; 
 } 
 e l s e 
 d + + ; 
 } 
 i f </space/> ( d </space/> > </space/> 0 ) 
 { 
 v . p u s h _ b a c k ( { </space/> d , </space/> l </space/> } ) ; 
 } 
 s e t < c h a r > </space/> r ; 
 f o r </space/> ( a u t o </space/> p </space/> : </space/> v ) 
 { 
 i f </space/> ( p . f i r s t </space/> % </space/> 2 </space/> = = </space/> 1 ) 
 { 
 r . i n s e r t ( p . s e c o n d ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i t </space/> = </space/> r . b e g i n ( ) ; </space/> i t </space/> ! = </space/> r . e n d ( ) ; </space/> i t + + ) 
 { 
 c o u t </space/> < < </space/> * i t ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l l 
 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> ( l l ) 1 e 9 </space/> + </space/> 7 ; 
 
 c o n s t </space/> l l </space/> m a x s </space/> = </space/> 2 e 6 </space/> + </space/> 5 ; 
 l l </space/> r o o t [ m a x s ] ; 
 
 
 i n l i n e </space/> l l </space/> a d d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> c </space/> = </space/> ( ( a </space/> % </space/> m o d ) </space/> + </space/> ( b </space/> % </space/> m o d ) ) </space/> % </space/> m o d ; 
 r e t u r n </space/> c ; 
 } 
 
 i n l i n e </space/> l l </space/> m u l t ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> c </space/> = </space/> ( ( a </space/> % </space/> m o d ) </space/> * </space/> ( b </space/> % </space/> m o d ) ) </space/> % </space/> m o d ; 
 r e t u r n </space/> c ; 
 } 
 
 v o i d </space/> i n i t ( ) 
 { 
 i o t a ( r o o t , </space/> r o o t </space/> + </space/> m a x s , </space/> 0 ) ; 
 } 
 l l </space/> f i n d ( l l </space/> u ) 
 { 
 l l </space/> f ; 
 i f </space/> ( r o o t [ u ] </space/> = = </space/> u ) 
 r e t u r n </space/> u ; 
 e l s e 
 { 
 l l </space/> f </space/> = </space/> f i n d ( r o o t [ u ] ) ; 
 r o o t [ u ] </space/> = </space/> f ; 
 r e t u r n </space/> f ; 
 } 
 } 
 v o i d </space/> U n i o n ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 l l </space/> u </space/> = </space/> f i n d ( x ) ; 
 l l </space/> v </space/> = </space/> f i n d ( y ) ; 
 r o o t [ v ] </space/> = </space/> u ; 
 } 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y , </space/> l l </space/> p ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 x </space/> = </space/> x </space/> % </space/> p ; 
 w h i l e </space/> ( y </space/> > </space/> 0 ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> x ) </space/> % </space/> p ; 
 
 y </space/> = </space/> y </space/> > > </space/> 1 ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> p ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 v o i d </space/> u p d a t e ( v e c t o r < l l > & </space/> B I T , </space/> l l </space/> i n d , </space/> l l </space/> v a l ) 
 { 
 / / </space/> i n d </space/> : </space/> 1 </space/> b a s e d 
 / / </space/> v a l </space/> - </space/> a r r [ i ] </space/> o r </space/> c o u n t 
 w h i l e </space/> ( i n d </space/> < </space/> B I T . s i z e ( ) ) 
 { 
 B I T [ i n d ] </space/> + = </space/> v a l ; 
 i n d </space/> + = </space/> ( i n d </space/> & </space/> ( - i n d ) ) ; 
 } 
 } 
 l l </space/> q u e r y ( v e c t o r < l l > & </space/> B I T , </space/> l l </space/> i n d ) 
 { 
 l l </space/> s u m </space/> = </space/> 0 ; 
 w h i l e </space/> ( i n d </space/> > </space/> 0 ) 
 { 
 s u m </space/> + = </space/> B I T [ i n d ] ; 
 i n d </space/> - = </space/> ( i n d </space/> & </space/> ( - i n d ) ) ; 
 } 
 r e t u r n </space/> s u m ; 
 } 
 
 b o o l </space/> s o l v e ( l l </space/> v a l , </space/> v e c t o r < p a i r < l l , </space/> l l > > & </space/> a r r , </space/> l l </space/> t o t ) 
 { 
 l l </space/> n </space/> = </space/> a r r . s i z e ( ) ; 
 l l </space/> m i d </space/> = </space/> ( n </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a r r ) 
 { 
 i f </space/> ( m i d </space/> > </space/> 0 </space/> & & </space/> i . s s </space/> > = </space/> v a l ) 
 { 
 s u m </space/> + = </space/> m a x ( i . f f , </space/> v a l ) ; 
 m i d - - ; 
 } 
 e l s e 
 s u m </space/> + = </space/> i . f f ; 
 } 
 
 r e t u r n </space/> m i d </space/> < = </space/> 0 </space/> & & </space/> s u m </space/> < = </space/> t o t ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 l l </space/> t , </space/> n , </space/> i , </space/> k , </space/> y , </space/> x , </space/> j , </space/> m , </space/> w , </space/> z , </space/> a , </space/> b , </space/> c ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < p a i r < l l , </space/> l l > > </space/> a r r ( n ) ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] . f f </space/> > > </space/> a r r [ i ] . s s ; 
 } 
 s o r t ( a r r . b e g i n ( ) , </space/> a r r . e n d ( ) , </space/> g r e a t e r < p a i r < l l , </space/> l l > > ( ) ) ; 
 
 l l </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> 1 e 1 5 ; 
 w h i l e </space/> ( l </space/> + </space/> 1 </space/> < </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 i f </space/> ( s o l v e ( m i d , </space/> a r r , </space/> m ) ) 
 { 
 l </space/> = </space/> m i d ; 
 } 
 e l s e 
 { 
 r </space/> = </space/> m i d ; 
 } 
 } 
 i f </space/> ( s o l v e ( r , </space/> a r r , </space/> m ) ) 
 c o u t </space/> < < </space/> r </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> l </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> y o u r </space/> c o d e </space/> g o e s </space/> h e r e 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t d : : m a p < c h a r , </space/> i n t > </space/> m s , </space/> m t ; 
 s e t < c h a r > </space/> s t , </space/> t t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 { 
 m s [ s [ i ] ] + + ; 
 m t [ t [ i ] ] + + ; 
 s t . i n s e r t ( s [ i ] ) ; 
 t t . i n s e r t ( t [ i ] ) ; 
 } 
 i n t </space/> f l a g </space/> = </space/> 0 ; 
 f o r </space/> ( c h a r </space/> c h </space/> = </space/> ' a ' ; </space/> c h </space/> < = </space/> ' z ' ; </space/> c h + + ) 
 { 
 i f </space/> ( s t . s i z e ( ) </space/> < = </space/> t t . s i z e ( ) ) 
 { 
 i f </space/> ( m s [ c h ] </space/> > </space/> 0 ) 
 { 
 i f </space/> ( m t [ c h ] </space/> > </space/> 0 ) 
 f l a g </space/> = </space/> 1 ; 
 } 
 } 
 } 
 
 i f </space/> ( f l a g ) 
 c o u t </space/> < < </space/> "" Y E S "" ; 
 e l s e 
 c o u t </space/> < < </space/> "" N O "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> o n e </space/> = </space/> 0 , </space/> z e r o </space/> = </space/> 0 , </space/> l e n </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 l e n </space/> + = </space/> s . l e n g t h ( ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . l e n g t h ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> ' 0 ' ) 
 z e r o + + ; 
 e l s e 
 o n e + + ; 
 } 
 } 
 / / </space/> c o u t < < o n e < < "" </space/> "" < < z e r o < < e n d l ; 
 i f </space/> ( l e n </space/> & </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i f </space/> ( ( o n e </space/> & </space/> 1 ) </space/> & & </space/> ( z e r o </space/> & </space/> 1 ) ) 
 { 
 c o u t </space/> < < </space/> n </space/> - </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t d : : s t r i n g </space/> t m p ; 
 s t d : : c i n </space/> > > </space/> t m p ; 
 s t d : : s e t < c h a r > </space/> r e s ; 
 
 / / </space/> t t a a b t 
 / / </space/> 0 1 2 3 4 5 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t m p . s i z e ( ) ; </space/> + + i ) 
 { 
 i f </space/> ( t m p [ i ] </space/> = = </space/> t m p [ i </space/> + </space/> 1 ] ) 
 { 
 + + i ; 
 } 
 e l s e 
 { 
 r e s . i n s e r t ( t m p [ i ] ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> n o w </space/> : </space/> r e s ) 
 { 
 s t d : : c o u t </space/> < < </space/> n o w ; 
 } 
 s t d : : c o u t </space/> < < </space/> ' \ n ' ; 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 s t d : : c i n . t i e ( n u l l p t r ) ; 
 s t d : : c o u t . t i e ( n u l l p t r ) ; 
 
 i n t </space/> t ; 
 s t d : : c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> n l </space/> ' \ n ' 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t r i n g </space/> N ; 
 c i n </space/> > > </space/> N ; 
 
 v e c t o r < i n t > </space/> e v e n , </space/> o d d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> ( i n t ) N . s i z e ( ) </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 i n t </space/> d </space/> = </space/> N [ i ] </space/> - </space/> ' 0 ' ; 
 i f </space/> ( d </space/> % </space/> 2 ) 
 o d d . p u s h _ b a c k ( d ) ; 
 e l s e 
 e v e n . p u s h _ b a c k ( d ) ; 
 } 
 
 w h i l e </space/> ( ! e v e n . e m p t y ( ) </space/> & & </space/> ! o d d . e m p t y ( ) ) 
 { 
 i n t </space/> o u t </space/> = </space/> m i n ( e v e n . b a c k ( ) , </space/> o d d . b a c k ( ) ) ; 
 c o u t </space/> < < </space/> o u t ; 
 ( o u t </space/> = = </space/> e v e n . b a c k ( ) </space/> ? </space/> e v e n </space/> : </space/> o d d ) . p o p _ b a c k ( ) ; 
 } 
 i f </space/> ( ! o d d . e m p t y ( ) ) 
 e v e n </space/> = </space/> o d d ; 
 r e v e r s e ( e v e n . b e g i n ( ) , </space/> e v e n . e n d ( ) ) ; 
 
 f o r </space/> ( i n t </space/> e </space/> : </space/> e v e n ) 
 c o u t </space/> < < </space/> e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> n l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g </space/> i n t 
 c o n s t </space/> i n t </space/> l i m </space/> = </space/> 1 e 9 </space/> + </space/> 4 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 b o o l </space/> c h e c k G o o d ( s t r i n g </space/> s ) 
 { 
 i n t </space/> n </space/> = </space/> s . l e n g t h ( ) ; 
 
 i n t </space/> c n t 0 </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> ' 0 ' ) 
 c n t 0 + + ; 
 } 
 
 i f </space/> ( c n t 0 </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 r e t u r n </space/> t r u e ; 
 r e t u r n </space/> f a l s e ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i n t </space/> t i m e s ; 
 c i n </space/> > > </space/> t i m e s ; 
 w h i l e </space/> ( t i m e s - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 i n t </space/> c n t o </space/> = </space/> 0 ; 
 i n t </space/> e v e n G o o d </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i f </space/> ( s . l e n g t h ( ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 c n t o + + ; 
 e l s e </space/> i f </space/> ( c h e c k G o o d ( s ) ) 
 { 
 e v e n G o o d + + ; 
 } 
 } 
 i f </space/> ( c n t o </space/> > </space/> 0 </space/> | | </space/> ( n </space/> - </space/> e v e n G o o d ) </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> n ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> n </space/> - </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d : : c h r o n o ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 u s i n g </space/> i i </space/> = </space/> p a i r < l l , </space/> l l > ; 
 # d e f i n e </space/> f r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( o ) </space/> ( o ) . b e g i n ( ) , </space/> ( o ) . e n d ( ) 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> M P </space/> m a k e _ p a i r 
 # d e f i n e </space/> P B </space/> p u s h _ b a c k 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> e p s </space/> 0 . 0 0 0 0 0 0 0 0 0 0 1 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 
 c l a s s </space/> p r i o r i t i z e 
 { 
 p u b l i c : 
 b o o l </space/> o p e r a t o r ( ) ( i i & </space/> p 1 , </space/> i i & </space/> p 2 ) 
 { 
 r e t u r n </space/> p 1 . F </space/> < </space/> p 2 . F ; 
 } 
 } ; 
 
 a u t o </space/> s t a r t _ t i m e </space/> = </space/> h i g h _ r e s o l u t i o n _ c l o c k : : n o w ( ) ; 
 v o i d </space/> t i m e ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 a u t o </space/> s t o p _ t i m e </space/> = </space/> h i g h _ r e s o l u t i o n _ c l o c k : : n o w ( ) ; 
 a u t o </space/> d u r a t i o n </space/> = </space/> d u r a t i o n _ c a s t < m i l l i s e c o n d s > ( s t o p _ t i m e </space/> - </space/> s t a r t _ t i m e ) ; 
 c o u t </space/> < < </space/> "" r u n </space/> t i m e : </space/> "" </space/> < < </space/> d u r a t i o n . c o u n t ( ) </space/> < < </space/> "" </space/> m s "" 
 < < </space/> "" \ n "" ; 
 # e n d i f 
 r e t u r n ; 
 } 
 
 v o i d </space/> o j u d g e ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t 1 . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t 1 . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 r e t u r n ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 o j u d g e ( ) ; 
 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 v e c t o r < l l > </space/> o d d , </space/> e v e n ; 
 v e c t o r < l l > </space/> a n s ; 
 w h i l e </space/> ( t - - ) 
 { 
 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 l l </space/> n </space/> = </space/> ( l l ) s . s i z e ( ) ; 
 f r ( i , </space/> 0 , </space/> n ) 
 { 
 i f </space/> ( ( s [ i ] </space/> - </space/> ' 0 ' ) </space/> % </space/> 2 ) 
 o d d . P B ( s [ i ] </space/> - </space/> ' 0 ' ) ; 
 e l s e 
 e v e n . P B ( s [ i ] </space/> - </space/> ' 0 ' ) ; 
 } 
 
 r e v e r s e ( a l l ( o d d ) ) ; 
 r e v e r s e ( a l l ( e v e n ) ) ; 
 
 w h i l e </space/> ( ( ! o d d . e m p t y ( ) ) </space/> | | </space/> ( ! e v e n . e m p t y ( ) ) ) 
 { 
 
 i f </space/> ( o d d . e m p t y ( ) ) 
 { 
 r e v e r s e ( a l l ( e v e n ) ) ; 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> e v e n ) 
 a n s . P B ( i t ) ; 
 b r e a k ; 
 } 
 i f </space/> ( e v e n . e m p t y ( ) ) 
 { 
 r e v e r s e ( a l l ( o d d ) ) ; 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> o d d ) 
 a n s . P B ( i t ) ; 
 b r e a k ; 
 } 
 
 i f </space/> ( o d d . b a c k ( ) </space/> < </space/> e v e n . b a c k ( ) ) 
 { 
 a n s . P B ( o d d . b a c k ( ) ) ; 
 o d d . p o p _ b a c k ( ) ; 
 } 
 e l s e 
 { 
 a n s . P B ( e v e n . b a c k ( ) ) ; 
 e v e n . p o p _ b a c k ( ) ; 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i t ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 o d d . c l e a r ( ) ; 
 e v e n . c l e a r ( ) ; 
 a n s . c l e a r ( ) ; 
 } 
 
 
 t i m e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> i , </space/> a , </space/> b , </space/> c , </space/> e , </space/> d ; 
 s t r i n g </space/> s ; 
 v e c t o r < i n t > </space/> v ; 
 c i n </space/> > > </space/> n ; 
 c </space/> = </space/> 0 ; 
 e </space/> = </space/> 0 ; 
 d </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> s ; 
 a </space/> = </space/> c o u n t ( s . b e g i n ( ) , </space/> s . e n d ( ) , </space/> ' 1 ' ) ; 
 b </space/> = </space/> c o u n t ( s . b e g i n ( ) , </space/> s . e n d ( ) , </space/> ' 0 ' ) ; 
 i f </space/> ( a </space/> = = </space/> 0 </space/> | | </space/> b </space/> = = </space/> 0 </space/> | | </space/> a </space/> % </space/> 2 </space/> = = </space/> 0 </space/> | | </space/> b </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( s . s i z e ( ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 { 
 d + + ; 
 } 
 e + + ; 
 } 
 e l s e 
 { 
 c + + ; 
 } 
 } 
 i f </space/> ( c </space/> % </space/> 2 </space/> ! = </space/> 0 </space/> & & </space/> d </space/> = = </space/> 0 ) 
 { 
 c - - ; 
 } 
 c o u t </space/> < < </space/> c </space/> + </space/> e </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> n l i n e </space/> c o u t </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> f s o r t ( a r r ) </space/> s o r t ( a r r . b e g i n ( ) , </space/> a r r . e n d ( ) ) ; 
 # d e f i n e </space/> r s o r t ( a r r ) </space/> f s o r t ( a r r ) </space/> r e v ( a r r ) 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 
 # d e f i n e </space/> d c o u t ( n ) </space/> c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( n ) 
 # d e f i n e </space/> d e b u g ( a ) </space/> \ 
 ; </space/> \ 
 c o u t </space/> < < </space/> "" </space/> h e r e </space/> "" </space/> < < </space/> # a </space/> < < </space/> "" </space/> = = </space/> "" </space/> < < </space/> a </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> r e a c h </space/> c o u t </space/> < < </space/> "" - - - > r e a c h e d </space/> h e r e < - - - "" </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> m s ( s , </space/> n ) </space/> m e m s e t ( s , </space/> n , </space/> s i z e o f ( s ) ) 
 # d e f i n e </space/> r e v ( s ) </space/> r e v e r s e ( s . b e g i n ( ) , </space/> s . e n d ( ) ) ; 
 # d e f i n e </space/> t c ( ) </space/> \ 
 l l </space/> i n t </space/> N ; </space/> \ 
 c i n </space/> > > </space/> N ; </space/> \ 
 w h i l e </space/> ( N - - ) </space/> \ 
 t e s t ( ) ; 
 # d e f i n e </space/> b i n s ( v , </space/> v a l ) </space/> b i n a r y _ s e a r c h ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> v a l ) 
 # d e f i n e </space/> u b ( v , </space/> v a l ) </space/> u p p e r _ b o u n d ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> v a l ) </space/> - </space/> v . b e g i n ( ) 
 # d e f i n e </space/> l b ( v , </space/> v a l ) </space/> l o w e r _ b o u n d ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> v a l ) </space/> - </space/> v . b e g i n ( ) 
 # d e f i n e </space/> p r i n t ( a r r ) </space/> \ 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a r r ) </space/> \ 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 # d e f i n e </space/> a c t b i t s ( x ) </space/> 3 2 </space/> - </space/> _ _ b u i l t i n _ c l z l l ( x ) 
 c o n s t </space/> u n s i g n e d </space/> i n t </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 l l </space/> i n t </space/> i n f </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; 
 l l </space/> i n t </space/> M O D I </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 T </space/> p o w e r ( T </space/> a , </space/> l l </space/> i n t </space/> n ) 
 { 
 T </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( n </space/> > </space/> 0 ) 
 { 
 i f </space/> ( n </space/> % </space/> 2 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> M O D ; 
 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> M O D , </space/> n </space/> = </space/> n </space/> / </space/> 2 ; 
 } 
 
 r e t u r n </space/> r e s </space/> % </space/> M O D ; 
 } 
 
 t e s t ( ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s t r i n g </space/> p 1 , </space/> p 2 ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> s ) 
 { 
 i f </space/> ( ( x </space/> - </space/> ' 0 ' ) </space/> % </space/> 2 ) 
 p 1 . p u s h _ b a c k ( x ) ; 
 e l s e 
 p 2 . p u s h _ b a c k ( x ) ; 
 } 
 s t r i n g </space/> a n s ; 
 l l </space/> i n t </space/> j 1 </space/> = </space/> 0 , </space/> j 2 </space/> = </space/> 0 ; 
 w h i l e </space/> ( j 1 </space/> < </space/> p 1 . l e n g t h ( ) </space/> | | </space/> j 2 </space/> < </space/> p 2 . l e n g t h ( ) ) 
 { 
 i f </space/> ( j 1 </space/> = = </space/> p 1 . l e n g t h ( ) ) 
 a n s . p u s h _ b a c k ( p 2 [ j 2 ] ) , </space/> j 2 + + ; 
 e l s e </space/> i f </space/> ( j 2 </space/> = = </space/> p 2 . l e n g t h ( ) ) 
 a n s . p u s h _ b a c k ( p 1 [ j 1 ] ) , </space/> j 1 + + ; 
 e l s e 
 { 
 i f </space/> ( p 1 [ j 1 ] </space/> < </space/> p 2 [ j 2 ] ) 
 a n s . p u s h _ b a c k ( p 1 [ j 1 ] ) , </space/> j 1 + + ; 
 e l s e 
 a n s . p u s h _ b a c k ( p 2 [ j 2 ] ) , </space/> j 2 + + ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 t c ( ) 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s e t < c h a r > </space/> s t ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 i </space/> + = </space/> 2 ; 
 } 
 e l s e 
 { 
 s t . i n s e r t ( s [ i ] ) ; 
 i + + ; 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> u </space/> : </space/> s t ) 
 c o u t </space/> < < </space/> u ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s e t < c h a r > </space/> a n s ; 
 
 i n t </space/> i </space/> = </space/> 0 ; 
 w h i l e </space/> ( i </space/> < </space/> s . s i z e ( ) ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 a n s . i n s e r t ( s [ i ] ) ; 
 i + + ; 
 } 
 e l s e </space/> i f </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] </space/> & & </space/> a n s . f i n d ( s [ i ] ) </space/> ! = </space/> a n s . e n d ( ) ) 
 { 
 i </space/> = </space/> i </space/> + </space/> 2 ; 
 } 
 e l s e 
 { 
 i </space/> = </space/> i </space/> + </space/> 2 ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i t </space/> = </space/> a n s . b e g i n ( ) ; </space/> i t </space/> ! = </space/> a n s . e n d ( ) ; </space/> i t + + ) 
 c o u t </space/> < < </space/> * i t ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> e n d l l </space/> "" \ n "" 
 
 # d e f i n e </space/> f i n </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # d e f i n e </space/> f o u t </space/> f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s e t < c h a r > </space/> s t , </space/> s t t ; 
 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 i + + ; 
 } 
 e l s e 
 { 
 s t . i n s e r t ( s [ i ] ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> s t ) 
 { 
 c o u t </space/> < < </space/> i t ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < f s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < r a n d o m > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < f u n c t i o n a l > 
 # i n c l u d e </space/> < t y p e i n f o > 
 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a r r a y > 
 # i n c l u d e </space/> < v a l a r r a y > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c s t d l i b > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c t i m e > 
 # i n c l u d e </space/> < c a s s e r t > 
 
 # d e f i n e </space/> i o s </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m k </space/> m a k e _ p a i r 
 # d e f i n e </space/> p l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> l l v </space/> v e c t o r < l l > 
 # d e f i n e </space/> p v </space/> v e c t o r < p a i r < l l , </space/> l l > </space/> > 
 # d e f i n e </space/> p b ( w ) </space/> p u s h _ b a c k ( w ) 
 # d e f i n e </space/> p p b ( w , </space/> z ) </space/> p u s h _ b a c k ( { </space/> w , </space/> z </space/> } ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> s z </space/> s i z e ( ) 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 1 e 9 </space/> + </space/> 7 , </space/> N </space/> = </space/> 3 </space/> * </space/> 1 e 5 </space/> + </space/> 3 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c h a r </space/> s [ N ] ; 
 s e t < c h a r > </space/> c ; 
 i n t </space/> q ; 
 
 
 b o o l </space/> F ( c h a r </space/> a , </space/> c h a r </space/> b ) 
 { 
 a </space/> - = </space/> ' 0 ' ; 
 b </space/> - = </space/> ' 0 ' ; 
 r e t u r n </space/> ( a </space/> % </space/> 2 </space/> ! = </space/> b </space/> % </space/> 2 </space/> & & </space/> a </space/> < </space/> b ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> s ; 
 i n t </space/> n </space/> = </space/> s t r l e n ( s ) ; 
 s o r t ( s , </space/> s </space/> + </space/> n , </space/> F ) ; 
 c o u t </space/> < < </space/> s </space/> < < </space/> "" \ n "" ; 
 r e t u r n ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> J A I </space/> S H R E E </space/> G A N E S H 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / / _ _ g c d ( m , </space/> n ) 
 / / </space/> m e m s e t ( d p , </space/> - 1 , </space/> s i z e o f ( d p ) ) ; 
 / / </space/> s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) , </space/> g r e a t e r < i n t > ( ) ) ; 
 # d e f i n e </space/> f o ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o l ( i , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> m a x ( a , </space/> b , </space/> c ) </space/> m a x ( a , </space/> m a x ( b , </space/> c ) ) 
 # d e f i n e </space/> m i n ( a , </space/> b , </space/> c ) </space/> m i n ( a , </space/> m i n ( b , </space/> c ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v l ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s t r i n g </space/> s 1 </space/> = </space/> "" "" ; 
 
 i n t </space/> a [ 2 6 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 i n t </space/> n </space/> = </space/> s . l e n g t h ( ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( ( i </space/> + </space/> 1 ) </space/> ! = </space/> n </space/> & & </space/> s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] ) 
 i + + ; 
 
 e l s e 
 { 
 a [ s [ i ] </space/> - </space/> ' a ' ] </space/> = </space/> 1 ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 6 ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> = = </space/> 1 ) 
 s 1 </space/> + = </space/> i </space/> + </space/> ' a ' ; 
 } 
 c o u t </space/> < < </space/> s 1 </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < i t e r a t o r > 
 # i n c l u d e </space/> < s e t > 
 # d e f i n e </space/> m x </space/> I N T _ M A X 
 # d e f i n e </space/> m n </space/> I N T _ M I N 
 # d e f i n e </space/> m k p </space/> m a k e _ p a i r 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 / / # d e f i n e </space/> f r ( i , j , n ) </space/> f o r ( </space/> i = j ; i < n ; i + + ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 i n t </space/> m </space/> = </space/> s . l e n g t h ( ) ; 
 v e c t o r < c h a r > </space/> v 1 , </space/> v 2 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> i + + ) 
 { 
 i f </space/> ( ( s [ i ] </space/> - </space/> ' 0 ' ) </space/> % </space/> 2 ) 
 v 1 . p b ( s [ i ] ) ; 
 e l s e 
 { 
 v 2 . p b ( s [ i ] ) ; 
 } 
 } 
 i n t </space/> a </space/> = </space/> v 1 . s i z e ( ) , </space/> b </space/> = </space/> v 2 . s i z e ( ) ; 
 i f </space/> ( v 1 . s i z e ( ) </space/> = = </space/> 0 </space/> | | </space/> v 2 . s i z e ( ) </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> s </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 s t r i n g </space/> a n s </space/> = </space/> "" "" ; 
 i n t </space/> i </space/> = </space/> 0 , </space/> j </space/> = </space/> 0 ; 
 w h i l e </space/> ( i </space/> < </space/> a </space/> & & </space/> j </space/> < </space/> b ) 
 { 
 i f </space/> ( v 1 [ i ] </space/> < </space/> v 2 [ j ] ) 
 { 
 a n s </space/> + = </space/> v 1 [ i + + ] ; 
 } 
 e l s e 
 a n s </space/> + = </space/> v 2 [ j + + ] ; 
 } 
 w h i l e </space/> ( i </space/> < </space/> a ) 
 a n s </space/> + = </space/> v 1 [ i + + ] ; 
 w h i l e </space/> ( j </space/> < </space/> b ) 
 a n s </space/> + = </space/> v 2 [ j + + ] ; 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s t r ; 
 c i n </space/> > > </space/> s t r ; 
 i n t </space/> n </space/> = </space/> s t r . l e n g t h ( ) ; 
 s e t < c h a r > </space/> s t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> j </space/> = </space/> i ; 
 w h i l e </space/> ( j </space/> + </space/> 1 </space/> < </space/> s t r . s i z e ( ) </space/> & & </space/> s t r [ j </space/> + </space/> 1 ] </space/> = = </space/> s t r [ i ] ) 
 j + + ; 
 i f </space/> ( ( j </space/> </space/> i ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 s t . i n s e r t ( s t r [ i ] ) ; 
 i </space/> = </space/> j ; 
 } 
 s e t < c h a r > : : i t e r a t o r </space/> i t ; 
 f o r </space/> ( i t </space/> = </space/> s t . b e g i n ( ) ; </space/> i t </space/> ! = </space/> s t . e n d ( ) ; </space/> i t + + ) 
 { 
 c o u t </space/> < < </space/> * i t ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> t r a v ( i , </space/> a ) </space/> f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 # d e f i n e </space/> s i ( a ) </space/> ( ( i n t ) ( a ) . s i z e ( ) ) 
 # d e f i n e </space/> i n s </space/> i n s e r t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 1 8 ; 
 c o n s t </space/> s t r i n g </space/> n l </space/> = </space/> "" \ n "" ; 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 d e q u e < i n t > </space/> e v e n , </space/> o d d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s i ( s ) ; </space/> + + i ) 
 { 
 i f </space/> ( ( s [ i ] </space/> - </space/> ' 0 ' ) </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 { 
 e v e n . p b ( ( s [ i ] </space/> - </space/> ' 0 ' ) ) ; 
 } 
 e l s e 
 { 
 o d d . p b ( ( s [ i ] </space/> - </space/> ' 0 ' ) ) ; 
 } 
 } 
 s t r i n g </space/> r e s ; 
 w h i l e </space/> ( s i ( e v e n ) </space/> | | </space/> s i ( o d d ) ) 
 { 
 i f </space/> ( e v e n . e m p t y ( ) </space/> & & </space/> o d d . e m p t y ( ) ) 
 { 
 b r e a k ; 
 } 
 i f </space/> ( e v e n . e m p t y ( ) ) 
 { 
 r e s </space/> + = </space/> ( o d d [ 0 ] </space/> + </space/> ' 0 ' ) ; 
 o d d . p o p _ f r o n t ( ) ; 
 c o n t i n u e ; 
 } 
 i f </space/> ( o d d . e m p t y ( ) ) 
 { 
 r e s </space/> + = </space/> ( e v e n [ 0 ] </space/> + </space/> ' 0 ' ) ; 
 e v e n . p o p _ f r o n t ( ) ; 
 c o n t i n u e ; 
 } 
 i f </space/> ( o d d [ 0 ] </space/> < </space/> e v e n [ 0 ] ) 
 { 
 r e s </space/> + = </space/> ( o d d [ 0 ] </space/> + </space/> ' 0 ' ) ; 
 o d d . p o p _ f r o n t ( ) ; 
 c o n t i n u e ; 
 } 
 r e s </space/> + = </space/> ( e v e n [ 0 ] </space/> + </space/> ' 0 ' ) ; 
 e v e n . p o p _ f r o n t ( ) ; 
 } 
 c o u t </space/> < < </space/> r e s </space/> < < </space/> n l ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 3 e 5 </space/> + </space/> 9 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> c n t </space/> = </space/> 0 , </space/> b a k i </space/> = </space/> 0 , </space/> z e r o </space/> = </space/> 0 , </space/> o n e </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s t r i n g </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( x . s i z e ( ) </space/> % </space/> 2 ) 
 { 
 c n t + + ; 
 } 
 i f </space/> ( 1 ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> x . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( x [ j ] </space/> = = </space/> ' 0 ' ) 
 z e r o + + ; 
 e l s e 
 o n e + + ; 
 } 
 } 
 } 
 i f </space/> ( c n t </space/> | | </space/> ( z e r o </space/> % </space/> 2 </space/> = = </space/> 0 </space/> & & </space/> o n e </space/> % </space/> 2 </space/> = = </space/> 0 ) ) 
 c o u t </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> n </space/> - </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s t r ; 
 c i n </space/> > > </space/> s t r ; 
 s e t < c h a r > </space/> a n s ; 
 i n t </space/> c t r </space/> = </space/> 1 ; 
 i f </space/> ( s t r . s i z e ( ) </space/> = = </space/> 1 ) 
 a n s . i n s e r t ( s t r [ 0 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> s t r . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s t r [ i ] </space/> = = </space/> s t r [ i </space/> - </space/> 1 ] ) 
 { 
 c t r + + ; 
 } 
 e l s e 
 { 
 i f </space/> ( c t r </space/> % </space/> 2 ) 
 { 
 a n s . i n s e r t ( s t r [ i </space/> - </space/> 1 ] ) ; 
 } 
 c t r </space/> = </space/> 1 ; 
 } 
 } 
 i f </space/> ( c t r </space/> % </space/> 2 ) 
 { 
 a n s . i n s e r t ( s t r [ s t r . s i z e ( ) </space/> - </space/> 1 ] ) ; 
 } 
 
 / / </space/> s o r t ( a n s . b e g i n ( ) , a n s . e n d ( ) ) </space/> ; 
 f o r </space/> ( c h a r </space/> i </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * * 
 * </space/> C o p y r i g h t </space/> 2 0 2 1 </space/> R o d r i g o </space/> M a r t i n s 
 * 
 * </space/> T h i s </space/> p r o g r a m </space/> i s </space/> f r e e </space/> s o f t w a r e : </space/> y o u </space/> c a n </space/> r e d i s t r i b u t e </space/> i t </space/> a n d / o r </space/> m o d i f y 
 * </space/> i t </space/> u n d e r </space/> t h e </space/> t e r m s </space/> o f </space/> t h e </space/> G N U </space/> G e n e r a l </space/> P u b l i c </space/> L i c e n s e </space/> a s </space/> p u b l i s h e d </space/> b y 
 * </space/> t h e </space/> F r e e </space/> S o f t w a r e </space/> F o u n d a t i o n , </space/> e i t h e r </space/> v e r s i o n </space/> 3 </space/> o f </space/> t h e </space/> L i c e n s e , </space/> o r 
 * </space/> ( a t </space/> y o u r </space/> o p t i o n ) </space/> a n y </space/> l a t e r </space/> v e r s i o n . 
 * 
 * </space/> T h i s </space/> p r o g r a m </space/> i s </space/> d i s t r i b u t e d </space/> i n </space/> t h e </space/> h o p e </space/> t h a t </space/> i t </space/> w i l l </space/> b e </space/> u s e f u l , 
 * </space/> b u t </space/> W I T H O U T </space/> A N Y </space/> W A R R A N T Y ; </space/> w i t h o u t </space/> e v e n </space/> t h e </space/> i m p l i e d </space/> w a r r a n t y </space/> o f 
 * </space/> M E R C H A N T A B I L I T Y </space/> o r </space/> F I T N E S S </space/> F O R </space/> A </space/> P A R T I C U L A R </space/> P U R P O S E . </space/> S e e </space/> t h e 
 * </space/> G N U </space/> G e n e r a l </space/> P u b l i c </space/> L i c e n s e </space/> f o r </space/> m o r e </space/> d e t a i l s . 
 * 
 * </space/> Y o u </space/> s h o u l d </space/> h a v e </space/> r e c e i v e d </space/> a </space/> c o p y </space/> o f </space/> t h e </space/> G N U </space/> G e n e r a l </space/> P u b l i c </space/> L i c e n s e 
 * </space/> a l o n g </space/> w i t h </space/> t h i s </space/> p r o g r a m . </space/> I f </space/> n o t , </space/> s e e </space/> < h t t p : / / w w w . g n u . o r g / l i c e n s e s / > . 
 * / 
 
 # i n c l u d e </space/> < s t d d e f . h > 
 # i n c l u d e </space/> < s t d i o . h > 
 
 # d e f i n e </space/> M A X _ I N P U T _ L E N </space/> 3 0 0 0 0 0 </space/> / / </space/> 3 * 1 0 * * 5 
 
 s t a t i c </space/> u n s i g n e d </space/> c h a r </space/> e v e n [ M A X _ I N P U T _ L E N </space/> + </space/> 1 ] ; </space/> / / + 1 </space/> f o r </space/> t e r m i n a t o r 
 s t a t i c </space/> u n s i g n e d </space/> c h a r </space/> o d d [ M A X _ I N P U T _ L E N </space/> + </space/> 1 ] ; </space/> / / + 1 </space/> f o r </space/> t e r m i n a t o r 
 
 i n t </space/> m a i n ( v o i d ) 
 { 
 l o n g </space/> t e s t C o u n t ; 
 s c a n f ( "" % l d \ n "" , </space/> & t e s t C o u n t ) ; 
 f o r </space/> ( l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t e s t C o u n t ; </space/> i + + ) 
 { 
 s i z e _ t </space/> e v e n L e n </space/> = </space/> 0 ; 
 s i z e _ t </space/> o d d L e n </space/> = </space/> 0 ; 
 w h i l e </space/> ( 1 ) 
 { 
 u n s i g n e d </space/> c h a r </space/> i n p u t </space/> = </space/> g e t c h a r ( ) ; 
 i f </space/> ( i n p u t </space/> = = </space/> ' \ n ' ) 
 b r e a k ; 
 e l s e </space/> i f </space/> ( i n p u t </space/> & </space/> 1 ) 
 o d d [ o d d L e n + + ] </space/> = </space/> i n p u t ; 
 e l s e 
 e v e n [ e v e n L e n + + ] </space/> = </space/> i n p u t ; 
 } 
 e v e n [ e v e n L e n ] </space/> = </space/> o d d [ o d d L e n ] </space/> = </space/> 0 x F F ; 
 f o r </space/> ( s i z e _ t </space/> o d d C u r s o r </space/> = </space/> 0 , </space/> e v e n C u r s o r </space/> = </space/> 0 ; </space/> o d d C u r s o r </space/> < </space/> o d d L e n </space/> | | </space/> e v e n C u r s o r </space/> < </space/> e v e n L e n ; ) 
 i f </space/> ( e v e n [ e v e n C u r s o r ] </space/> < </space/> o d d [ o d d C u r s o r ] ) 
 p u t c h a r ( e v e n [ e v e n C u r s o r + + ] ) ; 
 e l s e 
 p u t c h a r ( o d d [ o d d C u r s o r + + ] ) ; 
 p u t c h a r ( ' \ n ' ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 s e t < c h a r > </space/> v ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i n t </space/> n </space/> = </space/> s . l e n g t h ( ) ; 
 i f </space/> ( n </space/> = = </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> s </space/> < < </space/> "" \ n "" ; 
 c o n t i n u e ; 
 } 
 s e t < c h a r > </space/> v ; 
 i n t </space/> c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 c + + ; 
 } 
 e l s e 
 { 
 i f </space/> ( ( c </space/> + </space/> 1 ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 { 
 v . i n s e r t ( s [ i ] ) ; 
 } 
 c </space/> = </space/> 0 ; 
 } 
 } 
 i f </space/> ( ( c </space/> + </space/> 1 ) </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 v . i n s e r t ( s [ n </space/> - </space/> 1 ] ) ; 
 f o r </space/> ( a u t o </space/> i </space/> = </space/> v . b e g i n ( ) ; </space/> i </space/> ! = </space/> v . e n d ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> * i ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> c h e c k ( v e c t o r < p a i r < i n t 6 4 _ t , </space/> i n t 6 4 _ t > > & </space/> a , </space/> i n t 6 4 _ t </space/> m i d , </space/> i n t 6 4 _ t </space/> s ) 
 { 
 i n t </space/> n </space/> = </space/> a . s i z e ( ) ; 
 v e c t o r < i n t 6 4 _ t > </space/> l o w ( n ) ; 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l o w [ i ] </space/> = </space/> a [ i ] . f i r s t ; 
 s </space/> - = </space/> l o w [ i ] ; 
 i f </space/> ( l o w [ i ] </space/> > = </space/> m i d ) 
 c n t + + ; 
 } 
 i f </space/> ( c n t </space/> > </space/> n </space/> / </space/> 2 ) 
 r e t u r n </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 i f </space/> ( a [ i ] . f i r s t </space/> > = </space/> m i d ) 
 c o n t i n u e ; 
 i f </space/> ( a [ i ] . s e c o n d </space/> > = </space/> m i d ) 
 { 
 i f </space/> ( c n t </space/> < = </space/> n </space/> / </space/> 2 ) 
 { 
 s </space/> - = </space/> ( m i d </space/> - </space/> a [ i ] . f i r s t ) ; 
 c n t + + ; 
 } 
 } 
 } 
 r e t u r n </space/> ( ( c n t </space/> > </space/> n </space/> / </space/> 2 ) </space/> & & </space/> ( s </space/> > = </space/> 0 ) ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t 6 4 _ t </space/> n , </space/> s ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s ; 
 v e c t o r < p a i r < i n t 6 4 _ t , </space/> i n t 6 4 _ t > > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] . f i r s t </space/> > > </space/> a [ i ] . s e c o n d ; 
 v e c t o r < i n t 6 4 _ t > </space/> l o w ( n ) ; 
 v e c t o r < i n t 6 4 _ t > </space/> u p ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l o w [ i ] </space/> = </space/> a [ i ] . f i r s t ; 
 u p [ i ] </space/> = </space/> a [ i ] . s e c o n d ; 
 } 
 s o r t ( l o w . b e g i n ( ) , </space/> l o w . e n d ( ) ) ; 
 s o r t ( u p . b e g i n ( ) , </space/> u p . e n d ( ) ) ; 
 s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) ) ; 
 
 i n t 6 4 _ t </space/> l </space/> = </space/> l o w [ n </space/> / </space/> 2 ] ; 
 i n t 6 4 _ t </space/> r </space/> = </space/> u p [ n </space/> / </space/> 2 ] ; 
 i n t 6 4 _ t </space/> a n s </space/> = </space/> l ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t 6 4 _ t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( a , </space/> m i d , </space/> s ) ) 
 { 
 a n s </space/> = </space/> m i d ; 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 e l s e 
 { 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s t d : : i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> f a s t ( ) </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> F O R ( i , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> F O R r ( i , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 # d e f i n e </space/> I N F </space/> 1 e 1 8 
 / / </space/> v e c t o r < v e c t o r < i n t > > a ( n , v e c t o r < i n t > ( m , 0 ) ) ; 
 / / </space/> v e c t o r < p a i r < l l , p a i r < l l , l l > > > a ; 
 / * 
 b o o l </space/> s o r t b y s e c ( c o n s t </space/> p a i r < i n t , i n t > </space/> & a , </space/> c o n s t </space/> p a i r < i n t , i n t > </space/> & b ) { 
 r e t u r n </space/> ( a . s e c o n d </space/> < </space/> b . s e c o n d ) ; 
 } 
 * / 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ( ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < s t r i n g > </space/> s ; 
 v e c t o r < i n t > </space/> g 0 , </space/> g 1 ; 
 F O R ( i , </space/> n ) 
 { 
 s t r i n g </space/> q ; 
 c i n </space/> > > </space/> q ; 
 s . p b ( q ) ; 
 l l </space/> z e r o </space/> = </space/> 0 , </space/> o n e </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s [ i ] . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( s [ i ] [ j ] </space/> = = </space/> ' 0 ' ) 
 { 
 z e r o + + ; 
 } 
 e l s e 
 { 
 o n e + + ; 
 } 
 } 
 g 0 . p b ( z e r o ) ; 
 g 1 . p b ( o n e ) ; 
 } 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i n t </space/> o d d _ c n t </space/> = </space/> 0 , </space/> e v e n _ c n t </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> g 0 . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( g 0 [ i ] </space/> % </space/> 2 </space/> = = </space/> 0 </space/> & & </space/> g 1 [ i ] </space/> % </space/> 2 </space/> = = </space/> 1 ) 
 { 
 a n s </space/> = </space/> n ; 
 b r e a k ; 
 } 
 e l s e </space/> i f </space/> ( g 0 [ i ] </space/> % </space/> 2 </space/> = = </space/> 1 </space/> & & </space/> g 1 [ i ] </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 { 
 a n s </space/> = </space/> n ; 
 b r e a k ; 
 } 
 e l s e </space/> i f </space/> ( g 0 [ i ] </space/> % </space/> 2 </space/> = = </space/> 1 </space/> & & </space/> g 1 [ i ] </space/> % </space/> 2 </space/> = = </space/> 1 ) 
 { 
 o d d _ c n t + + ; 
 } 
 e l s e 
 { 
 e v e n _ c n t + + ; 
 } 
 } 
 i f </space/> ( a n s </space/> = = </space/> n ) 
 { 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> e v e n _ c n t </space/> + </space/> o d d _ c n t </space/> - </space/> ( o d d _ c n t </space/> % </space/> 2 ) </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 
 
 / / </space/> F u n c t i o n </space/> t o </space/> c o n v e r t </space/> V e c t o r </space/> t o </space/> S e t 
 s e t < c h a r > </space/> c o n v e r t T o S e t ( v e c t o r < c h a r > </space/> v ) 
 { 
 / / </space/> D e c l a r i n g </space/> t h e </space/> s e t 
 / / </space/> u s i n g </space/> r a n g e </space/> o f </space/> v e c t o r 
 s e t < c h a r > </space/> s ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ; 
 
 / / </space/> R e t u r n </space/> t h e </space/> r e s u l t a n t </space/> S e t 
 r e t u r n </space/> s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 s t r i n g </space/> s 1 ; 
 c i n </space/> > > </space/> s 1 ; 
 v e c t o r < c h a r > </space/> s ( s 1 . s i z e ( ) ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 s [ i ] </space/> = </space/> s 1 [ i ] ; 
 v e c t o r < c h a r > </space/> v e c t ; 
 i f </space/> ( s . s i z e ( ) </space/> = = </space/> 1 ) 
 c o u t </space/> < < </space/> s [ 0 ] </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> s [ i </space/> + </space/> 1 ] ) 
 { 
 i f </space/> ( i </space/> = = </space/> s . s i z e ( ) </space/> - </space/> 2 ) 
 v e c t . p u s h _ b a c k ( s [ i </space/> + </space/> 1 ] ) ; 
 v e c t . p u s h _ b a c k ( s [ i ] ) ; 
 } 
 e l s e 
 { 
 i + + ; 
 i f </space/> ( i </space/> + </space/> 1 </space/> = = </space/> s . s i z e ( ) </space/> - </space/> 1 ) 
 v e c t . p u s h _ b a c k ( s [ i </space/> + </space/> 1 ] ) ; 
 } 
 } 
 / / </space/> s o r t ( v e c t . b e g i n ( ) , v e c t . e n d ( ) ) ; 
 
 
 s e t < c h a r > </space/> s 2 </space/> = </space/> c o n v e r t T o S e t ( v e c t ) ; 
 
 f o r </space/> ( s t d : : s e t < c h a r > : : i t e r a t o r </space/> i t </space/> = </space/> s 2 . b e g i n ( ) ; </space/> i t </space/> ! = </space/> s 2 . e n d ( ) ; </space/> + + i t ) 
 s t d : : c o u t </space/> < < </space/> * i t ; 
 
 s t d : : c o u t </space/> < < </space/> ' \ n ' ; 
 } 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 s e t < c h a r > </space/> a n s ; 
 s </space/> + = </space/> ' </space/> ' ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) </space/> - </space/> 1 ; </space/> i + + ) 
 i f </space/> ( s [ i ] </space/> ! = </space/> s [ i </space/> + </space/> 1 ] ) 
 a n s . i n s e r t ( s [ i ] ) ; 
 e l s e 
 i + + ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 }",1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> m o </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> c n t [ N ] , </space/> p [ N ] , </space/> n ; 
 l l </space/> b i n p o w ( l l </space/> t , </space/> l l </space/> b ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 t </space/> % = </space/> m o ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> ( a n s </space/> * </space/> t ) </space/> % </space/> m o ; 
 t </space/> = </space/> ( t </space/> * </space/> t ) </space/> % </space/> m o ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k ; 
 s c a n f ( "" % l l d "" , </space/> & k ) ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k ; </space/> j + + ) 
 { 
 l l </space/> z ; 
 s c a n f ( "" % l l d "" , </space/> & z ) ; 
 c n t [ z ] + + ; 
 p [ z ] </space/> = </space/> ( p [ z ] </space/> + </space/> b i n p o w ( ( l l ( n ) </space/> * </space/> k ) </space/> % </space/> m o , </space/> m o </space/> - </space/> 2 ) ) </space/> % </space/> m o ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 , </space/> t e </space/> = </space/> b i n p o w ( n , </space/> m o </space/> - </space/> 2 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 a n s </space/> = </space/> ( a n s </space/> + </space/> p [ i ] </space/> * </space/> c n t [ i ] </space/> % </space/> m o </space/> * </space/> t e </space/> % </space/> m o ) </space/> % </space/> m o ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b ( x ) </space/> p u s h _ b a c k ( x ) 
 # d e f i n e </space/> m p ( x , </space/> y ) </space/> m a k e _ p a i r ( x , </space/> y ) 
 # d e f i n e </space/> p r l ( x ) </space/> c o u t </space/> < < </space/> x </space/> < < </space/> e n d l 
 # d e f i n e </space/> p r l 2 ( x , </space/> y ) </space/> c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> e n d l 
 # d e f i n e </space/> p r l 3 ( x , </space/> y , </space/> z ) </space/> c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> "" </space/> "" </space/> < < </space/> z </space/> < < </space/> e n d l 
 # d e f i n e </space/> p r l d ( x , </space/> y ) </space/> c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( y ) </space/> < < </space/> x </space/> < < </space/> e n d l 
 # d e f i n e </space/> p r d ( x , </space/> y ) </space/> c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( y ) </space/> < < </space/> x 
 # d e f i n e </space/> p r ( x ) </space/> c o u t </space/> < < </space/> x 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> g c d </space/> _ _ g c d 
 # d e f i n e </space/> g g g ( x 1 , </space/> x 2 ) </space/> g c d ( a b s ( x 1 ) , </space/> a b s ( x 2 ) ) 
 # d e f i n e </space/> n u m O f B i t s ( x ) </space/> _ _ b u i l t i n _ p o p c o u n t ( x ) 
 # d e f i n e </space/> m s b ( x ) </space/> 6 3 </space/> - </space/> _ _ b u i l t i n _ c l z l l ( x ) 
 # d e f i n e </space/> s p e e d </space/> i o s : : s y n c _ w i t h _ s t d i o ( 0 ) 
 # d e f i n e </space/> e p s e n o m </space/> 0 . 0 0 0 0 0 0 1 
 / / # d e f i n e </space/> x </space/> f i r s t 
 / / # d e f i n e </space/> y </space/> s e c o n d 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> i n f </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 l l 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> m x n </space/> 1 0 0 0 1 0 0 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 x </space/> = </space/> x </space/> % </space/> m o d ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 r e t u r n </space/> 0 ; 
 w h i l e </space/> ( y </space/> > </space/> 0 ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> x ) </space/> % </space/> m o d ; 
 y </space/> = </space/> y </space/> > > </space/> 1 ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l l </space/> m o d I n v e r s e ( l l </space/> n ) 
 { 
 r e t u r n </space/> p o w e r ( n , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s p e e d ; 
 / / </space/> f r e o p e n ( "" f l a g s . i n "" , "" r "" , s t d i n ) ; 
 l l </space/> t c </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t c ; 
 r e p ( t t , </space/> 1 , </space/> t c </space/> + </space/> 1 ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> k [ n ] ; 
 m a p < l l , </space/> l l > </space/> m ; 
 v e c t o r < l l > </space/> g [ n ] ; 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 c i n </space/> > > </space/> k [ i ] ; 
 r e p ( j , </space/> 0 , </space/> k [ i ] ) 
 { 
 l l </space/> i n ; 
 c i n </space/> > > </space/> i n ; 
 g [ i ] . p b ( i n ) ; 
 m [ i n ] + + ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 f o r </space/> ( a u t o </space/> v v </space/> : </space/> g [ i ] ) 
 { 
 l l </space/> a d </space/> = </space/> ( m [ v v ] </space/> % </space/> m o d ) </space/> * </space/> m o d I n v e r s e ( k [ i ] ) ; 
 a d </space/> % = </space/> m o d ; 
 a d </space/> * = </space/> m o d I n v e r s e ( n ) ; 
 a d </space/> % = </space/> m o d ; 
 a d </space/> * = </space/> m o d I n v e r s e ( n ) ; 
 a d </space/> % = </space/> m o d ; 
 a n s </space/> + = </space/> a d ; 
 a n s </space/> % = </space/> m o d ; 
 } 
 } 
 p r l ( a n s ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 l o n g </space/> l o n g </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> u s [ 1 0 0 0 0 1 0 ] ; 
 
 l o n g </space/> l o n g </space/> p o w e r ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> p o w e r ( a , </space/> b </space/> / </space/> 2 ) ; 
 a n s </space/> = </space/> ( a n s </space/> * </space/> a n s ) </space/> % </space/> m o d ; 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> ( a </space/> * </space/> a n s ) </space/> % </space/> m o d ; 
 r e t u r n </space/> a n s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < v e c t o r < i n t > </space/> > </space/> p ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 p [ i ] . r e s i z e ( k ) ; 
 l l </space/> i n v </space/> = </space/> p o w e r ( k , </space/> m o d </space/> - </space/> 2 ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> p [ i ] [ j ] ; 
 u s [ p [ i ] [ j ] ] </space/> + = </space/> i n v ; 
 } 
 } 
 l l </space/> c c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k </space/> = </space/> p [ i ] . s i z e ( ) ; 
 l l </space/> k i d </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 k i d </space/> + = </space/> u s [ p [ i ] [ j ] ] ; 
 } 
 c c </space/> = </space/> ( c c </space/> + </space/> k i d ) </space/> % </space/> m o d ; 
 } 
 c c </space/> = </space/> c c </space/> * </space/> 1 l l </space/> * </space/> p o w e r ( n </space/> * </space/> 1 l l </space/> * </space/> n </space/> % </space/> m o d , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> c c </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 2 e 9 </space/> + </space/> 3 ; 
 
 
 i n t </space/> b i n _ p o w ( i n t </space/> a , </space/> i n t </space/> n ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( n ) 
 { 
 i f </space/> ( n </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( 1 l l </space/> * </space/> r e s </space/> * </space/> a ) </space/> % </space/> M O D ; 
 a </space/> = </space/> ( 1 l l </space/> * </space/> a </space/> * </space/> a ) </space/> % </space/> M O D ; 
 n </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> c n t _ i t e m _ o w n e r ( N ) ; 
 v e c t o r < v e c t o r < i n t > > </space/> l s t ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k , </space/> x ; 
 c i n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 l s t [ i ] . p u s h _ b a c k ( x ) ; 
 c n t _ i t e m _ o w n e r [ x ] + + ; 
 } 
 } 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> x </space/> : </space/> l s t [ i ] ) 
 { 
 i n t </space/> k </space/> = </space/> l s t [ i ] . s i z e ( ) ; 
 i n t </space/> q </space/> = </space/> b i n _ p o w ( ( 1 l l </space/> * </space/> n </space/> * </space/> n </space/> * </space/> k ) </space/> % </space/> M O D , </space/> M O D </space/> - </space/> 2 ) ; 
 i n t </space/> c u r </space/> = </space/> ( 1 l l </space/> * </space/> c n t _ i t e m _ o w n e r [ x ] </space/> * </space/> q ) </space/> % </space/> M O D ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> c u r ) </space/> % </space/> M O D ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) , </space/> c o u t . t i e ( n u l l p t r ) ; 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> m o </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> c n t [ N ] , </space/> p [ N ] , </space/> n ; 
 / / </space/> i n t </space/> m u l ( i n t </space/> a , </space/> i n t </space/> b ) </space/> { 
 / / </space/> r e t u r n </space/> a </space/> * </space/> 1 l l </space/> * </space/> b </space/> % </space/> m o ; 
 / / </space/> } 
 / / </space/> i n t </space/> b i n p o w ( i n t </space/> a , </space/> i n t </space/> b ) </space/> { 
 / / </space/> i n t </space/> r e s </space/> = </space/> 1 ; 
 / / </space/> w h i l e </space/> ( b ) </space/> { 
 / / </space/> i f </space/> ( b </space/> & </space/> 1 ) </space/> r e s </space/> = </space/> m u l ( r e s , </space/> a ) ; 
 / / </space/> a </space/> = </space/> m u l ( a , </space/> a ) ; 
 / / </space/> b </space/> > > = </space/> 1 ; 
 / / </space/> } 
 / / </space/> r e t u r n </space/> r e s ; 
 / / </space/> } 
 l l </space/> b i n p o w ( l l </space/> t , </space/> l l </space/> b ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 t </space/> % = </space/> m o ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> ( a n s </space/> * </space/> t ) </space/> % </space/> m o ; 
 t </space/> = </space/> ( t </space/> * </space/> t ) </space/> % </space/> m o ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k ; 
 s c a n f ( "" % l l d "" , </space/> & k ) ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k ; </space/> j + + ) 
 { 
 l l </space/> z ; 
 s c a n f ( "" % l l d "" , </space/> & z ) ; 
 c n t [ z ] + + ; 
 p [ z ] </space/> = </space/> ( p [ z ] </space/> + </space/> b i n p o w ( ( l l ( n ) </space/> * </space/> k ) </space/> % </space/> m o , </space/> m o </space/> - </space/> 2 ) ) </space/> % </space/> m o ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 , </space/> t e </space/> = </space/> b i n p o w ( n , </space/> m o </space/> - </space/> 2 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 a n s </space/> = </space/> ( a n s </space/> + </space/> p [ i ] </space/> * </space/> c n t [ i ] </space/> % </space/> m o </space/> * </space/> t e </space/> % </space/> m o ) </space/> % </space/> m o ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> i n t </space/> i n t 6 4 _ t 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 ' 2 4 4 ' 3 5 3 ; 
 
 i n t </space/> a d d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 / / </space/> a </space/> % = </space/> m o d ; 
 / / </space/> b </space/> % = </space/> m o d ; 
 r e t u r n </space/> a </space/> + </space/> b </space/> < </space/> m o d </space/> ? </space/> a </space/> + </space/> b </space/> : </space/> a </space/> + </space/> b </space/> - </space/> m o d ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 / / </space/> a </space/> % = </space/> m o d ; 
 / / </space/> b </space/> % = </space/> m o d ; 
 / / </space/> a s s e r t ( a </space/> > </space/> 0 </space/> a n d </space/> b </space/> > </space/> 0 ) ; 
 i f </space/> ( a </space/> > = </space/> m o d ) 
 a </space/> % = </space/> m o d ; 
 i f </space/> ( b </space/> > = </space/> m o d ) 
 b </space/> % = </space/> m o d ; 
 / / </space/> r e t u r n </space/> ( _ _ i n t 1 2 8 ) </space/> a </space/> * </space/> b </space/> % </space/> m o d ; 
 r e t u r n </space/> 1 L L </space/> * </space/> a </space/> * </space/> b </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> f e x p ( i n t </space/> b , </space/> i n t </space/> e ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( e ) 
 { 
 i f </space/> ( e </space/> & </space/> 1 ) 
 r e s </space/> = </space/> m u l ( r e s , </space/> b ) ; 
 b </space/> = </space/> m u l ( b , </space/> b ) ; 
 e </space/> = </space/> e </space/> > > </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> i n v ( i n t </space/> b ) 
 { 
 r e t u r n </space/> f e x p ( b , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 
 v e c t o r < i n t > </space/> i t e m s [ N ] ; 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t 6 4 _ t </space/> L C M </space/> = </space/> 1 ; </space/> / / </space/> m a y b e </space/> o v e r f l o w s ? 
 m a p < i n t , </space/> i n t > </space/> P ; 
 m a p < i n t , </space/> i n t > </space/> c n t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 L C M </space/> = </space/> l c m ( L C M , </space/> k ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i t e m s [ i ] . p u s h _ b a c k ( x ) ; 
 } 
 } 
 
 L C M </space/> % = </space/> m o d ; 
 / / </space/> c o u t </space/> < < </space/> "" L C M </space/> = </space/> "" </space/> < < </space/> L C M </space/> < < </space/> e n d l ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> s z </space/> = </space/> i t e m s [ i ] . s i z e ( ) ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> i t e m s [ i ] ) 
 { 
 c n t [ x ] + + ; 
 P [ x ] </space/> = </space/> a d d ( P [ x ] , </space/> m u l ( L C M , </space/> i n v ( s z ) ) ) ; 
 / / </space/> P [ x ] </space/> + = </space/> L C M </space/> / </space/> s z ; 
 } 
 } 
 
 / / </space/> c o u t </space/> < < </space/> "" p r o b a b i l i t i e s : </space/> "" </space/> < < </space/> e n d l ; 
 / / </space/> f o r </space/> ( a u t o </space/> [ x , </space/> p ] </space/> : </space/> P ) </space/> { 
 / / </space/> c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> p </space/> < < </space/> e n d l ; 
 / / } 
 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o [ x , </space/> p ] </space/> : </space/> P ) 
 { 
 / / </space/> c o u t </space/> < < </space/> "" x </space/> = </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 i n t </space/> n u m </space/> = </space/> m u l ( p , </space/> c n t [ x ] ) ; 
 / / </space/> c o u t </space/> < < </space/> "" n u m </space/> = </space/> "" </space/> < < </space/> n u m </space/> < < </space/> e n d l ; 
 / / </space/> i n t </space/> d e n </space/> = </space/> m u l ( a l l _ p r e s e n t s , </space/> L C M ) ; 
 i n t </space/> d e n </space/> = </space/> L C M ; 
 / / </space/> c o u t </space/> < < </space/> "" p r e s e n t s </space/> * </space/> l c m </space/> = </space/> "" </space/> < < </space/> d e n </space/> < < </space/> e n d l ; 
 i n t </space/> a u x </space/> = </space/> m u l ( n , </space/> n ) ; 
 d e n </space/> = </space/> m u l ( d e n , </space/> a u x ) ; 
 / / </space/> c o u t </space/> < < </space/> "" d e n </space/> = </space/> "" </space/> < < </space/> d e n </space/> < < </space/> e n d l ; 
 / / </space/> a n s </space/> + = </space/> m u l ( n u m , </space/> i n v ( d e n ) ) ; 
 a n s </space/> = </space/> a d d ( a n s , </space/> m u l ( n u m , </space/> i n v ( d e n ) ) ) ; 
 } 
 c o u t </space/> < < </space/> ( ( a n s </space/> % </space/> m o d ) </space/> + </space/> m o d ) </space/> % </space/> m o d </space/> < < </space/> e n d l ; 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 / / </space/> P r o b l e m </space/> : </space/> D . </space/> S a n t a ' s </space/> B o t 
 / / </space/> C o n t e s t </space/> : </space/> C o d e f o r c e s </space/> - </space/> E d u c a t i o n a l </space/> C o d e f o r c e s </space/> R o u n d </space/> 7 9 </space/> ( R a t e d </space/> f o r </space/> D i v . </space/> 2 ) 
 / / </space/> U R L </space/> : </space/> h t t p s : / / c o d e f o r c e s . c o m / c o n t e s t / 1 2 7 9 / p r o b l e m / D 
 / / </space/> M e m o r y </space/> L i m i t </space/> : </space/> 2 5 6 </space/> M B 
 / / </space/> T i m e </space/> L i m i t </space/> : </space/> 5 0 0 0 </space/> m s 
 / / </space/> P o w e r e d </space/> b y </space/> C P </space/> E d i t o r </space/> ( h t t p s : / / g i t h u b . c o m / c p e d i t o r / c p e d i t o r ) 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > 
 
 c o n s t </space/> i n t </space/> p </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> l i m </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 
 l l </space/> e x p o ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> p ; 
 
 b </space/> / = </space/> 2 ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> p ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 l l </space/> i n v ( l l </space/> n u m ) 
 { 
 r e t u r n </space/> e x p o ( n u m , </space/> p </space/> - </space/> 2 ) ; 
 } 
 
 i n t </space/> f r e q [ l i m ] ; 
 l l </space/> d e m a n d [ l i m ] ; 
 
 v o i d </space/> p r e _ i o ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 p r e _ i o ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < v e c t o r < i n t > > </space/> v ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 v [ i ] . r e s i z e ( x ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> x ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> v [ i ] [ j ] ; 
 f r e q [ v [ i ] [ j ] ] + + ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> v [ i ] . s i z e ( ) ; </space/> j + + ) 
 { 
 d e m a n d [ v [ i ] [ j ] ] </space/> = </space/> ( d e m a n d [ v [ i ] [ j ] ] </space/> + </space/> i n v ( v [ i ] . s i z e ( ) ) ) </space/> % </space/> p ; 
 } 
 } 
 
 l l </space/> c o n s </space/> = </space/> i n v ( n ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> l i m ; </space/> i + + ) 
 { 
 i f </space/> ( d e m a n d [ i ] </space/> = = </space/> 0 </space/> | | </space/> f r e q [ i ] </space/> = = </space/> 0 ) 
 c o n t i n u e ; 
 
 l l </space/> r e q </space/> = </space/> f r e q [ i ] ; 
 d e m a n d [ i ] </space/> = </space/> ( d e m a n d [ i ] </space/> * </space/> c o n s ) </space/> % </space/> p ; 
 d e m a n d [ i ] </space/> = </space/> ( d e m a n d [ i ] </space/> * </space/> r e q ) </space/> % </space/> p ; 
 d e m a n d [ i ] </space/> = </space/> ( d e m a n d [ i ] </space/> * </space/> c o n s ) </space/> % </space/> p ; 
 } 
 
 l l </space/> r e s </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> l i m ; </space/> i + + ) 
 r e s </space/> = </space/> ( r e s </space/> + </space/> d e m a n d [ i ] ) </space/> % </space/> p ; 
 
 c o u t </space/> < < </space/> r e s ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < u t i l i t y > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < a r r a y > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c l i m i t s > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < m e m o r y > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> i n p u t </space/> "" s a n t a . i n "" 
 # d e f i n e </space/> o u t p u t </space/> "" s a n t a . o u t "" 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 v e c t o r < s i g n e d > </space/> p _ w a n t e d ( 1 0 0 0 0 0 1 , </space/> 0 ) ; </space/> / / </space/> p r e s e n t </space/> i </space/> i s </space/> w a n t e d </space/> x </space/> t i m e s 
 v e c t o r < v e c t o r < s i g n e d > > </space/> w i s h _ l i s t s ; 
 i n t </space/> n ; 
 i n t </space/> L C M </space/> = </space/> 1 ; 
 i n t </space/> n u m </space/> = </space/> 0 ; 
 i n t </space/> g c d ( i n t </space/> x , </space/> i n t </space/> y ) 
 { </space/> / / </space/> b o t h </space/> s h o u l d </space/> b e </space/> < </space/> M 
 i f </space/> ( y </space/> = = </space/> 0 ) 
 r e t u r n </space/> x ; 
 r e t u r n </space/> g c d ( y , </space/> x </space/> % </space/> y ) ; 
 } 
 v o i d </space/> l c m ( i n t </space/> x ) 
 { 
 L C M </space/> = </space/> ( ( ( ( i n t ) x </space/> * </space/> L C M ) </space/> % </space/> M ) </space/> * </space/> ( i n t ) g c d ( x , </space/> L C M ) </space/> % </space/> M ) </space/> % </space/> M ; 
 } 
 i n t </space/> b i n p o w ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t </space/> m ) 
 { 
 x </space/> % = </space/> m ; 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( y </space/> > </space/> 0 ) 
 { 
 i f </space/> ( y </space/> % </space/> 2 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> x ) </space/> % </space/> m ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> m ; 
 y </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 / / </space/> f r e o p e n ( i n p u t , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( o u t p u t , </space/> "" w "" , </space/> s t d o u t ) ; 
 c i n </space/> > > </space/> n ; 
 w i s h _ l i s t s . r e s e r v e ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 l c m ( k ) ; 
 v e c t o r < s i g n e d > </space/> w a n t s ; 
 w a n t s . r e s e r v e ( k ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 i n t </space/> p ; 
 c i n </space/> > > </space/> p ; 
 w a n t s . p u s h _ b a c k ( p ) ; 
 p _ w a n t e d [ p ] + + ; 
 } 
 w i s h _ l i s t s . p u s h _ b a c k ( w a n t s ) ; 
 } 
 i n t </space/> d e n </space/> = </space/> b i n p o w ( ( ( n </space/> * </space/> n ) </space/> % </space/> M ) </space/> * </space/> ( i n t ) ( L C M ) , </space/> M </space/> - </space/> 2 , </space/> M ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> c u r r </space/> = </space/> ( L C M </space/> * </space/> b i n p o w ( w i s h _ l i s t s [ i ] . s i z e ( ) , </space/> M </space/> - </space/> 2 , </space/> M ) ) </space/> % </space/> M ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> w i s h _ l i s t s [ i ] . s i z e ( ) ; </space/> j + + ) 
 { 
 n u m </space/> + = </space/> ( i n t ) ( c u r r </space/> * </space/> p _ w a n t e d [ w i s h _ l i s t s [ i ] [ j ] ] ) ; 
 n u m </space/> = </space/> n u m </space/> % </space/> M ; 
 } 
 } 
 c o u t </space/> < < </space/> ( ( i n t ) ( n u m </space/> * </space/> d e n ) </space/> % </space/> M ) </space/> < < </space/> e n d l ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 / / # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f a s t r e a d </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> o p e n f i l e </space/> \ 
 i f s t r e a m </space/> c i n ; </space/> \ 
 o f s t r e a m </space/> c o u t ; </space/> \ 
 c i n . o p e n ( "" i n p u t . t x t "" ) ; </space/> \ 
 c o u t . o p e n ( "" o u t p u t . t x t "" ) ; 
 # d e f i n e </space/> f ( i , </space/> x , </space/> y ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> < </space/> y ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( X ) </space/> X . b e g i n ( ) , </space/> X . e n d ( ) 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> k e y </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> k e y y </space/> p a i r < p a i r < i n t , </space/> i n t > , </space/> i n t > 
 # d e f i n e </space/> k e y y y </space/> p a i r < p a i r < i n t , </space/> i n t > , </space/> p a i r < i n t , </space/> i n t > </space/> > 
 # d e f i n e </space/> k e y d </space/> p a i r < d o u b l e , </space/> d o u b l e > 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> d o u b l e </space/> l o n g </space/> d o u b l e 
 i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 1 e 1 8 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> s i z e </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 i n t </space/> c n t [ s i z e ] ; 
 
 i n t </space/> p o w e r ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i f </space/> ( y </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 i n t </space/> t </space/> = </space/> p o w e r ( x , </space/> y </space/> / </space/> 2 ) ; 
 t </space/> = </space/> ( t </space/> * </space/> t ) </space/> % </space/> m o d ; 
 i f </space/> ( y </space/> & </space/> 1 ) 
 t </space/> = </space/> ( t </space/> * </space/> x ) </space/> % </space/> m o d ; 
 r e t u r n </space/> t ; 
 } 
 
 m a i n ( ) 
 { 
 f a s t r e a d ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a [ n </space/> + </space/> 1 ] ; 
 f ( i , </space/> 1 , </space/> n </space/> + </space/> 1 ) 
 { 
 i n t </space/> c ; 
 c i n </space/> > > </space/> c ; 
 f ( j , </space/> 0 , </space/> c ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 a [ i ] . p b ( x ) ; 
 c n t [ x ] + + ; 
 } 
 } 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f ( i , </space/> 1 , </space/> n </space/> + </space/> 1 ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> : </space/> a [ i ] ) 
 { 
 / / </space/> c o u t < < "" a "" ; 
 i n t </space/> t 1 </space/> = </space/> p o w e r ( n , </space/> m o d </space/> - </space/> 2 ) , </space/> t 2 </space/> = </space/> p o w e r ( a [ i ] . s i z e ( ) , </space/> m o d </space/> - </space/> 2 ) ; 
 i n t </space/> t </space/> = </space/> ( c n t [ j ] </space/> * </space/> p o w e r ( n , </space/> m o d </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 i n t </space/> x </space/> = </space/> ( ( ( t 1 </space/> * </space/> t 2 ) </space/> % </space/> m o d ) </space/> * </space/> t ) </space/> % </space/> m o d ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> x ) </space/> % </space/> m o d ; 
 / / </space/> c o u t < < i < < "" </space/> "" < < j < < "" </space/> "" < < x < < "" \ n "" ; 
 } 
 } 
 i n t </space/> t 1 </space/> = </space/> p o w e r ( 4 , </space/> m o d </space/> - </space/> 2 ) , </space/> t 2 </space/> = </space/> p o w e r ( 8 , </space/> m o d </space/> - </space/> 2 ) , </space/> t 3 </space/> = </space/> p o w e r ( 2 , </space/> m o d </space/> - </space/> 2 ) ; 
 / / </space/> c o u t < < t 1 < < "" </space/> "" < < t 2 < < "" </space/> "" < < t 3 < < "" \ n "" ; 
 c o u t </space/> < < </space/> a n s ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> r p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> r p n ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> p o w m o d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 a </space/> % = </space/> m o d ; 
 f o r </space/> ( ; </space/> b ; </space/> b </space/> > > = </space/> 1 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 # d e f i n e </space/> i n v ( a ) </space/> p o w m o d ( a , </space/> m o d </space/> - </space/> 2 ) 
 / / </space/> i n i t 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 l l </space/> c n t [ m a x n ] , </space/> s u m [ m a x n ] ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 r p ( i , </space/> n ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 r p ( j , </space/> k ) 
 { 
 l l </space/> x ; 
 c i n </space/> > > </space/> x ; 
 c n t [ x ] + + ; 
 s u m [ x ] </space/> = </space/> ( s u m [ x ] </space/> + </space/> i n v ( k ) ) </space/> % </space/> m o d ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 r p ( i , </space/> m a x n ) </space/> a n s </space/> = </space/> ( a n s </space/> + </space/> c n t [ i ] </space/> * </space/> s u m [ i ] </space/> % </space/> m o d ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> * </space/> i n v ( n ) </space/> % </space/> m o d </space/> * </space/> i n v ( n ) </space/> % </space/> m o d ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i f d e f </space/> L O C A L 
 # i n c l u d e </space/> "" d e b u g . h "" 
 # e l s e 
 # d e f i n e </space/> d e b ( . . . ) 
 # e n d i f 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> i n ( v ) </space/> \ 
 f o r </space/> ( a u t o & </space/> i t </space/> : </space/> v ) </space/> \ 
 c i n </space/> > > </space/> i t ; 
 # d e f i n e </space/> _ o u t ( v ) </space/> \ 
 f o r </space/> ( a u t o & </space/> i t </space/> : </space/> v ) </space/> \ 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 # d e f i n e </space/> o u t ( v ) </space/> _ o u t ( v ) </space/> c o u t </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 1 e 1 8 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 i n t </space/> c n t [ N ] ; 
 n a m e s p a c e </space/> m o d o p 
 { 
 l l </space/> m a d d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 r e t u r n </space/> ( a </space/> + </space/> b ) </space/> % </space/> m o d ; 
 } 
 l l </space/> m s u b ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 r e t u r n </space/> ( ( ( a </space/> - </space/> b ) </space/> % </space/> m o d ) </space/> + </space/> m o d ) </space/> % </space/> m o d ; 
 } 
 l l </space/> m m u l ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 r e t u r n </space/> ( ( a </space/> % </space/> m o d ) </space/> * </space/> ( b </space/> % </space/> m o d ) ) </space/> % </space/> m o d ; 
 } 
 l l </space/> m p o w ( l l </space/> b a s e , </space/> l l </space/> e x p ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( e x p ) 
 { 
 i f </space/> ( e x p </space/> % </space/> 2 </space/> = = </space/> 1 ) 
 { 
 r e s </space/> = </space/> ( r e s </space/> * </space/> b a s e ) </space/> % </space/> m o d ; 
 } 
 e x p </space/> > > = </space/> 1 ; 
 b a s e </space/> = </space/> ( b a s e </space/> * </space/> b a s e ) </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l l </space/> m i n v ( l l </space/> b a s e ) 
 { 
 r e t u r n </space/> m p o w ( b a s e , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 l l </space/> m d i v ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 r e t u r n </space/> m m u l ( a , </space/> m i n v ( b ) ) ; 
 } 
 } 
 
 u s i n g </space/> n a m e s p a c e </space/> m o d o p ; 
 
 v o i d </space/> t e s t C a s e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < v e c t o r < i n t > > </space/> v ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 
 v e c t o r < i n t > </space/> c u r ; 
 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 c u r . p b ( x ) ; 
 c n t [ x ] + + ; 
 } 
 
 v . p b ( c u r ) ; 
 } 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 
 f o r </space/> ( a u t o </space/> v e c </space/> : </space/> v ) 
 { 
 i n t </space/> c u r _ s i z e </space/> = </space/> v e c . s i z e ( ) ; 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> v e c ) 
 { 
 a n s </space/> = </space/> m a d d ( a n s , </space/> m m u l ( m m u l ( 1 , </space/> m i n v ( m m u l ( n , </space/> c u r _ s i z e ) ) ) , </space/> m m u l ( c n t [ i t ] , </space/> m i n v ( n ) ) ) ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 t e s t C a s e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 , </space/> M </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> n , </space/> u , </space/> a n s , </space/> s z [ N ] , </space/> a [ N ] , </space/> k [ N ] ; 
 v e c t o r < i n t > </space/> v e c [ N ] ; 
 v o i d </space/> e x g c d ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t & </space/> a , </space/> i n t & </space/> b ) 
 { 
 i f </space/> ( ! y ) 
 { 
 a </space/> = </space/> 1 ; 
 b </space/> = </space/> 0 ; 
 r e t u r n ; 
 } 
 e x g c d ( y , </space/> x </space/> % </space/> y , </space/> b , </space/> a ) ; 
 b </space/> - = </space/> x </space/> / </space/> y </space/> * </space/> a ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> k </space/> + </space/> i ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k [ i ] ; </space/> j + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & u ) ; 
 v e c [ i ] . p u s h _ b a c k ( u ) ; 
 + + s z [ u ] ; 
 } 
 } 
 i n t </space/> x </space/> = </space/> 0 , </space/> y </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 e x g c d ( k [ i ] , </space/> M , </space/> x , </space/> y ) ; 
 x </space/> = </space/> ( x </space/> % </space/> M </space/> + </space/> M ) </space/> % </space/> M ; 
 i n t </space/> q </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> v e c [ i ] . s i z e ( ) ; </space/> j + + ) 
 q </space/> = </space/> ( q </space/> + </space/> s z [ v e c [ i ] [ j ] ] ) </space/> % </space/> M ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> 1 L L </space/> * </space/> x </space/> * </space/> q </space/> % </space/> M ) </space/> % </space/> M ; 
 } 
 e x g c d ( n , </space/> M , </space/> x , </space/> y ) ; 
 a n s </space/> = </space/> 1 L L </space/> * </space/> a n s </space/> * </space/> x </space/> % </space/> M </space/> * </space/> x </space/> % </space/> M ; 
 p r i n t f ( "" % d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M X </space/> = </space/> 1 e 6 </space/> + </space/> 1 ; 
 i n t </space/> f r e [ M X ] ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 l o n g </space/> l o n g </space/> b i n p o w ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b , </space/> l o n g </space/> l o n g </space/> m ) 
 { 
 a </space/> % = </space/> m ; 
 l o n g </space/> l o n g </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> i n v ( i n t </space/> n ) 
 { 
 r e t u r n </space/> b i n p o w ( n , </space/> M O D </space/> - </space/> 2 , </space/> M O D ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 i n t </space/> v a l ; 
 c i n </space/> > > </space/> v a l ; 
 a [ i ] . p u s h _ b a c k ( v a l ) ; 
 f r e [ v a l ] + + ; 
 } 
 } 
 i n t </space/> a n s </space/> = </space/> 1 ; 
 a n s </space/> * = </space/> i n v ( n ) ; 
 a n s </space/> % = </space/> M O D ; 
 a n s </space/> * = </space/> i n v ( n ) ; 
 a n s </space/> % = </space/> M O D ; 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> s u m 1 </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> a [ i ] . s i z e ( ) ; </space/> j + + ) 
 { 
 s u m 1 </space/> + = </space/> f r e [ a [ i ] [ j ] ] ; 
 s u m 1 </space/> % = </space/> M O D ; 
 } 
 s u m 1 </space/> * = </space/> i n v ( a [ i ] . s i z e ( ) ) ; 
 s u m 1 </space/> % = </space/> M O D ; 
 s u m </space/> + = </space/> s u m 1 ; 
 s u m </space/> % = </space/> M O D ; 
 } 
 a n s </space/> * = </space/> s u m ; 
 a n s </space/> % = </space/> M O D ; 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n ; 
 } 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 i n t </space/> n ; 
 v e c t o r < i n t > </space/> a [ N ] ; 
 i n t </space/> c n t [ N ] ; 
 i n t </space/> i n v [ N ] ; 
 
 i n t </space/> a d d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 a </space/> + = </space/> b ; 
 i f </space/> ( a </space/> > = </space/> M O D ) 
 a </space/> - = </space/> M O D ; 
 r e t u r n </space/> a ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> a </space/> * </space/> 1 l l </space/> * </space/> b </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> b i n p o w ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> m u l ( r e s , </space/> a ) ; 
 a </space/> = </space/> m u l ( a , </space/> a ) ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 a [ i ] . r e s i z e ( k ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] [ j ] ; 
 c n t [ a [ i ] [ j ] ] + + ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i n v [ i ] </space/> = </space/> b i n p o w ( i , </space/> M O D </space/> - </space/> 2 ) ; 
 } 
 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> x </space/> : </space/> a [ i ] ) 
 { 
 a n s </space/> = </space/> a d d ( a n s , </space/> m u l ( m u l ( i n v [ n ] , </space/> i n v [ a [ i ] . s i z e ( ) ] ) , </space/> m u l ( c n t [ x ] , </space/> i n v [ n ] ) ) ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> q p o w ( i n t </space/> x , </space/> i n t </space/> n ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( n ) 
 { 
 i f </space/> ( n </space/> & </space/> 1 ) 
 r e s </space/> = </space/> 1 l l </space/> * </space/> r e s </space/> * </space/> x </space/> % </space/> m o d ; 
 n </space/> > > = </space/> 1 ; 
 x </space/> = </space/> 1 l l </space/> * </space/> x </space/> * </space/> x </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 i n l i n e </space/> i n t </space/> i n v ( i n t </space/> x ) 
 { 
 r e t u r n </space/> q p o w ( x , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i n t </space/> c n t [ m a x n ] ; 
 v e c t o r < i n t > </space/> h a s [ m a x n ] ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> x ; 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 h a s [ i ] . r e s i z e ( x ) ; 
 f o r </space/> ( a u t o & </space/> z </space/> : </space/> h a s [ i ] ) 
 s c a n f ( "" % d "" , </space/> & z ) , </space/> + + c n t [ z ] ; 
 } 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> t m p </space/> = </space/> 1 l l </space/> * </space/> i n v ( h a s [ i ] . s i z e ( ) ) </space/> * </space/> i n v ( n ) </space/> % </space/> m o d ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> h a s [ i ] . s i z e ( ) ; </space/> + + j ) 
 { 
 i n t </space/> a n s </space/> = </space/> 1 l l </space/> * </space/> c n t [ h a s [ i ] [ j ] ] </space/> * </space/> i n v ( n ) </space/> % </space/> m o d </space/> * </space/> t m p </space/> % </space/> m o d ; 
 r e s </space/> = </space/> ( 1 l l </space/> * </space/> r e s </space/> + </space/> 1 l l </space/> * </space/> a n s ) </space/> % </space/> m o d ; 
 } 
 } 
 / / </space/> r e s </space/> = </space/> 1 l l </space/> * </space/> r e s </space/> * </space/> i n v ( 2 ) </space/> % </space/> m o d ; 
 p r i n t f ( "" % d \ n "" , </space/> r e s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i 6 4 </space/> i n t 6 4 _ t 
 # d e f i n e </space/> i 3 2 </space/> i n t 3 2 _ t 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> s z ( x ) </space/> ( ( i n t ) x . s i z e ( ) ) 
 t e m p l a t e </space/> < t y p e n a m e </space/> T , </space/> t y p e n a m e </space/> U > 
 i n l i n e </space/> v o i d </space/> a m i n ( T & </space/> a , </space/> U </space/> b ) 
 { 
 a </space/> = </space/> ( a </space/> > </space/> b </space/> ? </space/> b </space/> : </space/> a ) ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T , </space/> t y p e n a m e </space/> U > 
 i n l i n e </space/> v o i d </space/> a m a x ( T & </space/> a , </space/> U </space/> b ) 
 { 
 a </space/> = </space/> ( a </space/> > </space/> b </space/> ? </space/> a </space/> : </space/> b ) ; 
 } 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 m a p < i n t , </space/> i n t > </space/> f r e q ; 
 
 l l </space/> e x p o ( l l </space/> n , </space/> l l </space/> p , </space/> l l </space/> M ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( p ) 
 { 
 i f </space/> ( p </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> n ) </space/> % </space/> M ; 
 n </space/> = </space/> ( n </space/> * </space/> n ) </space/> % </space/> M ; 
 p </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < v e c t o r < i n t > > </space/> k ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> L ; 
 c i n </space/> > > </space/> L ; 
 v e c t o r < i n t > </space/> p ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> L ; </space/> + + j ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 + + f r e q [ x ] ; 
 p . p u s h _ b a c k ( x ) ; 
 } 
 k [ i ] </space/> = </space/> p ; 
 } 
 
 i 6 4 </space/> a n s </space/> = </space/> 0 , </space/> c h o o s e X </space/> = </space/> e x p o ( n , </space/> m o d </space/> - </space/> 2 , </space/> m o d ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i 6 4 </space/> c h o o s e K </space/> = </space/> e x p o ( s z ( k [ i ] ) , </space/> m o d </space/> - </space/> 2 , </space/> m o d ) ; 
 f o r </space/> ( i n t </space/> j </space/> : </space/> k [ i ] ) 
 { 
 / * </space/> ( 1 / n </space/> * </space/> 1 / k </space/> * </space/> f r e q [ j ] / n ) </space/> % </space/> m o d </space/> * / 
 i 6 4 </space/> h e r e </space/> = </space/> c h o o s e X ; 
 h e r e </space/> * = </space/> c h o o s e K ; 
 h e r e </space/> % = </space/> m o d ; 
 h e r e </space/> * = </space/> f r e q [ j ] ; 
 h e r e </space/> % = </space/> m o d ; 
 h e r e </space/> * = </space/> c h o o s e X ; 
 h e r e </space/> % = </space/> m o d ; 
 a n s </space/> + = </space/> h e r e ; 
 a n s </space/> % = </space/> m o d ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 i n t </space/> t e s t s </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t e s t s ; 
 w h i l e </space/> ( t e s t s - - ) 
 { 
 s o l v e ( ) ; 
 } 
 # i f d e f </space/> L O C A L _ D E F I N E 
 c e r r </space/> < < </space/> "" T i m e </space/> e l a p s e d : </space/> "" </space/> < < </space/> 1 . 0 </space/> * </space/> c l o c k ( ) </space/> / </space/> C L O C K S _ P E R _ S E C </space/> < < </space/> "" </space/> s . \ n "" ; 
 # e n d i f 
 } 
 / * </space/> s t u f f </space/> y o u </space/> s h o u l d </space/> l o o k </space/> f o r 
 * </space/> i n t </space/> o v e r f l o w , </space/> a r r a y </space/> b o u n d s 
 * </space/> s p e c i a l </space/> c a s e s </space/> ( n = 1 ? ) 
 * </space/> D O N ' T </space/> G E T </space/> S T U C K </space/> O N </space/> O N E </space/> A P P R O A C H 
 * /",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < v e c t o r > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 , </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> c n t [ N ] , </space/> k [ N ] ; 
 v e c t o r < i n t > </space/> a [ N ] ; 
 i n t </space/> n ; 
 i n t </space/> i n v ( i n t </space/> a , </space/> i n t </space/> b </space/> = </space/> M O D </space/> - </space/> 2 ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 f o r </space/> ( ; </space/> b ; </space/> b </space/> > > = </space/> 1 , </space/> a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> M O D ) 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> M O D ; 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> a n s ; 
 s i g n e d </space/> m a i n ( v o i d ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % l l d "" , </space/> k </space/> + </space/> i ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 , </space/> t m p ; </space/> j </space/> < = </space/> k [ i ] ; </space/> j + + ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & t m p ) ; 
 c n t [ t m p ] + + ; 
 a [ i ] . p u s h _ b a c k ( t m p ) ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> j </space/> : </space/> a [ i ] ) 
 s u m </space/> = </space/> ( s u m </space/> + </space/> c n t [ j ] </space/> * </space/> i n v ( n ) </space/> % </space/> M O D ) </space/> % </space/> M O D ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> s u m </space/> * </space/> i n v ( k [ i ] ) </space/> % </space/> M O D ) </space/> % </space/> M O D ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s </space/> * </space/> i n v ( n ) </space/> % </space/> M O D ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n </space/> \ 
 c i n . c l o s e ( ) ; </space/> \ 
 r e t u r n </space/> 0 ; 
 # d e f i n e </space/> I N F </space/> ( ( l l ) ( 4 e 1 8 ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f i </space/> f i r s t </space/> / / </space/> p r i n t f ( "" % l l i \ n "" , c u r ) ; 
 # d e f i n e </space/> s e </space/> s e c o n d </space/> / / </space/> s c a n f ( "" % l l i "" , & n ) ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> c c [ N ] ; 
 l l </space/> p o w w ( l l </space/> n , </space/> l l </space/> p a k ) 
 { 
 l l </space/> r e t </space/> = </space/> 1 ; 
 w h i l e </space/> ( p a k ) 
 { 
 i f </space/> ( p a k </space/> % </space/> 2 ) 
 r e t </space/> = </space/> ( r e t </space/> * </space/> n ) </space/> % </space/> m o d ; 
 n </space/> = </space/> ( n </space/> * </space/> n ) </space/> % </space/> m o d ; 
 p a k </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 f i o 
 / / </space/> i f s t r e a m </space/> c i n ( "" i n . i n n "" ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> v e [ n ] ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> v e ) 
 { 
 l l </space/> a ; 
 c i n </space/> > > </space/> a ; 
 w h i l e </space/> ( a - - ) 
 { 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i . p b ( t ) ; 
 c c [ t ] + + ; 
 } 
 } 
 l l </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> v e ) 
 { 
 l l </space/> c u r </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> j </space/> : </space/> i ) 
 c u r </space/> = </space/> ( c u r </space/> + </space/> c c [ j ] </space/> * </space/> p o w w ( n , </space/> m o d </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 c u r </space/> = </space/> ( c u r </space/> * </space/> p o w w ( i . s i z e ( ) , </space/> m o d </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 r e s </space/> = </space/> ( r e s </space/> + </space/> c u r ) </space/> % </space/> m o d ; 
 } 
 r e s </space/> = </space/> ( r e s </space/> * </space/> p o w w ( n , </space/> m o d </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> r e s ; 
 / / </space/> c i n . c l o s e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 0 5 ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 i n t </space/> a d d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> ( a </space/> + = </space/> b ) </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> ( a </space/> * </space/> 1 L L </space/> * </space/> b ) </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> b i n p o w ( i n t </space/> a , </space/> i n t </space/> p , </space/> i n t </space/> m o d ) 
 { 
 i f </space/> ( p </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 i n t </space/> b </space/> = </space/> b i n p o w ( m u l ( a , </space/> a ) , </space/> p </space/> / </space/> 2 , </space/> m o d ) ; 
 i f </space/> ( p </space/> & </space/> 1 ) 
 b </space/> = </space/> m u l ( b , </space/> a ) ; 
 r e t u r n </space/> b ; 
 } 
 
 s t r u c t </space/> L 
 { 
 i n t </space/> x ; 
 L * </space/> n e x t ; 
 } </space/> * </space/> a a [ N ] ; 
 
 v o i d </space/> l i n k ( i n t </space/> i , </space/> i n t </space/> j ) 
 { 
 L * </space/> l </space/> = </space/> n e w </space/> L ( ) ; 
 l - > x </space/> = </space/> j ; 
 l - > n e x t </space/> = </space/> a a [ i ] ; 
 a a [ i ] </space/> = </space/> l ; 
 } ; 
 
 i n t </space/> i n v [ N ] , </space/> c [ N ] , </space/> d [ N ] ; 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> k , </space/> x ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d "" , </space/> & k ) ; 
 d [ i ] </space/> = </space/> k ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> + + j ) 
 { 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 l i n k ( i , </space/> x ) ; 
 c [ x ] + + ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 i n v [ i ] </space/> = </space/> b i n p o w ( i , </space/> M O D </space/> - </space/> 2 , </space/> M O D ) ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 f o r </space/> ( L * </space/> j </space/> = </space/> a a [ i ] ; </space/> j ; </space/> j </space/> = </space/> j - > n e x t ) 
 a n s </space/> = </space/> a d d ( a n s , </space/> m u l ( m u l ( i n v [ n ] , </space/> i n v [ d [ i ] ] ) , </space/> m u l ( c [ j - > x ] , </space/> i n v [ n ] ) ) ) ; 
 p r i n t f ( "" % d \ n "" , </space/> a n s ) ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; 
 # d e f i n e </space/> f i o </space/> \ 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; </space/> \ 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 / / # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 L L 
 # d e f i n e </space/> M O D </space/> 9 9 8 2 4 4 3 5 3 L L 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 l l </space/> a d d ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 r e t u r n </space/> ( ( x </space/> % </space/> M O D ) </space/> + </space/> ( y </space/> % </space/> M O D ) ) </space/> % </space/> M O D ; 
 } 
 
 l l </space/> m u l ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 r e t u r n </space/> ( ( x </space/> % </space/> M O D ) </space/> * </space/> ( y </space/> % </space/> M O D ) ) </space/> % </space/> M O D ; 
 } 
 
 l l </space/> m o d I n v e r s e ( l l </space/> a , </space/> l l </space/> m ) 
 { 
 l l </space/> m 0 </space/> = </space/> m ; 
 l l </space/> y </space/> = </space/> 0 , </space/> x </space/> = </space/> 1 ; 
 
 i f </space/> ( m </space/> = = </space/> 1 ) 
 r e t u r n </space/> 0 ; 
 
 w h i l e </space/> ( a </space/> > </space/> 1 ) 
 { 
 l l </space/> q </space/> = </space/> a </space/> / </space/> m ; 
 l l </space/> t </space/> = </space/> m ; 
 m </space/> = </space/> a </space/> % </space/> m , </space/> a </space/> = </space/> t ; 
 t </space/> = </space/> y ; 
 y </space/> = </space/> x </space/> - </space/> q </space/> * </space/> y ; 
 x </space/> = </space/> t ; 
 } 
 
 i f </space/> ( x </space/> < </space/> 0 ) 
 x </space/> + = </space/> m 0 ; 
 
 r e t u r n </space/> x ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f i o 
 # e n d i f 
 I O S 
 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> c n t P ( 1 0 0 0 0 0 1 , </space/> 0 ) ; 
 
 v e c t o r < v e c t o r < l l > > </space/> a ( n ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k ; 
 c i n </space/> > > </space/> k ; 
 a [ i ] . r e s i z e ( k ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 l l </space/> x ; 
 c i n </space/> > > </space/> x ; 
 c n t P [ x ] + + ; 
 a [ i ] [ j ] </space/> = </space/> x ; 
 } 
 } 
 
 v e c t o r < l l > </space/> u p ; 
 v e c t o r < l l > </space/> d o w n ; 
 
 l l </space/> r e s </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k </space/> = </space/> a [ i ] . s i z e ( ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 l l </space/> y </space/> = </space/> a [ i ] [ j ] ; 
 l l </space/> u </space/> = </space/> c n t P [ y ] ; 
 l l </space/> d </space/> = </space/> k </space/> * </space/> n </space/> * </space/> n ; 
 l l </space/> g </space/> = </space/> _ _ g c d ( u , </space/> d ) ; 
 d </space/> / = </space/> g ; 
 u </space/> / = </space/> g ; 
 
 r e s </space/> = </space/> a d d ( r e s , </space/> m u l ( u , </space/> m o d I n v e r s e ( d , </space/> M O D ) ) ) ; 
 } 
 } 
 
 c o u t </space/> < < </space/> r e s </space/> < < </space/> e n d l ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O 3 , u n r o l l - l o o p s "" ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # p r a g m a </space/> p a c k ( 0 ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i i </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> M O D 2 </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> _ I N F I N I T Y </space/> 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 
 # d e f i n e </space/> f a s t </space/> i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 l l </space/> n , </space/> x </space/> = </space/> 0 , </space/> y </space/> = </space/> 1 , </space/> k [ 1 0 0 0 0 0 5 ] , </space/> a r r [ 1 0 0 0 0 0 5 ] ; 
 v e c t o r < p i i > </space/> v ; 
 l l </space/> i n v ( l l </space/> i ) 
 { 
 i f </space/> ( i </space/> = = </space/> 1 ) 
 r e t u r n </space/> 1 ; 
 r e t u r n </space/> ( M O D 2 </space/> - </space/> ( M O D 2 </space/> / </space/> i ) ) </space/> * </space/> i n v ( M O D 2 </space/> % </space/> i ) </space/> % </space/> M O D 2 ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 f a s t ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> k [ i ] ; 
 y </space/> = </space/> ( y </space/> + </space/> k [ i ] ) </space/> % </space/> M O D 2 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k [ i ] ; </space/> j + + ) 
 { 
 i n t </space/> a ; 
 c i n </space/> > > </space/> a ; 
 v . e m p l a c e _ b a c k ( m a k e _ p a i r ( i , </space/> a ) ) ; 
 a r r [ a ] + + ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> v ) 
 { 
 x </space/> = </space/> ( a r r [ i . s e c o n d ] </space/> * </space/> y </space/> + </space/> ( n </space/> * </space/> ( n </space/> * </space/> k [ i . f i r s t ] </space/> % </space/> M O D 2 ) </space/> % </space/> M O D 2 ) </space/> * </space/> x ) </space/> % </space/> M O D 2 ; 
 y </space/> = </space/> y </space/> * </space/> ( n </space/> * </space/> ( n </space/> * </space/> k [ i . f i r s t ] </space/> % </space/> M O D 2 ) </space/> % </space/> M O D 2 ) </space/> % </space/> M O D 2 ; 
 } 
 c o u t </space/> < < </space/> x </space/> * </space/> i n v ( y ) </space/> % </space/> M O D 2 </space/> < < </space/> ' \ n ' ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> m o d 1 </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> N </space/> 1 0 0 5 
 # d e f i n e </space/> h e l l </space/> 1 e 6 
 
 
 / * 
 _ _ </space/> _ _ 
 | </space/> \ </space/> | </space/> \ 
 _ | </space/> _ </space/> _ _ </space/> _ _ </space/> _ _ _ _ _ _ _ | </space/> _ _ _ _ </space/> _ _ _ _ _ _ </space/> _ _ _ _ _ _ 
 | </space/> </space/> \ </space/> | </space/> \ </space/> | </space/> \ / </space/> \ </space/> </space/> \ </space/> | </space/> \ </space/> / </space/> \ 
 \ </space/> | </space/> </space/> | </space/> </space/> </space/> \ </space/> \ \ </space/> \ 
 | </space/> </space/> _ _ | </space/> </space/> | </space/> \ </space/> \ | </space/> </space/> | </space/> / </space/> </space/> </space/> \ 
 | </space/> | </space/> \ </space/> _ _ / </space/> _ \ \ </space/> </space/> | </space/> </space/> </space/> 
 \ </space/> \ </space/> </space/> </space/> </space/> | </space/> \ </space/> </space/> 
 \ </space/> \ </space/> \ </space/> \ </space/> \ </space/> \ \ 
 
 
 * / 
 
 
 / / </space/> m i d </space/> = </space/> l o </space/> + </space/> ( h i - l o + 1 ) / 2 </space/> b i n </space/> s e a r c h ; 
 l l </space/> p o w s ( l l </space/> b , </space/> l l </space/> e , </space/> l l </space/> m ) 
 { 
 b </space/> % = </space/> m ; 
 b </space/> % = </space/> m ; 
 i f </space/> ( e </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 i f </space/> ( e </space/> & </space/> 1 ) 
 r e t u r n </space/> b </space/> * </space/> p o w s ( b </space/> * </space/> b </space/> % </space/> m , </space/> e </space/> / </space/> 2 , </space/> m ) </space/> % </space/> m ; 
 r e t u r n </space/> p o w s ( b </space/> * </space/> b </space/> % </space/> m , </space/> e </space/> / </space/> 2 , </space/> m ) ; 
 } 
 
 v o i d </space/> d y n a m i c ( ) 
 { 
 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 u n o r d e r e d _ m a p < l l , </space/> i n t > </space/> h a s h ; 
 v e c t o r < v e c t o r < l l > </space/> > </space/> v ; 
 v . r e s i z e ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 v [ i ] . p u s h _ b a c k ( x ) ; 
 h a s h [ x ] + + ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k </space/> = </space/> v [ i ] . s i z e ( ) ; 
 l l </space/> t e m p </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 t e m p </space/> + = </space/> h a s h [ v [ i ] [ j ] ] ; 
 } 
 l l </space/> t e m p _ a n s </space/> = </space/> p o w s ( k , </space/> m o d 1 </space/> - </space/> 2 , </space/> m o d 1 ) </space/> % </space/> m o d 1 ; 
 t e m p </space/> % = </space/> m o d 1 ; 
 t e m p </space/> = </space/> ( t e m p </space/> * </space/> t e m p _ a n s ) </space/> % </space/> m o d 1 ; 
 a n s </space/> + = </space/> t e m p ; 
 a n s </space/> % = </space/> m o d 1 ; 
 } 
 l l </space/> d e m o </space/> = </space/> p o w s ( n </space/> * </space/> n , </space/> m o d 1 </space/> - </space/> 2 , </space/> m o d 1 ) </space/> % </space/> m o d 1 ; 
 a n s </space/> = </space/> ( a n s </space/> * </space/> d e m o ) </space/> % </space/> m o d 1 ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 
 d y n a m i c ( ) ; 
 } 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / # p r a g m a </space/> G C C </space/> o p t i m i z e ( 2 ) 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < c c t y p e > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < c t i m e > 
 # i n c l u d e </space/> < c s t d l i b > 
 # d e f i n e </space/> X </space/> f i r s t 
 # d e f i n e </space/> Y </space/> s e c o n d 
 # d e f i n e </space/> L </space/> ( u </space/> < < </space/> 1 ) 
 # d e f i n e </space/> R </space/> ( u </space/> < < </space/> 1 </space/> | </space/> 1 ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m k </space/> m a k e _ p a i r 
 # d e f i n e </space/> M i d </space/> ( t r [ u ] . l </space/> + </space/> t r [ u ] . r </space/> > > </space/> 1 ) 
 # d e f i n e </space/> L e n ( u ) </space/> ( t r [ u ] . r </space/> - </space/> t r [ u ] . l </space/> + </space/> 1 ) 
 # d e f i n e </space/> r a n d o m ( a , </space/> b ) </space/> ( ( a ) </space/> + </space/> r a n d ( ) </space/> % </space/> ( ( b ) </space/> - </space/> ( a ) </space/> + </space/> 1 ) ) 
 # d e f i n e </space/> d b </space/> p u t s ( "" - - - "" ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 / / </space/> v o i d </space/> r d _ c r e ( ) </space/> { </space/> f r e o p e n ( "" d : / / d p / / d a t a . t x t "" , "" w "" , s t d o u t ) ; </space/> s r a n d ( t i m e ( N U L L ) ) ; </space/> } 
 / / </space/> v o i d </space/> r d _ a c ( ) </space/> { </space/> f r e o p e n ( "" d : / / d p / / d a t a . t x t "" , "" r "" , s t d i n ) ; </space/> f r e o p e n ( "" d : / / d p / / A C . t x t "" , "" w "" , s t d o u t ) ; </space/> } 
 / / </space/> v o i d </space/> r d _ w a ( ) </space/> { </space/> f r e o p e n ( "" d : / / d p / / d a t a . t x t "" , "" r "" , s t d i n ) ; </space/> f r e o p e n ( "" d : / / d p / / W A . t x t "" , "" w "" , s t d o u t ) ; </space/> } 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> L L ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> U L L ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> P I I ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 1 0 , </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 , </space/> I N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> d o u b l e </space/> e p s </space/> = </space/> 1 e - 6 ; 
 
 i n t </space/> a [ N ] ; 
 v e c t o r < i n t > </space/> v [ N ] ; 
 
 L L </space/> q m i ( L L </space/> a , </space/> L L </space/> b ) 
 { 
 L L </space/> a n s </space/> = </space/> 1 ; 
 a </space/> % = </space/> m o d ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> a n s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> a n s </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 / / 	 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 / / 	 c i n . t i e ( 0 ) ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 m a p < i n t , </space/> i n t > </space/> m p ; 
 i n t </space/> k ; 
 s c a n f ( "" % d "" , </space/> & k ) ; 
 w h i l e </space/> ( k - - ) 
 { 
 i n t </space/> x ; 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 v [ i ] . p b ( x ) ; 
 i f </space/> ( ! m p . c o u n t ( x ) ) 
 a [ x ] + + ; 
 m p [ x ] </space/> = </space/> 1 ; 
 } 
 } 
 L L </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> v [ i ] ) 
 a n s </space/> + = </space/> a [ x ] </space/> * </space/> q m i ( 1 l l </space/> * </space/> n </space/> * </space/> n </space/> * </space/> v [ i ] . s i z e ( ) , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d , </space/> a n s </space/> % = </space/> m o d ; 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 
 
 r e t u r n </space/> 0 ; 
 } 
 / * 
 
 * / 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 6 </space/> + </space/> 1 0 0 ; 
 i n t </space/> d [ N ] ; 
 v e c t o r < i n t > </space/> t o [ N ] ; 
 l l </space/> q p o w ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 a n s </space/> = </space/> a n s </space/> % </space/> m o d </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> % </space/> m o d </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & d [ i ] ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> d [ i ] ; </space/> j + + ) 
 { 
 i n t </space/> x ; 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 t o [ i ] . p u s h _ b a c k ( x </space/> + </space/> n ) ; 
 d [ x </space/> + </space/> n ] + + ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> c </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> v </space/> : </space/> t o [ i ] ) 
 { 
 c </space/> + = </space/> d [ v ] ; 
 } 
 a n s </space/> + = </space/> ( q p o w ( 1 l l </space/> * </space/> n </space/> * </space/> n </space/> % </space/> m o d , </space/> m o d </space/> - </space/> 2 ) </space/> * </space/> q p o w ( d [ i ] , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ) </space/> * </space/> c </space/> % </space/> m o d ; 
 a n s </space/> % = </space/> m o d ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> e x o o o o o o o o r z 
 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < v e c t o r > 
 
 # d e f i n e </space/> N </space/> 1 0 0 0 0 0 5 
 # d e f i n e </space/> M </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s t d : : v e c t o r < i n t > </space/> m a p p [ N ] ; 
 
 i n t </space/> n , </space/> u , </space/> a n s </space/> = </space/> 0 ; 
 i n t </space/> s z [ N ] , </space/> a [ N ] , </space/> k [ N ] ; 
 
 v o i d </space/> e x o o o o o o o o r z ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t & </space/> a , </space/> i n t & </space/> b ) 
 { 
 i f </space/> ( ! y ) 
 { 
 a </space/> = </space/> 1 , </space/> b </space/> = </space/> 0 ; 
 r e t u r n ; 
 } 
 e x o o o o o o o o r z ( y , </space/> x </space/> % </space/> y , </space/> b , </space/> a ) ; 
 b </space/> - = </space/> x </space/> / </space/> y </space/> * </space/> a ; 
 } 
 
 s i g n e d </space/> m a i n ( v o i d ) 
 { 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> k </space/> + </space/> i ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k [ i ] ; </space/> j + + ) 
 s c a n f ( "" % d "" , </space/> & u ) , </space/> m a p p [ i ] . p u s h _ b a c k ( u ) , </space/> s z [ u ] + + ; 
 } 
 i n t </space/> x </space/> = </space/> 0 , </space/> y </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 e x o o o o o o o o r z ( k [ i ] , </space/> M , </space/> x , </space/> y ) ; 
 x </space/> = </space/> ( x </space/> % </space/> M </space/> + </space/> M ) </space/> % </space/> M ; 
 i n t </space/> q </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> m a p p [ i ] . s i z e ( ) ; </space/> j + + ) 
 q </space/> = </space/> ( q </space/> + </space/> s z [ m a p p [ i ] [ j ] ] ) </space/> % </space/> M ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> 1 L L </space/> * </space/> x </space/> * </space/> q </space/> % </space/> M ) </space/> % </space/> M ; 
 } 
 e x o o o o o o o o r z ( n , </space/> M , </space/> x , </space/> y ) ; 
 a n s </space/> = </space/> 1 L L </space/> * </space/> a n s </space/> * </space/> x </space/> % </space/> M </space/> * </space/> x </space/> % </space/> M ; 
 p r i n t f ( "" % d \ n "" , </space/> ( a n s </space/> + </space/> M ) </space/> % </space/> M ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 
 # d e f i n e </space/> e p s </space/> 1 e - 2 0 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> d b ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 t y p e d e f </space/> p a i r < d b , </space/> d b > </space/> p d d ; 
 l l </space/> p [ 1 0 0 0 0 0 6 ] , </space/> c [ 1 0 0 0 0 0 6 ] , </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> q p o w ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> d </space/> = </space/> q p o w ( n , </space/> m o d </space/> - </space/> 2 ) , </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> k ; 
 c i n </space/> > > </space/> k ; 
 l l </space/> h </space/> = </space/> q p o w ( k , </space/> m o d </space/> - </space/> 2 ) ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> k ; </space/> j + + ) 
 { 
 l l </space/> x ; 
 c i n </space/> > > </space/> x ; 
 p [ x ] + + ; 
 c [ x ] </space/> + = </space/> h </space/> * </space/> d </space/> % </space/> m o d ; 
 c [ x ] </space/> % = </space/> m o d ; 
 } 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 1 0 0 0 0 0 0 ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> c [ i ] </space/> % </space/> m o d </space/> * </space/> d </space/> % </space/> m o d </space/> * </space/> p [ i ] </space/> % </space/> m o d ; 
 a n s </space/> % = </space/> m o d ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> M O D </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> a l l ( p ) </space/> p . b e g i n ( ) , </space/> p . e n d ( ) 
 # d e f i n e </space/> m i d ( s , </space/> e ) </space/> ( s </space/> + </space/> ( e </space/> - </space/> s ) </space/> / </space/> 2 ) 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> f a s t </space/> i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 # d e f i n e </space/> f f ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> f b ( i , </space/> b , </space/> a ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> b ; </space/> i </space/> > = </space/> a ; </space/> i - - ) 
 # d e f i n e </space/> m i i </space/> m a p < i n t , </space/> i n t > 
 # d e f i n e </space/> c i ( n ) </space/> c i n </space/> > > </space/> n ; 
 # d e f i n e </space/> t c </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; 
 # d e f i n e </space/> c y </space/> c o u t </space/> < < </space/> "" Y E S \ n "" 
 # d e f i n e </space/> c n </space/> c o u t </space/> < < </space/> "" N O \ n "" 
 # d e f i n e </space/> i n p u t ( a , </space/> n ) </space/> \ 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) </space/> \ 
 c i n </space/> > > </space/> a [ i ] ; 
 # d e f i n e </space/> c o ( n ) </space/> c o u t </space/> < < </space/> n ; 
 # d e f i n e </space/> r e t </space/> r e t u r n </space/> 0 
 
 i n t </space/> p w ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i f </space/> ( y </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 i n t </space/> a n s </space/> = </space/> 1 ; 
 w h i l e </space/> ( y </space/> ! = </space/> 1 ) 
 { 
 i f </space/> ( y </space/> % </space/> 2 ) 
 { 
 a n s </space/> = </space/> ( ( l l ) a n s </space/> * </space/> ( l l ) x ) </space/> % </space/> M O D ; 
 y - - ; 
 } 
 e l s e 
 { 
 x </space/> = </space/> ( ( l l ) x </space/> * </space/> ( l l ) x ) </space/> % </space/> M O D ; 
 y </space/> / = </space/> 2 ; 
 } 
 } 
 a n s </space/> = </space/> ( ( l l ) a n s </space/> * </space/> ( l l ) x ) </space/> % </space/> M O D ; 
 r e t u r n </space/> a n s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> c n t [ 1 0 0 0 0 0 0 </space/> + </space/> 2 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 v i </space/> a [ n ] ; 
 
 i n t </space/> i n v [ 1 0 0 0 0 0 0 </space/> + </space/> 2 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 1 0 0 0 0 0 0 ; </space/> i + + ) 
 { 
 i n v [ i ] </space/> = </space/> p w ( i , </space/> M O D </space/> - </space/> 2 ) </space/> % </space/> M O D ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k ; 
 c i n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 i n t </space/> c ; 
 c i n </space/> > > </space/> c ; 
 a [ i ] . p b ( c ) ; 
 c n t [ c ] + + ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 / / </space/> f o r ( i n t </space/> i </space/> = </space/> 0 </space/> ; </space/> i < </space/> 1 0 </space/> ; </space/> i + + ) c o u t </space/> < < </space/> i n v [ i ] </space/> < < </space/> "" </space/> "" </space/> ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k </space/> = </space/> a [ i ] . s i z e ( ) ; 
 l l </space/> x </space/> = </space/> ( ( ( l l ) i n v [ n ] </space/> * </space/> i n v [ k ] ) </space/> % </space/> M O D </space/> * </space/> i n v [ n ] ) </space/> % </space/> M O D ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> k ; </space/> j + + ) 
 { 
 a n s </space/> + = </space/> ( x </space/> * </space/> c n t [ a [ i ] [ j ] ] ) </space/> % </space/> M O D ; 
 a n s </space/> % = </space/> M O D ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> p </space/> = </space/> m a x ( a , </space/> b ) ; 
 i n t </space/> s </space/> = </space/> m i n ( a , </space/> b ) ; 
 w h i l e </space/> ( x </space/> > </space/> 0 </space/> & & </space/> p </space/> < </space/> n ) 
 { 
 p + + ; 
 x - - ; 
 } 
 w h i l e </space/> ( x </space/> > </space/> 0 </space/> & & </space/> s </space/> > </space/> 1 ) 
 { 
 s - - ; 
 x - - ; 
 } 
 
 c o u t </space/> < < </space/> p </space/> - </space/> s </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 
 v o i d </space/> b a y o ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 w h i l e </space/> ( x </space/> & & </space/> b </space/> ! = </space/> n ) 
 { 
 - - x ; 
 + + b ; 
 } 
 w h i l e </space/> ( x </space/> & & </space/> a </space/> ! = </space/> 1 ) 
 { 
 - - a ; 
 - - x ; 
 } 
 c o u t </space/> < < </space/> b </space/> - </space/> a </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> t c </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 b a y o ( ) ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t d l i b . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> I N F </space/> 0 x 3 f 3 f 3 f 3 f 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 ) 
 # d e f i n e </space/> l o w b i t ( a ) </space/> ( a </space/> & </space/> ( - a ) ) 
 # d e f i n e </space/> m e m ( a , </space/> b ) </space/> m e m s e t ( a , </space/> b , </space/> s i z e o f ( a ) ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> a , </space/> b , </space/> x ; 
 s c a n f ( "" % d </space/> % d </space/> % d </space/> % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> x </space/> > = </space/> n </space/> - </space/> 1 ) 
 { 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> 1 ) ; 
 } 
 e l s e 
 { 
 p r i n t f ( "" % d \ n "" , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i n t </space/> t , </space/> n , </space/> x , </space/> a , </space/> b ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 
 s c a n f ( "" % d </space/> % d </space/> % d </space/> % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 
 i n t </space/> m x V a l </space/> = </space/> m a x ( a , </space/> b ) ; 
 i n t </space/> m n V a l </space/> = </space/> m i n ( a , </space/> b ) ; 
 i n t </space/> d i f f 1 </space/> = </space/> n </space/> - </space/> m x V a l ; 
 i n t </space/> d i f f 2 </space/> = </space/> m n V a l </space/> - </space/> 1 ; 
 i n t </space/> m i n D </space/> = </space/> m i n ( x , </space/> d i f f 1 </space/> + </space/> d i f f 2 ) ; 
 
 p r i n t f ( "" % d \ n "" , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> m i n D ) ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 v o i d </space/> s o l v e ( ) 
 { 
 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 
 i n t </space/> a n s </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 
 i n t </space/> m x </space/> = </space/> n </space/> - </space/> 1 ; 
 c o u t </space/> < < </space/> m i n ( m x , </space/> a n s </space/> + </space/> x ) </space/> < < </space/> e n d l ; 
 } 
 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b , </space/> c , </space/> d ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b </space/> > > </space/> c </space/> > > </space/> d ; 
 i f </space/> ( c </space/> > </space/> d ) 
 s w a p ( c , </space/> d ) ; 
 c o u t </space/> < < </space/> m i n ( d </space/> - </space/> c </space/> + </space/> b , </space/> a </space/> - </space/> 1 ) </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> m a x </space/> = </space/> n </space/> - </space/> 1 ; 
 i n t </space/> a n s ; 
 i f </space/> ( a </space/> > </space/> b ) 
 a n s </space/> = </space/> a </space/> - </space/> b </space/> + </space/> x ; 
 e l s e 
 a n s </space/> = </space/> b </space/> - </space/> a </space/> + </space/> x ; 
 
 i f </space/> ( a n s </space/> > </space/> m a x ) 
 c o u t </space/> < < </space/> m a x </space/> < < </space/> "" \ n "" ; 
 
 e l s e 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t d l i b . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> I N F </space/> 0 x 3 f 3 f 3 f 3 f 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 ) 
 # d e f i n e </space/> l o w b i t ( a ) </space/> ( a </space/> & </space/> ( - a ) ) 
 # d e f i n e </space/> m e m ( a , </space/> b ) </space/> m e m s e t ( a , </space/> b , </space/> s i z e o f ( a ) ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> a , </space/> b , </space/> x ; 
 s c a n f ( "" % d </space/> % d </space/> % d </space/> % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> x </space/> > = </space/> n </space/> - </space/> 1 ) 
 { 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> 1 ) ; 
 } 
 e l s e 
 { 
 p r i n t f ( "" % d \ n "" , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 a n s </space/> = </space/> s t d : : m i n ( n </space/> - </space/> 1 , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < f u n c t i o n a l > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < f s t r e a m > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c l i m i t s > 
 # i n c l u d e </space/> < c a s s e r t > 
 # i n c l u d e </space/> < c o m p l e x > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < b i t s e t > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < c t i m e > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> d e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> L L ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f , </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 , </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> P I I ; 
 i n t </space/> t , </space/> k ; 
 i n t </space/> s t o p [ N ] , </space/> e x [ N ] , </space/> b [ N ] ; 
 i n t </space/> p r i m e s [ N ] , </space/> c n t ; 
 b o o l </space/> s t [ N ] ; 
 i n t </space/> a [ N ] ; 
 m a p < i n t , </space/> i n t > </space/> M a p ; 
 c h a r </space/> s [ N ] ; 
 
 / / 
 i n l i n e </space/> v o i d </space/> w r i t e ( i n t </space/> x ) 
 { 
 i f </space/> ( x </space/> < </space/> 0 ) 
 { 
 p u t c h a r ( ' - ' ) ; 
 x </space/> = </space/> - x ; 
 } 
 i f </space/> ( x </space/> > </space/> 9 ) 
 w r i t e ( x </space/> / </space/> 1 0 ) ; 
 p u t c h a r ( x </space/> % </space/> 1 0 </space/> + </space/> ' 0 ' ) ; 
 } 
 / / 
 i n l i n e </space/> i n t </space/> r e a d ( ) 
 { 
 i n t </space/> d a t e </space/> = </space/> 0 , </space/> w </space/> = </space/> 1 ; 
 c h a r </space/> c </space/> = </space/> 0 ; 
 w h i l e </space/> ( c </space/> < </space/> ' 0 ' </space/> | | </space/> c </space/> > </space/> ' 9 ' ) 
 { 
 i f </space/> ( c </space/> = = </space/> ' - ' ) 
 w </space/> = </space/> - 1 ; 
 c </space/> = </space/> g e t c h a r ( ) ; 
 } 
 w h i l e </space/> ( c </space/> > = </space/> ' 0 ' </space/> & & </space/> c </space/> < = </space/> ' 9 ' ) 
 { 
 d a t e </space/> = </space/> d a t e </space/> * </space/> 1 0 </space/> + </space/> c </space/> - </space/> ' 0 ' ; 
 c </space/> = </space/> g e t c h a r ( ) ; 
 } 
 r e t u r n </space/> d a t e </space/> * </space/> w ; 
 } 
 
 i n t </space/> g c d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> b </space/> ? </space/> g c d ( b , </space/> a </space/> % </space/> b ) </space/> : </space/> a ; 
 } 
 
 i n t </space/> l c m ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> a </space/> * </space/> b </space/> / </space/> g c d ( a , </space/> b ) ; 
 } 
 
 v o i d </space/> g e t _ p r i m e s ( i n t </space/> n ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( ! s t [ i ] ) 
 p r i m e s [ c n t + + ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> p r i m e s [ j ] </space/> < = </space/> n </space/> / </space/> i ; </space/> j + + ) 
 { 
 s t [ p r i m e s [ j ] </space/> * </space/> i ] </space/> = </space/> t r u e ; 
 i f </space/> ( i </space/> % </space/> p r i m e s [ j ] </space/> = = </space/> 0 ) 
 b r e a k ; 
 } 
 } 
 } 
 
 
 / / </space/> 1 . 
 
 / / </space/> 2 . 
 
 / / </space/> 3 . 
 
 / / </space/> 4 . 1 
 
 / / 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i n t </space/> r e s </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 
 i f </space/> ( r e s </space/> + </space/> x </space/> < = </space/> n </space/> - </space/> 1 ) 
 r e s </space/> + = </space/> x ; 
 e l s e 
 r e s </space/> = </space/> n </space/> - </space/> 1 ; 
 
 p r i n t f ( "" % d \ n "" , </space/> r e s ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f a s t _ i o </space/> \ 
 { </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 } 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> b s </space/> b i n a r y _ s e a r c h 
 # d e f i n e </space/> p o p b </space/> p o p _ b a c k 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> c c c </space/> c o u t </space/> < < </space/> 1 </space/> < < </space/> "" </space/> "" ; 
 # d e f i n e </space/> p r i n ( v ) </space/> \ 
 { </space/> \ 
 f o r </space/> ( a u t o </space/> u </space/> : </space/> v ) </space/> \ 
 c o u t </space/> < < </space/> u </space/> < < </space/> "" </space/> "" ; </space/> \ 
 c o u t </space/> < < </space/> e n d l ; </space/> \ 
 } 
 # d e f i n e </space/> f o r n ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( n ) ; </space/> i + + ) 
 # d e f i n e </space/> l e n ( ) </space/> l e n g t h ( ) 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i n t ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v l l ; 
 t y p e d e f </space/> v e c t o r < b o o l > </space/> v b o o l ; 
 t y p e d e f </space/> v e c t o r < d o u b l e > </space/> v d o u b l e ; 
 t y p e d e f </space/> p a i r < d o u b l e , </space/> d o u b l e > </space/> p d d ; 
 t y p e d e f </space/> p a i r < b o o l , </space/> b o o l > </space/> p b b ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> I N T _ M A X ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> M O D _ 2 </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i f s t r e a m </space/> f i n ( "" t e s t . t x t "" ) ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> a n s </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 a n s </space/> = </space/> m i n ( n </space/> - </space/> 1 , </space/> x </space/> + </space/> a n s ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t _ i o ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> d e b u g ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> s z ( a ) </space/> i n t ( ( a ) . s i z e ( ) ) 
 # d e f i n e </space/> F ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> F 1 ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> d F ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > </space/> ( b ) ; </space/> i - - ) 
 # d e f i n e </space/> d F 1 ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> ( b ) ; </space/> i - - ) 
 # d e f i n e </space/> Y E S </space/> c o u t </space/> < < </space/> "" Y E S \ n "" 
 # d e f i n e </space/> N O </space/> c o u t </space/> < < </space/> "" N O \ n "" 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 6 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 l l </space/> n , </space/> m , </space/> k ; 
 
 i n l i n e </space/> v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 i n t </space/> a n s </space/> = </space/> b </space/> - </space/> a ; 
 i f </space/> ( x </space/> < </space/> ( a </space/> - </space/> 1 ) </space/> + </space/> ( n </space/> - </space/> b ) ) 
 { 
 a n s </space/> + = </space/> x ; 
 } 
 e l s e 
 a n s </space/> = </space/> n </space/> - </space/> 1 ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * </space/> - - - - - - - - - - - - - - - - - - - - - - 
 / </space/> A n s h u m a n </space/> S i n g h </space/> / 
 / </space/> l m s _ d e a d s h o t </space/> / 
 / </space/> P r a c t i c e </space/> p r o b l e m s </space/> / 
 / </space/> 1 6 - 0 3 - 2 0 2 1 </space/> / 
 - - - - - - - - - - - - - - - - - - - - - - * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> f a s t i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> t t </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> f i r </space/> f i r s t 
 # d e f i n e </space/> s e c </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v t </space/> v e c t o r < l l > 
 # d e f i n e </space/> v p i </space/> v e c t o r < p a i r < i n t , </space/> i n t > </space/> > 
 # d e f i n e </space/> v p l l </space/> v e c t o r < p a i r < l l , </space/> l l > </space/> > 
 # d e f i n e </space/> v v i </space/> v e c t o r < v e c t o r < i n t > </space/> > 
 # d e f i n e </space/> v v l l </space/> v e c t o r < v e c t o r < l l > </space/> > 
 # d e f i n e </space/> v v p i </space/> v e c t o r < v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> > 
 # d e f i n e </space/> v v p l l </space/> v e c t o r < v e c t o r < p a i r < l l , </space/> l l > </space/> > </space/> > 
 # d e f i n e </space/> m a x n </space/> 1 0 0 0 0 5 
 # d e f i n e </space/> i n f </space/> 1 0 0 0 0 0 0 0 0 0 
 i n t </space/> m a i n ( ) 
 { 
 t t 
 { 
 l l </space/> n , </space/> x , </space/> a , </space/> b , </space/> t e m p </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> m i n ( n </space/> - </space/> 1 , </space/> a b s ( b </space/> - </space/> a ) </space/> + </space/> x ) </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < f s t r e a m > 
 # i n c l u d e </space/> < c a s s e r t > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c t i m e > 
 # i n c l u d e </space/> < c s t d l i b > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c c t y p e > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < b i t s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < f u n c t i o n a l > 
 # i n c l u d e </space/> < c m a t h > 
 
 # d e f i n e </space/> f o 1 ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f r ( a , </space/> b , </space/> c ) </space/> f o r </space/> ( i n t </space/> a </space/> = </space/> b ; </space/> a </space/> < = </space/> c ; </space/> a + + ) 
 # d e f i n e </space/> F o ( i , </space/> k , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> k ; </space/> k </space/> < </space/> n </space/> ? </space/> i </space/> < </space/> n </space/> : </space/> i </space/> > </space/> n ; </space/> k </space/> < </space/> n </space/> ? </space/> i </space/> + = </space/> 1 </space/> : </space/> i </space/> - = </space/> 1 ) 
 # d e f i n e </space/> t c </space/> \ 
 i n t </space/> t ; </space/> \ 
 : : c i n </space/> > > </space/> t ; </space/> \ 
 : : w h i l e </space/> ( t - - ) 
 # d e f i n e </space/> s o r t a l l ( x ) </space/> s o r t ( a l l ( x ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e n d l 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> b s ( a , </space/> x ) </space/> b i n a r y _ s e a r c h ( a . b e g i n ( ) , </space/> a . e n d ( ) , </space/> x ) 
 # d e f i n e </space/> t r ( i t , </space/> a ) </space/> f o r </space/> ( a u t o </space/> i t </space/> = </space/> a . b e g i n ( ) ; </space/> i t </space/> ! = </space/> a . e n d ( ) ; </space/> i t + + ) 
 # d e f i n e </space/> s z ( a ) </space/> ( i n t ) ( a ) . s i z e ( ) 
 # d e f i n e </space/> m a x ( a , </space/> b ) </space/> ( a </space/> > </space/> b </space/> ? </space/> a </space/> : </space/> b ) 
 # d e f i n e </space/> m i n ( a , </space/> b ) </space/> ( a </space/> < </space/> b </space/> ? </space/> a </space/> : </space/> b ) 
 # d e f i n e </space/> m a x 3 ( x , </space/> y , </space/> z ) </space/> m a x ( x , </space/> m a x ( y , </space/> z ) ) 
 # d e f i n e </space/> m i n 3 ( x , </space/> y , </space/> z ) </space/> m i n ( x , </space/> m i n ( y , </space/> z ) ) 
 # d e f i n e </space/> r e v ( a ) </space/> r e v e r s e ( a . b e g i n ( ) , </space/> a . e n d ( ) ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f a s t _ i o </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 : : c i n . t i e ( 0 ) ; </space/> \ 
 : : c o u t . t i e ( 0 ) ; 
 
 c o n s t </space/> l l </space/> i n f l </space/> = </space/> 1 e 1 8 ; 
 c o n s t </space/> i n t </space/> i n f i </space/> = </space/> 2 e 9 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> i n t ( 1 e 9 ) ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> i n t ( 1 e 9 ) </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 0 0 </space/> * </space/> 1 0 0 0 </space/> + </space/> 1 3 ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t _ i o ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> a n s </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 c o u t </space/> < < </space/> m i n ( n </space/> - </space/> 1 , </space/> a n s </space/> + </space/> x ) </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> t , </space/> n , </space/> a , </space/> b , </space/> x , </space/> u , </space/> v ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 u </space/> = </space/> m a x ( 1 , </space/> a </space/> - </space/> x ) ; 
 x </space/> = </space/> x </space/> - </space/> ( a </space/> - </space/> u ) ; 
 v </space/> = </space/> m i n ( n , </space/> b </space/> + </space/> x ) ; 
 c o u t </space/> < < </space/> v </space/> - </space/> u </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i n c l u d e </space/> < s t r i n g > 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i n t </space/> v </space/> = </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ; 
 
 i f </space/> ( v </space/> < </space/> n </space/> - </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> v ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> n </space/> - </space/> 1 ; 
 } 
 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
 
 
 / * </space/> i n t </space/> n , m ; 
 c i n </space/> > > n > > m ; 
 
 s t r i n g </space/> s 1 [ n ] ; 
 s t r i n g </space/> s 2 [ m ] ; 
 f o r ( i n t </space/> i = 0 ; i < n ; i + + ) { 
 c i n </space/> > > </space/> s 1 [ i ] ; 
 } 
 
 f o r ( i n t </space/> i = 0 ; i < m ; i + + ) { 
 c i n </space/> > > </space/> s 2 [ i ] ; 
 } 
 
 i n t </space/> q ; 
 c i n </space/> > > q ; 
 w h i l e ( q - - ) { 
 
 
 c o u t </space/> < < </space/> s 1 [ q % n ] + s 2 [ q % m ] </space/> < < e n d l ; 
 
 * / 
 
 
 / * 
 i n t </space/> n ; 
 c i n > > n ; 
 v e c t o r < i n t > </space/> v ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> d a t a ; 
 c i n > > d a t a ; 
 v . p u s h _ b a c k ( d a t a ) ; 
 } 
 / / f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 / / { 
 / / </space/> c o u t < < v [ i ] < < "" </space/> "" ; 
 / / } 
 f o r </space/> ( a u t o </space/> i t r </space/> = </space/> v . b e g i n ( ) ; </space/> i t r </space/> ! = </space/> v . e n d ( ) ; </space/> i t r + + ) 
 { 
 c o u t < < * i t r < < "" </space/> "" ; 
 } 
 c o u t < < e n d l ; 
 s o r t ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ; 
 s o r t ( v . r b e g i n ( ) , </space/> v . r e n d ( ) ) ; 
 f o r </space/> ( i n t </space/> e l e m e n t </space/> : </space/> v ) 
 { 
 c o u t < < e l e m e n t < < "" </space/> "" ; 
 } 
 * / 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> s s </space/> s t r i n g 
 # d e f i n e </space/> c h </space/> c h a r 
 # d e f i n e </space/> a s </space/> 2 0 0 0 0 5 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t ; 
 c i n > > t ; 
 w h i l e ( t - - ) 
 { 
 
 l l </space/> n , x , a , b ; 
 c i n > > n > > x > > a > > b ; 
 i f ( a > b ) 
 { 
 s w a p ( a , </space/> b ) ; 
 } 
 w h i l e ( ( a ) </space/> & & </space/> ( x ) ) 
 { 
 i f ( ( a - 1 ) ) 
 { 
 a - - ; </space/> x - - ; 
 } 
 e l s e </space/> { 
 b r e a k ; 
 } 
 } 
 w h i l e ( ( b ) </space/> & & </space/> ( x ) ) 
 { 
 i f ( ( b + 1 ) < = n ) 
 { 
 b + + ; </space/> x - - ; 
 } 
 e l s e </space/> { 
 b r e a k ; 
 } 
 } 
 c o u t < < a b s ( a - b ) < < e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t r i n g . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l i ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 / / </space/> c o u t < < "" a "" ; 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> d i s t ; 
 i f </space/> ( f a b s ( a </space/> - </space/> b ) </space/> + </space/> x </space/> < = </space/> n </space/> - </space/> 1 ) 
 { 
 d i s t </space/> = </space/> f a b s ( a </space/> - </space/> b ) </space/> + </space/> x ; 
 c o u t </space/> < < </space/> d i s t </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 e l s e 
 { 
 d i s t </space/> = </space/> n </space/> - </space/> 1 ; 
 c o u t </space/> < < </space/> d i s t </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l i </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < c h a r > </space/> v c ; 
 t y p e d e f </space/> v e c t o r < i n t > : : i t e r a t o r </space/> v i t ; 
 t y p e d e f </space/> s e t < i n t > </space/> s i ; 
 t y p e d e f </space/> s e t < c h a r > </space/> s c ; 
 t y p e d e f </space/> s e t < i n t > : : i t e r a t o r </space/> s i t ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> t e s t c a s e </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 # d e f i n e </space/> g e t f o r ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> s o r t _ a r r a y </space/> s o r t ( v i . b e g i n ( ) , </space/> v i . e n d ( ) ) ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 t e s t c a s e 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a b s ( a </space/> - </space/> b ) </space/> < < </space/> e n d l ; 
 c o n t i n u e ; 
 } 
 e l s e </space/> i f </space/> ( a </space/> = = </space/> 1 </space/> & & </space/> b </space/> = = </space/> n </space/> | | </space/> b </space/> = = </space/> 1 </space/> & & </space/> a </space/> = = </space/> n ) 
 { 
 c o u t </space/> < < </space/> a b s ( a </space/> - </space/> b ) </space/> < < </space/> e n d l ; 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 i f </space/> ( a </space/> < </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 i f </space/> ( x </space/> > = </space/> n </space/> - </space/> a ) 
 { 
 x </space/> = </space/> x </space/> - </space/> ( n </space/> - </space/> a ) ; 
 a </space/> = </space/> n ; 
 } 
 e l s e 
 { 
 a </space/> = </space/> a </space/> + </space/> x ; 
 x </space/> = </space/> 0 ; 
 } 
 i f </space/> ( x </space/> > = </space/> b </space/> - </space/> 1 ) 
 { 
 x </space/> = </space/> x </space/> - </space/> ( b </space/> - </space/> 1 ) ; 
 b </space/> = </space/> 1 ; 
 } 
 e l s e 
 { 
 b </space/> = </space/> b </space/> - </space/> x ; 
 } 
 } 
 c o u t </space/> < < </space/> a b s ( a </space/> - </space/> b ) </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s t d l i b . h > 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> x , </space/> a , </space/> b ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 s c a n f ( "" % d % d % d % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> x </space/> < </space/> n ) 
 p r i n t f ( "" % d \ n "" , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 e l s e 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> 1 ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b , </space/> t ; 
 s c a n f ( "" % d % d % d % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 t </space/> = </space/> b </space/> - </space/> a ; 
 } 
 e l s e 
 { 
 t </space/> = </space/> a </space/> - </space/> b ; 
 } 
 i f </space/> ( t </space/> + </space/> x </space/> > = </space/> n ) 
 { 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> 1 ) ; 
 } 
 e l s e 
 { 
 p r i n t f ( "" % d \ n "" , </space/> t </space/> + </space/> x ) ; 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> m i n ( n </space/> - </space/> 1 , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) </space/> < < </space/> "" \ n "" ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> t , </space/> b , </space/> x , </space/> a ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 s u m </space/> = </space/> n </space/> - </space/> m a x ( a , </space/> b ) </space/> + </space/> m i n ( a , </space/> b ) </space/> - </space/> 1 ; 
 i n t </space/> c h a 1 </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i n t </space/> a n s ; 
 a n s </space/> = </space/> m i n ( n </space/> - </space/> 1 , </space/> c h a 1 </space/> + </space/> x ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> f o r ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) </space/> { c i n </space/> > > </space/> a [ i ] ; } 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> m i n ( a b s ( a </space/> - </space/> b ) </space/> + </space/> x , </space/> n </space/> - </space/> 1 ) </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 / / </space/> s o l v e ( ) ; 
 
 c o u t . f l u s h ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t d l i b > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < c l i m i t s > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a r r a y > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < s t d b o o l . h > 
 # d e f i n e </space/> f a s t _ i o </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> s q r ( x ) </space/> ( ( x ) </space/> * </space/> ( x ) ) 
 # d e f i n e </space/> M A X ( a , </space/> b ) </space/> ( a </space/> > </space/> b </space/> ? </space/> a </space/> : </space/> b ) 
 # d e f i n e </space/> M I N ( a , </space/> b ) </space/> ( a </space/> < </space/> b </space/> ? </space/> a </space/> : </space/> b ) 
 # d e f i n e </space/> s c a n ( x ) </space/> c i n </space/> > > </space/> x 
 # d e f i n e </space/> p r i n t ( x ) </space/> c o u t </space/> < < </space/> x 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> f o r 0 ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o r 1 ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> S I Z E </space/> 1 0 0 0 0 5 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 s c a n f ( "" % d </space/> % d </space/> % d </space/> % d "" , </space/> & n , </space/> & x , </space/> & a , </space/> & b ) ; 
 
 i n t </space/> m x </space/> = </space/> M I N ( n </space/> - </space/> 1 , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) ; 
 
 p r i n t f ( "" % d \ n "" , </space/> m x ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> T ; 
 s c a n f ( "" % d "" , </space/> & T ) ; 
 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> s p e e d </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f s </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> f l s </space/> c o u t . f l u s h ( ) 
 # d e f i n e </space/> r e a d ( n ) </space/> \ 
 l l </space/> n ; </space/> \ 
 c i n </space/> > > </space/> n 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 
 i n t </space/> t e s t C a s e ; 
 i n t </space/> i i n f </space/> = </space/> 1 e 9 </space/> + </space/> 1 ; 
 l l </space/> i n f </space/> = </space/> 1 e 1 6 </space/> + </space/> 1 ; 
 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> d e b u g </space/> c o u t </space/> < < </space/> "" ! ! D e b u g ! ! "" 
 # d e f i n e </space/> p p r i n t ( a r r ) </space/> \ 
 c o u t </space/> < < </space/> "" \ n [ "" ; </space/> \ 
 f o r </space/> ( a u t o </space/> e l </space/> : </space/> a r r ) </space/> \ 
 c o u t </space/> < < </space/> e l </space/> < < </space/> "" , "" ; </space/> \ 
 c o u t </space/> < < </space/> "" ] \ n "" 
 # d e f i n e </space/> a l l ( v e c ) </space/> v e c . b e g i n ( ) , </space/> v e c . e n d ( ) 
 # d e f i n e </space/> m i n n ( v e c ) </space/> * m i n _ e l e m e n t ( a l l ( v e c ) ) 
 # d e f i n e </space/> m a x x ( v e c ) </space/> * m a x _ e l e m e n t ( a l l ( v e c ) ) 
 # d e f i n e </space/> s u m ( v e c ) </space/> a c c u m u l a t e ( a l l ( v e c ) , </space/> 0 ) 
 
 # d e f i n e </space/> f i ( a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> f j ( a , </space/> b ) </space/> f o r </space/> ( i n t </space/> j </space/> = </space/> a ; </space/> j </space/> < </space/> b ; </space/> j + + ) 
 # d e f i n e </space/> f r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 # d e f i n e </space/> v v i </space/> v e c t o r < v e c t o r < i n t > </space/> > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 
 # d e f i n e </space/> i n p p ( a r r , </space/> n ) </space/> \ 
 v i </space/> a r r ( n ) ; </space/> \ 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) </space/> \ 
 c i n </space/> > > </space/> a r r [ i ] ; 
 
 / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 v o i d </space/> s o l v e ( ) 
 { 
 r e a d ( n ) ; 
 r e a d ( s ) ; 
 r e a d ( a ) ; 
 r e a d ( b ) ; 
 
 l l </space/> a n s </space/> = </space/> a b s ( b </space/> - </space/> a ) ; 
 c o u t </space/> < < </space/> m i n ( a n s </space/> + </space/> s , </space/> n </space/> - </space/> 1 ) </space/> < < </space/> e n d l ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> s p e e d ; 
 c i n </space/> > > </space/> t e s t C a s e ; 
 / / </space/> t e s t C a s e </space/> = </space/> 1 ; 
 w h i l e </space/> ( t e s t C a s e - - ) 
 { 
 s o l v e ( ) ; 
 } ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 
 c o u t </space/> < < </space/> m i n ( n </space/> - </space/> 1 , </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> x ) </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> c u r </space/> = </space/> n </space/> - </space/> m a x ( a , </space/> b ) </space/> + </space/> m i n ( a , </space/> b ) </space/> - </space/> 1 ; 
 x </space/> = </space/> ( x </space/> > </space/> c u r ) </space/> ? </space/> c u r </space/> : </space/> x ; 
 c o u t </space/> < < </space/> m a x ( a , </space/> b ) </space/> - </space/> m i n ( a , </space/> b ) </space/> + </space/> x </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b , </space/> m , </space/> m n , </space/> i ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 m </space/> = </space/> m a x ( a , </space/> b ) ; 
 m n </space/> = </space/> m i n ( a , </space/> b ) ; 
 i n t </space/> c </space/> = </space/> 0 ; 
 i f </space/> ( m </space/> + </space/> x </space/> < = </space/> n ) 
 { 
 m </space/> = </space/> m </space/> + </space/> x ; 
 c </space/> = </space/> x ; 
 } 
 e l s e 
 { 
 f o r </space/> ( i </space/> = </space/> 1 ; ; </space/> i + + ) 
 { 
 i f </space/> ( c </space/> < </space/> x </space/> & & </space/> m </space/> < </space/> n ) 
 { 
 c + + ; 
 m + + ; 
 } 
 e l s e 
 b r e a k ; 
 } 
 } 
 i n t </space/> k </space/> = </space/> x </space/> - </space/> c ; 
 i f </space/> ( m n </space/> - </space/> k </space/> > </space/> 0 ) 
 m n </space/> = </space/> m n </space/> - </space/> k ; 
 e l s e 
 { 
 f o r </space/> ( i </space/> = </space/> 1 ; ; </space/> i + + ) 
 { 
 i f </space/> ( m n </space/> > </space/> 1 </space/> & & </space/> k </space/> > </space/> 0 ) 
 { 
 m n - - ; 
 k - - ; 
 } 
 e l s e 
 b r e a k ; 
 } 
 } 
 c o u t </space/> < < </space/> m </space/> - </space/> m n </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 # d e f i n e </space/> F o r ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( i n t ) n ; </space/> + + i ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 / / # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( ( x ) . s i z e ( ) ) 
 # d e f i n e </space/> l l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> a r </space/> a r r a y 
 # d e f i n e </space/> I N F </space/> 1 e 1 8 ; 
 # d e f i n e </space/> a l l ( v ) </space/> ( v ) . b e g i n ( ) , </space/> ( v ) . e n d ( ) 
 # d e f i n e </space/> m e m 1 ( a ) </space/> m e m s e t ( a , </space/> - 1 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> m e m 0 ( a ) </space/> m e m s e t ( a , </space/> 0 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> p p c </space/> _ _ b u i l t i n _ p o p c o u n t 
 # d e f i n e </space/> p p c l l </space/> _ _ b u i l t i n _ p o p c o u n t l l 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> M 2 </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> x , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> m i n ( a b s ( b </space/> - </space/> a ) </space/> + </space/> x , </space/> n </space/> - </space/> 1 ) </space/> < < </space/> e n d l ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 # i f d e f </space/> N C R 
 i n i t ( ) ; 
 # e n d i f 
 i n t </space/> t </space/> = </space/> 1 ; 
 
 c i n </space/> > > </space/> t ; 
 
 i n t </space/> a </space/> = </space/> 1 ; 
 w h i l e </space/> ( t - - ) 
 { 
 / / </space/> c o u t < < "" C a s e </space/> # "" < < a < < "" : </space/> "" ; 
 s o l v e ( ) ; 
 a </space/> + = </space/> 1 ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 
 v e c t o r < i n t > </space/> v ( n ) , </space/> w ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & v [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & w [ i ] ) ; 
 } 
 
 l o n g </space/> l o n g </space/> x </space/> = </space/> 0 , </space/> y </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l o n g </space/> l o n g </space/> n e x t X </space/> = </space/> m a x ( x , </space/> y </space/> + </space/> v [ i ] ) ; 
 l o n g </space/> l o n g </space/> n e x t Y </space/> = </space/> m a x ( y , </space/> w [ i ] </space/> + </space/> x ) ; 
 x </space/> = </space/> n e x t X ; 
 y </space/> = </space/> n e x t Y ; 
 } 
 c o u t </space/> < < </space/> m a x ( x , </space/> y ) </space/> < < </space/> "" \ n "" ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f r ( a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v i i </space/> v e c t o r < i i > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> I N F </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
 # d e f i n e </space/> f a s t _ i o </space/> i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) , </space/> c i n . t i e ( N U L L ) , </space/> c o u t . t i e ( N U L L ) ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 l l </space/> t , </space/> i , </space/> j , </space/> n , </space/> k , </space/> a n s , </space/> t 1 , </space/> t 2 , </space/> t 3 , </space/> t 4 , </space/> x ; 
 m a p < l l , </space/> l l > </space/> m p ; 
 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 f a s t _ i o ; 
 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 m p [ x ] + + ; 
 } 
 l l </space/> s e t s </space/> = </space/> ( n </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 a n s </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> m p ) 
 { 
 t 1 </space/> = </space/> x . s e </space/> / </space/> 2 ; 
 a n s </space/> + = </space/> 2 </space/> * </space/> t 1 ; 
 s e t s </space/> - = </space/> t 1 ; 
 x . s e </space/> % = </space/> 2 ; 
 } 
 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> m p ) 
 { 
 i f </space/> ( s e t s </space/> = = </space/> 0 ) 
 b r e a k ; 
 i f </space/> ( x . s e </space/> = = </space/> 0 ) 
 c o n t i n u e ; 
 a n s </space/> + = </space/> 1 ; 
 s e t s </space/> - = </space/> 1 ; 
 x . s e - - ; 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f a s t </space/> i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 
 i n t </space/> a [ 2 0 0 0 0 1 ] ; 
 i n t </space/> v [ 2 1 ] ; 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 l o n g </space/> l o n g </space/> f o r m a r e ( i n t </space/> x ) 
 { 
 i n t </space/> l </space/> = </space/> 0 ; 
 w h i l e </space/> ( x </space/> > </space/> 0 ) 
 { 
 v [ + + l ] </space/> = </space/> x </space/> % </space/> 1 0 ; 
 v [ + + l ] </space/> = </space/> x </space/> % </space/> 1 0 ; 
 x </space/> / = </space/> 1 0 ; 
 } 
 l o n g </space/> l o n g </space/> y </space/> = </space/> 0 ; 
 i n t </space/> i ; 
 f o r </space/> ( i </space/> = </space/> l ; </space/> i </space/> > = </space/> 1 ; </space/> i - - ) 
 y </space/> = </space/> ( y </space/> * </space/> 1 0 </space/> + </space/> v [ i ] ) </space/> % </space/> M O D ; 
 r e t u r n </space/> y ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> n , </space/> i , </space/> s u m </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s u m </space/> = </space/> ( s u m </space/> + </space/> n </space/> * </space/> f o r m a r e ( a [ i ] ) </space/> % </space/> M O D ) </space/> % </space/> M O D ; 
 c o u t </space/> < < </space/> s u m ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 5 </space/> + </space/> 1 ; 
 l l </space/> p [ 3 2 ] , </space/> a [ m a x n ] , </space/> c n t [ 1 2 ] , </space/> a n s ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 p [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 3 0 ; </space/> + + i ) 
 p [ i ] </space/> = </space/> ( p [ i </space/> - </space/> 1 ] </space/> * </space/> 1 0 ) </space/> % </space/> m o d ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & a [ i ] ) ; 
 c n t [ t o _ s t r i n g ( a [ i ] ) . s i z e ( ) ] + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 s t r i n g </space/> s </space/> = </space/> t o _ s t r i n g ( a [ i ] ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> 1 0 ; </space/> + + j ) 
 { 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> s . s i z e ( ) </space/> - </space/> 1 , </space/> n o w </space/> = </space/> 0 , </space/> f l a g </space/> = </space/> j ; </space/> k </space/> > = </space/> 0 ; </space/> - - k , </space/> + + n o w ) 
 { 
 i f </space/> ( f l a g ) 
 n o w + + , </space/> f l a g - - ; 
 s u m </space/> + = </space/> p [ n o w ] </space/> * </space/> ( s [ k ] </space/> - </space/> ' 0 ' ) ; 
 } 
 / / </space/> c o u t < < s u m < < e n d l ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> s . s i z e ( ) </space/> - </space/> 1 , </space/> n o w </space/> = </space/> 0 , </space/> f l a g </space/> = </space/> j ; </space/> k </space/> > = </space/> 0 ; </space/> - - k , </space/> + + n o w ) 
 { 
 s u m </space/> + = </space/> p [ n o w ] </space/> * </space/> ( s [ k ] </space/> - </space/> ' 0 ' ) ; 
 i f </space/> ( f l a g ) 
 n o w + + , </space/> f l a g - - ; 
 } 
 / / </space/> c o u t < < s u m < < e n d l < < e n d l ; 
 a n s </space/> = </space/> ( a n s </space/> + </space/> ( s u m </space/> * </space/> c n t [ j ] ) </space/> % </space/> m o d ) </space/> % </space/> m o d ; 
 } 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> S I </space/> = </space/> 1 e 5 </space/> + </space/> 7 ; 
 l l </space/> I N F </space/> = </space/> 8 e 1 8 </space/> + </space/> 7 ; 
 i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 l l </space/> n , </space/> a [ S I ] , </space/> b [ S I ] ; 
 l l </space/> d p [ 5 ] [ S I ] ; 
 l l </space/> s o l v e ( i n t </space/> l , </space/> i n t </space/> i n ) 
 { 
 i f </space/> ( i n </space/> = = </space/> n ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( d p [ l ] [ i n ] </space/> ! = </space/> - 1 ) 
 r e t u r n </space/> d p [ l ] [ i n ] ; 
 l l </space/> a n s 1 </space/> = </space/> 0 , </space/> a n s 2 </space/> = </space/> 0 , </space/> a n s 3 </space/> = </space/> 0 ; 
 a n s 1 </space/> = </space/> s o l v e ( 0 , </space/> i n </space/> + </space/> 1 ) ; 
 i f </space/> ( l </space/> ! = </space/> 1 ) 
 a n s 2 </space/> = </space/> s o l v e ( 1 , </space/> i n </space/> + </space/> 1 ) </space/> + </space/> a [ i n ] ; 
 i f </space/> ( l </space/> ! = </space/> 2 ) 
 a n s 3 </space/> = </space/> s o l v e ( 2 , </space/> i n </space/> + </space/> 1 ) </space/> + </space/> b [ i n ] ; 
 r e t u r n </space/> d p [ l ] [ i n ] </space/> = </space/> m a x ( m a x ( a n s 1 , </space/> a n s 2 ) , </space/> a n s 3 ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 m e m s e t ( d p , </space/> - 1 , </space/> s i z e o f </space/> d p ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 c o u t </space/> < < </space/> s o l v e ( 0 , </space/> 0 ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l </space/> v e c t o r < l o n g </space/> l o n g > 
 # d e f i n e </space/> m i i </space/> m a p < i n t , </space/> i n t > 
 # d e f i n e </space/> p q b </space/> p r i o r i t y _ q u e u e < i n t > 
 # d e f i n e </space/> p q s </space/> p r i o r i t y _ q u e u e < i n t , </space/> v i , </space/> g r e a t e r < i n t > </space/> > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> i n f </space/> 1 e 1 8 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> w ( t ) </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 # d e f i n e </space/> f ( i , </space/> x ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> x ; </space/> i + + ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 i n t </space/> h e i g h t [ 4 ] [ 1 0 0 0 0 7 ] ; 
 l l </space/> d p [ 4 ] [ 1 0 0 0 0 7 ] ; 
 
 i n t </space/> n ; 
 l l </space/> e v ( i n t </space/> p c , </space/> i n t </space/> c n ) 
 { 
 i f </space/> ( c n </space/> > </space/> n ) 
 { 
 r e t u r n </space/> 0 L L ; 
 } 
 i f </space/> ( d p [ p c ] [ c n ] ) 
 { 
 r e t u r n </space/> d p [ p c ] [ c n ] ; 
 } 
 l l </space/> o p 1 </space/> = </space/> 0 , </space/> o p 2 </space/> = </space/> 0 , </space/> o p 3 </space/> = </space/> 0 ; 
 i f </space/> ( p c </space/> ! = </space/> 1 ) 
 { 
 o p 1 </space/> = </space/> h e i g h t [ 1 ] [ c n ] </space/> + </space/> e v ( 1 , </space/> c n </space/> + </space/> 1 ) ; 
 } 
 i f </space/> ( p c </space/> ! = </space/> 2 ) 
 { 
 o p 2 </space/> = </space/> h e i g h t [ 2 ] [ c n ] </space/> + </space/> e v ( 2 , </space/> c n </space/> + </space/> 2 ) ; 
 } 
 o p 3 </space/> = </space/> e v ( p c , </space/> c n </space/> + </space/> 1 ) ; 
 d p [ p c ] [ c n ] </space/> = </space/> m a x ( { </space/> o p 1 , </space/> o p 2 , </space/> o p 3 </space/> } ) ; 
 r e t u r n </space/> d p [ p c ] [ c n ] ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> h e i g h t [ 1 ] [ i ] ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> h e i g h t [ 2 ] [ i ] ; 
 c o u t </space/> < < </space/> e v ( 0 , </space/> 1 ) ; 
 } 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> c o d e f o r c e s 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> F o r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 / / # d e f i n e </space/> g e t </space/> g e t c h a r _ u n l o c k e d 
 # d e f i n e </space/> s o r t V ( a ) </space/> s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) ) 
 # d e f i n e </space/> s o r t A ( a , </space/> n ) </space/> s o r t ( a , </space/> a </space/> + </space/> n ) 
 # d e f i n e </space/> m p ( a , </space/> b ) </space/> m a k e _ p a i r ( a , </space/> b ) 
 # d e f i n e </space/> I N F </space/> 0 x 3 f 3 f 3 f 3 f 
 t y p e d e f </space/> p a i r < l o n g </space/> l o n g </space/> i n t , </space/> l o n g </space/> l o n g </space/> i n t > </space/> P a i r ; 
 / * s t a t i c </space/> l o n g </space/> l o n g </space/> i n t </space/> m o d = ( l o n g </space/> l o n g ) ( 1 e 9 ) + 7 ; 
 i n l i n e </space/> l l </space/> f a s t ( ) { 
 l l </space/> n = 0 , s = 1 ; 
 c h a r </space/> p = g e t ( ) ; 
 i f ( p = = ' - ' ) </space/> s = - 1 ; 
 w h i l e ( ( p < ' 0 ' | | p > ' 9 ' ) & & p ! = E O F & & p ! = ' - ' ) </space/> p = g e t ( ) ; 
 i f ( p = = ' - ' ) </space/> s = - 1 , p = g e t ( ) ; 
 w h i l e ( p > = ' 0 ' & & p < = ' 9 ' ) </space/> { </space/> n </space/> = </space/> ( n < < </space/> 3 ) </space/> + </space/> ( n < < </space/> 1 ) </space/> + </space/> ( p </space/> - </space/> ' 0 ' ) ; </space/> p = g e t ( ) ; } 
 r e t u r n </space/> n * s ; 
 } * / 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y , </space/> l l </space/> p ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 x </space/> = </space/> x </space/> % </space/> p ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 r e t u r n </space/> 0 ; 
 w h i l e </space/> ( y </space/> > </space/> 0 ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> x ) </space/> % </space/> p ; 
 y </space/> = </space/> y </space/> > > </space/> 1 ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> p ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 v e c t o r < i n t > </space/> p r i m e ( ( l l ) ( 1 e 7 ) , </space/> 1 ) ; 
 v o i d </space/> s e i v e ( l l </space/> n ) 
 { 
 l l </space/> i , </space/> j ; 
 p r i m e [ 0 ] </space/> = </space/> p r i m e [ 1 ] </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 2 ; </space/> i </space/> * </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( p r i m e [ i ] </space/> = = </space/> 1 ) 
 { 
 f o r </space/> ( j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < = </space/> n ; </space/> j </space/> + = </space/> i ) 
 p r i m e [ j ] </space/> = </space/> 0 ; 
 } 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 l l </space/> t , </space/> n , </space/> i , </space/> j , </space/> q , </space/> d ; 
 s t r i n g </space/> s t r ; 
 c h a r </space/> c h [ ] </space/> = </space/> { </space/> ' a ' , </space/> ' b ' , </space/> ' c ' , </space/> ' d ' , </space/> ' e ' , </space/> ' f ' , </space/> ' g ' , </space/> ' h ' , </space/> ' i ' , </space/> ' j ' , </space/> ' k ' , </space/> ' l ' , </space/> ' m ' , </space/> ' n ' , </space/> ' o ' , </space/> ' p ' , 
 ' q ' , </space/> ' r ' , </space/> ' s ' , </space/> ' t ' , </space/> ' u ' , </space/> ' v ' , </space/> ' w ' , </space/> ' x ' , </space/> ' y ' , </space/> ' z ' </space/> } ; 
 l l </space/> m , </space/> k ; 
 c i n </space/> > > </space/> m </space/> > > </space/> k ; 
 l l </space/> a n s </space/> = </space/> ( - 3 </space/> + </space/> ( s q r t ( 9 </space/> + </space/> 8 </space/> * </space/> ( m </space/> + </space/> k ) ) ) ) </space/> / </space/> 2 ; 
 a n s </space/> = </space/> m </space/> - </space/> a n s ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n , </space/> k ; 
 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 
 l l </space/> a [ n ] ; 
 
 l l </space/> b [ k ] </space/> = </space/> { </space/> 0 </space/> } ; 
 
 l l </space/> c </space/> = </space/> c e i l ( 1 . 0 </space/> * </space/> n </space/> / </space/> 2 ) ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 b [ a [ i ] </space/> - </space/> 1 ] </space/> + = </space/> 1 ; 
 } 
 l l </space/> s u m _ e </space/> = </space/> 0 , </space/> s u m _ o </space/> = </space/> 0 , </space/> t </space/> = </space/> 0 ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> k ; </space/> i + + ) 
 { 
 i f </space/> ( b [ i ] </space/> % </space/> 2 </space/> = = </space/> 1 ) 
 { 
 t </space/> + = </space/> 1 ; 
 } 
 } 
 
 l l </space/> a n s </space/> = </space/> t </space/> / </space/> 2 ; 
 
 c o u t </space/> < < </space/> n </space/> - </space/> a n s ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 U s e r n a m e </space/> : </space/> m o o n d a n c e r 
 N a m e </space/> : </space/> M o o n </space/> D a n c e r 
 * / 
 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] [ 2 ] ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 ; </space/> + + j ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> a [ i ] [ j ] ; 
 } 
 } 
 i n t </space/> a n s </space/> = </space/> m a x ( a [ 0 ] [ 0 ] , </space/> a [ 0 ] [ 1 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> c u r </space/> = </space/> a [ i </space/> - </space/> 1 ] [ 1 ] ; 
 i f </space/> ( i </space/> > = </space/> 2 ) 
 { 
 c u r </space/> = </space/> m a x ( c u r , </space/> a [ i </space/> - </space/> 2 ] [ 0 ] ) ; 
 c u r </space/> = </space/> m a x ( c u r , </space/> a [ i </space/> - </space/> 2 ] [ 1 ] ) ; 
 } 
 a [ i ] [ 0 ] </space/> + = </space/> c u r ; 
 c u r </space/> = </space/> a [ i </space/> - </space/> 1 ] [ 0 ] ; 
 i f </space/> ( i </space/> > = </space/> 2 ) 
 { 
 c u r </space/> = </space/> m a x ( c u r , </space/> a [ i </space/> - </space/> 2 ] [ 0 ] ) ; 
 c u r </space/> = </space/> m a x ( c u r , </space/> a [ i </space/> - </space/> 2 ] [ 1 ] ) ; 
 } 
 a [ i ] [ 1 ] </space/> + = </space/> c u r ; 
 } 
 c o u t </space/> < < </space/> m a x ( a [ n </space/> - </space/> 1 ] [ 0 ] , </space/> a [ n </space/> - </space/> 1 ] [ 1 ] ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < b i t s e t > 
 # i n c l u d e </space/> < c o m p l e x > 
 # i n c l u d e </space/> < c a s s e r t > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < i s t r e a m > 
 # i n c l u d e </space/> < i t e r a t o r > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < m e m o r y > 
 # i n c l u d e </space/> < o s t r e a m > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < t i m e . h > 
 # i n c l u d e </space/> < v e c t o r > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 ; 
 i n t </space/> h [ N ] [ 2 ] , </space/> n ; 
 l o n g </space/> l o n g </space/> m e m o [ N ] [ 2 ] ; 
 l o n g </space/> l o n g </space/> r e c u r s e ( i n t </space/> i d x , </space/> i n t </space/> r o w ) 
 { 
 i f </space/> ( i d x </space/> > = </space/> n ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( m e m o [ i d x ] [ r o w ] </space/> ! = </space/> - 1 ) 
 r e t u r n </space/> m e m o [ i d x ] [ r o w ] ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> r e c u r s e ( i d x </space/> + </space/> 1 , </space/> r o w </space/> ^ </space/> 1 ) </space/> + </space/> h [ i d x ] [ r o w ] ; 
 a n s </space/> = </space/> m a x ( a n s , </space/> r e c u r s e ( i d x </space/> + </space/> 1 , </space/> r o w ) ) ; 
 r e t u r n </space/> m e m o [ i d x ] [ r o w ] </space/> = </space/> a n s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" i n . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t c ; 
 / / </space/> c i n </space/> > > </space/> t c ; 
 t c </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> T C </space/> = </space/> 1 ; </space/> T C </space/> < = </space/> t c ; </space/> T C + + ) 
 { 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> h [ i ] [ 0 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> h [ i ] [ 1 ] ; 
 m e m s e t ( m e m o , </space/> - 1 , </space/> s i z e o f ( m e m o ) ) ; 
 l o n g </space/> l o n g </space/> b e s t </space/> = </space/> m a x ( r e c u r s e ( 0 , </space/> 0 ) , </space/> r e c u r s e ( 0 , </space/> 1 ) ) ; 
 c o u t </space/> < < </space/> b e s t </space/> < < </space/> e n d l ; 
 } 
 } ;",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l o n g </space/> l o n g </space/> a [ 1 0 0 0 0 5 ] , </space/> b [ 1 0 0 0 0 5 ] , </space/> n o [ 1 0 0 0 0 5 ] , </space/> u p [ 1 0 0 0 0 5 ] , </space/> d o w n [ 1 0 0 0 0 5 ] ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 n o [ 0 ] </space/> = </space/> 0 ; 
 u p [ 0 ] </space/> = </space/> a [ 0 ] ; 
 d o w n [ 0 ] </space/> = </space/> b [ 0 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 n o [ i ] </space/> = </space/> m a x ( u p [ i </space/> - </space/> 1 ] , </space/> d o w n [ i </space/> - </space/> 1 ] ) ; 
 u p [ i ] </space/> = </space/> m a x ( d o w n [ i </space/> - </space/> 1 ] , </space/> n o [ i </space/> - </space/> 1 ] ) </space/> + </space/> a [ i ] ; 
 d o w n [ i ] </space/> = </space/> m a x ( u p [ i </space/> - </space/> 1 ] , </space/> n o [ i </space/> - </space/> 1 ] ) </space/> + </space/> b [ i ] ; 
 } 
 i n t </space/> a n s </space/> = </space/> m a x ( u p [ n </space/> - </space/> 1 ] , </space/> m a x ( n o [ n </space/> - </space/> 1 ] , </space/> d o w n [ n </space/> - </space/> 1 ] ) ) ; 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> a [ n </space/> + </space/> 1 ] [ 2 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] [ 0 ] ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] [ 1 ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 a [ i ] [ 0 ] </space/> = </space/> m a x ( a [ i </space/> - </space/> 1 ] [ 0 ] , </space/> a [ i </space/> - </space/> 1 ] [ 1 ] </space/> + </space/> a [ i ] [ 0 ] ) ; 
 a [ i ] [ 1 ] </space/> = </space/> m a x ( a [ i </space/> - </space/> 1 ] [ 1 ] , </space/> a [ i </space/> - </space/> 1 ] [ 0 ] </space/> + </space/> a [ i ] [ 1 ] ) ; 
 } 
 
 c o u t </space/> < < </space/> m a x ( a [ n ] [ 0 ] , </space/> a [ n ] [ 1 ] ) </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> a l l ( A ) </space/> b e g i n ( A ) , </space/> e n d ( A ) 
 # d e f i n e </space/> r a l l ( A ) </space/> r b e g i n ( A ) , </space/> r e n d ( A ) 
 # d e f i n e </space/> s z ( A ) </space/> i n t ( A . s i z e ( ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v l l ; 
 t y p e d e f </space/> v e c t o r < p i i > </space/> v p i i ; 
 t y p e d e f </space/> v e c t o r < p l l > </space/> v p l l ; 
 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 s t r u c t </space/> M i n Q u e u e 
 { 
 / / </space/> a r r _ 1 </space/> < = </space/> a r r _ 2 </space/> < = </space/> . . . </space/> < = </space/> a r r _ t 
 d e q u e < T > </space/> a r r ; 
 M i n Q u e u e ( ) 
 { 
 } 
 
 v o i d </space/> a d d ( T </space/> v a l ) 
 { 
 w h i l e </space/> ( n o t </space/> a r r . e m p t y ( ) </space/> a n d </space/> v a l </space/> < </space/> a r r . b a c k ( ) ) 
 a r r . p o p _ b a c k ( ) ; 
 a r r . p b ( v a l ) ; 
 } 
 
 v o i d </space/> r e m o v e ( T </space/> v a l ) 
 { 
 i f </space/> ( a r r . f r o n t ( ) </space/> = = </space/> v a l ) 
 a r r . p o p _ f r o n t ( ) ; 
 } 
 
 T </space/> g e t _ m i n ( ) </space/> c o n s t 
 { 
 r e t u r n </space/> a r r . f r o n t ( ) ; 
 } 
 } ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n , </space/> m , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m </space/> > > </space/> a </space/> > > </space/> b ; 
 v i </space/> g ( n </space/> * </space/> m ) ; 
 c i n </space/> > > </space/> g [ 0 ] ; 
 l l </space/> x , </space/> y , </space/> z ; 
 c i n </space/> > > </space/> x </space/> > > </space/> y </space/> > > </space/> z ; 
 v e c t o r < v i > </space/> h ( n , </space/> v i ( m ) ) ; 
 h [ 0 ] [ 0 ] </space/> = </space/> g [ 0 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n </space/> * </space/> m ; </space/> i + + ) 
 { 
 g [ i ] </space/> = </space/> ( g [ i </space/> - </space/> 1 ] </space/> * </space/> x </space/> + </space/> y ) </space/> % </space/> z ; 
 h [ i </space/> / </space/> m ] [ i </space/> % </space/> m ] </space/> = </space/> g [ i ] ; 
 } 
 v e c t o r < v i > </space/> m n ( n , </space/> v i ( m , </space/> z ) ) ; 
 f o r </space/> ( i n t </space/> r </space/> = </space/> 0 ; </space/> r </space/> < </space/> n ; </space/> r + + ) 
 { 
 M i n Q u e u e < i n t > </space/> m q ; 
 f o r </space/> ( i n t </space/> c </space/> = </space/> 0 ; </space/> c </space/> < </space/> b ; </space/> c + + ) 
 m q . a d d ( h [ r ] [ c ] ) ; 
 m n [ r ] [ 0 ] </space/> = </space/> m q . g e t _ m i n ( ) ; 
 f o r </space/> ( i n t </space/> c </space/> = </space/> b ; </space/> c </space/> < </space/> m ; </space/> c + + ) 
 { 
 m q . r e m o v e ( h [ r ] [ c </space/> - </space/> b ] ) ; 
 m q . a d d ( h [ r ] [ c ] ) ; 
 m n [ r ] [ c </space/> - </space/> b </space/> + </space/> 1 ] </space/> = </space/> m q . g e t _ m i n ( ) ; 
 } 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> c </space/> = </space/> 0 ; </space/> c </space/> + </space/> b </space/> - </space/> 1 </space/> < </space/> m ; </space/> c + + ) 
 { 
 M i n Q u e u e < i n t > </space/> m q ; 
 f o r </space/> ( i n t </space/> r </space/> = </space/> 0 ; </space/> r </space/> < </space/> a ; </space/> r + + ) 
 m q . a d d ( m n [ r ] [ c ] ) ; 
 a n s </space/> + = </space/> m q . g e t _ m i n ( ) ; 
 f o r </space/> ( i n t </space/> r </space/> = </space/> 1 ; </space/> r </space/> + </space/> a </space/> - </space/> 1 </space/> < </space/> n ; </space/> r + + ) 
 { 
 m q . r e m o v e ( m n [ r </space/> - </space/> 1 ] [ c ] ) ; 
 m q . a d d ( m n [ r </space/> + </space/> a </space/> - </space/> 1 ] [ c ] ) ; 
 a n s </space/> + = </space/> m q . g e t _ m i n ( ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 r e t u r n </space/> ( 0 ) ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> a l l ( a ) </space/> ( a ) . b e g i n ( ) , </space/> ( a ) . e n d ( ) 
 # d e f i n e </space/> m e m 0 ( a ) </space/> m e m s e t ( a , </space/> 0 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> i n t m x </space/> 1 0 0 0 0 0 0 0 0 7 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l i </space/> i , </space/> j , </space/> n , </space/> s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 l l i </space/> h [ 2 ] [ n ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 ; </space/> i + + ) 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 c i n </space/> > > </space/> h [ i ] [ j ] ; 
 l l i </space/> d p [ 2 ] [ n </space/> + </space/> 1 ] ; 
 d p [ 0 ] [ 0 ] </space/> = </space/> d p [ 1 ] [ 0 ] </space/> = </space/> 0 ; 
 d p [ 0 ] [ 1 ] </space/> = </space/> h [ 0 ] [ 0 ] ; 
 d p [ 1 ] [ 1 ] </space/> = </space/> h [ 1 ] [ 0 ] ; 
 f o r </space/> ( i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 d p [ 0 ] [ i ] </space/> = </space/> m a x ( d p [ 1 ] [ i </space/> - </space/> 1 ] , </space/> d p [ 1 ] [ i </space/> - </space/> 2 ] ) </space/> + </space/> h [ 0 ] [ i </space/> - </space/> 1 ] ; 
 d p [ 1 ] [ i ] </space/> = </space/> m a x ( d p [ 0 ] [ i </space/> - </space/> 1 ] , </space/> d p [ 0 ] [ i </space/> - </space/> 2 ] ) </space/> + </space/> h [ 1 ] [ i </space/> - </space/> 1 ] ; 
 } 
 c o u t </space/> < < </space/> m a x ( { </space/> d p [ 0 ] [ n ] , </space/> d p [ 0 ] [ n </space/> - </space/> 1 ] , </space/> d p [ 1 ] [ n ] , </space/> d p [ 1 ] [ n </space/> - </space/> 1 ] </space/> } ) </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 / / </space/> 	 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> n , </space/> k , </space/> e a t , </space/> i , </space/> x </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 x </space/> + = </space/> i ; 
 e a t </space/> = </space/> n </space/> - </space/> i ; 
 i f </space/> ( x </space/> - </space/> e a t </space/> = = </space/> k ) 
 { 
 b r e a k ; 
 } 
 } 
 c o u t </space/> < < </space/> e a t </space/> < < </space/> e n d l ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ n ] </space/> = </space/> { </space/> 0 </space/> } , </space/> b [ n ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 l l </space/> c [ n ] , </space/> d [ n ] ; 
 c [ n </space/> - </space/> 1 ] </space/> = </space/> a [ n </space/> - </space/> 1 ] ; 
 d [ n </space/> - </space/> 1 ] </space/> = </space/> b [ n </space/> - </space/> 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n </space/> - </space/> 2 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 c [ i ] </space/> = </space/> m a x ( ( a [ i ] </space/> + </space/> d [ i </space/> + </space/> 1 ] ) , </space/> c [ i </space/> + </space/> 1 ] ) ; 
 d [ i ] </space/> = </space/> m a x ( b [ i ] </space/> + </space/> c [ i </space/> + </space/> 1 ] , </space/> d [ i </space/> + </space/> 1 ] ) ; 
 } 
 c o u t </space/> < < </space/> m a x ( c [ 0 ] , </space/> d [ 0 ] ) ; 
 r e t u r n </space/> 0 ; 
 } 
 / * # i n c l u d e < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n > > n ; 
 l l </space/> a [ n ] = { 0 } , b [ n ] = { 0 } ; 
 f o r ( i n t </space/> i = 0 ; i < n ; i + + ) 
 c i n > > a [ i ] ; 
 f o r ( i n t </space/> i = 0 ; i < n ; i + + ) 
 c i n > > b [ i ] ; 
 l l </space/> c [ n ] , d [ n ] ; 
 c [ n - 1 ] = a [ n - 1 ] ; 
 d [ n - 1 ] = b [ n - 1 ] ; 
 f o r ( i n t </space/> i = n - 2 ; i > = 0 ; i - - ) 
 { 
 c [ i ] = m a x ( ( a [ i ] + d [ i + 1 ] ) , c [ i + 1 ] ) ; 
 d [ i ] = m a x ( b [ i ] + c [ i + 1 ] , d [ i + 1 ] ) ; 
 } 
 c o u t < < m a x ( c [ 0 ] , d [ 0 ] ) ; 
 r e t u r n </space/> 0 ; 
 } * /",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> c l r ( a ) </space/> m e m s e t ( a , </space/> 0 , </space/> s i z e o f </space/> a ) ; 
 # d e f i n e </space/> r e v ( a ) </space/> r e v e r s e ( a . b e g i n ( ) , </space/> a . e n d ( ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e m </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> f a s t ( ) </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( ) ; </space/> \ 
 c o u t . t i e ( ) ; 
 # d e f i n e </space/> t i m e ( ) </space/> \ 
 c e r r </space/> < < </space/> e n d l </space/> < < </space/> "" t i m e </space/> t a k e n </space/> : </space/> "" </space/> < < </space/> ( f l o a t ) c l o c k ( ) </space/> / </space/> C L O C K S _ P E R _ S E C </space/> < < </space/> "" </space/> s e c s "" </space/> < < </space/> e n d l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ 2 ] [ n </space/> + </space/> 1 ] ; 
 c l r ( a ) ; 
 f o r </space/> ( l l </space/> k </space/> = </space/> 0 ; </space/> k </space/> < </space/> 2 ; </space/> k + + ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ k ] [ i ] ; 
 } 
 } 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 f o r </space/> ( l l </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 ; </space/> j + + ) 
 { 
 a [ j ] [ i ] </space/> = </space/> m a x ( a [ j ] [ i </space/> + </space/> 1 ] , </space/> a [ ! j ] [ i </space/> + </space/> 1 ] </space/> + </space/> a [ j ] [ i ] ) ; 
 } 
 } 
 c o u t </space/> < < </space/> m a x ( a [ 0 ] [ 0 ] , </space/> a [ 1 ] [ 0 ] ) </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ( ) ; 
 i n t </space/> k s e </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> k s e ; 
 w h i l e </space/> ( k s e - - ) 
 { 
 s o l v e ( ) ; 
 / / </space/> t i m e ( ) ; 
 } 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 l l </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 l l </space/> n u m C a n d y 1 </space/> = </space/> 0 , </space/> n u m C a n d y 2 </space/> = </space/> 0 ; 
 n u m C a n d y 1 </space/> + = </space/> 2 </space/> * </space/> n </space/> + </space/> 3 ; 
 n u m C a n d y 2 </space/> + = </space/> 2 </space/> * </space/> n </space/> + </space/> 3 ; 
 d o u b l e </space/> t e m p </space/> = </space/> d o u b l e ( 8 </space/> * </space/> n </space/> + </space/> 8 </space/> * </space/> k </space/> + </space/> 9 ) ; 
 t e m p </space/> = </space/> s q r t ( t e m p ) ; 
 n u m C a n d y 1 </space/> + = </space/> t e m p ; 
 n u m C a n d y 2 </space/> - = </space/> t e m p ; 
 n u m C a n d y 1 </space/> / = </space/> 2 ; 
 n u m C a n d y 2 </space/> / = </space/> 2 ; 
 i f </space/> ( n u m C a n d y 2 </space/> < </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> n u m C a n d y 1 ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> n u m C a n d y 2 ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 4 ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 l l </space/> a [ 2 ] [ N ] , </space/> d p [ 2 ] [ N ] ; 
 i n t </space/> n ; 
 i n t </space/> m a i n ( ) 
 { 
 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 ; </space/> + + i ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> + + j ) 
 { 
 c i n </space/> > > </space/> a [ i ] [ j ] ; 
 } 
 } 
 d p [ 0 ] [ 1 ] </space/> = </space/> a [ 0 ] [ 1 ] ; 
 d p [ 1 ] [ 1 ] </space/> = </space/> a [ 1 ] [ 1 ] ; 
 
 l l </space/> a n s </space/> = </space/> m a x ( d p [ 0 ] [ 1 ] , </space/> d p [ 1 ] [ 1 ] ) ; 
 f o r </space/> ( i n t </space/> i d x </space/> = </space/> 2 ; </space/> i d x </space/> < = </space/> n ; </space/> + + i d x ) 
 { 
 
 d p [ 0 ] [ i d x ] </space/> = </space/> m a x ( d p [ 1 ] [ i d x </space/> - </space/> 1 ] </space/> + </space/> a [ 0 ] [ i d x ] , </space/> d p [ 0 ] [ i d x </space/> - </space/> 1 ] ) ; 
 d p [ 1 ] [ i d x ] </space/> = </space/> m a x ( d p [ 0 ] [ i d x </space/> - </space/> 1 ] </space/> + </space/> a [ 1 ] [ i d x ] , </space/> d p [ 1 ] [ i d x </space/> - </space/> 1 ] ) ; 
 a n s </space/> = </space/> m a x ( a n s , </space/> m a x ( d p [ 0 ] [ i d x ] , </space/> d p [ 1 ] [ i d x ] ) ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 i n t </space/> n ; 
 i n t </space/> a [ N ] , </space/> b [ N ] ; 
 l o n g </space/> l o n g </space/> d p [ N ] [ 2 ] ; 
 l o n g </space/> l o n g </space/> s e f ( i n t </space/> i d x , </space/> b o o l </space/> f ) 
 { 
 r e t u r n </space/> f </space/> ? </space/> a [ i d x ] </space/> : </space/> b [ i d x ] ; 
 } 
 l o n g </space/> l o n g </space/> g o ( i n t </space/> i d x , </space/> b o o l </space/> f ) 
 { 
 i f </space/> ( i d x </space/> > = </space/> n ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( ~ d p [ i d x ] [ f ] ) 
 r e t u r n </space/> d p [ i d x ] [ f ] ; 
 r e t u r n </space/> d p [ i d x ] [ f ] </space/> = </space/> m a x ( g o ( i d x </space/> + </space/> 1 , </space/> ! f ) </space/> + </space/> s e f ( i d x , </space/> f ) , </space/> g o ( i d x </space/> + </space/> 1 , </space/> f ) ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 m e m s e t ( d p , </space/> - 1 , </space/> s i z e o f </space/> d p ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> b [ i ] ; 
 c o u t </space/> < < </space/> m a x ( g o ( 0 , </space/> 0 ) , </space/> g o ( 0 , </space/> 1 ) ) </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l i </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f o r i t ( i t , </space/> a ) </space/> f o r </space/> ( _ _ t y p e o f ( a . b e g i n ( ) ) </space/> i t </space/> = </space/> a . b e g i n ( ) ; </space/> i t </space/> ! = </space/> a . e n d ( ) ; </space/> i t + + ) 
 # d e f i n e </space/> f o r i ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> j </space/> = </space/> i ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p p </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 b o o l </space/> i s V ( c h a r </space/> c h ) 
 { 
 r e t u r n </space/> ( c h </space/> = = </space/> ' a ' </space/> | | </space/> c h </space/> = = </space/> ' e ' </space/> | | </space/> c h </space/> = = </space/> ' i ' </space/> | | </space/> c h </space/> = = </space/> ' o ' </space/> | | </space/> c h </space/> = = </space/> ' u ' ) ; 
 } 
 v o i d </space/> t c ( ) 
 { 
 
 i n t </space/> n , </space/> x , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 l l i </space/> l </space/> = </space/> - 1 , </space/> h i </space/> = </space/> n </space/> + </space/> 1 , </space/> m i d ; 
 l l i </space/> a n s ; 
 w h i l e </space/> ( h i </space/> - </space/> l </space/> > </space/> 1 ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> ( h i </space/> - </space/> l ) </space/> / </space/> 2 ; 
 l o n g </space/> l o n g </space/> v a l </space/> = </space/> ( n </space/> - </space/> m i d ) </space/> * </space/> ( n </space/> - </space/> m i d </space/> + </space/> 1 ) </space/> / </space/> 2 </space/> - </space/> m i d ; 
 i f </space/> ( v a l </space/> > </space/> k ) 
 { 
 l </space/> = </space/> m i d ; 
 } 
 e l s e 
 h i </space/> = </space/> m i d ; 
 } 
 c o u t </space/> < < </space/> ( h i ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 c o u t . t i e ( n u l l p t r ) ; 
 
 / / </space/> l l i </space/> q ; </space/> c i n > > q ; </space/> w h i l e ( q - - ) 
 
 t c ( ) ; 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> n l </space/> "" \ n "" 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 l l </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 l l </space/> i </space/> = </space/> 1 ; 
 w h i l e </space/> ( i </space/> < = </space/> n ) 
 { 
 l l </space/> s </space/> = </space/> ( i </space/> * </space/> ( i </space/> + </space/> 1 ) ) </space/> / </space/> 2 ; 
 i f </space/> ( s </space/> - </space/> n </space/> + </space/> i </space/> = = </space/> k ) 
 { 
 c o u t </space/> < < </space/> n </space/> - </space/> i ; 
 r e t u r n ; 
 } 
 i + + ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 
 l l </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> I O S </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 m a p < i n t , </space/> i n t > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 m [ x ] + + ; 
 } 
 i n t </space/> c n t </space/> = </space/> 0 , </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> k ; </space/> i + + ) 
 { 
 i f </space/> ( m [ i ] </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 a n s </space/> + = </space/> m [ i ] ; 
 e l s e 
 { 
 a n s </space/> + = </space/> m [ i ] </space/> - </space/> 1 ; 
 c n t + + ; 
 } 
 } 
 a n s </space/> + = </space/> ( c n t </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 
 c o n s t </space/> i n t </space/> m a x _ n </space/> = </space/> 1 0 0 0 0 5 ; 
 i n t </space/> h e i g h t 1 [ m a x _ n ] ; 
 i n t </space/> h e i g h t 2 [ m a x _ n ] ; 
 l l </space/> d p [ m a x _ n ] [ 3 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> h e i g h t 1 [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> h e i g h t 2 [ i ] ; 
 } 
 
 d p [ 0 ] [ 0 ] </space/> = </space/> h e i g h t 1 [ 0 ] ; </space/> / / </space/> P i c k </space/> t h e </space/> i - t h </space/> p l a y e r </space/> f r o m </space/> t h e </space/> f i r s t </space/> r o w 
 d p [ 0 ] [ 1 ] </space/> = </space/> h e i g h t 2 [ 0 ] ; </space/> / / </space/> P i c k </space/> t h e </space/> i - t h </space/> p l a y e r </space/> f r o m </space/> t h e </space/> s e c o n d </space/> r o w 
 d p [ 0 ] [ 2 ] </space/> = </space/> 0 ; </space/> / / </space/> S k i p </space/> t h e </space/> i - t h </space/> p i c k </space/> - - </space/> c o m e s </space/> i n </space/> h a n d y </space/> i f </space/> a </space/> t a l l e r </space/> s t u d e n t </space/> i n </space/> o n e </space/> p a r t i c u l a r </space/> l i n e 
 / / </space/> d o e s n ' t </space/> a l i g n </space/> w i t h </space/> t h e </space/> a l t e r n a t i n g </space/> p a t t e r n </space/> o f </space/> t h e </space/> g r e a t e r </space/> s u m </space/> p a t h 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 d p [ i ] [ 0 ] </space/> = </space/> m a x ( d p [ i </space/> - </space/> 1 ] [ 1 ] , </space/> d p [ i </space/> - </space/> 1 ] [ 2 ] ) </space/> + </space/> h e i g h t 1 [ i ] ; 
 d p [ i ] [ 1 ] </space/> = </space/> m a x ( d p [ i </space/> - </space/> 1 ] [ 0 ] , </space/> d p [ i </space/> - </space/> 1 ] [ 2 ] ) </space/> + </space/> h e i g h t 2 [ i ] ; 
 d p [ i ] [ 2 ] </space/> = </space/> m a x ( { </space/> d p [ i </space/> - </space/> 1 ] [ 0 ] , </space/> d p [ i </space/> - </space/> 1 ] [ 1 ] , </space/> d p [ i </space/> - </space/> 1 ] [ 2 ] </space/> } ) ; 
 } 
 c o u t </space/> < < </space/> m a x ( { </space/> d p [ n </space/> - </space/> 1 ] [ 0 ] , </space/> d p [ n </space/> - </space/> 1 ] [ 1 ] , </space/> d p [ n </space/> - </space/> 1 ] [ 2 ] </space/> } ) </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> i n t </space/> n , </space/> k , </space/> t e m p ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 t e m p </space/> = </space/> s q r t ( ( 8 </space/> * </space/> n ) </space/> + </space/> 9 </space/> + </space/> ( 8 </space/> * </space/> k ) ) ; 
 l l </space/> i n t </space/> a 1 , </space/> a 2 ; 
 a 1 </space/> = </space/> ( ( 2 </space/> * </space/> n ) </space/> + </space/> 3 </space/> + </space/> t e m p ) </space/> / </space/> 2 ; 
 a 2 </space/> = </space/> ( ( 2 </space/> * </space/> n ) </space/> + </space/> 3 </space/> - </space/> t e m p ) </space/> / </space/> 2 ; 
 i f </space/> ( a 1 </space/> < = </space/> n ) 
 { 
 c o u t </space/> < < </space/> a 1 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> a 2 </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n . t i e ( 0 ) ; 
 c i n . s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 l o n g </space/> l o n g </space/> n , </space/> q , </space/> a [ 2 ] [ 1 0 0 0 0 2 ] , </space/> s 1 [ 1 0 0 0 0 2 ] , </space/> s 2 [ 1 0 0 0 0 2 ] , </space/> l , </space/> r ; 
 b o o l </space/> c a m b i o </space/> = </space/> f a l s e ; 
 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ 0 ] [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ 1 ] [ i ] ; 
 s 1 [ 0 ] </space/> = </space/> 0 ; 
 s 2 [ 0 ] </space/> = </space/> 0 ; 
 s 1 [ 1 ] </space/> = </space/> a [ 0 ] [ 1 ] ; 
 s 2 [ 1 ] </space/> = </space/> a [ 1 ] [ 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s 1 [ i ] </space/> = </space/> m a x ( s 2 [ i </space/> - </space/> 2 ] , </space/> s 2 [ i </space/> - </space/> 1 ] ) </space/> + </space/> a [ 0 ] [ i ] ; 
 s 2 [ i ] </space/> = </space/> m a x ( s 1 [ i </space/> - </space/> 2 ] , </space/> s 1 [ i </space/> - </space/> 1 ] ) </space/> + </space/> a [ 1 ] [ i ] ; 
 } 
 / * 	 f o r </space/> ( i n t </space/> i = 0 ; i < = n ; i + + ) </space/> c o u t </space/> < < </space/> s 1 [ i ] </space/> < < </space/> "" </space/> "" ; </space/> c o u t </space/> < < </space/> e n d l ; 
 	 f o r </space/> ( i n t </space/> i = 0 ; i < = n ; i + + ) </space/> c o u t </space/> < < </space/> s 2 [ i ] </space/> < < </space/> "" </space/> "" ; </space/> c o u t </space/> < < </space/> e n d l ; 
 * / </space/> c o u t </space/> < < </space/> m a x ( s 1 [ n ] , </space/> s 2 [ n ] ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < u t i l i t y > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 1 0 0 0 0 5 ; 
 
 l l </space/> n , </space/> d p [ M ] [ 3 ] , </space/> a [ M ] , </space/> b [ M ] ; 
 
 i n l i n e </space/> l l </space/> s o l v e ( i n t </space/> i , </space/> i n t </space/> t ) 
 { 
 i f </space/> ( i </space/> = = </space/> n ) 
 r e t u r n </space/> 0 ; 
 l l & </space/> r e t </space/> = </space/> d p [ i ] [ t ] ; 
 i f </space/> ( r e t </space/> ! = </space/> - 1 ) 
 r e t u r n </space/> r e t ; 
 r e t </space/> = </space/> s o l v e ( i </space/> + </space/> 1 , </space/> t ) ; 
 i f </space/> ( t </space/> ! = </space/> 1 ) 
 r e t </space/> = </space/> m a x ( r e t , </space/> s o l v e ( i </space/> + </space/> 1 , </space/> 1 ) </space/> + </space/> a [ i ] ) ; 
 i f </space/> ( t </space/> ! = </space/> 2 ) 
 r e t </space/> = </space/> m a x ( r e t , </space/> s o l v e ( i </space/> + </space/> 1 , </space/> 2 ) </space/> + </space/> b [ i ] ) ; 
 r e t u r n </space/> r e t ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 m e m s e t ( d p , </space/> - 1 , </space/> s i z e o f </space/> d p ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> b [ i ] ; 
 c o u t </space/> < < </space/> s o l v e ( 0 , </space/> 0 ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 0 e 5 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 1 0 e 9 </space/> + </space/> 7 ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> l [ 2 ] [ n ] ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 ; </space/> j + + ) 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> l [ j ] [ i ] ; 
 } 
 l l </space/> d p [ 2 ] [ 3 ] ; 
 / / </space/> d p [ 0 ] [ 0 ] </space/> = </space/> d p [ 0 ] [ 1 ] </space/> = </space/> d p [ 0 ] [ 2 ] </space/> = </space/> 0 ; 
 d p [ 0 ] [ 0 ] </space/> = </space/> l [ 0 ] [ 0 ] ; 
 d p [ 0 ] [ 1 ] </space/> = </space/> l [ 1 ] [ 0 ] ; 
 d p [ 0 ] [ 2 ] </space/> = </space/> 0 ; 
 d p [ 1 ] [ 0 ] </space/> = </space/> l [ 0 ] [ 0 ] ; 
 d p [ 1 ] [ 1 ] </space/> = </space/> l [ 1 ] [ 0 ] ; 
 d p [ 1 ] [ 2 ] </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 d p [ 1 ] [ 0 ] </space/> = </space/> m a x ( d p [ 0 ] [ 1 ] </space/> + </space/> l [ 0 ] [ i ] , </space/> m a x ( d p [ 0 ] [ 2 ] </space/> + </space/> l [ 0 ] [ i ] , </space/> l [ 0 ] [ i ] ) ) ; 
 d p [ 1 ] [ 1 ] </space/> = </space/> m a x ( d p [ 0 ] [ 0 ] </space/> + </space/> l [ 1 ] [ i ] , </space/> m a x ( d p [ 0 ] [ 2 ] </space/> + </space/> l [ 1 ] [ i ] , </space/> l [ 1 ] [ i ] ) ) ; 
 d p [ 1 ] [ 2 ] </space/> = </space/> m a x ( d p [ 0 ] [ 0 ] , </space/> d p [ 0 ] [ 1 ] ) ; 
 d p [ 0 ] [ 0 ] </space/> = </space/> d p [ 1 ] [ 0 ] ; 
 d p [ 0 ] [ 1 ] </space/> = </space/> d p [ 1 ] [ 1 ] ; 
 d p [ 0 ] [ 2 ] </space/> = </space/> d p [ 1 ] [ 2 ] ; 
 } 
 c o u t </space/> < < </space/> m a x ( d p [ 1 ] [ 0 ] , </space/> m a x ( d p [ 1 ] [ 1 ] , </space/> d p [ 1 ] [ 2 ] ) ) </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # d e f i n e </space/> _ C R T _ S E C U R E _ N O _ W A R N I N G S 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> f a s t </space/> i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> l p ( i , </space/> n ) </space/> f o r </space/> ( i n t ( i ) </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( n ) ; </space/> i + + ) 
 # d e f i n e </space/> l p 1 ( i , </space/> n ) </space/> f o r </space/> ( i n t ( i ) </space/> = </space/> 1 ; </space/> i </space/> < = </space/> ( n ) ; </space/> i + + ) 
 # d e f i n e </space/> l o o p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( v ) </space/> ( v ) . b e g i n ( ) , </space/> ( v ) . e n d ( ) 
 # d e f i n e </space/> s i </space/> s e t < i n t > 
 # d e f i n e </space/> v c </space/> v e c t o r < c h a r > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> v s </space/> v e c t o r < s t r i n g > 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> v v i </space/> v e c t o r < v i > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 / / </space/> i n t </space/> d x [ 4 ] </space/> = </space/> { </space/> 0 </space/> , </space/> 0 </space/> , </space/> 1 </space/> , </space/> - 1 </space/> } ; 	 / / </space/> x </space/> , y + 1 </space/> x + 1 , y </space/> x </space/> , </space/> y - 1 </space/> x - 1 </space/> , </space/> y 
 / / </space/> i n t </space/> d y [ 4 ] </space/> = </space/> { </space/> 1 </space/> , </space/> - 1 </space/> , </space/> 0 </space/> , </space/> 0 </space/> } ; 
 
 / / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * </space/> S H A R K 
 / / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * / / 
 i n t </space/> n ; 
 l l </space/> a r r 1 [ 1 0 0 0 0 5 ] , </space/> a r r 2 [ 1 0 0 0 0 5 ] ; 
 l l </space/> m e m [ 1 0 0 0 0 5 ] [ 3 ] ; 
 l l </space/> s o l v e ( i n t </space/> p o s , </space/> b o o l </space/> b ) 
 { 
 / / </space/> b a s e </space/> c a s e 
 i f </space/> ( p o s </space/> = = </space/> n ) 
 r e t u r n </space/> 0 ; 
 l l & </space/> r e t </space/> = </space/> m e m [ p o s ] [ b ] ; 
 i f </space/> ( r e t </space/> ! = </space/> - 1 ) 
 r e t u r n </space/> r e t ; 
 l l </space/> p 1 , </space/> p 2 ; 
 p 1 </space/> = </space/> p 2 </space/> = </space/> 0 ; 
 i f </space/> ( b ) 
 { 
 p 1 </space/> = </space/> s o l v e ( p o s </space/> + </space/> 1 , </space/> 0 ) </space/> + </space/> a r r 1 [ p o s ] ; 
 p 2 </space/> = </space/> s o l v e ( p o s </space/> + </space/> 1 , </space/> 1 ) ; 
 } 
 e l s e 
 { 
 p 1 </space/> = </space/> s o l v e ( p o s </space/> + </space/> 1 , </space/> 1 ) </space/> + </space/> a r r 2 [ p o s ] ; 
 p 2 </space/> = </space/> s o l v e ( p o s </space/> + </space/> 1 , </space/> 0 ) ; 
 } 
 r e t u r n </space/> r e t </space/> = </space/> m a x ( p 1 , </space/> p 2 ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ; 
 m e m s e t ( m e m , </space/> - 1 , </space/> s i z e o f </space/> m e m ) ; 
 c i n </space/> > > </space/> n ; 
 l p ( i , </space/> n ) </space/> c i n </space/> > > </space/> a r r 1 [ i ] ; 
 l p ( i , </space/> n ) </space/> c i n </space/> > > </space/> a r r 2 [ i ] ; 
 c o u t </space/> < < </space/> m a x ( s o l v e ( 0 , </space/> 0 ) , </space/> s o l v e ( 0 , </space/> 1 ) ) ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ n </space/> + </space/> 1 ] ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> t e n </space/> = </space/> 1 ; 
 w h i l e </space/> ( a [ i ] </space/> > </space/> 0 ) 
 { 
 l l </space/> d i g i t </space/> = </space/> a [ i ] </space/> % </space/> 1 0 ; 
 a n s </space/> = </space/> ( ( ( ( n </space/> * </space/> d i g i t ) </space/> % </space/> m o d ) </space/> * </space/> t e n ) </space/> % </space/> m o d </space/> + </space/> a n s ) </space/> % </space/> m o d ; 
 t e n </space/> = </space/> ( t e n </space/> * </space/> 1 0 ) </space/> % </space/> m o d ; 
 a n s </space/> = </space/> ( ( ( ( n </space/> * </space/> d i g i t ) </space/> % </space/> m o d ) </space/> * </space/> t e n ) </space/> % </space/> m o d </space/> + </space/> a n s ) </space/> % </space/> m o d ; 
 t e n </space/> = </space/> ( t e n </space/> * </space/> 1 0 ) </space/> % </space/> m o d ; 
 a [ i ] </space/> / = </space/> 1 0 ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
",0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m t </space/> m a k e _ t u p l e 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> p q b </space/> p r i o r i t y _ q u e u e < i n t > 
 # d e f i n e </space/> p q s </space/> p r i o r i t y _ q u e u e < i n t , </space/> v i , </space/> g r e a t e r < i n t > </space/> > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> i n f </space/> 1 e 1 8 
 # d e f i n e </space/> a l l ( v ) </space/> ( v ) . b e g i n ( ) , </space/> ( v ) . e n d ( ) 
 # d e f i n e </space/> p s ( x , </space/> y ) </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( y ) </space/> < < </space/> x 
 # d e f i n e </space/> s e t b i t s ( x ) </space/> _ _ b u i l t i n _ p o p c o u n t l l ( x ) 
 # d e f i n e </space/> m k ( a r r , </space/> n , </space/> t y p e ) </space/> t y p e * </space/> a r r </space/> = </space/> n e w </space/> t y p e [ n ] ; 
 # d e f i n e </space/> F I O </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 F I O ; 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v i </space/> a ( n ) ; 
 v i </space/> b ( n ) ; 
 m u l t i s e t < i n t > </space/> m s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m s . i n s e r t ( b [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> w a n t </space/> = </space/> n </space/> - </space/> a [ i ] ; 
 a u t o </space/> i t </space/> = </space/> m s . l o w e r _ b o u n d ( w a n t ) ; 
 i f </space/> ( i t </space/> = = </space/> m s . e n d ( ) ) 
 { 
 i t </space/> = </space/> m s . b e g i n ( ) ; 
 } 
 i n t </space/> x </space/> = </space/> * i t ; 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> x ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 m s . e r a s e ( i t ) ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c s t d l i b > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < l i m i t s > 
 # i n c l u d e </space/> < c c t y p e > 
 # i n c l u d e </space/> < u n o r d e r e d _ m a p > 
 # i n c l u d e </space/> < c o m p l e x > 
 # i n c l u d e </space/> < r a n d o m > 
 # p r a g m a </space/> w a r n i n g ( d i s a b l e </space/> : </space/> 4 9 9 6 ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> d e b u g ( i ) </space/> c e r r </space/> < < </space/> "" < d e b u g > </space/> "" </space/> < < </space/> # i </space/> < < </space/> "" </space/> "" </space/> < < </space/> i </space/> < < </space/> "" </space/> < \ \ d e b u g > "" </space/> < < </space/> e n d l 
 # d e f i n e </space/> m f o r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < = </space/> ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> m r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> > = </space/> ( b ) ; </space/> i - - ) 
 # d e f i n e </space/> l l l </space/> _ _ i n t 1 2 8 
 # d e f i n e </space/> R e </space/> r e g i s t e r 
 # d e f i n e </space/> m e m ( a , </space/> b ) </space/> m e m s e t ( a , </space/> ( b ) , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> D e s i g n </space/> i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> t o a n g ( x ) </space/> ( ( x ) * 1 8 0 . 0 </space/> / </space/> p i ) </space/> / / 
 # d e f i n e </space/> t o r a d ( x ) </space/> ( ( x ) * p i </space/> / </space/> 1 8 0 . 0 ) </space/> / / 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> i n t p a i r ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> l l p a i r ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> d o u b l e </space/> d l ; 
 c o n s t </space/> d l </space/> p i </space/> = </space/> a c o s ( - 1 . 0 ) ; 
 c o n s t </space/> d l </space/> e p s </space/> = </space/> 1 e - 5 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> l l </space/> I N F L L </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f 3 f 3 f 3 f ; 
 # i n c l u d e </space/> < a s s e r t . h > 
 
 i n t </space/> a [ 2 0 0 0 1 0 ] ; 
 m a p < i n t , </space/> i n t > </space/> c n t ; 
 
 i n t </space/> m a i n ( ) 
 { 
 D e s i g n ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 m f o r ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 m f o r ( i , </space/> 1 , </space/> n ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 c n t [ t ] + + ; 
 } 
 m f o r ( i , </space/> 1 , </space/> n ) 
 { 
 a u t o </space/> i t </space/> = </space/> c n t . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> c n t . e n d ( ) ) 
 i t </space/> = </space/> c n t . b e g i n ( ) ; 
 i n t </space/> x </space/> = </space/> i t - > f i r s t ; 
 i t - > s e c o n d - - ; 
 i f </space/> ( ! i t - > s e c o n d ) 
 c n t . e r a s e ( i t ) ; 
 c o u t </space/> < < </space/> ( x </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> l l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> s z ( x ) </space/> ( x ) . s i z e ( ) 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> s q r ( x ) </space/> ( ( x ) </space/> * </space/> ( x ) ) 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> g c d ( a , </space/> b ) </space/> _ _ g c d ( a , </space/> b ) 
 # d e f i n e </space/> l c m ( a , </space/> b ) </space/> ( a </space/> * </space/> b ) </space/> / </space/> _ _ g c d ( a , </space/> b ) 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; 
 
 c o n s t </space/> l l i </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> l l i </space/> I N F </space/> = </space/> 1 e 1 5 </space/> + </space/> 9 ; 
 c o n s t </space/> l l i </space/> m o d </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l i </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l i </space/> i , </space/> i d x ; 
 v e c t o r < l l i > </space/> a ( n ) , </space/> b ( n ) , </space/> c ( n ) ; 
 m u l t i s e t < l l i > </space/> s ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] , </space/> s . i n s e r t ( b [ i ] ) ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 e l s e </space/> i f </space/> ( ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> > </space/> ( * s . b e g i n ( ) </space/> + </space/> a [ i ] ) </space/> % </space/> n ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 / / </space/> c o u t < < * i t < < "" , "" ; 
 c [ i ] </space/> = </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> n ; 
 s . e r a s e ( i t ) ; 
 c o u t </space/> < < </space/> c [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ; 
 l l i </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 s o l v e ( ) ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m k </space/> m a k e _ p a i r 
 / / </space/> # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 7 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p p b </space/> p o p _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> p p f </space/> p o p _ f r o n t 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> u n i q ( v ) </space/> ( v ) . e r a s e ( u n i q u e ( a l l ( v ) ) , </space/> ( v ) . e n d ( ) ) 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( ( x ) . s i z e ( ) ) 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> m e m 1 ( a ) </space/> m e m s e t ( a , </space/> - 1 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> m e m 0 ( a ) </space/> m e m s e t ( a , </space/> 0 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> M A X N </space/> 1 0 0 0 0 0 0 1 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l i ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> p a i r < l l i , </space/> l l i > </space/> i i ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 
 # e n d i f 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 
 
 w h i l e </space/> ( t - - ) 
 { 
 l l i </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < l l i > </space/> a ( n ) , </space/> b ( n ) ; 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 
 m u l t i s e t < l l i > </space/> s t ; 
 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 s t . i n s e r t ( b [ i ] ) ; 
 } 
 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 i f </space/> ( s t . f i n d ( n </space/> - </space/> a [ i ] ) </space/> ! = </space/> s t . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> "" </space/> "" ; 
 s t . e r a s e ( s t . f i n d ( n </space/> - </space/> a [ i ] ) ) ; 
 } 
 e l s e 
 { 
 
 a u t o </space/> i t </space/> = </space/> s t . u p p e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> s t . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * s t . b e g i n ( ) ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s t . e r a s e ( s t . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * i t ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s t . e r a s e ( i t ) ; 
 } 
 } 
 } 
 
 
 / / </space/> c o u t < < a n s ; 
 
 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < f s t r e a m > 
 # i n c l u d e </space/> < i s t r e a m > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s t d l i b . h > 
 # i n c l u d e </space/> < s t d b o o l . h > 
 # i n c l u d e </space/> < u n o r d e r e d _ m a p > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < s t a c k > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m p ( x , </space/> y ) </space/> m a k e _ p a i r ( x , </space/> y ) 
 # d e f i n e </space/> r e a d ( x ) </space/> c i n </space/> > > </space/> x ; 
 # d e f i n e </space/> r e a d 2 ( x , </space/> y ) </space/> c i n </space/> > > </space/> x </space/> > > </space/> y ; 
 # d e f i n e </space/> p b ( x ) </space/> p u s h _ b a c k ( x ) 
 # d e f i n e </space/> l o o p ( s t a r t , </space/> e n d ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> s t a r t ; </space/> i </space/> < </space/> e n d ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> y e s </space/> "" Y E S "" 
 # d e f i n e </space/> n o </space/> "" N O "" 
 # d e f i n e </space/> i p a i r </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> a l l o f ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 
 # d e f i n e </space/> y e s </space/> "" Y E S "" 
 # d e f i n e </space/> n o </space/> "" N O "" 
 # d e f i n e </space/> a l i c e </space/> "" A l i c e "" 
 # d e f i n e </space/> b o b </space/> "" B o b "" 
 # d e f i n e </space/> a s h i s h </space/> "" A s h i s h "" 
 # d e f i n e </space/> u t k a r s h </space/> "" U t k a r s h "" 
 # d e f i n e </space/> t i e </space/> "" T i e "" 
 # d e f i n e </space/> s k i p </space/> c o n t i n u e ; 
 # d e f i n e </space/> i n f </space/> I N T _ M A X 
 # d e f i n e </space/> n i n f </space/> I N T _ M I N 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> n ; 
 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 2 e 5 </space/> + </space/> 1 ; 
 
 i n t </space/> a [ m a x n ] , </space/> b [ m a x n ] , </space/> c [ m a x n ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 r e a d ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 r e a d ( a [ i ] ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 r e a d ( b [ i ] ) ; 
 m u l t i s e t < i n t > </space/> m s t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 m s t . i n s e r t ( b [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 
 a u t o </space/> i t </space/> = </space/> m s t . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> m s t . e n d ( ) ) 
 { 
 / / </space/> c [ i ] </space/> = </space/> * ( m s t . b e g i n ( ) ) ; 
 c [ i ] </space/> = </space/> ( a [ i ] </space/> + </space/> * ( m s t . b e g i n ( ) ) ) </space/> % </space/> n ; 
 m s t . e r a s e ( m s t . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 i n t </space/> b e g i n v a l </space/> = </space/> * ( m s t . b e g i n ( ) ) ; 
 i n t </space/> e n d v a l </space/> = </space/> * ( i t ) ; 
 i f </space/> ( ( b e g i n v a l </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < </space/> ( e n d v a l </space/> + </space/> a [ i ] ) </space/> % </space/> n ) 
 { 
 c [ i ] </space/> = </space/> ( b e g i n v a l </space/> + </space/> a [ i ] ) </space/> % </space/> n ; 
 m s t . e r a s e ( m s t . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 c [ i ] </space/> = </space/> ( e n d v a l </space/> + </space/> a [ i ] ) </space/> % </space/> n ; 
 m s t . e r a s e ( i t ) ; 
 } 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> c [ i ] </space/> < < </space/> "" </space/> "" ; 
 
 c o u t </space/> < < </space/> e n d l ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o m a n i p > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> d b </space/> d o u b l e 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> m t </space/> m a k e _ t u p l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p p b </space/> p o p _ b a c k 
 # d e f i n e </space/> m p l l </space/> m a p < l l , </space/> l l > 
 # d e f i n e </space/> m c l l </space/> m a p < c h a r , </space/> l l > 
 # d e f i n e </space/> m s l l </space/> m a p < s t r i n g , </space/> l l > 
 # d e f i n e </space/> m p l l _ p </space/> m a p < l l , </space/> p a i r < l l , </space/> l l > </space/> > 
 # d e f i n e </space/> m p _ p l l </space/> m a p < p a i r < l l , </space/> l l > , </space/> l l > 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> v p l l </space/> v e c t o r < p a i r < l l , </space/> l l > </space/> > 
 # d e f i n e </space/> v t l l </space/> v e c t o r < t u p l e < l l , </space/> l l , </space/> l l > </space/> > 
 # d e f i n e </space/> v s </space/> v e c t o r < s t r i n g > 
 # d e f i n e </space/> v c </space/> v e c t o r < c h a r > 
 # d e f i n e </space/> s l l </space/> s e t < l l > 
 # d e f i n e </space/> s p l l </space/> s e t < p a i r < l l , </space/> l l > </space/> > 
 # d e f i n e </space/> n o p e </space/> s t r i n g : : n p o s 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 v o i d </space/> f a s t ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 } 
 b o o l </space/> p r i m e c h e c k ( l l </space/> n ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> s q r t ( n ) ; </space/> i + + ) 
 { 
 i f </space/> ( n </space/> % </space/> i </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> 0 ; 
 } 
 } 
 r e t u r n </space/> 1 ; 
 } 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y , </space/> l l </space/> m o d ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; </space/> / / </space/> I n i t i a l i z e </space/> r e s u l t 
 
 w h i l e </space/> ( y </space/> > </space/> 0 ) 
 { 
 / / </space/> I f </space/> y </space/> i s </space/> o d d , </space/> m u l t i p l y </space/> x </space/> w i t h </space/> r e s u l t 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> x ) </space/> % </space/> ( m o d ) ; 
 
 / / </space/> n </space/> m u s t </space/> b e </space/> e v e n </space/> n o w 
 y </space/> = </space/> y </space/> > > </space/> 1 ; </space/> / / </space/> y </space/> = </space/> y / 2 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> m o d ; </space/> / / </space/> C h a n g e </space/> x </space/> t o </space/> x ^ 2 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ( ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v l l </space/> a , </space/> b ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> x ; 
 c i n </space/> > > </space/> x ; 
 a . p b ( x ) ; 
 } 
 m u l t i s e t < l l > </space/> s ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> x ; 
 c i n </space/> > > </space/> x ; 
 b . p b ( x ) ; 
 s . i n s e r t ( x ) ; 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * s . b e g i n ( ) ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 s . e r a s e ( s . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * i t ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 s . e r a s e ( i t ) ; 
 } 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < m a p > 
 
 # d e f i n e </space/> f o r n ( i , </space/> e ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> f o r s n ( i , </space/> s , </space/> e ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> s ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> r f o r n ( i , </space/> s ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> s ; </space/> ~ i ; </space/> i - - ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 i n t </space/> a [ n ] ; 
 m a p < i n t , </space/> i n t > </space/> b ; 
 f o r n ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a [ i ] </space/> % = </space/> n ; 
 } 
 f o r n ( i , </space/> n ) 
 { 
 i n t </space/> t m p ; 
 c i n </space/> > > </space/> t m p ; 
 b [ t m p </space/> % </space/> n ] + + ; 
 } 
 
 f o r n ( i , </space/> n ) 
 { 
 i n t </space/> a n s ; 
 i f </space/> ( b . c o u n t ( ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ) ) 
 a n s </space/> = </space/> ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ; 
 e l s e </space/> i f </space/> ( b . u p p e r _ b o u n d ( ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ) </space/> ! = </space/> b . e n d ( ) ) 
 a n s </space/> = </space/> ( * b . u p p e r _ b o u n d ( ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ) ) . f f ; 
 e l s e 
 a n s </space/> = </space/> ( * b . l o w e r _ b o u n d ( 0 ) ) . f f ; 
 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> a n s ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 b [ a n s ] - - ; 
 i f </space/> ( ! b [ a n s ] ) 
 b . e r a s e ( a n s ) ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f d e f </space/> k 4 d r o i d 3 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 / / </space/> i n t </space/> t ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 / / </space/> w h i l e ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 / / # d e f i n e </space/> i n t </space/> i n t 6 4 _ t 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> z ( n ) , </space/> a n s ( n ) ; 
 m u l t i s e t < i n t > </space/> m ; 
 f o r </space/> ( i n t & </space/> i t </space/> : </space/> z ) 
 { 
 c i n </space/> > > </space/> i t ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> x ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 m . i n s e r t ( x ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> k </space/> = </space/> * m . b e g i n ( ) ; 
 a u t o </space/> i t </space/> = </space/> m . l o w e r _ b o u n d ( n </space/> - </space/> z [ i ] ) ; 
 i f </space/> ( i t </space/> ! = </space/> m . e n d ( ) ) 
 { 
 i f </space/> ( ( z [ i ] </space/> + </space/> k ) </space/> % </space/> n </space/> < </space/> ( z [ i ] </space/> + </space/> * i t ) </space/> % </space/> n ) 
 { 
 a n s [ i ] </space/> = </space/> ( z [ i ] </space/> + </space/> k ) </space/> % </space/> n ; 
 m . e r a s e ( m . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 a n s [ i ] </space/> = </space/> ( z [ i ] </space/> + </space/> * i t ) </space/> % </space/> n ; 
 m . e r a s e ( i t ) ; 
 } 
 } 
 e l s e 
 { 
 a n s [ i ] </space/> = </space/> ( z [ i ] </space/> + </space/> k ) </space/> % </space/> n ; 
 m . e r a s e ( m . b e g i n ( ) ) ; 
 } 
 } 
 f o r </space/> ( i n t & </space/> i t </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> t e s t ( x ) </space/> c o u t </space/> < < </space/> "" L i n e ( "" </space/> < < </space/> _ _ L I N E _ _ </space/> < < </space/> "" ) </space/> "" </space/> # x </space/> < < </space/> ' </space/> ' </space/> < < </space/> x </space/> < < </space/> e n d l 
 # d e f i n e </space/> p r i n t v ( x ) </space/> \ 
 { </space/> \ 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> x ) </space/> \ 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' ; </space/> \ 
 c o u t </space/> < < </space/> e n d l ; </space/> \ 
 \ 
 } 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l i , </space/> l l i > 
 # d e f i n e </space/> X </space/> f i r s t 
 # d e f i n e </space/> Y </space/> s e c o n d 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> r a l l ( x ) </space/> x . r b e g i n ( ) , </space/> x . r e n d ( ) 
 t e m p l a t e </space/> < t y p e n a m e </space/> A , </space/> t y p e n a m e </space/> B > 
 o s t r e a m & </space/> o p e r a t o r < < ( o s t r e a m & </space/> o , </space/> p a i r < A , </space/> B > </space/> a ) 
 { 
 r e t u r n </space/> o </space/> < < </space/> a . X </space/> < < </space/> ' </space/> ' </space/> < < </space/> a . Y ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> A , </space/> t y p e n a m e </space/> B > 
 i s t r e a m & </space/> o p e r a t o r > > ( i s t r e a m & </space/> o , </space/> p a i r < A , </space/> B > & </space/> a ) 
 { 
 r e t u r n </space/> o </space/> > > </space/> a . X </space/> > > </space/> a . Y ; 
 } 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 , </space/> a b c </space/> = </space/> 8 6 4 1 9 7 5 3 2 , </space/> N </space/> = </space/> 1 0 0 0 0 1 , </space/> K </space/> = </space/> 1 1 1 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 m a p < i n t , </space/> i n t > </space/> m 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> x ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> x , </space/> m 1 [ x ] + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> b e s t </space/> = </space/> ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ; 
 a u t o </space/> i t </space/> = </space/> m 1 . l o w e r _ b o u n d ( b e s t ) ; 
 i f </space/> ( i t </space/> = = </space/> m 1 . e n d ( ) ) 
 { 
 i t </space/> = </space/> m 1 . l o w e r _ b o u n d ( 0 ) ; 
 } 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> i t - > X ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 m 1 [ i t - > X ] - - ; 
 i f </space/> ( ! m 1 [ i t - > X ] ) 
 m 1 . e r a s e ( i t ) ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> a l l ( x ) </space/> b e g i n ( x ) , </space/> e n d ( x ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v i </space/> v ( n ) , </space/> u ( n ) ; 
 m u l t i s e t < i n t > </space/> m ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> v [ i ] , </space/> v [ i ] </space/> % = </space/> n ; 
 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> u [ i ] , </space/> m . i n s e r t ( u [ i ] </space/> % </space/> n ) ; 
 v i </space/> r e s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t </space/> = </space/> m . l o w e r _ b o u n d ( n </space/> - </space/> v [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> m . e n d ( ) ) 
 { 
 i t </space/> = </space/> m . b e g i n ( ) ; 
 } 
 r e s . p u s h _ b a c k ( ( v [ i ] </space/> + </space/> * i t ) </space/> % </space/> n ) ; 
 m . e r a s e ( i t ) ; 
 } 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> r e s ) 
 { 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 r e t u r n ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 i n t </space/> T C </space/> = </space/> 1 ; </space/> / / </space/> c i n > > T C ; 
 w h i l e </space/> ( T C - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> I N e e d T o S p e e d </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> p e r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 0 0 0 1 7 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ n </space/> + </space/> 1 7 ] ; 
 l l </space/> b [ n </space/> + </space/> 1 7 ] ; 
 m u l t i s e t < l l > </space/> s ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> b [ i ] , </space/> s . i n s e r t ( b [ i ] ) ; 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> ! = </space/> s . e n d ( ) ) 
 c o u t </space/> < < </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" , </space/> s . e r a s e ( i t ) ; 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( * s . b e g i n ( ) </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( s . b e g i n ( ) ) ; 
 } 
 } 
 } 
 m a i n ( ) 
 { 
 I N e e d T o S p e e d </space/> l l </space/> t 2 4 </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t 2 4 ; 
 w h i l e </space/> ( t 2 4 - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> _ _ i n t 1 2 8 </space/> l x ; 
 # d e f i n e </space/> c e i l ( n , </space/> m ) </space/> ( ( n </space/> / </space/> m ) </space/> + </space/> ( n </space/> % </space/> m </space/> ? </space/> 1 </space/> : </space/> 0 ) ) 
 # d e f i n e </space/> m o d ( n , </space/> m ) </space/> ( ( ( n </space/> % </space/> m ) </space/> + </space/> m ) </space/> % </space/> m ) 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> r a l l ( x ) </space/> ( x ) . r b e g i n ( ) , </space/> ( x ) . r e n d ( ) 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 / / </space/> f r e o p e n ( "" c h e s s . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a ( n ) , </space/> b ( n ) ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 c i n </space/> > > </space/> i ; 
 m u l t i s e t < i n t > </space/> s ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> b ) 
 c i n </space/> > > </space/> i , </space/> s . i n s e r t ( i ) ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 { 
 i n t </space/> c u r </space/> = </space/> n </space/> - </space/> i ; 
 i f </space/> ( c u r </space/> = = </space/> n ) 
 c u r </space/> = </space/> 0 ; 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( c u r ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( i </space/> + </space/> * i t ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( i t ) ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p p i </space/> p a i r < i n t , </space/> p i > 
 # d e f i n e </space/> p p l </space/> p a i r < l l , </space/> p l > 
 / / </space/> # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> I N F </space/> 1 e 7 
 v e c t o r < v e c t o r < i n t > > </space/> g r a p h ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < i n t > </space/> a ( n ) ; 
 m u l t i s e t < i n t > </space/> c n t ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 c i n </space/> > > </space/> i ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> i n ; 
 c i n </space/> > > </space/> i n ; 
 c n t . i n s e r t ( i n ) ; 
 } 
 
 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 { 
 a u t o </space/> i t </space/> = </space/> c n t . l o w e r _ b o u n d ( n </space/> - </space/> i ) ; 
 i f </space/> ( i t </space/> = = </space/> c n t . e n d ( ) ) 
 i t </space/> = </space/> c n t . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( i </space/> + </space/> * i t ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 c n t . e r a s e ( i t ) ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c s t d l i b > 
 # i n c l u d e </space/> < c c t y p e > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < c a s s e r t > 
 # i n c l u d e </space/> < c l i m i t s > 
 # i n c l u d e </space/> < b i t s e t > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> P B </space/> p u s h _ b a c k 
 # d e f i n e </space/> M P </space/> m a k e _ p a i r 
 # d e f i n e </space/> S Z ( v ) </space/> ( ( i n t ) ( v ) . s i z e ( ) ) 
 # d e f i n e </space/> F O R ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < </space/> ( b ) ; </space/> + + i ) 
 # d e f i n e </space/> R E P ( i , </space/> n ) </space/> F O R ( i , </space/> 0 , </space/> n ) 
 # d e f i n e </space/> F O R E ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < = </space/> ( b ) ; </space/> + + i ) 
 # d e f i n e </space/> R E P E ( i , </space/> n ) </space/> F O R E ( i , </space/> 0 , </space/> n ) 
 # d e f i n e </space/> F O R S Z ( i , </space/> a , </space/> v ) </space/> F O R ( i , </space/> a , </space/> S Z ( v ) ) 
 # d e f i n e </space/> R E P S Z ( i , </space/> v ) </space/> R E P ( i , </space/> S Z ( v ) ) 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 i n t </space/> g c d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> b </space/> = = </space/> 0 </space/> ? </space/> a </space/> : </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 2 0 0 0 0 0 ; 
 
 i n t </space/> n ; 
 i n t </space/> a [ M A X N ] ; 
 i n t </space/> b [ M A X N ] ; 
 i n t </space/> c [ M A X N ] ; 
 
 m u l t i s e t < i n t > </space/> r e m ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 r e m . c l e a r ( ) ; 
 R E P ( i , </space/> n ) </space/> r e m . i n s e r t ( b [ i ] ) ; 
 R E P ( i , </space/> n ) 
 { 
 a s s e r t ( S Z ( r e m ) </space/> ! = </space/> 0 ) ; 
 i n t </space/> w a n t </space/> = </space/> ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ; 
 a u t o </space/> i t </space/> = </space/> r e m . l o w e r _ b o u n d ( w a n t ) ; 
 i f </space/> ( i t </space/> = = </space/> r e m . e n d ( ) ) 
 i t </space/> = </space/> r e m . b e g i n ( ) ; 
 c [ i ] </space/> = </space/> ( a [ i ] </space/> + </space/> * i t ) </space/> % </space/> n ; 
 r e m . e r a s e ( i t ) ; 
 } 
 } 
 
 v o i d </space/> r u n ( ) 
 { 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 R E P ( i , </space/> n ) </space/> s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 R E P ( i , </space/> n ) </space/> s c a n f ( "" % d "" , </space/> & b [ i ] ) ; 
 s o l v e ( ) ; 
 R E P ( i , </space/> n ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 0 ) 
 p r i n t f ( "" </space/> "" ) ; 
 p r i n t f ( "" % d "" , </space/> c [ i ] ) ; 
 } 
 p u t s ( "" "" ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 r u n ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f o ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> v c t </space/> v e c t o r < l o n g </space/> l o n g </space/> i n t > 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ m a p < l l , </space/> l l > </space/> m b ; 
 s e t < l l > </space/> b ; 
 v e c t o r < l l > </space/> c , </space/> a ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> c ; 
 c i n </space/> > > </space/> c ; 
 a . p b ( c ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> c ; 
 c i n </space/> > > </space/> c ; 
 b . i n s e r t ( c ) ; 
 m b [ c ] + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( m b [ n </space/> - </space/> a [ i ] ] </space/> > </space/> 0 ) 
 { 
 c . p b ( 0 ) ; 
 m b [ n </space/> - </space/> a [ i ] ] - - ; 
 i f </space/> ( m b [ n </space/> - </space/> a [ i ] ] </space/> = = </space/> 0 ) 
 { 
 b . e r a s e ( n </space/> - </space/> a [ i ] ) ; 
 } 
 } 
 e l s e 
 { 
 a u t o </space/> i t </space/> = </space/> b . u p p e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> b . e n d ( ) ) 
 { 
 l l </space/> z </space/> = </space/> a [ i ] </space/> + </space/> * b . b e g i n ( ) ; 
 c . p b ( z </space/> % </space/> n ) ; 
 m b [ * b . b e g i n ( ) ] - - ; 
 i f </space/> ( m b [ * b . b e g i n ( ) ] </space/> = = </space/> 0 ) 
 { 
 b . e r a s e ( * b . b e g i n ( ) ) ; 
 } 
 } 
 e l s e 
 { 
 l l </space/> z 1 </space/> = </space/> ( a [ i ] </space/> + </space/> * i t ) </space/> % </space/> n ; 
 l l </space/> z </space/> = </space/> ( a [ i ] </space/> + </space/> * b . b e g i n ( ) ) </space/> % </space/> n ; 
 i f </space/> ( z </space/> < </space/> z 1 ) 
 { 
 c . p b ( z ) ; 
 m b [ * b . b e g i n ( ) ] - - ; 
 i f </space/> ( m b [ * b . b e g i n ( ) ] </space/> = = </space/> 0 ) 
 { 
 b . e r a s e ( * b . b e g i n ( ) ) ; 
 } 
 } 
 e l s e 
 { 
 c . p b ( z 1 ) ; 
 m b [ * i t ] - - ; 
 i f </space/> ( m b [ * i t ] </space/> = = </space/> 0 ) 
 { 
 b . e r a s e ( * i t ) ; 
 } 
 } 
 } 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> c [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 
 u s i n g </space/> v i </space/> = </space/> v e c t o r < i n t > ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> r s z </space/> r e s i z e 
 # d e f i n e </space/> a l l ( x ) </space/> b e g i n ( x ) , </space/> e n d ( x ) 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( x ) . s i z e ( ) 
 
 u s i n g </space/> p i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 , </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 
 / * 
 i n t </space/> f a s t _ p o w ( i n t </space/> a , </space/> i n t </space/> p ) </space/> { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( p ) </space/> { 
 i f </space/> ( p </space/> % </space/> 2 </space/> = = </space/> 0 ) </space/> { 
 a </space/> = </space/> a </space/> * </space/> 1 l l </space/> * </space/> a </space/> % </space/> m o d ; 
 p </space/> / = </space/> 2 ; 
 } </space/> e l s e </space/> { 
 r e s </space/> = </space/> r e s </space/> * </space/> 1 l l </space/> * </space/> a </space/> % </space/> m o d ; 
 p - - ; 
 } 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> f a c t ( i n t </space/> n ) </space/> { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) </space/> { 
 r e s </space/> = </space/> r e s </space/> * </space/> 1 l l </space/> * </space/> i </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> c ( i n t </space/> n , </space/> i n t </space/> k ) </space/> { 
 r e t u r n </space/> f a c t ( n ) </space/> * </space/> 1 l l </space/> * </space/> f a s t _ p o w ( f a c t ( k ) , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d </space/> * </space/> 1 l l </space/> * </space/> f a s t _ p o w ( f a c t ( n </space/> - </space/> k ) , </space/> m o d </space/> - </space/> 2 ) </space/> % 
 m o d ; 
 } 
 * / 
 
 c o n s t </space/> i n t </space/> m x n </space/> = </space/> 2 e 5 , </space/> m x a </space/> = </space/> 2 6 ; 
 
 i n t </space/> n , </space/> a [ m x n ] ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 m u l t i s e t < i n t > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> b ; 
 c i n </space/> > > </space/> b ; 
 
 s . i n s e r t ( b ) ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * i t ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 s . e r a s e ( i t ) ; 
 } 
 c o u t </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 c o n s t </space/> l l </space/> M </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 # d e f i n e </space/> i n f </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
 # d e f i n e </space/> i n f n </space/> - 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
 l l </space/> n c r ( i n t </space/> n , </space/> i n t </space/> r ) 
 { 
 i f </space/> ( r </space/> > </space/> n ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( r </space/> > </space/> n </space/> - </space/> r ) 
 r </space/> = </space/> n </space/> - </space/> r ; 
 l l </space/> a n s </space/> = </space/> 1 ; 
 i n t </space/> i ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> r ; </space/> i + + ) 
 { 
 a n s </space/> * = </space/> n </space/> - </space/> r </space/> + </space/> i ; 
 a n s </space/> / = </space/> i ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> n , </space/> l l </space/> m ) 
 { 
 i f </space/> ( n </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 e l s e </space/> i f </space/> ( n </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 r e t u r n </space/> ( p o w e r ( ( ( x </space/> % </space/> m ) </space/> * </space/> ( x </space/> % </space/> m ) ) </space/> % </space/> m , </space/> n </space/> / </space/> 2 , </space/> m ) ) </space/> % </space/> m ; 
 e l s e 
 r e t u r n </space/> ( ( x </space/> % </space/> m ) </space/> * </space/> p o w e r ( x , </space/> n </space/> - </space/> 1 , </space/> m ) </space/> % </space/> m ) ; 
 } 
 i n t </space/> d x [ ] </space/> = </space/> { </space/> 1 , </space/> - 1 , </space/> 0 , </space/> 0 </space/> } ; 
 i n t </space/> d y [ ] </space/> = </space/> { </space/> 0 , </space/> 0 , </space/> 1 , </space/> - 1 </space/> } ; 
 l l </space/> m o d I n v e r s e ( l l </space/> a , </space/> l l </space/> m ) 
 { 
 l l </space/> m 0 </space/> = </space/> m ; 
 l l </space/> y </space/> = </space/> 0 , </space/> x </space/> = </space/> 1 ; 
 i f </space/> ( m </space/> = = </space/> 1 ) 
 r e t u r n </space/> 0 ; 
 w h i l e </space/> ( a </space/> > </space/> 1 ) 
 { 
 l l </space/> q </space/> = </space/> a </space/> / </space/> m ; 
 l l </space/> t </space/> = </space/> m ; 
 m </space/> = </space/> a </space/> % </space/> m , </space/> a </space/> = </space/> t ; 
 t </space/> = </space/> y ; 
 y </space/> = </space/> x </space/> - </space/> q </space/> * </space/> y ; 
 x </space/> = </space/> t ; 
 } 
 i f </space/> ( x </space/> < </space/> 0 ) 
 x </space/> + = </space/> m 0 ; 
 r e t u r n </space/> x ; 
 } 
 / / </space/> s t d : : r o t a t e ( v e c . b e g i n ( ) , </space/> v e c . b e g i n ( ) + r o t L , </space/> v e c . e n d ( ) ) ; / / r o t l = n o </space/> o f </space/> l e f t </space/> r o 
 / / </space/> t d : : r o t a t e ( v e c . b e g i n ( ) , </space/> v e c . b e g i n ( ) + v e c . s i z e ( ) - r o t R , </space/> v e c . e n d ( ) ) ; 
 / / </space/> s t r . s u b s t r ( 1 , 3 ) ; </space/> / / </space/> t a k e s ( 0 </space/> b a s e d </space/> i n d e x i n g </space/> a l l </space/> f r o m </space/> [ 1 , 3 ] ) 
 / / </space/> t r a n s f o r m ( s t r . b e g i n ( ) , s t r . e n d ( ) , s t r . b e g i n ( ) , : : t o l o w e r ) ; / / a l s o </space/> "" t o u p p e r "" 
 / / </space/> t o _ s t r i n g ( l l ) , s t o l l ( s t r i n g ) 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) , </space/> c o u t . t i e ( N U L L ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> n u m [ n ] , </space/> j u m [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> n u m [ i ] ; 
 } 
 m a p < l l , </space/> l l > </space/> m p ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> j u m [ i ] ; 
 m p [ j u m [ i ] ] + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> x </space/> = </space/> ( n </space/> - </space/> n u m [ i ] ) </space/> % </space/> n ; 
 i f </space/> ( m p . c o u n t ( x ) ) 
 { 
 c o u t </space/> < < </space/> "" 0 </space/> "" ; 
 m p [ x ] </space/> - = </space/> 1 ; 
 i f </space/> ( m p [ x ] </space/> = = </space/> 0 ) 
 m p . e r a s e ( x ) ; 
 } 
 e l s e 
 { 
 a u t o </space/> i n d </space/> = </space/> m p . l b ( x ) ; 
 i f </space/> ( i n d </space/> = = </space/> m p . e n d ( ) ) 
 { 
 a u t o </space/> i n d </space/> = </space/> m p . l b ( 0 ) ; 
 c o u t </space/> < < </space/> ( n u m [ i ] </space/> + </space/> i n d - > f f ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 i n d - > s s </space/> - = </space/> 1 ; 
 i f </space/> ( i n d - > s s </space/> = = </space/> 0 ) 
 m p . e r a s e ( i n d ) ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( n u m [ i ] </space/> + </space/> i n d - > f f ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 i n d - > s s </space/> - = </space/> 1 ; 
 i f </space/> ( i n d - > s s </space/> = = </space/> 0 ) 
 m p . e r a s e ( i n d ) ; 
 } 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> A d i t y a </space/> S i n g h </space/> : ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> j a l d i _ c h a l </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; 
 # d e f i n e </space/> t r ( c , </space/> i ) </space/> f o r </space/> ( a u t o </space/> i </space/> = </space/> ( c ) . b e g i n ( ) ; </space/> i </space/> ! = </space/> ( c ) . e n d ( ) ; </space/> i + + ) 
 # d e f i n e </space/> r e p ( i , </space/> k ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> k ; </space/> i + + ) 
 # d e f i n e </space/> r e w ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> M </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> d b g ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> d b g 2 ( x , </space/> y ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" = "" </space/> < < </space/> x </space/> < < </space/> "" , "" </space/> < < </space/> # y </space/> < < </space/> "" = "" </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> i n f </space/> 1 e 1 0 
 # d e f i n e </space/> v i </space/> v e c t o r < l l > 
 # d e f i n e </space/> v p i </space/> v e c t o r < p a i r < l l , </space/> l l > </space/> > 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> s o r t a l l ( x ) </space/> s o r t ( a l l ( x ) ) 
 # d e f i n e </space/> M A X </space/> 1 0 0 0 0 
 m t 1 9 9 3 7 _ 6 4 </space/> r a n g ( c h r o n o : : h i g h _ r e s o l u t i o n _ c l o c k : : n o w ( ) . t i m e _ s i n c e _ e p o c h ( ) . c o u n t ( ) ) ; 
 i n t 6 4 _ t </space/> c e i l _ d i v ( i n t 6 4 _ t </space/> a , </space/> i n t 6 4 _ t </space/> b ) 
 { 
 r e t u r n </space/> ( a </space/> + </space/> b </space/> - </space/> 1 ) </space/> / </space/> b ; 
 } 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y , </space/> l l </space/> p ) ; 
 i n t </space/> m a i n ( ) 
 { 
 j a l d i _ c h a l 
 / * # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f * / 
 l l </space/> t c 
 = </space/> 1 , 
 i , </space/> j , </space/> k ; 
 / / </space/> c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v i </space/> a ( n ) ; 
 r e p ( i , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 m a p < l l , </space/> l l > </space/> m p ; 
 l l </space/> n u m ; 
 r e w ( i , </space/> 1 , </space/> n ) 
 { 
 c i n </space/> > > </space/> n u m ; 
 m p [ n u m ] + + ; 
 } 
 r e p ( i , </space/> n ) 
 { 
 l l </space/> n u m </space/> = </space/> n </space/> - </space/> a [ i ] ; 
 a u t o </space/> i t </space/> = </space/> m p . l o w e r _ b o u n d ( n u m ) ; 
 i f </space/> ( i t </space/> = = </space/> m p . e n d ( ) ) 
 i t </space/> = </space/> m p . b e g i n ( ) ; 
 / / </space/> c o u t < < ( * i t ) . f f < < "" </space/> "" < < ( * i t ) . s s < < "" </space/> "" < < e n d l ; 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> ( ( * i t ) . f f ) ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 m p [ ( * i t ) . f f ] - - ; 
 i f </space/> ( ( * i t ) . s s </space/> = = </space/> 0 ) 
 m p . e r a s e ( i t ) ; 
 } 
 } 
 } 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y , </space/> l l </space/> p ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 x </space/> = </space/> x </space/> % </space/> p ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 r e t u r n </space/> 0 ; 
 w h i l e </space/> ( y </space/> > </space/> 0 ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> x ) </space/> % </space/> p ; 
 y </space/> = </space/> y </space/> > > </space/> 1 ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> p ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # d e f i n e </space/> _ C R T _ S E C U R E _ N O _ W A R N I N G S 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> a l l ( v ) </space/> ( ( v ) . b e g i n ( ) ) , </space/> ( ( v ) . e n d ( ) ) 
 # d e f i n e </space/> a l l r ( v ) </space/> ( ( v ) . r b e g i n ( ) ) , </space/> ( ( v ) . r e n d ( ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> i q ( v ) </space/> v . r e s i z e ( u n i q u e ( v . b e g i n ( ) , </space/> v . e n d ( ) ) </space/> - </space/> v . b e g i n ( ) ) 
 # d e f i n e </space/> b y e </space/> r e t u r n </space/> 0 
 # d e f i n e </space/> y e s </space/> c o u t </space/> < < </space/> "" Y E S \ n "" 
 # d e f i n e </space/> n o </space/> c o u t </space/> < < </space/> "" N O \ n "" 
 # d e f i n e </space/> s z ( x ) </space/> x . s i z e ( ) 
 # d e f i n e </space/> T C </space/> \ 
 i n t </space/> t _ t </space/> = </space/> 1 ; </space/> \ 
 c i n </space/> > > </space/> t _ t ; </space/> \ 
 w h i l e </space/> ( t _ t - - ) 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 c o n s t </space/> u l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 v o i d </space/> d a n c e ( ) 
 { 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 / / </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) </space/> ; 
 # e n d i f 
 } 
 i n t </space/> m a i n ( ) 
 { 
 d a n c e ( ) ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> v a ( n ) , </space/> v b ( n ) ; 
 m a p < l l , </space/> l l > </space/> m p ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> v a [ i ] ; 
 } 
 m u l t i s e t < l l > </space/> s t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> v b [ i ] ; 
 s t . i n s e r t ( v b [ i ] ) ; 
 m p [ v b [ i ] ] + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x </space/> = </space/> n </space/> - </space/> v a [ i ] ; 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 i f </space/> ( s t . l o w e r _ b o u n d ( x ) </space/> ! = </space/> s t . e n d ( ) ) 
 { 
 r e s </space/> = </space/> * ( s t . l o w e r _ b o u n d ( x ) ) ; 
 s t . e r a s e ( s t . f i n d ( r e s ) ) ; 
 } 
 e l s e 
 { 
 r e s </space/> = </space/> * ( s t . b e g i n ( ) ) ; 
 s t . e r a s e ( s t . b e g i n ( ) ) ; 
 } 
 c o u t </space/> < < </space/> ( v a [ i ] </space/> + </space/> r e s ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 } 
 
 b y e ; 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> i o _ b o o s t </space/> \ 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( n u l l p t r ) ; </space/> \ 
 c o u t . t i e ( n u l l p t r ) ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> u l l i ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l i ; 
 t y p e d e f </space/> u n s i g n e d </space/> i n t </space/> u i ; 
 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 2 0 0 0 0 5 ; 
 i n t </space/> N , </space/> a [ M A X N ] , </space/> b [ M A X N ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> N ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 m u l t i s e t < i n t > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 s . i n s e r t ( b [ i ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i n t </space/> e </space/> = </space/> 0 ; 
 i f </space/> ( a [ i ] </space/> ! = </space/> 0 ) 
 e </space/> = </space/> N </space/> - </space/> a [ i ] ; 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( e ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> N </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( i t ) ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s e t < i n t > </space/> d i v i s o r s ( i n t </space/> v a l ) 
 { 
 s e t < i n t > </space/> o u t p u t ; 
 i n t </space/> n u m </space/> = </space/> v a l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> * </space/> i </space/> < = </space/> v a l ; </space/> i + + ) 
 i f </space/> ( n u m </space/> % </space/> i </space/> = = </space/> 0 ) 
 i f </space/> ( n u m </space/> % </space/> i </space/> = = </space/> 0 ) 
 { 
 o u t p u t . i n s e r t ( i ) ; 
 o u t p u t . i n s e r t ( n u m </space/> / </space/> i ) ; 
 } 
 r e t u r n </space/> o u t p u t ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 m u l t i s e t < i n t > </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n u m ; 
 c i n </space/> > > </space/> n u m ; 
 b . i n s e r t ( n u m ) ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> v a l </space/> = </space/> n </space/> - </space/> a [ i ] , </space/> v a l _ </space/> = </space/> * b . b e g i n ( ) ; 
 a u t o </space/> i t </space/> = </space/> b . l o w e r _ b o u n d ( v a l ) ; 
 i f </space/> ( i t </space/> = = </space/> b . e n d ( ) </space/> | | </space/> ( v a l _ </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> n ) 
 { 
 c o u t </space/> < < </space/> ( v a l _ </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 b . e r a s e ( b . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( * i t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 b . e r a s e ( i t ) ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> a [ 2 0 0 0 0 0 ] , </space/> b [ 2 0 0 0 0 0 ] ; 
 m u l t i s e t < i n t > </space/> s ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> k ; 
 s . i n s e r t ( k ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> a n s </space/> = </space/> ( n </space/> - </space/> a [ i ] ) </space/> % </space/> n ; 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( a n s ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 { 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 } 
 b [ i ] </space/> = </space/> * i t ; 
 s . e r a s e ( i t ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> ( b [ i ] </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> e l </space/> ' \ n ' 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p l d </space/> p a i r < l d , </space/> l d > 
 # d e f i n e </space/> p f f </space/> p a i r < f l o a t , </space/> f l o a t > 
 # d e f i n e </space/> v e c ( i n t ) </space/> v e c t o r < i n t > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> p </space/> p u s h 
 # d e f i n e </space/> m m s ( v , </space/> i ) </space/> m e m s e t ( v , </space/> i , </space/> s i z e o f </space/> v ) 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> a l l r ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 # d e f i n e </space/> M A X </space/> 1 0 0 0 0 0 0 5 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> f i l e ( ) 
 { 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 } 
 v o i d </space/> z u k a ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 z u k a ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 m u l t i s e t < l l > </space/> s ; 
 v e c ( l l ) </space/> a ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> i n ; 
 c i n </space/> > > </space/> i n ; 
 a . p b ( i n ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> i n ; 
 c i n </space/> > > </space/> i n ; 
 s . i n s e r t ( i n ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 i t </space/> = </space/> s . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> ( * i t ) ) </space/> % </space/> n </space/> < < </space/> ' </space/> ' ; 
 s . e r a s e ( i t ) ; 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> / / </space/> / / * * * c o u n t = 1 2 * * * / / 
 / / </space/> / / </space/> / / * * * T r y i n g </space/> t o </space/> m a k e </space/> i t </space/> 6 0 * * * / / 
 / / </space/> / / * * * </space/> W h a t </space/> i f </space/> n = = 1 * * * / / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( l o n g </space/> l o n g </space/> z t ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 i n t </space/> b [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 } 
 
 
 m u l t i m a p < i n t , </space/> i n t > </space/> m p ; 
 i n t </space/> m a x i </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 m p . i n s e r t ( { </space/> b [ i ] , </space/> b [ i ] </space/> } ) ; 
 m a x i </space/> = </space/> m a x ( m a x i , </space/> b [ i ] ) ; 
 } 
 m a x i + + ; 
 
 / / </space/> f o r </space/> ( a u t o </space/> i t </space/> = </space/> m p . b e g i n ( ) ; </space/> i t </space/> ! = </space/> m p . e n d ( ) ; i t + + ) { 
 / / </space/> 	 c o u t </space/> < < </space/> i t - > f i r s t </space/> < < </space/> "" </space/> "" ; 
 / / </space/> } 
 / / </space/> c o u t </space/> < < </space/> e n d l ; 
 m p . i n s e r t ( { </space/> n , </space/> n </space/> } ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> y </space/> = </space/> a [ i ] ; 
 i f </space/> ( y </space/> ! = </space/> 0 ) 
 { 
 a u t o </space/> i t </space/> = </space/> m p . l o w e r _ b o u n d ( n </space/> - </space/> y ) ; 
 i f </space/> ( i t - > f i r s t </space/> = = </space/> n ) 
 { 
 a u t o </space/> i t 1 </space/> = </space/> m p . b e g i n ( ) ; 
 i n t </space/> u </space/> = </space/> i t 1 - > f i r s t ; 
 c o u t </space/> < < </space/> ( y </space/> + </space/> u ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 m p . e r a s e ( i t 1 ) ; 
 } 
 e l s e 
 { 
 / / </space/> a u t o </space/> i t 2 </space/> = </space/> m p . f i n d ( i t - > f i r s t ) ; 
 c o u t </space/> < < </space/> ( y </space/> + </space/> i t - > f i r s t ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 m p . e r a s e ( i t ) ; 
 } 
 / / </space/> c o u t </space/> < < </space/> i t - > f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> i t - > s e c o n d ; 
 } 
 e l s e </space/> i f </space/> ( y </space/> = = </space/> 0 ) 
 { 
 a u t o </space/> i t 1 </space/> = </space/> m p . b e g i n ( ) ; 
 i n t </space/> u </space/> = </space/> i t 1 - > f i r s t ; 
 m p . e r a s e ( i t 1 ) ; 
 c o u t </space/> < < </space/> ( y </space/> + </space/> u ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 r e t u r n ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 l o n g </space/> l o n g </space/> z </space/> = </space/> 0 ; 
 w h i l e </space/> ( t - - ) 
 { 
 z + + ; 
 
 s o l v e ( z ) ; 
 } 
 } 
 
 / / </space/> 2 </space/> 4 </space/> 3 </space/> 1 </space/> 4 </space/> 0 </space/> 4 
 
 / / </space/> 3 + 1 + 2 + 2 + 1 + 1 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 s e t < p a i r < i n t , </space/> i n t > > </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n 1 ; 
 c i n </space/> > > </space/> n 1 ; 
 b . i n s e r t ( { </space/> n 1 , </space/> i </space/> } ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t 1 </space/> = </space/> b . l o w e r _ b o u n d ( { </space/> n </space/> - </space/> a [ i ] , </space/> 0 </space/> } ) ; 
 i f </space/> ( i t 1 </space/> ! = </space/> b . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> ( ( * i t 1 ) . f i r s t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 b . e r a s e ( i t 1 ) ; 
 } 
 e l s e 
 { 
 i t 1 </space/> = </space/> b . l o w e r _ b o u n d ( { </space/> 0 , </space/> 0 </space/> } ) ; 
 c o u t </space/> < < </space/> ( ( * i t 1 ) . f i r s t </space/> + </space/> a [ i ] ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 b . e r a s e ( i t 1 ) ; 
 } 
 } 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> i n s </space/> i n s e r t 
 # d e f i n e </space/> s z ( x ) </space/> ( l o n g </space/> l o n g ) </space/> x . s i z e ( ) 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> a ( n , </space/> 0 ) , </space/> b ( n , </space/> 0 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 m u l t i s e t < l l > </space/> x ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 x . i n s e r t ( b [ i ] </space/> % </space/> n ) ; 
 } 
 v e c t o r < l l > </space/> c ( n , </space/> 0 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> v a l </space/> = </space/> a [ i ] </space/> % </space/> n ; 
 l l </space/> r e q </space/> = </space/> ( n </space/> - </space/> v a l ) </space/> % </space/> n ; 
 a u t o </space/> i t </space/> = </space/> x . l o w e r _ b o u n d ( r e q ) ; 
 i f </space/> ( i t </space/> = = </space/> x . e n d ( ) ) 
 { 
 a u t o </space/> i t 2 </space/> = </space/> x . b e g i n ( ) ; 
 c [ i ] </space/> = </space/> ( v a l </space/> + </space/> * i t 2 ) </space/> % </space/> n ; 
 x . e r a s e ( i t 2 ) ; 
 c o n t i n u e ; 
 } 
 c [ i ] </space/> = </space/> ( v a l </space/> + </space/> * i t ) </space/> % </space/> n ; 
 x . e r a s e ( i t ) ; 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> c [ i ] </space/> < < </space/> "" </space/> "" ; 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 l l </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> t e j i </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> f f </space/> f i r s t 
 / / </space/> # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> p i i </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> f ( i , </space/> x , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> x ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n , </space/> x ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> v ( n ) ; 
 m u l t i s e t < l l > </space/> s ; 
 f ( i , </space/> 0 , </space/> n ) </space/> c i n </space/> > > </space/> v [ i ] ; 
 f ( i , </space/> 0 , </space/> n ) 
 { 
 c i n </space/> > > </space/> x ; 
 s . i n s e r t ( x ) ; 
 } 
 / / </space/> c i n > > a [ i ] ; 
 / / </space/> s o r t ( a l l ( a ) ) ; 
 f ( i , </space/> 0 , </space/> n ) 
 { 
 a u t o </space/> y </space/> = </space/> s . l b ( n </space/> - </space/> v [ i ] ) ; 
 / / </space/> l l </space/> x = l b ( a l l ( a ) , n - v [ i ] ) - v . b e g i n ( ) ; 
 
 i f </space/> ( y </space/> = = </space/> s . e n d ( ) ) 
 y </space/> = </space/> s . b e g i n ( ) ; 
 c o u t </space/> < < </space/> ( v [ i ] </space/> + </space/> * y ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( y ) ; 
 } 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 
 t e j i ; 
 l l </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 f ( i , </space/> 0 , </space/> t ) </space/> s o l v e ( ) ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> a l l ( p ) </space/> p . b e g i n ( ) , </space/> p . e n d ( ) 
 # d e f i n e </space/> m i d ( s , </space/> e ) </space/> ( s </space/> + </space/> ( e </space/> - </space/> s ) </space/> / </space/> 2 ) 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> f a s t </space/> i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 # d e f i n e </space/> f f ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> f b ( i , </space/> b , </space/> a ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> b ; </space/> i </space/> > = </space/> a ; </space/> i - - ) 
 # d e f i n e </space/> m i i </space/> m a p < i n t , </space/> i n t > 
 # d e f i n e </space/> c i ( n ) </space/> c i n </space/> > > </space/> n ; 
 # d e f i n e </space/> t c </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; 
 # d e f i n e </space/> c y </space/> c o u t </space/> < < </space/> "" Y E S \ n "" 
 # d e f i n e </space/> c n </space/> c o u t </space/> < < </space/> "" N O \ n "" 
 # d e f i n e </space/> i n p u t ( a , </space/> n ) </space/> \ 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) </space/> \ 
 c i n </space/> > > </space/> a [ i ] ; 
 # d e f i n e </space/> c o ( n ) </space/> c o u t </space/> < < </space/> n ; 
 # d e f i n e </space/> r e t </space/> r e t u r n </space/> 0 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 m u l t i s e t < i n t > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 s . i n s e r t ( x ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 i f </space/> ( i t </space/> = = </space/> s . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * s . b e g i n ( ) ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( s . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * i t ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 s . e r a s e ( i t ) ; 
 } 
 } 
 
 
 r e t u r n </space/> 0 ; 
 }",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> p o p f </space/> p o p _ f r o n t 
 # d e f i n e </space/> p o p b </space/> p o p _ b a c k 
 # d e f i n e </space/> M O D 1 </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> M O D 2 </space/> 9 9 8 2 4 4 3 5 3 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 i n t </space/> c o n s t </space/> M A X </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 ; 
 / * 
 * / 
 / / </space/> p r i n t f ( "" % . 1 0 l f \ n "" , a n s ) ; 
 / / </space/> c o u t < < f i x e d < < s e t p r e c i s i o n ( 2 0 ) < < a n s < < e n d l ; 
 / / </space/> s t o l l </space/> s t r i n g </space/> - > </space/> l o n g </space/> l o n g 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> b [ n ] ; 
 m u l t i s e t < i n t > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> b [ i ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> a ; 
 c i n </space/> > > </space/> a ; 
 s . i n s e r t ( a ) ; 
 } 
 i n t </space/> a n s [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> p </space/> = </space/> s . l o w e r _ b o u n d ( n </space/> - </space/> b [ i ] ) ; 
 i f </space/> ( p </space/> = = </space/> s . e n d ( ) ) 
 p </space/> = </space/> s . b e g i n ( ) ; 
 a n s [ i ] </space/> = </space/> ( b [ i ] </space/> + </space/> * p ) </space/> % </space/> n ; 
 s . e r a s e ( p ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 / * i n t </space/> t ; 
 	 c i n > > t ; 
 	 w h i l e ( t - - ) * / </space/> s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( i n t </space/> a r g c , </space/> c o n s t </space/> c h a r * </space/> a r g v [ ] ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 m u l t i s e t < i n t > </space/> b ; 
 i n t </space/> a [ n ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> e l e ; 
 c i n </space/> > > </space/> e l e ; 
 b . i n s e r t ( e l e ) ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a u t o </space/> i t r </space/> = </space/> b . l o w e r _ b o u n d ( n </space/> - </space/> a [ i ] ) ; 
 
 i f </space/> ( i t r </space/> = = </space/> b . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * b . b e g i n ( ) ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 b . e r a s e ( b . b e g i n ( ) ) ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a [ i ] </space/> + </space/> * i t r ) </space/> % </space/> n </space/> < < </space/> "" </space/> "" ; 
 b . e r a s e ( i t r ) ; 
 } 
 } 
 } 
",1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> a ( n ) , </space/> b ( n ) ; 
 f o r </space/> ( a u t o & </space/> i t </space/> : </space/> a ) 
 c i n </space/> > > </space/> i t ; 
 f o r </space/> ( a u t o & </space/> i t </space/> : </space/> b ) 
 c i n </space/> > > </space/> i t ; 
 l l </space/> m i n a </space/> = </space/> * m i n _ e l e m e n t ( a . b e g i n ( ) , </space/> a . e n d ( ) ) ; 
 l l </space/> m i n b </space/> = </space/> * m i n _ e l e m e n t ( b . b e g i n ( ) , </space/> b . e n d ( ) ) ; 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> = </space/> s u m </space/> + </space/> m a x ( a [ i ] </space/> - </space/> m i n a , </space/> b [ i ] </space/> - </space/> m i n b ) ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> N ; 
 c i n </space/> > > </space/> N ; 
 i n t </space/> c m i n </space/> = </space/> 1 0 0 0 0 0 0 0 0 1 , </space/> o m i n </space/> = </space/> 1 0 0 0 0 0 0 0 0 1 ; 
 v e c t o r < i n t > </space/> c a n d i e s ( N ) , </space/> o r a n g e s ( N ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i f </space/> ( t </space/> < </space/> c m i n ) 
 { 
 c m i n </space/> = </space/> t ; 
 } 
 c a n d i e s [ i ] </space/> = </space/> t ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i f </space/> ( t </space/> < </space/> o m i n ) 
 { 
 o m i n </space/> = </space/> t ; 
 } 
 o r a n g e s [ i ] </space/> = </space/> t ; 
 } 
 
 u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> r e s u l t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 r e s u l t </space/> + = </space/> m a x ( c a n d i e s [ i ] </space/> - </space/> c m i n , </space/> o r a n g e s [ i ] </space/> - </space/> o m i n ) ; 
 } 
 c o u t </space/> < < </space/> r e s u l t </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> u l l i ; 
 
 v e c t o r < u l l i > </space/> g e t A r r a y ( u l l i </space/> l i m i t ) 
 { 
 v e c t o r < u l l i > </space/> a r r a y ; 
 
 w h i l e </space/> ( l i m i t - - ) 
 { 
 u l l i </space/> x ; 
 c i n </space/> > > </space/> x ; 
 
 a r r a y . p u s h _ b a c k ( x ) ; 
 } 
 
 r e t u r n </space/> a r r a y ; 
 } 
 
 u l l i </space/> g e t M i n i ( v e c t o r < u l l i > </space/> a ) 
 { 
 u l l i </space/> m i n i </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 0 0 ; 
 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a ) 
 { 
 i f </space/> ( x </space/> < </space/> m i n i ) 
 m i n i </space/> = </space/> x ; 
 } 
 r e t u r n </space/> m i n i ; 
 } 
 
 u l l i </space/> g e t M o v e s ( v e c t o r < u l l i > </space/> c a n d y , </space/> v e c t o r < u l l i > </space/> o r a n g e ) 
 { 
 u l l i </space/> m i n i C a n d y </space/> = </space/> g e t M i n i ( c a n d y ) ; 
 u l l i </space/> m i n i O r a n g e </space/> = </space/> g e t M i n i ( o r a n g e ) ; 
 
 u l l i </space/> m o v e s </space/> = </space/> 0 ; 
 
 f o r </space/> ( u l l i </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> c a n d y . s i z e ( ) ; </space/> i + + ) 
 { 
 u l l i </space/> c a n d y M o v e </space/> = </space/> c a n d y [ i ] </space/> - </space/> m i n i C a n d y ; 
 u l l i </space/> o r a n g e M o v e </space/> = </space/> o r a n g e [ i ] </space/> - </space/> m i n i O r a n g e ; 
 
 m o v e s </space/> + = </space/> m a x ( c a n d y M o v e , </space/> o r a n g e M o v e ) ; 
 } 
 
 r e t u r n </space/> m o v e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 u l l i </space/> t C a s e ; 
 c i n </space/> > > </space/> t C a s e ; 
 
 w h i l e </space/> ( t C a s e - - ) 
 { 
 u l l i </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < u l l i > </space/> c a n d y L i s t </space/> = </space/> g e t A r r a y ( n ) ; 
 v e c t o r < u l l i > </space/> o r a n g e L i s t </space/> = </space/> g e t A r r a y ( n ) ; 
 
 u l l i </space/> m o v e </space/> = </space/> g e t M o v e s ( c a n d y L i s t , </space/> o r a n g e L i s t ) ; 
 
 c o u t </space/> < < </space/> m o v e </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> M A X </space/> = </space/> 5 5 ; 
 i n t </space/> a [ M A X ] , </space/> b [ M A X ] ; 
 i n t </space/> M i n ( i n t , </space/> i n t ) ; 
 i n t </space/> M a x ( i n t , </space/> i n t ) ; 
 v o i d </space/> s o l v e ( ) ; 
 i n t </space/> m a i n ( ) 
 { 
 s t d : : i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 s t d : : c i n . t i e ( N U L L ) ; 
 
 i n t </space/> t </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
 i n t </space/> M i n ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> > </space/> b ) 
 r e t u r n </space/> b ; 
 
 r e t u r n </space/> a ; 
 } 
 i n t </space/> M a x ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> > </space/> b ) 
 r e t u r n </space/> a ; 
 
 r e t u r n </space/> b ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 i n t </space/> m n 1 </space/> = </space/> 1 e 9 </space/> + </space/> 5 , </space/> m n 2 </space/> = </space/> 1 e 9 </space/> + </space/> 5 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 m n 1 </space/> = </space/> M i n ( m n 1 , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & b [ j ] ) ; 
 m n 2 </space/> = </space/> M i n ( m n 2 , </space/> b [ j ] ) ; 
 } 
 l l </space/> l l C n t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 l l C n t </space/> + = </space/> M a x ( ( a [ i ] </space/> - </space/> m n 1 ) , </space/> ( b [ i ] </space/> - </space/> m n 2 ) ) ; 
 
 p r i n t f ( "" % l l d \ n "" , </space/> l l C n t ) ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l </space/> v e c t o r < l o n g </space/> l o n g > 
 # d e f i n e </space/> m i i </space/> m a p < i n t , </space/> i n t > 
 # d e f i n e </space/> p q b </space/> p r i o r i t y _ q u e u e < i n t > 
 # d e f i n e </space/> p q s </space/> p r i o r i t y _ q u e u e < i n t , </space/> v i , </space/> g r e a t e r < i n t > </space/> > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> i n f </space/> 1 e 1 8 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> w ( t ) </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 # d e f i n e </space/> f ( i , </space/> x ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> x ; </space/> i + + ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 i n t </space/> b [ n ] ; 
 f ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 } 
 i n t </space/> m i n a </space/> = </space/> * m i n _ e l e m e n t ( a , </space/> a </space/> + </space/> n ) ; 
 i n t </space/> m i n b </space/> = </space/> * m i n _ e l e m e n t ( b , </space/> b </space/> + </space/> n ) ; 
 f ( i , </space/> n ) 
 { 
 a [ i ] </space/> - = </space/> m i n a ; 
 b [ i ] </space/> - = </space/> m i n b ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f ( i , </space/> n ) 
 { 
 a n s </space/> + = </space/> ( l l ) ( m a x ( a [ i ] , </space/> b [ i ] ) ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 w ( t ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < e x t / p b _ d s / a s s o c _ c o n t a i n e r . h p p > 
 # i n c l u d e </space/> < e x t / p b _ d s / t r e e _ p o l i c y . h p p > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> M a x ( x , </space/> y , </space/> z ) </space/> m a x ( x , </space/> m a x ( y , </space/> z ) ) 
 # d e f i n e </space/> M i n ( x , </space/> y , </space/> z ) </space/> m i n ( x , </space/> m i n ( y , </space/> z ) ) 
 # d e f i n e </space/> f r ( i , </space/> s , </space/> e ) </space/> f o r </space/> ( i </space/> = </space/> s ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> r f ( i , </space/> s , </space/> e ) </space/> f o r </space/> ( i </space/> = </space/> s </space/> - </space/> 1 ; </space/> i </space/> > = </space/> e ; </space/> i - - ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> i n t </space/> u i n t ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > </space/> p l l ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < l o n g </space/> l o n g > </space/> v l l ; 
 t y p e d e f </space/> v e c t o r < p a i r < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > </space/> > </space/> v p l l ; 
 
 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < c s t r i n g > 
 v o i d </space/> s o l v e ( l l ) ; 
 l l </space/> t c </space/> = </space/> 0 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] , </space/> m n </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 , </space/> m n 2 </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 i f </space/> ( a [ i ] </space/> < </space/> m n ) 
 m n </space/> = </space/> a [ i ] ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 i f </space/> ( b [ i ] </space/> < </space/> m n 2 ) 
 m n 2 </space/> = </space/> b [ i ] ; 
 } 
 
 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> x </space/> = </space/> a [ i ] </space/> - </space/> m n , </space/> y </space/> = </space/> b [ i ] </space/> - </space/> m n 2 ; 
 a n s </space/> + = </space/> m a x ( x , </space/> y ) ; 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> a [ n ] , </space/> b [ n ] , </space/> i , </space/> a M i n </space/> = </space/> 1 e 9 , </space/> b M i n </space/> = </space/> 1 e 9 , </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a M i n </space/> = </space/> m i n ( a M i n , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 b M i n </space/> = </space/> m i n ( b M i n , </space/> b [ i ] ) ; 
 } 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 a n s </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> a M i n , </space/> b [ i ] </space/> - </space/> b M i n ) ; 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 c o u t . p r e c i s i o n ( 1 0 ) ; 
 c o u t </space/> < < </space/> f i x e d ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n ; 
 l o n g </space/> l o n g </space/> a [ 5 2 ] , </space/> b [ 5 2 ] , </space/> m a </space/> = </space/> 0 , </space/> m b </space/> = </space/> 0 , </space/> c </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 } 
 m a </space/> = </space/> * m i n _ e l e m e n t ( a , </space/> a </space/> + </space/> n ) ; 
 m b </space/> = </space/> * m i n _ e l e m e n t ( b , </space/> b </space/> + </space/> n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> m a , </space/> b [ i ] </space/> - </space/> m b ) ; 
 } 
 c o u t </space/> < < </space/> c </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f o ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 
 l l i </space/> M i n ( l l i </space/> a , </space/> l l i </space/> b ) 
 { 
 i f </space/> ( a </space/> > = </space/> b ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> b ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 
 l l i </space/> s t e p s </space/> = </space/> 0 ; 
 l l i </space/> t , </space/> n , </space/> m i n _ c a n d y </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 , </space/> m i n _ o r a n g e </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 m i n _ c a n d y </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 , </space/> m i n _ o r a n g e </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 s t e p s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 l l i </space/> c a n d y [ n ] ; 
 l l i </space/> o r a n g e [ n ] ; 
 f o ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> c a n d y [ i ] ; 
 i f </space/> ( c a n d y [ i ] </space/> < </space/> m i n _ c a n d y ) 
 m i n _ c a n d y </space/> = </space/> c a n d y [ i ] ; 
 } 
 f o ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> o r a n g e [ i ] ; 
 i f </space/> ( o r a n g e [ i ] </space/> < </space/> m i n _ o r a n g e ) 
 m i n _ o r a n g e </space/> = </space/> o r a n g e [ i ] ; 
 } 
 f o ( i , </space/> n ) 
 { 
 i f </space/> ( c a n d y [ i ] </space/> ! = </space/> m i n _ c a n d y </space/> & & </space/> o r a n g e [ i ] </space/> ! = </space/> m i n _ o r a n g e ) 
 { 
 l l i </space/> t e m p </space/> = </space/> m i n ( o r a n g e [ i ] </space/> - </space/> m i n _ o r a n g e , </space/> c a n d y [ i ] </space/> - </space/> m i n _ c a n d y ) ; 
 s t e p s </space/> + = </space/> t e m p ; 
 o r a n g e [ i ] </space/> - = </space/> t e m p ; 
 c a n d y [ i ] </space/> - = </space/> t e m p ; 
 i f </space/> ( c a n d y [ i ] </space/> ! = </space/> m i n _ c a n d y ) 
 { 
 t e m p </space/> = </space/> c a n d y [ i ] </space/> - </space/> m i n _ c a n d y ; 
 s t e p s </space/> + = </space/> t e m p ; 
 c a n d y [ i ] </space/> - = </space/> t e m p ; 
 } 
 i f </space/> ( o r a n g e [ i ] </space/> ! = </space/> m i n _ o r a n g e ) 
 { 
 t e m p </space/> = </space/> o r a n g e [ i ] </space/> - </space/> m i n _ o r a n g e ; 
 s t e p s </space/> + = </space/> t e m p ; 
 o r a n g e [ i ] </space/> - = </space/> t e m p ; 
 } 
 } 
 i f </space/> ( c a n d y [ i ] </space/> ! = </space/> m i n _ c a n d y </space/> & & </space/> o r a n g e [ i ] </space/> = = </space/> m i n _ o r a n g e ) 
 { 
 l l i </space/> t e m p </space/> = </space/> c a n d y [ i ] </space/> - </space/> m i n _ c a n d y ; 
 s t e p s </space/> + = </space/> t e m p ; 
 c a n d y [ i ] </space/> - = </space/> t e m p ; 
 } 
 i f </space/> ( c a n d y [ i ] </space/> = = </space/> m i n _ c a n d y </space/> & & </space/> o r a n g e [ i ] </space/> ! = </space/> m i n _ o r a n g e ) 
 { 
 l l i </space/> t e m p </space/> = </space/> o r a n g e [ i ] </space/> - </space/> m i n _ o r a n g e ; 
 s t e p s </space/> + = </space/> t e m p ; 
 o r a n g e [ i ] </space/> - = </space/> t e m p ; 
 } 
 } 
 c o u t </space/> < < </space/> s t e p s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 c o n s t </space/> l l </space/> I N F </space/> = </space/> 1 e 1 8 </space/> + </space/> 7 ; 
 u s i n g </space/> v i </space/> = </space/> v e c t o r < i n t > ; 
 u s i n g </space/> v l l </space/> = </space/> v e c t o r < l l > ; 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 5 </space/> + </space/> 7 ; 
 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> r s z </space/> r e s i z e 
 # d e f i n e </space/> a l l ( x ) </space/> b e g i n ( x ) , </space/> e n d ( x ) 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( x ) . s i z e ( ) 
 # d e f i n e </space/> D B G ( x ) </space/> c o u t </space/> < < </space/> "" [ "" </space/> < < </space/> # x </space/> < < </space/> "" ] </space/> : </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l 
 
 u s i n g </space/> p i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 u s i n g </space/> p l i </space/> = </space/> p a i r < l l , </space/> i n t > ; 
 u s i n g </space/> p l l </space/> = </space/> p a i r < l l , </space/> l l > ; 
 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 
 / / </space/> i n t e r a c t i v e </space/> p r o b l e m s </space/> u s e </space/> "" f f l u s h ( s t d o u t ) ; "" </space/> a t </space/> t h e </space/> e n d </space/> o f </space/> t h e </space/> f u n c t i o n ; </space/> a n d </space/> d e l e t e </space/> t h e </space/> f i r s t </space/> l i n e 
 / / </space/> o f </space/> t h e </space/> m a i n </space/> f u c t i o n 
 
 i n t </space/> t ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v i </space/> a ( n ) ; 
 v i </space/> b ( n ) ; 
 i n t </space/> m i a </space/> = </space/> 2 e 9 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m i a </space/> = </space/> m i n ( a [ i ] , </space/> m i a ) ; 
 } 
 i n t </space/> m i b </space/> = </space/> 2 e 9 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m i b </space/> = </space/> m i n ( b [ i ] , </space/> m i b ) ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l </space/> x </space/> = </space/> b [ i ] </space/> - </space/> m i b ; 
 l l </space/> y </space/> = </space/> a [ i ] </space/> - </space/> m i a ; 
 a n s </space/> + = </space/> a b s ( x </space/> - </space/> y ) </space/> + </space/> m i n ( x , </space/> y ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c l i m i t s > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> l o n g </space/> c o u n t </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l o n g </space/> l o n g </space/> a [ n ] ; 
 l o n g </space/> l o n g </space/> b [ n ] ; 
 l o n g </space/> l o n g </space/> a m i n </space/> = </space/> I N T _ M A X ; 
 l o n g </space/> l o n g </space/> b m i n </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a m i n </space/> = </space/> m i n ( a [ i ] , </space/> a m i n ) ; 
 } 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 b m i n </space/> = </space/> m i n ( b [ i ] , </space/> b m i n ) ; 
 } 
 / / </space/> c o u t < < a m i n < < "" </space/> "" < < b m i n < < e n d l ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l o n g </space/> l o n g </space/> x </space/> = </space/> a [ i ] </space/> - </space/> a m i n ; 
 l o n g </space/> l o n g </space/> y </space/> = </space/> b [ i ] </space/> - </space/> b m i n ; 
 l o n g </space/> l o n g </space/> z </space/> = </space/> m i n ( x , </space/> y ) ; 
 c o u n t </space/> + = </space/> z ; 
 x </space/> = </space/> x </space/> - </space/> z ; 
 y </space/> = </space/> y </space/> - </space/> z ; 
 c o u n t </space/> + = </space/> x ; 
 c o u n t </space/> + = </space/> y ; 
 / / </space/> c o u t < < c o u n t < < "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> c o u n t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> i , </space/> j , </space/> m i n i m u m 1 , </space/> m i n i m u m 2 , </space/> x , </space/> y ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> m o v </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 } 
 
 m i n i m u m 1 </space/> = </space/> a [ 0 ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> < </space/> m i n i m u m 1 ) 
 { 
 m i n i m u m 1 </space/> = </space/> a [ i ] ; 
 } 
 } 
 / / </space/> c o u t < < "" M i n i m u m 1 : </space/> "" < < m i n i m u m 1 < < e n d l ; 
 m i n i m u m 2 </space/> = </space/> b [ 0 ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( b [ i ] </space/> < </space/> m i n i m u m 2 ) 
 { 
 m i n i m u m 2 </space/> = </space/> b [ i ] ; 
 } 
 } 
 / / </space/> c o u t < < "" M i n i m u m 2 : </space/> "" < < m i n i m u m 2 < < e n d l ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 x </space/> = </space/> a [ i ] </space/> - </space/> m i n i m u m 1 ; 
 y </space/> = </space/> b [ i ] </space/> - </space/> m i n i m u m 2 ; 
 / / </space/> c o u t < < "" x : </space/> "" < < x < < "" </space/> y : </space/> "" < < y < < e n d l ; 
 m o v </space/> + = </space/> m a x ( x , </space/> y ) ; 
 / / </space/> c o u t < < "" M o v : </space/> "" < < m o v < < e n d l ; 
 } 
 c o u t </space/> < < </space/> m o v </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l o n g </space/> l o n g </space/> a [ n ] , </space/> b [ n ] , </space/> m n A </space/> = </space/> I N T _ M A X , </space/> m n B </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m n A </space/> = </space/> m i n ( m n A , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m n B </space/> = </space/> m i n ( m n B , </space/> b [ i ] ) ; 
 } 
 l o n g </space/> l o n g </space/> c n t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> > </space/> m n A </space/> & & </space/> b [ i ] </space/> > </space/> m n B ) 
 { 
 i f </space/> ( a [ i ] </space/> - </space/> m n A </space/> > </space/> b [ i ] </space/> - </space/> m n B ) 
 { 
 c n t </space/> + = </space/> a [ i ] </space/> - </space/> m n A ; 
 } 
 e l s e 
 { 
 c n t </space/> + = </space/> b [ i ] </space/> - </space/> m n B ; 
 } 
 } 
 e l s e </space/> i f </space/> ( a [ i ] </space/> > </space/> m n A ) 
 { 
 c n t </space/> + = </space/> a [ i ] </space/> - </space/> m n A ; 
 } 
 e l s e </space/> i f </space/> ( b [ i ] </space/> > </space/> m n B ) 
 { 
 c n t </space/> + = </space/> b [ i ] </space/> - </space/> m n B ; 
 } 
 } 
 c o u t </space/> < < </space/> c n t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m i ( i n t </space/> a r [ ] , </space/> i n t </space/> s ) ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 i n t </space/> n , </space/> m i a </space/> = </space/> 0 , </space/> m i b </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> s u m </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 c i n </space/> > > </space/> a [ j ] ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 c i n </space/> > > </space/> b [ j ] ; 
 m i a </space/> = </space/> m i ( a , </space/> n ) ; 
 m i b </space/> = </space/> m i ( b , </space/> n ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 i f </space/> ( a [ j ] </space/> > </space/> m i a </space/> | | </space/> b [ j ] </space/> > </space/> m i b ) 
 s u m </space/> + = </space/> m a x ( ( a [ j ] </space/> - </space/> m i a ) , </space/> ( b [ j ] </space/> - </space/> m i b ) ) ; 
 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
 
 i n t </space/> m i ( i n t </space/> a r [ ] , </space/> i n t </space/> s ) 
 { 
 i n t </space/> m i </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s ; </space/> i + + ) 
 m i </space/> = </space/> m i n ( a r [ i ] , </space/> m i ) ; 
 r e t u r n </space/> m i ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < i t e r a t o r > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < t u p l e > 
 # i n c l u d e </space/> < s t r i n g > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> n u m e r i c _ l i m i t s < i n t > : : m a x ( ) </space/> / </space/> 2 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 0 ; </space/> t </space/> < </space/> T ; </space/> + + t ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> A ( n ) , </space/> B ( n ) ; 
 f o r </space/> ( i n t & </space/> a </space/> : </space/> A ) 
 c i n </space/> > > </space/> a ; 
 f o r </space/> ( i n t & </space/> b </space/> : </space/> B ) 
 c i n </space/> > > </space/> b ; 
 i n t </space/> m a </space/> = </space/> * m i n _ e l e m e n t ( A . b e g i n ( ) , </space/> A . e n d ( ) ) ; 
 i n t </space/> m b </space/> = </space/> * m i n _ e l e m e n t ( B . b e g i n ( ) , </space/> B . e n d ( ) ) ; 
 a u t o </space/> a n s </space/> = </space/> 0 u l l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> d a </space/> = </space/> A [ i ] </space/> - </space/> m a ; 
 i n t </space/> d b </space/> = </space/> B [ i ] </space/> - </space/> m b ; 
 a n s </space/> + = </space/> m a x ( d a , </space/> d b ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] , </space/> m i n a </space/> = </space/> I N T _ M A X , </space/> m i n b </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m i n a </space/> = </space/> m i n ( m i n a , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m i n b </space/> = </space/> m i n ( m i n b , </space/> b [ i ] ) ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> > </space/> m i n a </space/> & & </space/> b [ i ] </space/> > </space/> m i n b ) 
 { 
 i n t </space/> t </space/> = </space/> m i n ( a [ i ] </space/> - </space/> m i n a , </space/> b [ i ] </space/> - </space/> m i n b ) ; 
 a n s </space/> + = </space/> t ; 
 a [ i ] </space/> - = </space/> t ; 
 b [ i ] </space/> - = </space/> t ; 
 } 
 i f </space/> ( a [ i ] </space/> > </space/> m i n a ) 
 { 
 a n s </space/> + = </space/> ( a [ i ] </space/> - </space/> m i n a ) ; 
 } 
 e l s e </space/> i f </space/> ( b [ i ] </space/> > </space/> m i n b ) 
 { 
 a n s </space/> + = </space/> ( b [ i ] </space/> - </space/> m i n b ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 c o u t </space/> < < </space/> "" \ n T i m e </space/> E l a p s e d : </space/> "" </space/> < < </space/> 1 . 0 </space/> * </space/> c l o c k ( ) </space/> / </space/> C L O C K S _ P E R _ S E C </space/> < < </space/> "" </space/> s e c \ n "" ; 
 # e n d i f 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> L L </space/> = </space/> l o n g </space/> l o n g ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] ; 
 i n t </space/> m a </space/> = </space/> I N T _ M A X , </space/> m b </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m a </space/> = </space/> m i n ( m a , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m b </space/> = </space/> m i n ( m b , </space/> b [ i ] ) ; 
 } 
 L L </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> + = </space/> ( L L ) ( m a x ( a [ i ] </space/> - </space/> m a , </space/> b [ i ] </space/> - </space/> m b ) ) ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> n l </space/> "" \ n "" 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> b [ n ] , </space/> m a </space/> = </space/> I N T _ M A X , </space/> m b </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m a </space/> = </space/> m i n ( m a , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m b </space/> = </space/> m i n ( m b , </space/> b [ i ] ) ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> m a , </space/> b [ i ] </space/> - </space/> m b ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> n l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 
 l l </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> c h e a c k ( ) 
 { 
 l o n g </space/> l o n g </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l o n g </space/> l o n g </space/> a r r [ n ] , </space/> b r r [ n ] ; 
 c i n </space/> > > </space/> a r r [ 0 ] ; 
 l o n g </space/> l o n g </space/> t o p m i n </space/> = </space/> a r r [ 0 ] ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 t o p m i n </space/> = </space/> m i n ( t o p m i n , </space/> a r r [ i ] ) ; 
 } 
 c i n </space/> > > </space/> b r r [ 0 ] ; 
 l o n g </space/> l o n g </space/> b o t t o m m i n </space/> = </space/> b r r [ 0 ] ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b r r [ i ] ; 
 b o t t o m m i n </space/> = </space/> m i n ( b o t t o m m i n , </space/> b r r [ i ] ) ; 
 } 
 l o n g </space/> l o n g </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> + = </space/> m a x ( a r r [ i ] </space/> - </space/> t o p m i n , </space/> b r r [ i ] </space/> - </space/> b o t t o m m i n ) ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - </space/> > </space/> 0 ) 
 { 
 c h e a c k ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c h r o n o > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 l l </space/> a [ 1 2 3 4 5 6 7 ] , </space/> b [ 1 2 3 4 5 6 7 ] , </space/> c , </space/> d , </space/> e , </space/> f , </space/> g , </space/> h , </space/> i , </space/> j , </space/> k , </space/> l , </space/> m , </space/> n , </space/> t , </space/> a n s , </space/> s u m , </space/> n u m , </space/> t e s 1 , </space/> t e s 2 , </space/> x , </space/> y ; 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 x </space/> = </space/> 1 2 3 4 5 6 7 8 9 0 0 ; 
 y </space/> = </space/> x ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 x </space/> = </space/> m i n ( x , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 y </space/> = </space/> m i n ( y , </space/> b [ i ] ) ; 
 } 
 s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> x , </space/> b [ i ] </space/> - </space/> y ) ; 
 } 
 c o u t </space/> < < </space/> s u m ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t o t a l _ t e s t c a s e ; 
 c i n </space/> > > </space/> t o t a l _ t e s t c a s e ; 
 w h i l e </space/> ( t o t a l _ t e s t c a s e - - ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l o n g </space/> l o n g </space/> i n t </space/> a r r [ n ] , </space/> a r r 2 [ n ] , </space/> m i n 1 , </space/> m i n 2 ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 m i n 1 </space/> = </space/> a r r [ i ] ; 
 e l s e </space/> i f </space/> ( a r r [ i ] </space/> < </space/> m i n 1 ) 
 m i n 1 </space/> = </space/> a r r [ i ] ; 
 } 
 f o r </space/> ( l o n g </space/> l o n g </space/> i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r 2 [ i ] ; 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 m i n 2 </space/> = </space/> a r r 2 [ i ] ; 
 e l s e </space/> i f </space/> ( a r r 2 [ i ] </space/> < </space/> m i n 2 ) 
 m i n 2 </space/> = </space/> a r r 2 [ i ] ; 
 } 
 l o n g </space/> l o n g </space/> i n t </space/> a n s </space/> = </space/> 0 ; 
 
 f o r </space/> ( l o n g </space/> l o n g </space/> i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 
 l o n g </space/> l o n g </space/> i n t </space/> b o t h 1 </space/> = </space/> ( a r r [ i ] </space/> - </space/> m i n 1 ) ; 
 l o n g </space/> l o n g </space/> i n t </space/> b o t h 2 </space/> = </space/> ( a r r 2 [ i ] </space/> - </space/> m i n 2 ) , </space/> b o t h ; 
 i f </space/> ( b o t h 1 </space/> < </space/> b o t h 2 ) 
 { 
 b o t h </space/> = </space/> b o t h 1 ; 
 } 
 e l s e 
 b o t h </space/> = </space/> b o t h 2 ; 
 l o n g </space/> l o n g </space/> i n t </space/> o n e 1 </space/> = </space/> a r r [ i ] </space/> - </space/> m i n 1 </space/> - </space/> b o t h , </space/> o n e 2 </space/> = </space/> a r r 2 [ i ] </space/> - </space/> m i n 2 </space/> - </space/> b o t h ; 
 a n s </space/> + = </space/> b o t h </space/> + </space/> o n e 1 </space/> + </space/> o n e 2 ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> E x a m p l e 
 / / </space/> i n p u t C o p y 
 / / </space/> 5 
 / / </space/> 3 
 / / </space/> 3 </space/> 5 </space/> 6 
 / / </space/> 3 </space/> 2 </space/> 3 
 / / </space/> 5 
 / / </space/> 1 </space/> 2 </space/> 3 </space/> 4 </space/> 5 
 / / </space/> 5 </space/> 4 </space/> 3 </space/> 2 </space/> 1 
 / / </space/> 3 
 / / </space/> 1 </space/> 1 </space/> 1 
 / / </space/> 2 </space/> 2 </space/> 2 
 / / </space/> 6 
 / / </space/> 1 </space/> 1 0 0 0 0 0 0 0 0 0 </space/> 1 0 0 0 0 0 0 0 0 0 </space/> 1 0 0 0 0 0 0 0 0 0 </space/> 1 0 0 0 0 0 0 0 0 0 </space/> 1 0 0 0 0 0 0 0 0 0 
 / / </space/> 1 </space/> 1 </space/> 1 </space/> 1 </space/> 1 </space/> 1 
 / / </space/> 3 
 / / </space/> 1 0 </space/> 1 2 </space/> 8 
 / / </space/> 7 </space/> 5 </space/> 4 
 / / </space/> o u t p u t C o p y 
 / / </space/> 6 
 / / </space/> 1 6 
 / / </space/> 0 
 / / </space/> 4 9 9 9 9 9 9 9 9 5 
 / / </space/> 7 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i l l </space/> i n t </space/> l o n g </space/> l o n g 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> y o u r </space/> c o d e </space/> g o e s </space/> h e r e 
 i l l </space/> t , </space/> i ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 i l l </space/> n u m , </space/> j ; 
 c i n </space/> > > </space/> n u m ; 
 i l l </space/> a [ n u m ] , </space/> b [ n u m ] ; 
 i l l </space/> m i n 1 </space/> = </space/> I N T _ M A X , </space/> m i n 2 </space/> = </space/> I N T _ M A X ; 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n u m ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> a [ j ] ; 
 m i n 1 </space/> = </space/> m i n ( m i n 1 , </space/> a [ j ] ) ; 
 } 
 / / </space/> c o u t < < m i n 1 < < e n d l ; 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n u m ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> b [ j ] ; 
 m i n 2 </space/> = </space/> m i n ( m i n 2 , </space/> b [ j ] ) ; 
 } 
 
 i l l </space/> m a x 3 , </space/> t 3 , </space/> t 4 , </space/> m i n 3 , </space/> t 1 , </space/> t 2 , </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n u m ; </space/> j + + ) 
 { 
 
 t 3 </space/> = </space/> a [ j ] </space/> - </space/> m i n 1 ; 
 t 4 </space/> = </space/> b [ j ] </space/> - </space/> m i n 2 ; 
 
 m a x 3 </space/> = </space/> m a x ( t 3 , </space/> t 4 ) ; 
 
 a n s </space/> = </space/> a n s </space/> + </space/> m a x 3 ; 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < l o n g </space/> i n t > </space/> a ( n ) ; 
 v e c t o r < l o n g </space/> i n t > </space/> b ( n ) ; 
 l o n g </space/> i n t </space/> A </space/> = </space/> 1 0 0 0 0 0 0 0 0 1 ; 
 l o n g </space/> i n t </space/> B </space/> = </space/> 1 0 0 0 0 0 0 0 0 1 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 i f </space/> ( a [ i ] </space/> < </space/> A ) 
 A </space/> = </space/> a [ i ] ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 
 i f </space/> ( b [ i ] </space/> < </space/> B ) 
 B </space/> = </space/> b [ i ] ; 
 } 
 
 
 i n t </space/> i </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> i n t </space/> c o u n t </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u n t </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> A , </space/> b [ i ] </space/> - </space/> B ) ; 
 } 
 c o u t </space/> < < </space/> c o u n t </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 / * </space/> </space/> </space/> </space/> </space/> </space/> * / 
 / * </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> * / 
 l o n g </space/> l o n g </space/> a r r [ 1 0 0 0 0 0 0 1 ] ; 
 l o n g </space/> l o n g </space/> a r r 1 [ 1 0 0 0 0 0 0 9 ] ; 
 / / </space/> l o n g </space/> l o n g </space/> b r r [ 1 0 0 0 0 0 9 ] ; 
 / / </space/> l o n g </space/> l o n g </space/> a r r 2 [ 1 0 0 1 ] [ 1 0 0 1 ] ; 
 # d e f i n e </space/> I </space/> i n t 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> L L </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> U L L </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> D </space/> d o u b l e 
 # d e f i n e </space/> F </space/> f l o a t 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 # d e f i n e </space/> M A X </space/> 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 
 # d e f i n e </space/> L L M A X </space/> 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 4 
 / / </space/> c h a r </space/> s [ 1 0 0 0 0 0 0 0 0 ] </space/> = </space/> { } ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / / </space/> i n t </space/> a n s [ 1 0 0 0 0 7 ] ; 
 / / </space/> s t r i n g </space/> * s = n e w </space/> s t r i n g [ n ] ; 
 / / </space/> s t r i n g </space/> s s [ 1 0 0 0 0 9 ] ; 
 b o o l </space/> c o m p ( s t r i n g </space/> a , </space/> s t r i n g </space/> b ) 
 { 
 r e t u r n </space/> a . s i z e ( ) </space/> < </space/> b . s i z e ( ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( N U L L ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 L L </space/> m n o r a n g e </space/> = </space/> I N T _ M A X , </space/> m n c a n d y </space/> = </space/> I N T _ M A X ; 
 v e c t o r < L L > </space/> c a n d y ( n ) , </space/> o r a n g e ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> c a n d y [ i ] ; 
 m n c a n d y </space/> = </space/> m i n ( m n c a n d y , </space/> c a n d y [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> o r a n g e [ i ] ; 
 m n o r a n g e </space/> = </space/> m i n ( m n o r a n g e , </space/> o r a n g e [ i ] ) ; 
 } 
 L L </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> + = </space/> m a x ( c a n d y [ i ] </space/> - </space/> m n c a n d y , </space/> o r a n g e [ i ] </space/> - </space/> m n o r a n g e ) ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 r e p ( i , </space/> t ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 i n t </space/> b [ n ] ; 
 i n t </space/> m i n a </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 i n t </space/> m i n b </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 r e p ( j , </space/> n ) 
 { 
 c i n </space/> > > </space/> a [ j ] ; 
 m i n a </space/> = </space/> m i n ( m i n a , </space/> a [ j ] ) ; 
 } 
 r e p ( j , </space/> n ) 
 { 
 c i n </space/> > > </space/> b [ j ] ; 
 m i n b </space/> = </space/> m i n ( m i n b , </space/> b [ j ] ) ; 
 } 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 r e p ( j , </space/> n ) 
 { 
 i f </space/> ( a [ j ] </space/> = = </space/> m i n a </space/> & & </space/> b [ j ] </space/> = = </space/> m i n b ) 
 c o n t i n u e ; 
 i n t </space/> t e m p </space/> = </space/> m i n ( a [ j ] </space/> - </space/> m i n a , </space/> b [ j ] </space/> - </space/> m i n b ) ; 
 / / </space/> c o u t < < t e m p < < e n d l ; 
 a n s </space/> + = </space/> ( a [ j ] </space/> - </space/> m i n a </space/> + </space/> b [ j ] </space/> - </space/> m i n b </space/> - </space/> t e m p ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 
 # d e f i n e </space/> m a x ( A , </space/> B ) </space/> ( ( A ) </space/> > </space/> ( B ) </space/> ? </space/> ( A ) </space/> : </space/> ( B ) ) 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> i , </space/> a [ 5 1 ] , </space/> b [ 5 1 ] ; 
 l o n g </space/> l o n g </space/> m o v e s </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 b [ n ] </space/> = </space/> a [ n ] </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d "" , </space/> a </space/> + </space/> i ) ; 
 i f </space/> ( a [ i ] </space/> < </space/> a [ n ] ) 
 a [ n ] </space/> = </space/> a [ i ] ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d "" , </space/> b </space/> + </space/> i ) ; 
 i f </space/> ( b [ i ] </space/> < </space/> b [ n ] ) 
 b [ n ] </space/> = </space/> b [ i ] ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 m o v e s </space/> + = </space/> m a x ( a [ i ] </space/> - </space/> a [ n ] , </space/> b [ i ] </space/> - </space/> b [ n ] ) ; 
 p r i n t f ( "" % I 6 4 d \ n "" , </space/> m o v e s ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> F O R ( i , </space/> j , </space/> k ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> j ; </space/> i </space/> < </space/> k ; </space/> i + + ) 
 # d e f i n e </space/> F O R D ( i , </space/> j , </space/> k ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> j ; </space/> i </space/> > = </space/> k ; </space/> i - - ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 / / </space/> M a k e </space/> s u r e </space/> n o </space/> o v e r f l o w </space/> p r o b l e m s 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 / / </space/> # d e f i n e </space/> x </space/> f i r s t 
 / / </space/> # d e f i n e </space/> y </space/> s e c o n d 
 # d e f i n e </space/> V A R ( i , </space/> n ) </space/> _ _ t y p e o f ( n ) </space/> i </space/> = </space/> ( n ) 
 # d e f i n e </space/> F O R E A C H ( i , </space/> c ) </space/> f o r </space/> ( V A R ( i , </space/> ( c ) . b e g i n ( ) ) ; </space/> i </space/> ! = </space/> ( c ) . e n d ( ) ; </space/> i + + ) 
 # d e f i n e </space/> F O R D E A C H ( i , </space/> c ) </space/> f o r </space/> ( V A R ( i , </space/> ( c ) . r b e g i n ( ) ) , </space/> i </space/> ! = </space/> ( c ) . r e n d ( ) ; </space/> i + + ) 
 # d e f i n e </space/> R E P ( i , </space/> n ) </space/> F O R ( i , </space/> 0 , </space/> n ) 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 0 0 0 0 0 0 0 0 9 ; 
 c o n s t </space/> l o n g </space/> l o n g </space/> I N F L L </space/> = </space/> ( l l ) I N F </space/> * </space/> ( l l ) I N F ; 
 c o n s t </space/> l d </space/> E P S </space/> = </space/> 1 0 e - 9 ; 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 i n t </space/> c e i l _ f u n c ( f l o a t </space/> x , </space/> f l o a t </space/> y ) 
 { 
 i n t </space/> z </space/> = </space/> x </space/> / </space/> y ; 
 f l o a t </space/> w </space/> = </space/> x </space/> / </space/> y ; 
 
 i f </space/> ( w </space/> - </space/> z </space/> < </space/> 0 . 0 0 0 0 0 0 0 0 1 ) 
 { 
 r e t u r n </space/> z ; 
 } 
 e l s e 
 { 
 r e t u r n </space/> z </space/> + </space/> 1 ; 
 } 
 } 
 i n t </space/> f l o o r _ f u n c ( f l o a t </space/> x , </space/> f l o a t </space/> y ) 
 { 
 i n t </space/> z </space/> = </space/> x </space/> / </space/> y ; 
 f l o a t </space/> w </space/> = </space/> x </space/> / </space/> y ; 
 
 i f </space/> ( w </space/> - </space/> z </space/> < </space/> 0 . 0 0 0 0 0 0 0 0 1 ) 
 { 
 r e t u r n </space/> z ; 
 } 
 e l s e 
 { 
 r e t u r n </space/> z </space/> + </space/> 1 ; 
 } 
 } 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 i n t </space/> m i n _ a </space/> = </space/> I N F ; 
 i n t </space/> m i n _ b </space/> = </space/> I N F ; 
 
 i n t </space/> a [ n ] ; 
 i n t </space/> b [ n ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 m i n _ a </space/> = </space/> m i n ( m i n _ a , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 m i n _ b </space/> = </space/> m i n ( m i n _ b , </space/> b [ i ] ) ; 
 } 
 
 i n t </space/> t o t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a [ i ] </space/> - = </space/> m i n _ a ; 
 b [ i ] </space/> - = </space/> m i n _ b ; 
 t o t </space/> + = </space/> m a x ( a [ i ] , </space/> b [ i ] ) ; 
 } 
 c o u t </space/> < < </space/> t o t </space/> < < </space/> "" \ n "" ; 
 } 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 u s i n g </space/> V </space/> = </space/> v e c t o r < T > ; 
 t e m p l a t e </space/> < c l a s s </space/> T , </space/> c l a s s </space/> U > 
 u s i n g </space/> M </space/> = </space/> u n o r d e r e d _ m a p < T , </space/> U > ; 
 u s i n g </space/> F </space/> = </space/> d o u b l e ; 
 u s i n g </space/> S </space/> = </space/> s t r i n g ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> v i </space/> = </space/> V < i n t > ; 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> r e p i ( i , </space/> s , </space/> e ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> s ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 r e p ( t i , </space/> t ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v i </space/> a ( n ) , </space/> b ( n ) ; 
 r e p ( i , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 r e p ( i , </space/> n ) </space/> c i n </space/> > > </space/> b [ i ] ; 
 i n t </space/> m a </space/> = </space/> * m i n _ e l e m e n t ( a l l ( a ) ) ; 
 i n t </space/> m b </space/> = </space/> * m i n _ e l e m e n t ( a l l ( b ) ) ; 
 l l </space/> s </space/> = </space/> 0 ; 
 r e p ( i , </space/> n ) 
 { 
 i n t </space/> a 2 </space/> = </space/> a [ i ] </space/> - </space/> m a , </space/> b 2 </space/> = </space/> b [ i ] </space/> - </space/> m b ; 
 i n t </space/> c </space/> = </space/> m i n ( a 2 , </space/> b 2 ) ; 
 s </space/> + = </space/> a 2 </space/> + </space/> b 2 </space/> - </space/> c ; 
 } 
 c o u t </space/> < < </space/> s </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> n ; 
 l l </space/> s u m </space/> = </space/> 0 ; 
 i n t </space/> a [ n ] ; 
 i n t </space/> b [ n ] ; 
 i n t </space/> m i n a </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 , </space/> m i n b </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> a [ j ] ; 
 i f </space/> ( a [ j ] </space/> < </space/> m i n a ) 
 { 
 m i n a </space/> = </space/> a [ j ] ; 
 } 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> b [ j ] ; 
 i f </space/> ( b [ j ] </space/> < </space/> m i n b ) 
 { 
 m i n b </space/> = </space/> b [ j ] ; 
 } 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 i f </space/> ( b [ j ] </space/> - </space/> m i n b </space/> > </space/> a [ j ] </space/> - </space/> m i n a ) 
 { 
 s u m </space/> + = </space/> b [ j ] </space/> - </space/> m i n b ; 
 } 
 e l s e 
 { 
 s u m </space/> + = </space/> a [ j ] </space/> - </space/> m i n a ; 
 } 
 / / </space/> c o u t < < s u m < < e n d l ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> t c ; 
 c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> n , </space/> a m </space/> = </space/> I N T _ M A X , </space/> b m </space/> = </space/> I N T _ M A X , </space/> i , </space/> a n s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l o n g </space/> l o n g </space/> i n t > </space/> a ( n ) , </space/> b ( n ) ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a m </space/> = </space/> m i n ( a m , </space/> a [ i ] ) ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> b [ i ] ; 
 b m </space/> = </space/> m i n ( b m , </space/> b [ i ] ) ; 
 } 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a [ i ] </space/> - = </space/> a m ; 
 b [ i ] </space/> - = </space/> b m ; 
 a n s </space/> + = </space/> m a x ( a [ i ] , </space/> b [ i ] ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f o r e ( i , </space/> l , </space/> r ) </space/> \ 
 f o r </space/> ( a u t o </space/> i </space/> = </space/> ( l ) </space/> - </space/> ( ( l ) </space/> > </space/> ( r ) ) ; </space/> i </space/> ! = </space/> ( r ) </space/> - </space/> ( ( l ) </space/> > </space/> ( r ) ) ; </space/> i </space/> + = </space/> 1 </space/> - </space/> 2 </space/> * </space/> ( ( l ) </space/> > </space/> ( r ) ) ) 
 # d e f i n e </space/> c e i l ( n , </space/> k ) </space/> ( ( ( n ) </space/> + </space/> ( ( k ) - 1 ) ) </space/> / </space/> ( k ) ) 
 # d e f i n e </space/> a l l ( a ) </space/> b e g i n ( a ) , </space/> e n d ( a ) 
 # d e f i n e </space/> s z ( a ) </space/> i n t ( a . s i z e ( ) ) 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 
 # i f d e f </space/> L O C A L 
 # i n c l u d e </space/> "" . . / d e b u g . h "" 
 # e l s e 
 # d e f i n e </space/> d e b u g ( . . . ) 
 # e n d i f 
 
 u s i n g </space/> l l i </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> l d </space/> = </space/> l o n g </space/> d o u b l e ; 
 u s i n g </space/> i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 u s i n g </space/> v i </space/> = </space/> v e c t o r < i n t > ; 
 u s i n g </space/> v i i </space/> = </space/> v e c t o r < i i > ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 i n t </space/> a , </space/> b ; 
 # d e f i n e </space/> s q ( x ) </space/> ( x ) </space/> * </space/> ( x ) 
 
 v o i d </space/> t e s t C a s e ( ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 
 c o u t </space/> < < </space/> m i n ( { </space/> s q ( m a x ( a </space/> + </space/> a , </space/> b ) ) , </space/> s q ( m a x ( b </space/> + </space/> b , </space/> a ) ) , </space/> s q ( m a x ( a </space/> + </space/> b , </space/> b ) ) </space/> } ) </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n . t i e ( 0 ) - > s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t c ; 
 c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 t e s t C a s e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 l o n g </space/> t ; 
 s c a n f ( "" % l d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> a , </space/> b ; 
 s c a n f ( "" % l d </space/> % l d "" , </space/> & a , </space/> & b ) ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 l o n g </space/> x </space/> = </space/> a ; 
 a </space/> = </space/> b ; 
 b </space/> = </space/> x ; 
 } 
 l o n g </space/> s i d e </space/> = </space/> ( 2 </space/> * </space/> a </space/> > </space/> b ) </space/> ? </space/> ( 2 </space/> * </space/> a ) </space/> : </space/> b ; 
 p r i n t f ( "" % l d \ n "" , </space/> s i d e </space/> * </space/> s i d e ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( b </space/> > </space/> a ) 
 s w a p ( a , </space/> b ) ; 
 
 c o u t </space/> < < </space/> m a x ( 2 </space/> * </space/> b , </space/> a ) </space/> * </space/> m a x ( 2 </space/> * </space/> b , </space/> a ) </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> s o l ; 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 s o l </space/> = </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) ; 
 } 
 e l s e 
 { 
 s o l </space/> = </space/> m a x ( a , </space/> 2 </space/> * </space/> b ) ; 
 } 
 c o u t </space/> < < </space/> s o l </space/> * </space/> s o l </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 c o u t </space/> < < </space/> ( 2 </space/> * </space/> a </space/> * </space/> 2 </space/> * </space/> b ) </space/> < < </space/> e n d l ; 
 e l s e </space/> i f </space/> ( a </space/> > </space/> b ) 
 { 
 i f </space/> ( 2 </space/> * </space/> b </space/> > </space/> a ) 
 c o u t </space/> < < </space/> ( 4 </space/> * </space/> b </space/> * </space/> b ) </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> ( a </space/> * </space/> a ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i f </space/> ( 2 </space/> * </space/> a </space/> > </space/> b ) 
 c o u t </space/> < < </space/> ( 4 </space/> * </space/> a </space/> * </space/> a ) </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> ( b </space/> * </space/> b ) </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 c o u t </space/> < < </space/> m a x ( m a x ( n , </space/> m ) , </space/> ( m i n ( n , </space/> m ) ) </space/> * </space/> 2 ) </space/> * </space/> m a x ( m a x ( n , </space/> m ) , </space/> ( m i n ( n , </space/> m ) ) </space/> * </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> a , </space/> b , </space/> x , </space/> y , </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 x </space/> = </space/> m a x ( a , </space/> b ) ; 
 y </space/> = </space/> m i n ( a , </space/> b ) ; 
 
 i f </space/> ( y </space/> * </space/> 2 </space/> > </space/> x ) 
 { 
 c o u t </space/> < < </space/> ( y </space/> * </space/> 2 ) </space/> * </space/> ( y </space/> * </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> x </space/> * </space/> x </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> M E M ( a , </space/> b ) </space/> m e m s e t ( a , </space/> ( b ) , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> F O R ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> R F O R ( i , </space/> n ) </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 # d e f i n e </space/> a l l ( c o n t ) </space/> c o n t . b e g i n ( ) , </space/> c o n t . e n d ( ) 
 # d e f i n e </space/> r a l l ( c o n t ) </space/> c o n t . e n d ( ) , </space/> c o n t . b e g i n ( ) 
 # d e f i n e </space/> E A C H ( i t , </space/> l ) </space/> f o r </space/> ( a u t o </space/> i t </space/> = </space/> l . b e g i n ( ) ; </space/> i t </space/> ! = </space/> l . e n d ( ) ; </space/> i t + + ) 
 # d e f i n e </space/> I N ( A , </space/> B , </space/> C ) </space/> a s s e r t ( B </space/> < = </space/> A </space/> & & </space/> A </space/> < = </space/> C ) 
 # d e f i n e </space/> M P </space/> m a k e _ p a i r 
 # d e f i n e </space/> P B </space/> p u s h _ b a c k 
 # d e f i n e </space/> I N F </space/> ( i n t ) 1 e 9 
 # d e f i n e </space/> E P S </space/> 1 e - 9 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> r e a d ( t y p e ) </space/> r e a d I n t < t y p e > ( ) 
 # d e f i n e </space/> p r i n t ( t ) </space/> c o u t </space/> < < </space/> t </space/> < < </space/> e n d l 
 # d e f i n e </space/> L L </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> v t </space/> v e c t o r 
 c o n s t </space/> i n t </space/> a m a x </space/> = </space/> 1 0 0 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> s i d e </space/> = </space/> m i n ( m a x ( 2 </space/> * </space/> b , </space/> a ) , </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) ) ; 
 c o u t </space/> < < </space/> s i d e </space/> * </space/> s i d e </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> i , </space/> j , </space/> t , </space/> a , </space/> b , </space/> c ; 
 c i n </space/> > > </space/> t ; 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 a </space/> * = </space/> 2 ; 
 b </space/> * = </space/> 2 ; 
 c o u t </space/> < < </space/> a </space/> * </space/> b </space/> < < </space/> e n d l ; 
 } 
 
 e l s e </space/> i f </space/> ( a </space/> > </space/> b ) 
 { 
 i f </space/> ( b </space/> > = </space/> c e i l ( a </space/> / </space/> 2 . 0 ) ) 
 { 
 c </space/> = </space/> ( b </space/> * </space/> 2 ) </space/> - </space/> a ; 
 a </space/> + = </space/> c ; 
 c o u t </space/> < < </space/> a </space/> * </space/> b </space/> * </space/> 2 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 c o u t </space/> < < </space/> a </space/> * </space/> a </space/> < < </space/> e n d l ; 
 } 
 
 e l s e 
 { 
 i f </space/> ( a </space/> > = </space/> c e i l ( b </space/> / </space/> 2 . 0 ) ) 
 { 
 c </space/> = </space/> ( a </space/> * </space/> 2 ) </space/> - </space/> b ; 
 b </space/> + = </space/> c ; 
 c o u t </space/> < < </space/> a </space/> * </space/> b </space/> * </space/> 2 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 c o u t </space/> < < </space/> b </space/> * </space/> b </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> x , </space/> y ; 
 c i n </space/> > > </space/> x </space/> > > </space/> y ; 
 i n t </space/> r e s ; 
 i f </space/> ( m i n ( x , </space/> y ) </space/> * </space/> 2 </space/> < </space/> m a x ( x , </space/> y ) ) 
 { 
 r e s </space/> = </space/> m a x ( x , </space/> y ) ; 
 } 
 e l s e 
 { 
 r e s </space/> = </space/> m i n ( x , </space/> y ) </space/> * </space/> 2 ; 
 } 
 r e s </space/> = </space/> p o w ( ( r e s ) , </space/> 2 ) ; 
 c o u t </space/> < < </space/> r e s </space/> < < </space/> e n d l ; 
 } 
 } 
 / * </space/> s t u f f </space/> y o u </space/> s h o u l d </space/> l o o k </space/> f o r 
 * </space/> i n t </space/> o v e r f l o w , </space/> a r r a y </space/> b o u n d s 
 * </space/> s p e c i a l </space/> c a s e s </space/> ( n = 1 ? ) 
 * </space/> d o </space/> s m t h </space/> i n s t e a d </space/> o f </space/> n o t h i n g </space/> a n d </space/> s t a y </space/> o r g a n i z e d 
 * </space/> W R I T E </space/> S T U F F </space/> D O W N 
 * </space/> D O N ' T </space/> G E T </space/> S T U C K </space/> O N </space/> O N E </space/> A P P R O A C H 
 * / 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < n u m e r i c > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / * 
 c o n s t </space/> i n t </space/> M A X _ I N T </space/> = </space/> 1 0 0 ; 
 t e m p l a t e < c l a s s </space/> t > 
 c l a s s </space/> S t a c k { 
 p r i v a t e : 
 t </space/> i t e m [ M A X _ I N T ] ; 
 i n t </space/> t o p ; 
 p u b l i c : 
 v o i d </space/> p u s h ( t </space/> e l e m e n t ) { 
 t o p + + ; 
 i t e m [ t o p ] </space/> = </space/> e l e m e n t ; 
 } 
 b o o l </space/> e m p t y ( ) { 
 i f ( t o p </space/> = = </space/> - 1 ) { 
 r e t u r n </space/> t r u e ; 
 } e l s e { 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 v o i d </space/> p o p ( ) { 
 i f ( e m p t y ( ) ) { 
 c o u t </space/> < < </space/> "" S o r r y </space/> t h i s </space/> s t a c k </space/> i s </space/> e m p t y . "" </space/> < < </space/> "" \ n "" ; 
 } e l s e { 
 t o p - - ; 
 } 
 } 
 v o i d </space/> p o p ( t </space/> & e l e m e n t ) { 
 i f ( e m p t y ( ) ) { 
 c o u t </space/> < < </space/> "" S o r r y </space/> t h i s </space/> s t a c k </space/> i s </space/> e m p t y . "" </space/> < < </space/> "" \ n "" ; 
 } e l s e { 
 e l e m e n t </space/> = </space/> i t e m [ t o p ] ; 
 t o p - - ; 
 } 
 } 
 v o i d </space/> g e t T o p ( t </space/> & s t a c k T o p ) { 
 s t a c k T o p </space/> = </space/> i t e m [ t o p ] ; 
 c o u t </space/> < < </space/> s t a c k T o p </space/> < < </space/> "" \ n "" ; 
 } 
 v o i d </space/> p r i n t ( ) { 
 f o r ( i n t </space/> i </space/> = </space/> t o p ; </space/> i > = 0 ; </space/> i - - ) { 
 c o u t </space/> < < </space/> i t e m [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 } ; 
 i n t </space/> c o u n t e r [ 1 0 0 0 0 1 ] ; 
 * / 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a </space/> = </space/> 0 , </space/> b </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> l e n g t h 1 </space/> = </space/> m a x ( a , </space/> 2 </space/> * </space/> b ) ; 
 i n t </space/> l e n g t h 2 </space/> = </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) ; 
 i n t </space/> l e n g t h </space/> = </space/> m i n ( l e n g t h 1 , </space/> l e n g t h 2 ) ; 
 c o u t </space/> < < </space/> l e n g t h </space/> * </space/> l e n g t h </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> u l l i ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> t C a s e ; 
 c i n </space/> > > </space/> t C a s e ; 
 
 w h i l e </space/> ( t C a s e - - ) 
 { 
 i n t </space/> m , </space/> n ; 
 c i n </space/> > > </space/> m </space/> > > </space/> n ; 
 
 i n t </space/> m a x i </space/> = </space/> m a x ( m , </space/> n ) ; 
 i n t </space/> m i n i </space/> = </space/> m i n ( m , </space/> n ) ; 
 
 i f </space/> ( m a x i </space/> = = </space/> m i n i ) 
 { 
 c o u t </space/> < < </space/> p o w ( m a x i </space/> * </space/> 2 , </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 e l s e </space/> i f </space/> ( m i n i </space/> * </space/> 2 </space/> < = </space/> m a x i ) 
 { 
 c o u t </space/> < < </space/> p o w ( m a x i , </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> p o w ( m i n i </space/> * </space/> 2 , </space/> 2 ) </space/> < < </space/> e n d l ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O 3 "" ) 
 # d e f i n e </space/> _ C R T _ S E C U R E _ N O _ W A R N I N G S 
 # d e f i n e </space/> _ C R T _ D I S A B L E _ P E R F C R I T _ L O C K S 
 # d e f i n e </space/> P O P C N T I ( a ) </space/> _ _ b u i l t i n _ p o p c o u n t ( a ) 
 # d e f i n e </space/> F a s t I O ( ) </space/> i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) , </space/> c i n . t i e ( 0 ) ; 
 # d e f i n e </space/> I O ( ) </space/> a s s e r t ( f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r t "" , </space/> s t d i n ) ) , </space/> a s s e r t ( f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w t "" , </space/> s t d o u t ) ) 
 # d e f i n e </space/> R E P ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( n ) ; </space/> + + i ) 
 # d e f i n e </space/> R E P E ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> ( n ) ; </space/> + + i ) 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # i f d e f </space/> _ L O C A L _ D E F I N E 
 # d e f i n e </space/> e r r o r ( a r g s . . . ) </space/> \ 
 { </space/> \ 
 c e r r </space/> < < </space/> "" L I N E </space/> "" </space/> < < </space/> _ _ L I N E _ _ ; </space/> \ 
 s t r i n g </space/> _ s </space/> = </space/> # a r g s ; </space/> \ 
 r e p l a c e ( _ s . b e g i n ( ) , </space/> _ s . e n d ( ) , </space/> ' , ' , </space/> ' </space/> ' ) ; </space/> \ 
 s t r i n g s t r e a m </space/> _ s s ( _ s ) ; </space/> \ 
 i s t r e a m _ i t e r a t o r < s t r i n g > </space/> _ i t ( _ s s ) ; </space/> \ 
 e r r ( _ i t , </space/> a r g s ) ; </space/> \ 
 c e r r </space/> < < </space/> e n d l ; </space/> \ 
 } 
 v o i d </space/> e r r ( i s t r e a m _ i t e r a t o r < s t r i n g > </space/> i t ) 
 { 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T , </space/> t y p e n a m e . . . </space/> A r g s > 
 v o i d </space/> e r r ( i s t r e a m _ i t e r a t o r < s t r i n g > </space/> i t , </space/> T </space/> a , </space/> A r g s . . . </space/> a r g s ) 
 { 
 c e r r </space/> < < </space/> ' </space/> ' </space/> < < </space/> * i t </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> a ; 
 e r r ( + + i t , </space/> a r g s . . . ) ; 
 } 
 # e n d i f 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> O O l </space/> = </space/> 3 e 1 8 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 1 , </space/> M </space/> = </space/> 3 e 4 </space/> + </space/> 1 , </space/> O O </space/> = </space/> 1 e 9 , </space/> O O m </space/> = </space/> 0 x 3 f 3 f 3 f 3 f , </space/> M O D </space/> = </space/> 1 e 7 </space/> + </space/> 7 ; 
 c o n s t </space/> d o u b l e </space/> E P S </space/> = </space/> 1 e - 1 0 ; 
 i n t </space/> c a l c ( i n t </space/> n , </space/> i n t </space/> m ) 
 { 
 i f </space/> ( m </space/> > </space/> ( 2 </space/> * </space/> n ) ) 
 r e t u r n </space/> m ; 
 
 r e t u r n </space/> 2 </space/> * </space/> n ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t c ; 
 s c a n f ( "" % d "" , </space/> & t c ) ; 
 i n t </space/> a , </space/> b ; 
 
 w h i l e </space/> ( t c - - ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & a , </space/> & b ) ; 
 i n t </space/> t o t 1 </space/> = </space/> c a l c ( a , </space/> b ) ; 
 i n t </space/> t o t 2 </space/> = </space/> c a l c ( b , </space/> a ) ; 
 
 
 i n t </space/> r e s 1 </space/> = </space/> t o t 1 </space/> * </space/> t o t 1 ; 
 i n t </space/> r e s 2 </space/> = </space/> t o t 2 </space/> * </space/> t o t 2 ; 
 i f </space/> ( r e s 1 </space/> < </space/> r e s 2 ) 
 p r i n t f ( "" % d \ n "" , </space/> r e s 1 ) ; 
 e l s e 
 p r i n t f ( "" % d \ n "" , </space/> r e s 2 ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O 3 "" ) 
 # d e f i n e </space/> _ C R T _ S E C U R E _ N O _ W A R N I N G S 
 # d e f i n e </space/> _ C R T _ D I S A B L E _ P E R F C R I T _ L O C K S 
 # d e f i n e </space/> P O P C N T I ( a ) </space/> _ _ b u i l t i n _ p o p c o u n t ( a ) 
 # d e f i n e </space/> F a s t I O ( ) </space/> i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) , </space/> c i n . t i e ( 0 ) ; 
 # d e f i n e </space/> I O ( ) </space/> a s s e r t ( f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r t "" , </space/> s t d i n ) ) , </space/> a s s e r t ( f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w t "" , </space/> s t d o u t ) ) 
 # d e f i n e </space/> R E P ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( n ) ; </space/> + + i ) 
 # d e f i n e </space/> R E P E ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> ( n ) ; </space/> + + i ) 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # i f d e f </space/> _ L O C A L _ D E F I N E 
 # d e f i n e </space/> e r r o r ( a r g s . . . ) </space/> \ 
 { </space/> \ 
 c e r r </space/> < < </space/> "" L I N E </space/> "" </space/> < < </space/> _ _ L I N E _ _ ; </space/> \ 
 s t r i n g </space/> _ s </space/> = </space/> # a r g s ; </space/> \ 
 r e p l a c e ( _ s . b e g i n ( ) , </space/> _ s . e n d ( ) , </space/> ' , ' , </space/> ' </space/> ' ) ; </space/> \ 
 s t r i n g s t r e a m </space/> _ s s ( _ s ) ; </space/> \ 
 i s t r e a m _ i t e r a t o r < s t r i n g > </space/> _ i t ( _ s s ) ; </space/> \ 
 e r r ( _ i t , </space/> a r g s ) ; </space/> \ 
 c e r r </space/> < < </space/> e n d l ; </space/> \ 
 } 
 v o i d </space/> e r r ( i s t r e a m _ i t e r a t o r < s t r i n g > </space/> i t ) 
 { 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T , </space/> t y p e n a m e . . . </space/> A r g s > 
 v o i d </space/> e r r ( i s t r e a m _ i t e r a t o r < s t r i n g > </space/> i t , </space/> T </space/> a , </space/> A r g s . . . </space/> a r g s ) 
 { 
 c e r r </space/> < < </space/> ' </space/> ' </space/> < < </space/> * i t </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> a ; 
 e r r ( + + i t , </space/> a r g s . . . ) ; 
 } 
 # e n d i f 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> O O l </space/> = </space/> 3 e 1 8 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 1 , </space/> M </space/> = </space/> 3 e 4 </space/> + </space/> 1 , </space/> O O </space/> = </space/> 1 e 9 , </space/> O O m </space/> = </space/> 0 x 3 f 3 f 3 f 3 f , </space/> M O D </space/> = </space/> 1 e 7 </space/> + </space/> 7 ; 
 c o n s t </space/> d o u b l e </space/> E P S </space/> = </space/> 1 e - 1 0 ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t c ; 
 s c a n f ( "" % d "" , </space/> & t c ) ; 
 i n t </space/> a , </space/> b ; 
 
 w h i l e </space/> ( t c - - ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & a , </space/> & b ) ; 
 i n t </space/> s </space/> = </space/> m i n ( m a x ( a , </space/> 2 </space/> * </space/> b ) , </space/> m a x ( b , </space/> 2 </space/> * </space/> a ) ) ; 
 p r i n t f ( "" % d \ n "" , </space/> s </space/> * </space/> s ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> i , </space/> j , </space/> x , </space/> t , </space/> a , </space/> b , </space/> r </space/> = </space/> 0 , </space/> m a x </space/> = </space/> 0 ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> x ; 
 
 w h i l e </space/> ( x - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 t </space/> = </space/> s t d : : m i n ( a , </space/> b ) ; 
 n </space/> = </space/> s t d : : m a x ( a , </space/> b ) ; 
 
 i f </space/> ( t </space/> * </space/> 2 </space/> > = </space/> n ) 
 c o u t </space/> < < </space/> 2 </space/> * </space/> t </space/> * </space/> 2 </space/> * </space/> t </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 c o u t </space/> < < </space/> n </space/> * </space/> n </space/> < < </space/> e n d l ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 i f </space/> ( 2 </space/> * </space/> a </space/> > </space/> b ) 
 c o u t </space/> < < </space/> 4 </space/> * </space/> a </space/> * </space/> a </space/> < < </space/> "" \ n "" ; 
 e l s e 
 c o u t </space/> < < </space/> b </space/> * </space/> b </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 i f </space/> ( 2 </space/> * </space/> b </space/> > </space/> a ) 
 c o u t </space/> < < </space/> 4 </space/> * </space/> b </space/> * </space/> b </space/> < < </space/> "" \ n "" ; 
 e l s e 
 c o u t </space/> < < </space/> a </space/> * </space/> a </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l o n g </space/> l o n g </space/> a , </space/> b , </space/> c ; 
 m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 c </space/> = </space/> m i n ( a , </space/> b ) ; 
 a </space/> + = </space/> ( b </space/> - </space/> c ) ; 
 i f </space/> ( a </space/> < = </space/> ( 2 </space/> * </space/> c ) ) 
 c o u t </space/> < < </space/> ( 4 </space/> * </space/> c </space/> * </space/> c ) </space/> < < </space/> ' \ n ' ; 
 e l s e 
 c o u t </space/> < < </space/> ( a </space/> * </space/> a ) </space/> < < </space/> ' \ n ' ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" - O 3 "" ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / / # d e f i n e </space/> f ( i , x , n ) </space/> f o r ( l l </space/> i = x ; i < n ; i + + ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> d e b u g ( x ) </space/> c o u t </space/> < < </space/> x </space/> < < </space/> "" \ n "" ; 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> b s </space/> b i n a r y _ s e a r c h 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 
 l l </space/> n , </space/> k , </space/> a , </space/> b , </space/> c , </space/> d , </space/> x , </space/> y , </space/> z , </space/> q ; 
 s t r i n g </space/> s ; 
 l l </space/> a r r [ 1 0 0 0 0 0 0 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 / / </space/> s t d : : c o u t </space/> < < </space/> f i x e d < < </space/> s t d : : s e t p r e c i s i o n ( 9 ) </space/> < < </space/> ' \ n ' ; 
 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l l </space/> a n s </space/> = </space/> m i n ( a , </space/> b ) </space/> * </space/> 2 ; 
 a n s </space/> = </space/> m a x ( a n s , </space/> m a x ( a , </space/> b ) ) ; 
 c o u t </space/> < < </space/> a n s </space/> * </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s t a c k > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> i n t </space/> n , </space/> q , </space/> a , </space/> b ; ; 
 / / 	 s t r i n g </space/> s , x , z ; 
 / / 	 c i n </space/> > > </space/> n </space/> > > </space/> q </space/> > > </space/> s ; 
 / / 
 / / 	 w h i l e </space/> ( q </space/> > </space/> 0 ) </space/> { 
 / / 	 	 c i n </space/> > > </space/> x ; 
 / / 	 	 i f </space/> ( x </space/> = = </space/> "" s u b s t r "" ) </space/> { 
 / / 	 	 	 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 / / 	 	 / / s t r i n g </space/> y </space/> = </space/> s . s u b s t r ( a </space/> - </space/> 1 , </space/> b ) ; 
 / / 	 	 	 i f </space/> ( a </space/> > </space/> b ) </space/> { 
 / / 	 	 	 	 c o u t </space/> < < </space/> s . s u b s t r ( b - 1 , a - b + 1 ) </space/> < < </space/> e n d l ; 
 / / 	 	 	 } 
 / / 	 	 	 e l s e </space/> { 
 / / 	 	 	 	 c o u t < < s . s u b s t r ( </space/> a </space/> - </space/> 1 , </space/> b - a + 1 ) </space/> < < </space/> e n d l ; 
 / / 	 	 	 } 
 / / 
 / / 	 	 } 
 / / 	 	 e l s e </space/> i f </space/> ( x </space/> = = </space/> "" p o p _ b a c k "" ) </space/> { 
 / / 
 / / 	 	 	 s . p o p _ b a c k ( ) ; 
 / / 	 	 } 
 / / 	 	 e l s e </space/> i f </space/> ( x </space/> = = </space/> "" f r o n t "" ) </space/> { 
 / / 
 / / 	 	 	 c o u t </space/> < < </space/> s . f r o n t ( ) </space/> < < </space/> e n d l ; 
 / / 	 	 } 
 / / 	 	 e l s e </space/> i f </space/> ( x </space/> = = </space/> "" b a c k "" ) </space/> { 
 / / 
 / / 	 	 	 c o u t </space/> < < </space/> s . b a c k ( ) </space/> < < </space/> e n d l ; 
 / / 	 	 } 
 / / 	 	 e l s e </space/> i f </space/> ( x </space/> = = </space/> "" s o r t "" ) </space/> { 
 / / 	 	 	 / / z </space/> = </space/> s ; 
 / / 	 	 	 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 / / 	 	 	 / / s t r i n g </space/> w </space/> = </space/> z . s u b s t r ( a , </space/> b ) ; 
 / / 	 	 	 i f </space/> ( a </space/> > </space/> b ) </space/> { 
 / / 	 	 	 	 s o r t ( s . b e g i n ( ) </space/> + </space/> b </space/> - </space/> 1 , </space/> s . b e g i n ( ) </space/> + </space/> a </space/> ) ; 
 / / 	 	 	 } 
 / / 	 	 	 e l s e </space/> { 
 / / 	 	 	 	 s o r t ( s . b e g i n ( ) </space/> + </space/> a </space/> - </space/> 1 , </space/> s . b e g i n ( ) </space/> + </space/> b </space/> ) ; 
 / / 	 	 	 } 
 / / 	 	 } 
 / / 	 	 e l s e </space/> i f </space/> ( x </space/> = = </space/> "" r e v e r s e "" ) </space/> { 
 / / 	 	 	 / / z </space/> = </space/> s ; 
 / / 	 	 	 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 / / 	 	 	 / / s t r i n g </space/> w </space/> = </space/> z . s u b s t r ( a , </space/> b ) ; 
 / / 
 / / 
 / / 	 	 	 i f </space/> ( a </space/> > </space/> b ) </space/> { 
 / / 	 	 	 	 r e v e r s e ( s . b e g i n ( ) </space/> + </space/> b </space/> - </space/> 1 , </space/> s . b e g i n ( ) </space/> + </space/> a ) ; 
 / / 	 	 	 } 
 / / 	 	 	 e l s e </space/> { 
 / / 	 	 	 	 r e v e r s e ( s . b e g i n ( ) </space/> + </space/> a </space/> - </space/> 1 , </space/> s . b e g i n ( ) </space/> + </space/> b ) ; 
 / / 	 	 	 } 
 / / 	 	 } 
 / / 	 	 e l s e </space/> i f </space/> ( x </space/> = = </space/> "" p r i n t "" ) </space/> { 
 / / 
 / / 	 	 	 c i n </space/> > > </space/> a ; 
 / / 	 	 	 c o u t </space/> < < </space/> s . a t ( a - 1 ) </space/> < < </space/> e n d l ; 
 / / 	 	 } 
 / / 	 	 e l s e </space/> i f </space/> ( x </space/> = = </space/> "" p u s h _ b a c k "" ) </space/> { 
 / / 	 	 	 c h a r </space/> w ; 
 / / 	 	 	 c i n </space/> > > </space/> w ; 
 / / 	 	 	 s . p u s h _ b a c k ( w ) ; 
 / / 	 	 } 
 / / 	 	 q - - ; 
 / / 	 } 
 l o n g </space/> l o n g </space/> n ; 
 c i n </space/> > > </space/> n ; 
 w h i l e </space/> ( n </space/> > </space/> 0 ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 i n t </space/> x </space/> = </space/> m a x ( b </space/> * </space/> 2 , </space/> a ) ; 
 c o u t </space/> < < </space/> x </space/> * </space/> x </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i n t </space/> x </space/> = </space/> m a x ( b , </space/> a </space/> * </space/> 2 ) ; 
 c o u t </space/> < < </space/> x </space/> * </space/> x </space/> < < </space/> e n d l ; 
 } 
 n - - ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 
 i f </space/> ( b </space/> * </space/> 2 </space/> > = </space/> a ) 
 { 
 
 c o u t </space/> < < </space/> ( b </space/> + </space/> b ) </space/> * </space/> ( b </space/> + </space/> b ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a ) </space/> * </space/> ( a ) </space/> < < </space/> e n d l ; 
 } 
 } 
 e l s e </space/> i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> ( b </space/> + </space/> b ) </space/> * </space/> ( b </space/> + </space/> b ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i f </space/> ( a </space/> * </space/> 2 </space/> > = </space/> b ) 
 { 
 
 c o u t </space/> < < </space/> ( a </space/> + </space/> a ) </space/> * </space/> ( a </space/> + </space/> a ) </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( b ) </space/> * </space/> ( b ) </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> l o n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> m i n ( a , </space/> b ) , </space/> a n s 1 </space/> = </space/> 0 ; 
 a n s </space/> * = </space/> 2 ; 
 c o u t </space/> < < </space/> m a x ( a n s , </space/> m a x ( a , </space/> b ) ) </space/> * </space/> m a x ( a n s , </space/> m a x ( a , </space/> b ) ) </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; </space/> / / </space/> n u m b e r </space/> o f </space/> t e s t </space/> c a s e 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 s c a n f ( "" % d % d "" , </space/> & a , </space/> & b ) ; 
 i n t </space/> r e s </space/> = </space/> 0 ; </space/> / / </space/> t h e </space/> m i n u m a m </space/> s q u a r 
 i f </space/> ( a </space/> < = </space/> b ) 
 { 
 a </space/> * = </space/> 2 ; 
 i f </space/> ( a </space/> > </space/> b ) 
 b </space/> + = </space/> a </space/> - </space/> b ; 
 e l s e 
 a </space/> + = </space/> b </space/> - </space/> a ; 
 r e s </space/> = </space/> a </space/> * </space/> b ; 
 } 
 e l s e 
 { 
 b </space/> * = </space/> 2 ; 
 i f </space/> ( b </space/> > </space/> a ) 
 a </space/> + = </space/> b </space/> - </space/> a ; 
 e l s e 
 b </space/> + = </space/> a </space/> - </space/> b ; 
 r e s </space/> = </space/> a </space/> * </space/> b ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> r e s ) ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n 1 </space/> = </space/> 0 , </space/> n 2 </space/> = </space/> 0 , </space/> n 3 </space/> = </space/> 0 ; 
 i n t </space/> a </space/> = </space/> 0 , </space/> b </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 n 1 </space/> = </space/> m a x ( a , </space/> 2 </space/> * </space/> b ) ; 
 n 2 </space/> = </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) ; 
 n 3 </space/> = </space/> m i n ( n 1 , </space/> n 2 ) ; 
 c o u t </space/> < < </space/> n 3 </space/> * </space/> n 3 </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> a , </space/> b ; 
 
 i n l i n e </space/> v o i d </space/> s o l v e ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & a , </space/> & b ) ; 
 i n t </space/> l e n </space/> = </space/> m i n ( m a x ( 2 </space/> * </space/> a , </space/> b ) , </space/> m a x ( a , </space/> 2 </space/> * </space/> b ) ) ; 
 c o u t </space/> < < </space/> 1 l l </space/> * </space/> l e n </space/> * </space/> l e n </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T </space/> = </space/> 1 ; 
 s c a n f ( "" % d "" , </space/> & T ) ; 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # d e f i n e </space/> _ C R T _ S E C U R E _ N O _ W A R N I N G S 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> I O </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l p 1 ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> l p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> m e m ( n , </space/> x ) </space/> m e m s e t ( n , </space/> x , </space/> s i z e o f ( n ) ) 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> r e </space/> r e t u r n 
 # d e f i n e </space/> s z </space/> s i z e ( ) 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 5 e 5 </space/> + </space/> 5 ; 
 l l </space/> t , </space/> n , </space/> m ; 
 l l </space/> a 1 [ N ] , </space/> a 2 [ N ] ; 
 v e c t o r < s e t < i n t > > </space/> v ( 2 6 ) ; 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> I O ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 / / </space/> f r e o p e n ( "" o u t . o u t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l l </space/> a n </space/> = </space/> m a x ( 2 </space/> * </space/> m i n ( n , </space/> m ) , </space/> m a x ( n , </space/> m ) ) ; 
 c o u t </space/> < < </space/> a n </space/> * </space/> a n </space/> < < </space/> e n d l ; 
 } 
 } 
 
 / * 
 
 * /",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> x </space/> = </space/> m a x ( 2 </space/> * </space/> a , </space/> b ) , </space/> y </space/> = </space/> m a x ( 2 </space/> * </space/> b , </space/> a ) ; 
 i n t </space/> a n s </space/> = </space/> m i n ( x , </space/> y ) ; 
 c o u t </space/> < < </space/> a n s </space/> * </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> n ; 
 c i n </space/> > > </space/> n ; 
 w h i l e </space/> ( n - - ) 
 { 
 i n t </space/> m , </space/> k ; 
 c i n </space/> > > </space/> m </space/> > > </space/> k ; 
 i f </space/> ( ( m </space/> > </space/> k </space/> * </space/> 2 ) </space/> | | </space/> ( m </space/> * </space/> 2 </space/> < </space/> k ) ) 
 { 
 l o n g </space/> l o n g </space/> w </space/> = </space/> m a x ( k , </space/> m ) ; 
 c o u t </space/> < < </space/> w </space/> * </space/> w </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e </space/> i f </space/> ( m </space/> = = </space/> k ) 
 { 
 l o n g </space/> l o n g </space/> l </space/> = </space/> m ; 
 l </space/> = </space/> l </space/> * </space/> 2 ; 
 c o u t </space/> < < </space/> l </space/> * </space/> l </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 l o n g </space/> l o n g </space/> b </space/> = </space/> m i n ( k , </space/> m ) ; 
 b </space/> = </space/> b </space/> * </space/> 2 ; 
 c o u t </space/> < < </space/> b </space/> * </space/> b </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t o t a l _ t e s t c a s e ; 
 c i n </space/> > > </space/> t o t a l _ t e s t c a s e ; 
 w h i l e </space/> ( t o t a l _ t e s t c a s e - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 i n t </space/> t e m p </space/> = </space/> b ; 
 b </space/> = </space/> a ; 
 a </space/> = </space/> t e m p ; 
 } 
 i f </space/> ( ( 2 </space/> * </space/> a ) </space/> > = </space/> b ) 
 { 
 c o u t </space/> < < </space/> 2 </space/> * </space/> a </space/> * </space/> 2 </space/> * </space/> a </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> b </space/> * </space/> b </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( b </space/> > </space/> a ) 
 { 
 i n t </space/> t </space/> = </space/> a ; 
 a </space/> = </space/> b ; 
 b </space/> = </space/> t ; 
 } 
 i f </space/> ( a </space/> > = </space/> 2 </space/> * </space/> b ) 
 { 
 c o u t </space/> < < </space/> a </space/> * </space/> a </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> 4 </space/> * </space/> b </space/> * </space/> b </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < b i t s e t > 
 # i n c l u d e </space/> < s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f a s t i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; 
 v o i d </space/> a n g l e s ( l l </space/> a , </space/> l l </space/> b , </space/> l l </space/> c ) 
 { 
 f l o a t </space/> a 2 </space/> = </space/> s q r t ( a ) ; 
 f l o a t </space/> b 2 </space/> = </space/> s q r t ( b ) ; 
 f l o a t </space/> c 2 </space/> = </space/> s q r t ( c ) ; 
 / / </space/> a p p l y </space/> c o s i n e </space/> l a w 
 f l o a t </space/> a l p h a </space/> = </space/> a c o s ( ( b </space/> + </space/> c </space/> - </space/> a ) </space/> / </space/> ( 2 </space/> * </space/> b 2 </space/> * </space/> c 2 ) ) ; 
 f l o a t </space/> b e t a </space/> = </space/> a c o s ( ( a </space/> + </space/> c </space/> - </space/> b ) </space/> / </space/> ( 2 </space/> * </space/> a 2 </space/> * </space/> c 2 ) ) ; 
 f l o a t </space/> g a m m a </space/> = </space/> a c o s ( ( b </space/> + </space/> a </space/> - </space/> c ) </space/> / </space/> ( 2 </space/> * </space/> b 2 </space/> * </space/> a 2 ) ) ; 
 a l p h a </space/> * = </space/> ( 1 8 0 </space/> / </space/> 3 . 1 4 ) ; 
 b e t a </space/> * = </space/> ( 1 8 0 </space/> / </space/> 3 . 1 4 ) ; 
 g a m m a </space/> * = </space/> ( 1 8 0 </space/> / </space/> 3 . 1 4 ) ; 
 c o u t </space/> < < </space/> a l p h a </space/> < < </space/> "" </space/> "" </space/> < < </space/> b e t a </space/> < < </space/> "" </space/> "" </space/> < < </space/> g a m m a </space/> < < </space/> "" \ n "" ; 
 } 
 l l </space/> d i f f ( l l </space/> n ) 
 { 
 l l </space/> a r e a </space/> = </space/> ( i n t ) s q r t ( n ) ; 
 l l </space/> l , </space/> b ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> a r e a ; </space/> i </space/> > = </space/> 1 ; </space/> - - i ) 
 { 
 i f </space/> ( n </space/> % </space/> i </space/> = = </space/> 0 ) 
 { 
 l </space/> = </space/> n </space/> / </space/> i ; 
 b </space/> = </space/> i ; 
 b r e a k ; 
 } 
 } 
 r e t u r n </space/> ( l </space/> - </space/> b ) ; 
 } 
 
 l l </space/> x o r _ n ( l l </space/> n ) 
 { 
 l l </space/> x </space/> = </space/> ( n </space/> % </space/> 4 ) ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> n ; 
 } 
 e l s e </space/> i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 r e t u r n </space/> 1 ; 
 } 
 e l s e </space/> i f </space/> ( x </space/> = = </space/> 2 ) 
 { 
 r e t u r n </space/> n </space/> + </space/> 1 ; 
 } 
 e l s e </space/> i f </space/> ( x </space/> = = </space/> 3 ) 
 { 
 r e t u r n </space/> 0 ; 
 } 
 } 
 l l </space/> r e c u r s i v e ( l l </space/> n ) 
 { 
 i f </space/> ( n </space/> = = </space/> 0 </space/> | | </space/> n </space/> = = </space/> 1 ) 
 { 
 r e t u r n </space/> n ; 
 } 
 e l s e 
 { 
 r e t u r n </space/> r e c u r s i v e ( n </space/> - </space/> 1 ) </space/> + </space/> r e c u r s i v e ( n </space/> - </space/> 2 ) ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 f a s t i o </space/> c l o c k _ t </space/> s t a r t , </space/> e n d i n g ; 
 s t a r t </space/> = </space/> c l o c k ( ) ; 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( m a x ( a , </space/> b ) </space/> > = </space/> 2 </space/> * </space/> m i n ( a , </space/> b ) ) 
 { 
 c o u t </space/> < < </space/> p o w ( m a x ( a , </space/> b ) , </space/> 2 ) </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 
 c o u t </space/> < < </space/> p o w ( 2 </space/> * </space/> m i n ( a , </space/> b ) , </space/> 2 ) </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 
 e n d i n g </space/> = </space/> c l o c k ( ) ; 
 / / </space/> c o u t < < f i x e d < < d o u b l e ( e n d i n g - s t a r t ) < < s e t p r e c i s i o n ( 5 ) < < "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> y </space/> = </space/> m i n ( a , </space/> b ) ; 
 i n t </space/> u </space/> = </space/> m a x ( a , </space/> b ) ; 
 c o u t </space/> < < </space/> m a x ( 2 </space/> * </space/> y </space/> * </space/> 2 </space/> * </space/> y , </space/> u </space/> * </space/> u ) </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 # d e f i n e </space/> f i ( n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , "" w "" , s t d o u t ) ; 
 # e n d i f 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> 4 </space/> * </space/> ( a </space/> * </space/> b ) </space/> < < </space/> e n d l ; 
 c o n t i n u e ; 
 } 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 i f </space/> ( 2 </space/> * </space/> a </space/> > = </space/> b ) 
 { 
 i n t </space/> a n s </space/> = </space/> 2 </space/> * </space/> a </space/> * </space/> 2 </space/> * </space/> a ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i n t </space/> a n s </space/> = </space/> b </space/> * </space/> b ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 i f </space/> ( 2 </space/> * </space/> b </space/> > = </space/> a ) 
 { 
 i n t </space/> a n s </space/> = </space/> 2 </space/> * </space/> b </space/> * </space/> 2 </space/> * </space/> b ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i n t </space/> a n s </space/> = </space/> a </space/> * </space/> a ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 c o n t i n u e ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 / * 
 # p r a g m a </space/> G C C </space/> t a r g e t </space/> ( "" a v x 2 "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z a t i o n </space/> ( "" O 3 "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z a t i o n </space/> ( "" u n r o l l - l o o p s "" ) 
 * / 
 
 # d e f i n e </space/> i o s </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> r a l l ( x ) </space/> ( x ) . r b e g i n ( ) , </space/> ( x ) . r e n d ( ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> n u l ( x ) </space/> m e m s e t ( ( x ) , </space/> 0 , </space/> s i z e o f ( ( x ) ) ) 
 
 m t 1 9 9 3 7 </space/> m r a n d ( r a n d o m _ d e v i c e { } ( ) ) ; 
 i n t </space/> r n d ( i n t </space/> x ) 
 { 
 r e t u r n </space/> m r a n d ( ) </space/> % </space/> x ; 
 } 
 l l </space/> p o w m o d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 a </space/> % = </space/> m o d ; 
 a s s e r t ( b </space/> > = </space/> 0 ) ; 
 f o r </space/> ( ; </space/> b ; </space/> b </space/> > > = </space/> 1 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 v e c t o r < i n t > </space/> a n s 1 , </space/> a n s 2 ; 
 b o o l </space/> c h [ 1 0 0 0 0 1 0 0 ] ; 
 i n t </space/> d [ 1 0 0 0 0 0 1 0 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s ; 
 
 c h [ 0 ] </space/> = </space/> c h [ 1 ] </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> 1 e 7 ; </space/> i + + ) 
 { 
 i f </space/> ( c h [ i ] ) 
 c o n t i n u e ; 
 d [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 2 ; </space/> i </space/> * </space/> j </space/> < = </space/> 1 e 7 ; </space/> j + + ) 
 { 
 c h [ i </space/> * </space/> j ] </space/> = </space/> t r u e ; 
 d [ i </space/> * </space/> j ] </space/> = </space/> i ; 
 } 
 } 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i n t </space/> f </space/> = </space/> d [ x ] ; 
 w h i l e </space/> ( x </space/> % </space/> f </space/> = = </space/> 0 </space/> a n d </space/> x </space/> > </space/> 1 ) 
 x </space/> / = </space/> f ; 
 i f </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s 1 . p b ( f ) ; 
 a n s 2 . p b ( x ) ; 
 } 
 e l s e 
 { 
 a n s 1 . p b ( - 1 ) ; 
 a n s 2 . p b ( - 1 ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a n s 1 ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a n s 2 ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> n l i n e </space/> "" \ n "" 
 c o n s t </space/> l l </space/> M </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 5 ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 v e c t o r < l l > </space/> d i v ( N </space/> + </space/> 2 , </space/> 0 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i f </space/> ( d i v [ i ] </space/> = = </space/> 0 ) 
 { 
 f o r </space/> ( l l </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> N ; </space/> j </space/> + = </space/> i ) 
 { 
 d i v [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 l l </space/> n , </space/> x ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> a ( n </space/> + </space/> 3 , </space/> - 1 ) , </space/> b ( n </space/> + </space/> 3 , </space/> - 1 ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 l l </space/> p </space/> = </space/> d i v [ x ] ; 
 i f </space/> ( d i v [ x ] ) 
 { 
 w h i l e </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 { 
 x </space/> / = </space/> p ; 
 } 
 i f </space/> ( x </space/> ! = </space/> 1 ) 
 { 
 a [ i ] </space/> = </space/> x ; 
 b [ i ] </space/> = </space/> p ; 
 } 
 } 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> n l i n e ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> "" </space/> "" ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v b </space/> v e c t o r < b o o l > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> s i ( c ) </space/> ( i n t ) ( ( c ) . s i z e ( ) ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> v p i i </space/> v e c t o r < p i i > 
 # d e f i n e </space/> v v p i i </space/> v e c t o r < v p i i > 
 # d e f i n e </space/> v v i </space/> v e c t o r < v i > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> v s </space/> v e c t o r < s t r i n g > 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> m i i </space/> m a p < i n t , </space/> i n t > 
 # d e f i n e </space/> v d </space/> v e c t o r < d o u b l e > 
 # d e f i n e </space/> d e b ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> - > </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f 3 f 3 f 3 f ; 
 # d e f i n e </space/> M A X N </space/> 1 0 0 0 0 0 0 5 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 2 ; 
 i n t </space/> s p f [ N ] ; 
 v o i d </space/> s i e v e ( ) 
 { 
 s p f [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 
 s p f [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 4 ; </space/> i </space/> < </space/> N ; </space/> i </space/> + = </space/> 2 ) 
 s p f [ i ] </space/> = </space/> 2 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> * </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i f </space/> ( s p f [ i ] </space/> = = </space/> i ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> N ; </space/> j </space/> + = </space/> i ) 
 i f </space/> ( s p f [ j ] </space/> = = </space/> j ) 
 s p f [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 v e c t o r < i n t > </space/> g e t ( i n t </space/> x ) 
 { 
 v e c t o r < i n t > </space/> r e t ; 
 w h i l e </space/> ( x </space/> ! = </space/> 1 ) 
 { 
 r e t . p u s h _ b a c k ( s p f [ x ] ) ; 
 x </space/> = </space/> x </space/> / </space/> s p f [ x ] ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 
 v o i d </space/> T i m e l i m i t e x c e e d e d ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> b [ n ] [ 2 ] ; 
 m e m s e t ( b , </space/> - 1 , </space/> s i z e o f ( b ) ) ; 
 s i e v e ( ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 v e c t o r < i n t > </space/> v </space/> = </space/> g e t ( a [ i ] ) ; 
 s e t < i n t > </space/> s ; 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> v ) 
 s . i n s e r t ( i t ) ; 
 i f </space/> ( s i ( s ) </space/> > </space/> 1 ) 
 { 
 i n t </space/> k 1 </space/> = </space/> 1 , </space/> k 2 </space/> = </space/> 1 ; 
 k 1 </space/> * = </space/> v [ 0 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> s i ( v ) ; </space/> i + + ) 
 { 
 i f </space/> ( v [ i ] </space/> = = </space/> v [ 0 ] ) 
 k 1 </space/> * = </space/> v [ i ] ; 
 e l s e 
 k 2 </space/> * = </space/> v [ i ] ; 
 } 
 b [ i ] [ 0 ] </space/> = </space/> k 1 ; 
 b [ i ] [ 1 ] </space/> = </space/> k 2 ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> b [ i ] [ 0 ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> b [ i ] [ 1 ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 T i m e l i m i t e x c e e d e d ( ) ; 
 } 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> i 6 4 </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> s z ( a ) </space/> i n t ( ( a ) . s i z e ( ) ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < </space/> ( b ) ; </space/> + + i ) 
 # d e f i n e </space/> p e r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( b ) - 1 ; </space/> i </space/> > = </space/> ( a ) ; </space/> - - i ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 n a m e s p a c e </space/> n u m 
 { 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 1 ; 
 v e c t o r < i n t > </space/> p r i m e ; 
 b o o l </space/> v i s [ N ] ; 
 i n t </space/> m p [ N ] ; 
 
 v o i d </space/> s i e v e ( ) 
 { 
 v i s [ 1 ] </space/> = </space/> t r u e ; 
 r e p ( i , </space/> 2 , </space/> N ) 
 { 
 i f </space/> ( n o t </space/> v i s [ i ] ) 
 { 
 m p [ i ] </space/> = </space/> i ; 
 p r i m e . p u s h _ b a c k ( i ) ; 
 } 
 f o r </space/> ( i n t & </space/> p </space/> : </space/> p r i m e ) 
 { 
 i f </space/> ( i </space/> * </space/> p </space/> > = </space/> N ) 
 { 
 b r e a k ; 
 } 
 v i s [ i </space/> * </space/> p ] </space/> = </space/> t r u e ; 
 m p [ i </space/> * </space/> p ] </space/> = </space/> p ; 
 i f </space/> ( i </space/> % </space/> p </space/> = = </space/> 0 ) 
 { 
 b r e a k ; 
 } 
 } 
 } 
 } 
 } 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 5 e 5 ; 
 i n t </space/> n , </space/> a [ N ] , </space/> b [ N ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 n u m : : s i e v e ( ) ; 
 c i n </space/> > > </space/> n ; 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 a [ i ] </space/> = </space/> n u m : : m p [ x ] ; 
 w h i l e </space/> ( x </space/> % </space/> a [ i ] </space/> = = </space/> 0 ) 
 { 
 x </space/> / = </space/> a [ i ] ; 
 } 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 a [ i ] </space/> = </space/> b [ i ] </space/> = </space/> - 1 ; 
 } 
 e l s e 
 { 
 b [ i ] </space/> = </space/> x ; 
 } 
 } 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> ' </space/> ' ; 
 } 
 c o u t </space/> < < </space/> ' \ n ' ; 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> ' </space/> ' ; 
 } 
 c o u t </space/> < < </space/> ' \ n ' ; 
 r e t u r n </space/> 0 ; 
 } 
 
 / * 
 * </space/> R e a d </space/> C a r e f u l l y ! </space/> M u l t i p l e </space/> c a s e s ? </space/> D a t a </space/> r a n g e ? 
 * </space/> T r a n s f o r m a t i o n ? </space/> S p e c i a l </space/> c a s e s ? </space/> B r u t e </space/> & </space/> R e g u l a r i t i e s ? 
 * </space/> D o n ' t </space/> g e t </space/> s t u c k ! </space/> N e w </space/> d i r e c t i o n s ! </space/> R e c o r d </space/> t h o u g h t s ! 
 * </space/> I n t </space/> o v e r f l o w ? </space/> A r r a y </space/> b o u n d s ? </space/> N </space/> = </space/> 1 ? 
 * /",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> f </space/> f i r s t 
 
 c o n s t </space/> i n t </space/> M A X _ N </space/> = </space/> 5 </space/> * </space/> 1 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> M A X _ A </space/> = </space/> 1 e 7 </space/> + </space/> 5 ; 
 l l </space/> n , </space/> x , </space/> d v , </space/> d 1 , </space/> d 2 , </space/> s p f [ M A X _ A ] , </space/> a n s 1 [ M A X _ N ] , </space/> a n s 2 [ M A X _ N ] ; 
 v e c t o r < i n t > </space/> p r i m e s ; 
 
 v o i d </space/> q u e r y ( i n t </space/> i d x ) 
 { 
 p r i m e s . c l e a r ( ) ; 
 w h i l e </space/> ( x </space/> ! = </space/> 1 ) 
 { 
 d v </space/> = </space/> s p f [ x ] ; 
 w h i l e </space/> ( s p f [ x ] </space/> = = </space/> d v ) 
 { 
 x </space/> / = </space/> d v ; 
 } 
 p r i m e s . p u s h _ b a c k ( d v ) ; 
 } 
 i f </space/> ( p r i m e s . s i z e ( ) </space/> = = </space/> 1 ) 
 { 
 a n s 1 [ i d x ] </space/> = </space/> a n s 2 [ i d x ] </space/> = </space/> - 1 ; 
 r e t u r n ; 
 } 
 d 1 </space/> = </space/> d 2 </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> p r i m e s . s i z e ( ) ; </space/> + + i ) 
 { 
 i f </space/> ( i </space/> % </space/> 2 ) 
 { 
 d 2 </space/> * = </space/> p r i m e s [ i ] ; 
 } 
 e l s e 
 { 
 d 1 </space/> * = </space/> p r i m e s [ i ] ; 
 } 
 } 
 a n s 1 [ i d x ] </space/> = </space/> d 1 ; 
 a n s 2 [ i d x ] </space/> = </space/> d 2 ; 
 } 
 
 v o i d </space/> b u i l d _ s p f ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> M A X _ A ; </space/> + + i ) 
 { 
 i f </space/> ( ! s p f [ i ] ) 
 { 
 s p f [ i ] </space/> = </space/> i ; 
 i f </space/> ( i </space/> > </space/> 1 0 0 0 0 ) 
 { 
 c o n t i n u e ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> M A X _ A ; </space/> j </space/> + = </space/> i ) 
 { 
 i f </space/> ( ! s p f [ j ] ) 
 { 
 s p f [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 b u i l d _ s p f ( ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> x ; 
 q u e r y ( i ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> a n s 1 [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> a n s 2 [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 1 ; 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 5 e 5 </space/> + </space/> 2 ; 
 
 i n t </space/> a n s 1 [ M ] , </space/> a n s 2 [ M ] ; 
 b i t s e t < N > </space/> v ; 
 i n t </space/> s p [ N ] ; 
 
 v o i d </space/> s i e v e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> i </space/> + = </space/> 2 ) 
 { 
 s p [ i ] </space/> = </space/> 2 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> N ; </space/> i </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( ! v [ i ] ) 
 { 
 s p [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i ; </space/> 1 L L </space/> * </space/> j </space/> * </space/> i </space/> < </space/> N ; </space/> j </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( ! v [ j </space/> * </space/> i ] ) 
 { 
 v [ j </space/> * </space/> i ] </space/> = </space/> 1 ; 
 s p [ j </space/> * </space/> i ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s i e v e ( ) ; 
 i n t </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 a n s 1 [ i ] </space/> = </space/> a n s 2 [ i ] </space/> = </space/> - 1 ; 
 i n t </space/> x ; 
 s c a n f ( "" % d "" , </space/> & x ) ; 
 i n t </space/> s m o l l </space/> = </space/> s p [ x ] ; 
 w h i l e </space/> ( x </space/> % </space/> s m o l l </space/> = = </space/> 0 ) 
 { 
 x </space/> / = </space/> s m o l l ; 
 } 
 i f </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s 1 [ i ] </space/> = </space/> x ; 
 a n s 2 [ i ] </space/> = </space/> s m o l l ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 p r i n t f ( "" % d </space/> "" , </space/> a n s 1 [ i ] ) ; 
 } 
 p u t s ( "" "" ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 p r i n t f ( "" % d </space/> "" , </space/> a n s 2 [ i ] ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 c o n s t </space/> i n t </space/> m x </space/> = </space/> 1 e 4 </space/> + </space/> 7 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> a r [ m x ] ; 
 v e c t o r < i n t > </space/> p r i m e ; 
 
 v o i d </space/> s e i v e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> m x ; </space/> i + + ) 
 { 
 i f </space/> ( a r [ i ] </space/> = = </space/> f a l s e ) 
 { 
 p r i m e . p u s h _ b a c k ( i ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> + </space/> i ; </space/> j </space/> < </space/> m x ; </space/> j </space/> + = </space/> i ) 
 { 
 a r [ j ] </space/> = </space/> t r u e ; 
 } 
 } 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s e i v e ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a n s [ 2 ] [ n </space/> + </space/> 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 v e c t o r < i n t > </space/> u p r i m e ; 
 i n t </space/> a ; 
 c i n </space/> > > </space/> a ; 
 i n t </space/> j </space/> = </space/> 0 ; 
 w h i l e </space/> ( p r i m e [ j ] </space/> * </space/> p r i m e [ j ] </space/> < = </space/> a ) 
 { 
 i f </space/> ( a </space/> % </space/> p r i m e [ j ] </space/> = = </space/> 0 ) 
 { 
 u p r i m e . p u s h _ b a c k ( p r i m e [ j ] ) ; 
 w h i l e </space/> ( a </space/> % </space/> p r i m e [ j ] </space/> = = </space/> 0 ) 
 a </space/> / = </space/> p r i m e [ j ] ; 
 } 
 j + + ; 
 } 
 i f </space/> ( a </space/> > </space/> 1 ) 
 u p r i m e . p u s h _ b a c k ( a ) ; 
 i f </space/> ( u p r i m e . s i z e ( ) </space/> < </space/> 2 ) 
 { 
 a n s [ 0 ] [ i ] </space/> = </space/> - 1 ; 
 a n s [ 1 ] [ i ] </space/> = </space/> - 1 ; 
 } 
 e l s e </space/> i f </space/> ( u p r i m e . s i z e ( ) </space/> = = </space/> 2 ) 
 { 
 a n s [ 0 ] [ i ] </space/> = </space/> u p r i m e [ 0 ] ; 
 a n s [ 1 ] [ i ] </space/> = </space/> u p r i m e [ 1 ] ; 
 } 
 e l s e 
 { 
 a n s [ 0 ] [ i ] </space/> = </space/> u p r i m e [ 0 ] ; 
 a n s [ 1 ] [ i ] </space/> = </space/> u p r i m e [ 1 ] ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 2 ; </space/> k </space/> < </space/> u p r i m e . s i z e ( ) ; </space/> k + + ) 
 a n s [ 1 ] [ i ] </space/> * = </space/> u p r i m e [ k ] ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s [ 0 ] [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s [ 1 ] [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> u l l ; 
 # d e f i n e </space/> I O S </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p r ; 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> a l l ( i ) </space/> i . b e g i n ( ) , </space/> i . e n d ( ) 
 # d e f i n e </space/> f t </space/> f i r s t 
 # d e f i n e </space/> s n </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e p s </space/> 1 e - 9 
 # d e f i n e </space/> S P </space/> c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( 1 0 ) ; 
 
 / / / </space/> B I S M I L L H I R </space/> R A H M A N I R </space/> R A H I M 
 / / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 
 # d e f i n e </space/> i n f </space/> 1 0 0 0 0 0 
 # d e f i n e </space/> M A X N </space/> 1 0 0 0 0 0 0 5 
 i n t </space/> c n t [ M A X N </space/> + </space/> 1 ] ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 v e c t o r < i n t > </space/> v ; 
 b o o l </space/> p r i m e [ M A X N ] ; 
 v o i d </space/> s i e v e ( ) 
 { 
 p r i m e [ 0 ] </space/> = </space/> p r i m e [ 1 ] </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 4 ; </space/> i </space/> < </space/> M A X N ; </space/> i </space/> + = </space/> 2 ) 
 p r i m e [ i ] </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> * </space/> i </space/> < </space/> M A X N ; </space/> i </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( p r i m e [ i ] </space/> = = </space/> f a l s e ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> M A X N ; </space/> j </space/> + = </space/> ( 2 </space/> * </space/> i ) ) 
 p r i m e [ j ] </space/> = </space/> t r u e ; 
 } 
 } 
 v . p b ( 2 ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> M A X N ; </space/> i </space/> + = </space/> 2 ) 
 i f </space/> ( p r i m e [ i ] </space/> = = </space/> f a l s e ) 
 v . p b ( i ) ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 s i e v e ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a n s , </space/> b n s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( x </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 { 
 i n t </space/> m </space/> = </space/> x ; 
 w h i l e </space/> ( x </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 { 
 x </space/> / = </space/> 2 ; 
 } 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 a n s . p b ( - 1 ) ; 
 b n s . p b ( - 1 ) ; 
 } 
 e l s e 
 { 
 a n s . p b ( 2 ) ; 
 b n s . p b ( x ) ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( p r i m e [ x ] </space/> = = </space/> f a l s e ) 
 { 
 a n s . p b ( - 1 ) ; 
 b n s . p b ( - 1 ) ; 
 } 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> v [ i ] </space/> * </space/> v [ i ] </space/> < = </space/> x </space/> & & </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 i n t </space/> p </space/> = </space/> v [ i ] ; 
 i f </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 { 
 w h i l e </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 { 
 x </space/> / = </space/> p ; 
 } 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 a n s . p b ( - 1 ) ; 
 b n s . p b ( - 1 ) ; 
 } 
 e l s e 
 { 
 a n s . p b ( p ) ; 
 b n s . p b ( x ) ; 
 } 
 b r e a k ; 
 } 
 } 
 } 
 } 
 } 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> b n s ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
 / / / </space/> A </space/> L </space/> H </space/> A </space/> M </space/> D </space/> U </space/> L </space/> I </space/> L </space/> L </space/> A </space/> H 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l d ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> l l u ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v e c ; 
 t y p e d e f </space/> v e c t o r < l l d > </space/> v e c l ; 
 # d e f i n e </space/> a l l ( a ) </space/> ( a ) . b e g i n ( ) , </space/> ( a ) . e n d ( ) 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 i s t r e a m & </space/> o p e r a t o r > > ( i s t r e a m & </space/> i s , </space/> v e c t o r < T > & </space/> a ) 
 { 
 f o r </space/> ( T & </space/> a i </space/> : </space/> a ) 
 i s </space/> > > </space/> a i ; 
 r e t u r n </space/> i s ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 o s t r e a m & </space/> o p e r a t o r < < ( o s t r e a m & </space/> o s , </space/> v e c t o r < T > </space/> c o n s t & </space/> a ) 
 { 
 o s </space/> < < </space/> "" [ </space/> "" ; 
 f o r </space/> ( c o n s t </space/> T & </space/> a i </space/> : </space/> a ) 
 o s </space/> < < </space/> a i </space/> < < </space/> "" </space/> "" ; 
 r e t u r n </space/> o s </space/> < < </space/> "" ] "" ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T 1 , </space/> t y p e n a m e </space/> T 2 > 
 i s t r e a m & </space/> o p e r a t o r > > ( i s t r e a m & </space/> i s , </space/> p a i r < T 1 , </space/> T 2 > & </space/> a ) 
 { 
 r e t u r n </space/> i s </space/> > > </space/> a . f i r s t </space/> > > </space/> a . s e c o n d ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T 1 , </space/> t y p e n a m e </space/> T 2 > 
 o s t r e a m & </space/> o p e r a t o r < < ( o s t r e a m & </space/> o s , </space/> p a i r < T 1 , </space/> T 2 > </space/> c o n s t & </space/> a ) 
 { 
 r e t u r n </space/> o s </space/> < < </space/> "" ( "" </space/> < < </space/> a . f i r s t </space/> < < </space/> "" , </space/> "" </space/> < < </space/> a . s e c o n d </space/> < < </space/> "" ) "" ; 
 } 
 
 v o i d </space/> f ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c </space/> a ( n ) ; 
 c i n </space/> > > </space/> a ; 
 i n t </space/> m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> a i </space/> : </space/> a ) 
 m </space/> = </space/> m a x ( m , </space/> a i ) ; 
 v e c </space/> f s ( + + m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> + + i ) 
 f s [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> * </space/> i </space/> < </space/> m ; </space/> + + i ) 
 { 
 i f </space/> ( f s [ i ] </space/> < </space/> i ) 
 c o n t i n u e ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> m ; </space/> j </space/> + = </space/> i ) 
 { 
 i f </space/> ( f s [ j ] </space/> = = </space/> j ) 
 f s [ j ] </space/> = </space/> i ; 
 } 
 } 
 v e c t o r < p i i > </space/> r ; 
 f o r </space/> ( i n t </space/> i </space/> : </space/> a ) 
 { 
 i f </space/> ( f s [ i ] </space/> = = </space/> i ) 
 { 
 r . e m p l a c e _ b a c k ( - 1 , </space/> - 1 ) ; 
 c o n t i n u e ; 
 } 
 i n t </space/> p </space/> = </space/> f s [ i ] , </space/> x </space/> = </space/> 1 ; 
 w h i l e </space/> ( i </space/> % </space/> p </space/> = = </space/> 0 ) 
 { 
 i </space/> / = </space/> p ; 
 x </space/> * = </space/> p ; 
 } 
 i f </space/> ( i </space/> = = </space/> 1 ) 
 { 
 r . e m p l a c e _ b a c k ( - 1 , </space/> - 1 ) ; 
 } 
 e l s e 
 { 
 r . e m p l a c e _ b a c k ( x , </space/> i ) ; 
 } 
 } 
 f o r </space/> ( c o n s t </space/> p i i & </space/> r i </space/> : </space/> r ) 
 c o u t </space/> < < </space/> r i . f i r s t </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( c o n s t </space/> p i i & </space/> r i </space/> : </space/> r ) 
 c o u t </space/> < < </space/> r i . s e c o n d </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 / / </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; </space/> s r a n d ( 9 ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 / / </space/> c o u t </space/> < < </space/> f ( ) </space/> < < </space/> "" \ n "" ; 
 / / </space/> i n t </space/> t ; </space/> c i n </space/> > > </space/> t ; </space/> w h i l e </space/> ( t - - ) </space/> f ( ) ; </space/> / / </space/> c o u t </space/> < < </space/> f ( ) </space/> < < </space/> "" \ n "" ; 
 / / </space/> i n t </space/> t ; </space/> c i n </space/> > > </space/> t ; </space/> w h i l e </space/> ( t - - ) </space/> c o u t </space/> < < </space/> ( f ( ) </space/> ? </space/> "" Y E S \ n "" </space/> : </space/> "" N O \ n "" ) ; 
 / / </space/> S o l u t i o n </space/> s o l n ; </space/> s o l n . p a r s e ( ) ; </space/> s o l n . s o l v e ( ) ; 
 f ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M A X _ N </space/> = </space/> 1 e 7 </space/> + </space/> 5 ; 
 b i t s e t < M A X _ N > </space/> n o t _ p r i m e ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 5 e 5 </space/> + </space/> 5 ; 
 i n t </space/> a n s w e r [ N ] [ 2 ] , </space/> x , </space/> n ; 
 v e c t o r < i n t > </space/> p r i m e s ; 
 
 v o i d </space/> c i u r ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> 1 e 7 ; </space/> i + + ) 
 i f </space/> ( ! n o t _ p r i m e [ i ] ) 
 { 
 p r i m e s . p u s h _ b a c k ( i ) ; 
 f o r </space/> ( l o n g </space/> l o n g </space/> j </space/> = </space/> ( l o n g </space/> l o n g ) i </space/> * </space/> i ; </space/> j </space/> < = </space/> 1 e 7 ; </space/> j </space/> + = </space/> i ) 
 n o t _ p r i m e [ j ] </space/> = </space/> 1 ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ; 
 c i u r ( ) ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 
 i n t </space/> d 2 </space/> = </space/> 1 ; 
 i n t </space/> d 1 </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> d i v i </space/> : </space/> p r i m e s ) 
 { 
 i f </space/> ( x </space/> % </space/> d i v i </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( d 1 </space/> = = </space/> 0 ) 
 d 1 </space/> = </space/> d i v i ; 
 e l s e 
 d 2 </space/> * = </space/> d i v i ; 
 
 w h i l e </space/> ( x </space/> % </space/> d i v i </space/> = = </space/> 0 ) 
 x </space/> / = </space/> d i v i ; 
 } 
 i f </space/> ( ! n o t _ p r i m e [ x ] ) 
 { 
 d 2 </space/> * = </space/> x ; 
 b r e a k ; 
 } 
 } 
 
 i f </space/> ( d 1 </space/> = = </space/> d 2 </space/> | | </space/> d 2 </space/> = = </space/> 1 </space/> | | </space/> d 1 </space/> = = </space/> 0 ) 
 a n s w e r [ i ] [ 0 ] </space/> = </space/> a n s w e r [ i ] [ 1 ] </space/> = </space/> - 1 ; 
 e l s e 
 { 
 a n s w e r [ i ] [ 0 ] </space/> = </space/> d 1 ; 
 a n s w e r [ i ] [ 1 ] </space/> = </space/> d 2 ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s w e r [ i ] [ 0 ] </space/> < < </space/> "" </space/> "" ; 
 
 c o u t </space/> < < </space/> "" \ n "" ; 
 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> j + + ) 
 c o u t </space/> < < </space/> a n s w e r [ j ] [ 1 ] </space/> < < </space/> "" </space/> "" ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> t r a v ( i , </space/> a ) </space/> f o r </space/> ( a u t o & </space/> i </space/> : </space/> a ) 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 # d e f i n e </space/> s i ( a ) </space/> ( ( i n t ) ( a ) . s i z e ( ) ) 
 # d e f i n e </space/> i n s </space/> i n s e r t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 1 8 ; 
 c o n s t </space/> s t r i n g </space/> n l </space/> = </space/> "" \ n "" ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 1 0 0 ; 
 i n t </space/> c u r _ g e n e r a t e d ; 
 v e c t o r < b o o l > </space/> i s p r i m e ; 
 v e c t o r < i n t > </space/> p r i m e s , </space/> s p f ; 
 
 v o i d </space/> s i e v e ( i n t </space/> m a x i m u m ) 
 { 
 c u r _ g e n e r a t e d </space/> = </space/> m a x i m u m ; 
 i s p r i m e . a s s i g n ( m a x i m u m </space/> + </space/> 1 0 , </space/> t r u e ) ; 
 i s p r i m e [ 0 ] </space/> = </space/> i s p r i m e [ 1 ] </space/> = </space/> f a l s e ; 
 s p f . r e s i z e ( m a x i m u m </space/> + </space/> 1 0 ) ; 
 i o t a ( a l l ( s p f ) , </space/> 0 L L ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> * </space/> i </space/> < </space/> m a x i m u m ; </space/> + + i ) 
 { 
 i f </space/> ( i s p r i m e [ i ] ) 
 { 
 s p f [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> m a x i m u m ; </space/> j </space/> + = </space/> i ) 
 { 
 i f </space/> ( i s p r i m e [ j ] ) 
 { 
 i s p r i m e [ j ] </space/> = </space/> f a l s e ; 
 s p f [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m a x i m u m ; </space/> + + i ) 
 { 
 i f </space/> ( i s p r i m e [ i ] ) 
 { 
 p r i m e s . p b ( i ) ; 
 } 
 } 
 } 
 
 v e c t o r < i n t > </space/> f a c t o r ( i n t </space/> x ) 
 { 
 a s s e r t ( x </space/> > </space/> 0 </space/> & & </space/> c u r _ g e n e r a t e d </space/> > = </space/> x ) ; 
 v e c t o r < i n t > </space/> r e s ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 r e s . p b ( s p f [ x ] ) ; 
 x </space/> / = </space/> s p f [ x ] ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 s i e v e ( N ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 t r a v ( i , </space/> a ) 
 { 
 c i n </space/> > > </space/> i ; 
 } 
 v e c t o r < i n t > </space/> h l d ; 
 v e c t o r < i n t > </space/> a n s ( n ) , </space/> a n s 1 ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s i ( a ) ; </space/> + + i ) 
 { 
 v e c t o r < i n t > </space/> h l d 1 2 3 </space/> = </space/> f a c t o r ( a [ i ] ) ; 
 s e t < i n t > </space/> s e ; 
 t r a v ( j , </space/> h l d 1 2 3 ) 
 { 
 s e . i n s ( j ) ; 
 } 
 i f </space/> ( s i ( s e ) </space/> < = </space/> 1 ) 
 { 
 a n s [ i ] </space/> = </space/> a n s 1 [ i ] </space/> = </space/> - 1 ; 
 c o n t i n u e ; 
 } 
 a n s [ i ] </space/> = </space/> * s e . b e g i n ( ) ; 
 a n s 1 [ i ] </space/> = </space/> 1 ; 
 t r a v ( j , </space/> s e ) 
 { 
 a n s 1 [ i ] </space/> * = </space/> j ; 
 } 
 a n s 1 [ i ] </space/> / = </space/> a n s [ i ] ; 
 } 
 t r a v ( i , </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' ; 
 } 
 c o u t </space/> < < </space/> n l ; 
 t r a v ( i , </space/> a n s 1 ) 
 { 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' ; 
 } 
 c o u t </space/> < < </space/> n l ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < b i t s e t > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 b i t s e t < 1 0 0 0 0 0 1 0 > </space/> b s ; 
 i n t </space/> n , </space/> a [ 5 0 0 0 1 0 ] , </space/> d [ 5 0 0 0 1 0 ] [ 2 ] , </space/> u s [ 1 0 0 0 0 0 1 0 ] , </space/> m ; 
 
 v o i d </space/> s i e v e ( i n t </space/> n ) 
 { 
 b s . s e t ( ) ; 
 b s [ 0 ] </space/> = </space/> b s [ 1 ] </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( b s [ i ] ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < = </space/> 1 0 0 0 0 0 0 0 ; </space/> j </space/> + = </space/> i ) 
 { 
 b s [ j ] </space/> = </space/> 0 ; 
 u s [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 s i e v e ( 3 1 6 2 ) ; 
 c i n </space/> > > </space/> n ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x </space/> = </space/> a [ i ] ; 
 i f </space/> ( ! b s [ x ] ) 
 { 
 i n t </space/> p </space/> = </space/> u s [ x ] ; 
 w h i l e </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 x </space/> / = </space/> p ; 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 d [ i ] [ 0 ] </space/> = </space/> d [ i ] [ 1 ] </space/> = </space/> - 1 ; 
 } 
 e l s e 
 d [ i ] [ 0 ] </space/> = </space/> p , </space/> d [ i ] [ 1 ] </space/> = </space/> x ; 
 } 
 e l s e 
 d [ i ] [ 0 ] </space/> = </space/> d [ i ] [ 1 ] </space/> = </space/> - 1 ; 
 } 
 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 ; </space/> j + + ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> d [ i ] [ j ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s o l v e ( ) ; 
 / / 	 s y s t e m ( "" p a u s e "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> i n t </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v l ; 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> a l l ( x ) </space/> b e g i n ( x ) , </space/> e n d ( x ) 
 # d e f i n e </space/> F O R ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < = </space/> ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> R O F ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> > = </space/> ( b ) ; </space/> i - - ) 
 # d e f i n e </space/> c h k m a x ( x , </space/> a ) </space/> x </space/> = </space/> m a x ( x , </space/> a ) 
 # d e f i n e </space/> c h k m i n ( x , </space/> a ) </space/> x </space/> = </space/> m i n ( x , </space/> a ) 
 # d e f i n e </space/> R E P ( i , </space/> a ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a ; </space/> i + + ) 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 3 1 7 0 ; </space/> / / </space/> d o </space/> l i n e a r </space/> s i e v e </space/> f o r </space/> [ 1 , m a x n ] 
 l l </space/> p r i m e [ m a x n </space/> + </space/> 2 ] ; 
 i n t </space/> t o t n </space/> = </space/> 0 ; 
 s t a t i c </space/> b o o l </space/> i s N o t P r i m e [ m a x n </space/> + </space/> 2 ] </space/> = </space/> { </space/> t r u e , </space/> t r u e </space/> } ; 
 v o i d </space/> l i n e a r _ s i e v e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> m a x n ; </space/> i + + ) 
 { 
 i f </space/> ( ! i s N o t P r i m e [ i ] ) 
 p r i m e [ t o t n + + ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> t o t n </space/> & & </space/> i </space/> * </space/> p r i m e [ j ] </space/> < = </space/> m a x n ; </space/> j + + ) 
 { 
 i s N o t P r i m e [ i </space/> * </space/> p r i m e [ j ] ] </space/> = </space/> t r u e ; 
 i f </space/> ( i </space/> % </space/> p r i m e [ j ] </space/> = = </space/> 0 ) 
 b r e a k ; </space/> / / </space/> m a k e </space/> s u r e </space/> o n l y </space/> s i e v e </space/> t h e </space/> s m a l l e s t 
 } 
 } 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 v l </space/> a ( n </space/> + </space/> 1 ) ; 
 F O R ( i , </space/> 1 , </space/> n ) </space/> s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 v l </space/> a 1 ( n </space/> + </space/> 1 ) , </space/> a 2 ( n </space/> + </space/> 1 ) ; 
 F O R ( i , </space/> 1 , </space/> n ) 
 { 
 l l </space/> l s t </space/> = </space/> 1 , </space/> t o t </space/> = </space/> 1 ; 
 l l </space/> t n </space/> = </space/> a [ i ] ; 
 F O R ( t p , </space/> 0 , </space/> t o t n ) 
 { 
 i f </space/> ( p r i m e [ t p ] </space/> * </space/> p r i m e [ t p ] </space/> > </space/> t n ) 
 b r e a k ; 
 i f </space/> ( t n </space/> % </space/> p r i m e [ t p ] </space/> = = </space/> 0 ) 
 { 
 w h i l e </space/> ( t n </space/> % </space/> p r i m e [ t p ] </space/> = = </space/> 0 ) 
 t n </space/> / = </space/> p r i m e [ t p ] ; 
 t o t </space/> = </space/> t n , </space/> l s t </space/> = </space/> p r i m e [ t p ] ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( t o t </space/> > </space/> 1 ) 
 a 1 [ i ] </space/> = </space/> t o t , </space/> a 2 [ i ] </space/> = </space/> l s t ; 
 e l s e 
 a 1 [ i ] </space/> = </space/> a 2 [ i ] </space/> = </space/> - 1 ; 
 } 
 F O R ( i , </space/> 1 , </space/> n ) </space/> p r i n t f ( "" % d </space/> "" , </space/> a 1 [ i ] ) ; 
 p r i n t f ( "" \ n "" ) ; 
 F O R ( i , </space/> 1 , </space/> n ) </space/> p r i n t f ( "" % d </space/> "" , </space/> a 2 [ i ] ) ; 
 p r i n t f ( "" \ n "" ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 l i n e a r _ s i e v e ( ) ; 
 l l </space/> T </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 7 </space/> + </space/> 5 ; 
 i n t </space/> s p r i m e [ N ] ; 
 b o o l </space/> m a r k [ N ] ; 
 
 v o i d </space/> s i e v e ( ) 
 { 
 i n t </space/> i , </space/> j ; 
 i n t </space/> n </space/> = </space/> N </space/> - </space/> 3 ; 
 s p r i m e [ 1 ] </space/> = </space/> 2 ; 
 
 f o r </space/> ( i </space/> = </space/> 2 ; </space/> i </space/> < </space/> n ; </space/> i </space/> + = </space/> 2 ) 
 s p r i m e [ i ] </space/> = </space/> 2 ; 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( ! m a r k [ i ] ) 
 { 
 f o r </space/> ( j </space/> = </space/> i ; </space/> j </space/> < </space/> n ; </space/> j </space/> + = </space/> 2 </space/> * </space/> i ) 
 { 
 m a r k [ j ] </space/> = </space/> t r u e ; 
 i f </space/> ( s p r i m e [ j ] </space/> = = </space/> 0 ) 
 s p r i m e [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s i e v e ( ) ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r [ n ] [ 2 ] , </space/> i , </space/> j , </space/> a , </space/> d 1 ; 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a ; 
 d 1 </space/> = </space/> 1 ; 
 i n t </space/> s d i v </space/> = </space/> s p r i m e [ a ] ; 
 w h i l e </space/> ( a </space/> % </space/> s d i v </space/> = = </space/> 0 ) 
 { 
 a </space/> / = </space/> s d i v ; 
 d 1 </space/> * = </space/> s d i v ; 
 } 
 i f </space/> ( a </space/> = = </space/> 1 ) 
 { 
 a r [ i ] [ 0 ] </space/> = </space/> - 1 ; 
 a r [ i ] [ 1 ] </space/> = </space/> - 1 ; 
 } 
 e l s e 
 { 
 a r [ i ] [ 0 ] </space/> = </space/> d 1 ; 
 a r [ i ] [ 1 ] </space/> = </space/> a ; 
 } 
 } 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 ; </space/> i + + ) 
 { 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 c o u t </space/> < < </space/> a r [ j ] [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> M X </space/> 1 0 0 0 0 0 0 5 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> P I I </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m n P r i m e [ M X </space/> + </space/> 5 ] ; 
 v e c t o r < i n t > </space/> p r i m e s ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a n s ; 
 i n t </space/> a r [ 5 0 0 0 0 5 ] ; 
 
 v o i d </space/> S i e v e ( ) 
 { 
 m n P r i m e [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> M X ; </space/> i + + ) 
 { 
 i f </space/> ( m n P r i m e [ i ] </space/> = = </space/> 0 ) 
 { 
 m n P r i m e [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < = </space/> M X ; </space/> j </space/> + = </space/> i ) 
 m n P r i m e [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 v e c t o r < i n t > </space/> F a c t o r i z e ( i n t </space/> n ) 
 { 
 i n t </space/> j </space/> = </space/> 0 ; 
 v e c t o r < i n t > </space/> f a c t o r s ; 
 w h i l e </space/> ( n </space/> > </space/> 1 ) 
 { 
 i n t </space/> p p </space/> = </space/> m n P r i m e [ n ] ; 
 f a c t o r s . p b ( p p ) ; 
 w h i l e </space/> ( n </space/> % </space/> p p </space/> = = </space/> 0 ) 
 n </space/> / = </space/> p p ; 
 } 
 r e t u r n </space/> f a c t o r s ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 S i e v e ( ) ; 
 i n t </space/> n ; 
 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a r [ i ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 v e c t o r < i n t > </space/> d i v s ; 
 
 d i v s </space/> = </space/> F a c t o r i z e ( a r [ i ] ) ; 
 
 i f </space/> ( d i v s . s i z e ( ) </space/> < = </space/> 1 ) 
 a n s . p b ( { </space/> - 1 , </space/> - 1 </space/> } ) ; 
 e l s e 
 { 
 i n t </space/> d 1 </space/> = </space/> d i v s [ 0 ] ; 
 i n t </space/> d 2 </space/> = </space/> d i v s [ 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> d i v s . s i z e ( ) ; </space/> i + + ) 
 d 2 </space/> * = </space/> d i v s [ i ] ; 
 a n s . p b ( { </space/> d 1 , </space/> d 2 </space/> } ) ; 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i t . f f </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i t . s s </space/> < < </space/> "" </space/> "" ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 
 # d e f i n e </space/> Y E S </space/> c o u t </space/> < < </space/> "" Y E S \ n "" 
 # d e f i n e </space/> Y e s </space/> c o u t </space/> < < </space/> "" Y e s \ n "" 
 # d e f i n e </space/> N O </space/> c o u t </space/> < < </space/> "" N O \ n "" 
 # d e f i n e </space/> N o </space/> c o u t </space/> < < </space/> "" N o \ n "" 
 # d e f i n e </space/> d c o u t ( x ) </space/> c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( 1 0 ) </space/> < < </space/> x 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> u m a p </space/> u n o r d e r e d _ m a p 
 # d e f i n e </space/> p q m a x ( T ) </space/> p r i o r i t y _ q u e u e < T > 
 # d e f i n e </space/> p q m i n ( T ) </space/> p r i o r i t y _ q u e u e < T , </space/> v e c t o r < T > , </space/> g r e a t e r < T > </space/> > 
 # d e f i n e </space/> A B C D </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) 
 # d e f i n e </space/> f o ( n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o r n ( x , </space/> n ) </space/> f o r </space/> ( l l </space/> x </space/> = </space/> 0 ; </space/> x </space/> < </space/> n ; </space/> x + + ) 
 # d e f i n e </space/> f o r e ( x , </space/> n , </space/> m ) </space/> f o r </space/> ( l l </space/> x </space/> = </space/> n ; </space/> x </space/> < = </space/> m ; </space/> x + + ) 
 # d e f i n e </space/> r f o r ( x , </space/> n , </space/> m ) </space/> f o r </space/> ( l l </space/> x </space/> = </space/> n ; </space/> x </space/> > = </space/> m ; </space/> x - - ) 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e l </space/> c o u t </space/> < < </space/> "" \ n "" 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 0 0 0 ; 
 i n t </space/> l p [ N </space/> + </space/> 1 ] ; 
 v e c t o r < i n t > </space/> p r ; 
 
 p a i r < i n t , </space/> i n t > </space/> f u n c ( i n t </space/> a ) 
 { 
 v e c t o r < i n t > </space/> p ; 
 w h i l e </space/> ( a </space/> ! = </space/> 1 ) 
 { 
 i n t </space/> j </space/> = </space/> l p [ a ] ; 
 p . p b ( j ) ; 
 w h i l e </space/> ( a </space/> % </space/> j </space/> = = </space/> 0 ) 
 a </space/> / = </space/> j ; 
 } 
 i f </space/> ( p . s i z e ( ) </space/> < </space/> 2 ) 
 r e t u r n </space/> { </space/> - 1 , </space/> - 1 </space/> } ; 
 i f </space/> ( p [ 0 ] </space/> = = </space/> 2 ) 
 { 
 i n t </space/> x </space/> = </space/> 1 ; 
 f o r e ( i , </space/> 1 , </space/> p . s i z e ( ) </space/> - </space/> 1 ) </space/> x </space/> * = </space/> p [ i ] ; 
 r e t u r n </space/> { </space/> 2 , </space/> x </space/> } ; 
 } 
 r e t u r n </space/> { </space/> p [ 0 ] , </space/> p [ 1 ] </space/> } ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 i n t </space/> a [ 5 0 0 0 0 5 ] ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> a n s , </space/> a n s 2 ; 
 f o ( n ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 a u t o </space/> i t </space/> = </space/> f u n c ( a [ i ] ) ; 
 a n s . p b ( i t . f f ) ; 
 a n s 2 . p b ( i t . s s ) ; 
 } 
 f o ( n ) </space/> c o u t </space/> < < </space/> a n s [ i ] </space/> < < </space/> "" </space/> "" ; 
 e l ; 
 f o ( n ) </space/> c o u t </space/> < < </space/> a n s 2 [ i ] </space/> < < </space/> "" </space/> "" ; 
 e l ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 A B C D ; 
 l l </space/> t ; 
 / / </space/> c i n > > t ; 
 t </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> N ; </space/> + + i ) 
 { 
 i f </space/> ( l p [ i ] </space/> = = </space/> 0 ) 
 { 
 l p [ i ] </space/> = </space/> i ; 
 p r . p u s h _ b a c k ( i ) ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> ( i n t ) p r . s i z e ( ) </space/> & & </space/> p r [ j ] </space/> < = </space/> l p [ i ] </space/> & & </space/> i </space/> * </space/> p r [ j ] </space/> < = </space/> N ; </space/> + + j ) 
 l p [ i </space/> * </space/> p r [ j ] ] </space/> = </space/> p r [ j ] ; 
 } 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 / / </space/> # i n c l u d e < t h r e a d > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> w r ( i ) </space/> c o u t </space/> < < </space/> # i </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> i </space/> < < </space/> "" , </space/> "" ; 
 # d e f i n e </space/> w r e ( i ) </space/> c o u t </space/> < < </space/> # i </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> i </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> l i m </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 L L 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> M </space/> 3 1 
 # d e f i n e </space/> N </space/> 1 0 0 0 0 0 0 7 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 u s i n g </space/> u 6 4 </space/> = </space/> u i n t 6 4 _ t ; 
 
 
 v e c t o r < l l > </space/> p r i m e ( N , </space/> 1 ) ; 
 v e c t o r < l l > </space/> a n s ( N , </space/> 1 ) , </space/> s u b ( N , </space/> 1 ) ; 
 v o i d </space/> p r e ( ) 
 { 
 p r i m e [ 0 ] </space/> = </space/> p r i m e [ 1 ] </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 i f </space/> ( p r i m e [ i ] ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> 2 ; </space/> j </space/> < </space/> N ; </space/> j </space/> + = </space/> i ) 
 { 
 p r i m e [ j ] </space/> = </space/> 0 ; 
 i f </space/> ( s u b [ j ] </space/> = = </space/> 1 ) 
 s u b [ j ] </space/> = </space/> i ; 
 e l s e 
 a n s [ j ] </space/> * = </space/> i ; 
 } 
 } 
 } 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 p r e ( ) ; 
 v e c t o r < l l > </space/> v ( n ) ; 
 f o r </space/> ( a u t o & </space/> x </space/> : </space/> v ) 
 c i n </space/> > > </space/> x ; 
 v e c t o r < l l > </space/> d 1 ( n ) , </space/> d 2 ( n ) ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> v ) 
 { 
 / / </space/> c o u t < < a n s [ x ] < < "" </space/> "" ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 / / </space/> w r ( i ) 
 i f </space/> ( a n s [ v [ i ] ] </space/> = = </space/> 1 ) 
 d 1 [ i ] </space/> = </space/> d 2 [ i ] </space/> = </space/> - 1 ; 
 e l s e 
 { 
 d 1 [ i ] </space/> = </space/> s u b [ v [ i ] ] ; 
 d 2 [ i ] </space/> = </space/> a n s [ v [ i ] ] ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> d 1 ) 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> d 2 ) 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 l l </space/> t </space/> = </space/> 1 L L ; 
 / / </space/> c i n > > t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 } 
 v e c t o r < i n t > </space/> a ( 1 e 7 </space/> + </space/> 1 , </space/> 0 ) ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> v ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> 1 e 7 ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> ! = </space/> 0 ) 
 { 
 c o n t i n u e ; 
 } 
 i n t </space/> j </space/> = </space/> 1 ; 
 w h i l e </space/> ( i </space/> * </space/> j </space/> < = </space/> 1 e 7 ) 
 { 
 i f </space/> ( a [ i </space/> * </space/> j ] </space/> ! = </space/> 0 ) 
 { 
 j + + ; 
 c o n t i n u e ; 
 } 
 a [ i </space/> * </space/> j ] </space/> = </space/> i ; 
 j + + ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> p 1 </space/> = </space/> 1 , </space/> p 2 </space/> = </space/> a [ a r r [ i ] ] ; 
 w h i l e </space/> ( a r r [ i ] </space/> ! = </space/> 1 ) 
 { 
 i n t </space/> v a l </space/> = </space/> a [ a r r [ i ] ] ; 
 w h i l e </space/> ( a r r [ i ] </space/> % </space/> v a l </space/> = = </space/> 0 ) 
 { 
 a r r [ i ] </space/> = </space/> a r r [ i ] </space/> / </space/> v a l ; 
 } 
 p 1 </space/> = </space/> p 1 </space/> * </space/> v a l ; 
 } 
 i f </space/> ( p 1 </space/> ! = </space/> p 2 </space/> & & </space/> p 1 </space/> ! = </space/> p 1 </space/> / </space/> p 2 ) 
 { 
 v . p u s h _ b a c k ( m a k e _ p a i r ( p 1 </space/> / </space/> p 2 , </space/> p 2 ) ) ; 
 } 
 e l s e 
 { 
 v . p u s h _ b a c k ( m a k e _ p a i r ( - 1 , </space/> - 1 ) ) ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> v [ i ] . f i r s t </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> v [ i ] . s e c o n d </space/> < < </space/> "" </space/> "" ; 
 } 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> N N </space/> 5 0 0 1 0 0 
 # d e f i n e </space/> M M </space/> 1 0 0 0 1 0 0 0 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> I N T </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> p i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 
 i n t </space/> a [ N N ] , </space/> f l a g [ M M ] ; 
 i n t </space/> a n s [ N N ] [ 2 ] ; 
 
 v o i d </space/> p r e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> M M ; </space/> i + + ) 
 { 
 i f </space/> ( f l a g [ i ] ) 
 c o n t i n u e ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i ; </space/> j </space/> < </space/> M M ; </space/> j </space/> + = </space/> i ) 
 f l a g [ j ] </space/> = </space/> i ; 
 } 
 } 
 
 p i i </space/> c a l c ( i n t </space/> x ) 
 { 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 r e t u r n </space/> p i i ( - 1 , </space/> - 1 ) ; 
 i f </space/> ( f l a g [ x ] </space/> = = </space/> x ) 
 r e t u r n </space/> p i i ( - 1 , </space/> - 1 ) ; 
 i n t </space/> p </space/> = </space/> f l a g [ x ] , </space/> t </space/> = </space/> 1 ; 
 w h i l e </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 t </space/> * = </space/> p , </space/> x </space/> / = </space/> p ; 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 r e t u r n </space/> p i i ( - 1 , </space/> - 1 ) ; 
 r e t u r n </space/> p i i ( t , </space/> x ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t . o u t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 p r e ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 a u t o </space/> p </space/> = </space/> c a l c ( a [ i ] ) ; 
 a n s [ i ] [ 0 ] </space/> = </space/> p . f i r s t ; 
 a n s [ i ] [ 1 ] </space/> = </space/> p . s e c o n d ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % d </space/> "" , </space/> a n s [ i ] [ 0 ] ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % d </space/> "" , </space/> a n s [ i ] [ 1 ] ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> M X </space/> 1 0 0 0 0 0 0 5 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> P I I </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> n x t P r i m e [ M X </space/> + </space/> 5 ] ; 
 v e c t o r < i n t > </space/> p r i m e s ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a n s ; 
 i n t </space/> a r [ 5 0 0 0 0 5 ] ; 
 
 v o i d </space/> S i e v e ( ) 
 { 
 / / </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> M X ; </space/> i </space/> + = </space/> 2 ) 
 / / </space/> n x t P r i m e [ i ] </space/> = </space/> i ; 
 / / </space/> n x t P r i m e [ 2 ] </space/> = </space/> 2 , 
 n x t P r i m e [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> M X ; </space/> i + + ) 
 { 
 i f </space/> ( n x t P r i m e [ i ] </space/> = = </space/> 0 ) 
 { 
 n x t P r i m e [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < = </space/> M X ; </space/> j </space/> + = </space/> i ) 
 n x t P r i m e [ j ] </space/> = </space/> i ; 
 } 
 } 
 / / </space/> p r i m e s . p b ( 2 ) ; 
 / / </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> M X ; </space/> i </space/> + = </space/> 2 ) 
 / / </space/> i f </space/> ( n x t P r i m e [ i ] ) 
 / / </space/> p r i m e s . p b ( i ) ; 
 } 
 v e c t o r < i n t > </space/> F a c t o r i z e ( i n t </space/> n ) 
 { 
 i n t </space/> j </space/> = </space/> 0 ; 
 v e c t o r < i n t > </space/> f a c t o r s ; 
 w h i l e </space/> ( n </space/> > </space/> 1 ) 
 { 
 i n t </space/> p p </space/> = </space/> n x t P r i m e [ n ] ; 
 f a c t o r s . p b ( p p ) ; 
 w h i l e </space/> ( n </space/> % </space/> p p </space/> = = </space/> 0 ) 
 n </space/> / = </space/> p p ; 
 } 
 r e t u r n </space/> f a c t o r s ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 S i e v e ( ) ; 
 i n t </space/> n ; 
 / / </space/> f o r ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> 1 0 ; </space/> i + + ) 
 / / </space/> c o u t </space/> < < </space/> n x t P r i m e [ i ] </space/> < < "" </space/> "" ; 
 c i n </space/> > > </space/> n ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a r [ i ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 v e c t o r < i n t > </space/> d i v s ; 
 
 d i v s </space/> = </space/> F a c t o r i z e ( a r [ i ] ) ; 
 
 i f </space/> ( d i v s . s i z e ( ) </space/> < = </space/> 1 ) 
 a n s . p b ( { </space/> - 1 , </space/> - 1 </space/> } ) ; 
 e l s e 
 { 
 i n t </space/> d 1 </space/> = </space/> d i v s [ 0 ] ; 
 i n t </space/> d 2 </space/> = </space/> d i v s [ 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> d i v s . s i z e ( ) ; </space/> i + + ) 
 d 2 </space/> * = </space/> d i v s [ i ] ; 
 a n s . p b ( { </space/> d 1 , </space/> d 2 </space/> } ) ; 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i t . f f </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i t . s s </space/> < < </space/> "" </space/> "" ; 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> M A X N </space/> 1 0 0 0 0 0 0 5 
 
 v o i d </space/> i n i t _ c o d e ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 f r e o p e n ( "" e r r o r . t x t "" , </space/> "" w "" , </space/> s t d e r r ) ; 
 # e n d i f 
 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 } 
 i n t </space/> s p f [ M A X N ] ; 
 
 v o i d </space/> s i e v e ( ) 
 { 
 s p f [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> M A X N ; </space/> i + + ) 
 s p f [ i ] </space/> = </space/> i ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 4 ; </space/> i </space/> < </space/> M A X N ; </space/> i </space/> + = </space/> 2 ) 
 s p f [ i ] </space/> = </space/> 2 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> * </space/> i </space/> < </space/> M A X N ; </space/> i + + ) 
 { 
 
 i f </space/> ( s p f [ i ] </space/> = = </space/> i ) 
 { 
 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> M A X N ; </space/> j </space/> + = </space/> i ) 
 
 
 i f </space/> ( s p f [ j ] </space/> = = </space/> j ) 
 s p f [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 v e c t o r < i n t > </space/> g e t F a c t o r i z a t i o n ( i n t </space/> x ) 
 { 
 v e c t o r < i n t > </space/> r e t ; 
 / / </space/> f o r </space/> d i s t i n c t </space/> w i t h o u t </space/> s e t . . . . . . 
 w h i l e </space/> ( x </space/> ! = </space/> 1 ) 
 { 
 r e t . p u s h _ b a c k ( s p f [ x ] ) ; 
 i n t </space/> p </space/> = </space/> s p f [ x ] ; 
 w h i l e </space/> ( x </space/> % </space/> p </space/> = = </space/> 0 ) 
 x </space/> = </space/> x </space/> / </space/> p ; 
 } 
 
 
 r e t u r n </space/> r e t ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n i t _ c o d e ( ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> a n s 1 [ n ] , </space/> a n s 2 [ n ] ; 
 s i e v e ( ) ; 
 / / </space/> v e c t o r < i n t > a n s </space/> = </space/> g e t F a c t o r i z a t i o n ( 2 ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> e n d l ; 
 v e c t o r < i n t > </space/> a n s </space/> = </space/> g e t F a c t o r i z a t i o n ( a [ i ] ) ; 
 i n t </space/> e l 1 </space/> = </space/> 1 , </space/> e l 2 </space/> = </space/> 1 ; 
 i f </space/> ( a n s . s i z e ( ) </space/> = = </space/> 1 ) 
 a n s 1 [ i ] </space/> = </space/> a n s 2 [ i ] </space/> = </space/> - 1 ; 
 e l s e 
 { 
 e l 1 </space/> = </space/> a n s [ 0 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> a n s . s i z e ( ) ; </space/> i + + ) 
 e l 2 </space/> * = </space/> a n s [ i ] ; 
 / / </space/> c o u t </space/> < < </space/> 1 </space/> < < </space/> e n d l ; 
 a n s 1 [ i ] </space/> = </space/> e l 1 ; 
 a n s 2 [ i ] </space/> = </space/> e l 2 ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> : </space/> a n s 1 ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> : </space/> a n s 2 ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i s o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l l d ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 l l ; 
 # d e f i n e </space/> p b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> c l r ( x , </space/> n ) </space/> m e m s e t ( ( x ) , </space/> n , </space/> s i z e o f ( x ) ) 
 / * 
 # i n c l u d e </space/> < e x t / p b _ d s / a s s o c _ c o n t a i n e r . h p p > 
 # i n c l u d e </space/> < e x t / p b _ d s / t r e e _ p o l i c y . h p p > 
 u s i n g </space/> n a m e s p a c e </space/> _ _ g n u _ p b d s ; 
 t y p e d e f </space/> t r e e < l l </space/> , n u l l _ t y p e , l e s s < l l > , r b _ t r e e _ t a g , t r e e _ o r d e r _ s t a t i s t i c s _ n o d e _ u p d a t e > </space/> i n d e x e d _ t r e e ; 
 * / 
 l l </space/> a r r [ 5 0 0 0 0 5 ] ; 
 c o n s t </space/> l l </space/> M A X </space/> = </space/> 1 e 7 </space/> + </space/> 5 ; 
 l l </space/> p r i m e [ M A X ] ; 
 v e c t o r < l l > </space/> p r i m e s ; 
 v o i d </space/> s e i v e ( ) 
 { 
 p r i m e [ 0 ] </space/> = </space/> p r i m e [ 1 ] </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> M A X ; </space/> i + + ) 
 { 
 p r i m e [ i ] </space/> = </space/> 1 ; 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 2 ; </space/> i </space/> * </space/> i </space/> < </space/> M A X ; </space/> i + + ) 
 { 
 i f </space/> ( p r i m e [ i ] </space/> = = </space/> 1 ) 
 { 
 / / </space/> p r i m e s . p b ( i ) ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> M A X ; </space/> j </space/> + = </space/> i ) 
 { 
 p r i m e [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> v 1 , </space/> v 2 ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 l l </space/> n u m </space/> = </space/> a r r [ i ] ; 
 
 i f </space/> ( p r i m e [ n u m ] </space/> = = </space/> 1 ) 
 { 
 v 1 . p b ( - 1 ) ; 
 v 2 . p b ( - 1 ) ; 
 c o n t i n u e ; 
 } 
 
 l l </space/> x </space/> = </space/> p r i m e [ n u m ] , </space/> y ; 
 w h i l e </space/> ( n u m </space/> % </space/> x </space/> = = </space/> 0 ) 
 { 
 n u m </space/> / = </space/> x ; 
 } 
 y </space/> = </space/> n u m ; 
 i f </space/> ( y </space/> = = </space/> 1 ) 
 { 
 v 1 . p b ( - 1 ) ; 
 v 2 . p b ( - 1 ) ; 
 c o n t i n u e ; 
 } 
 i f </space/> ( _ _ g c d ( x </space/> + </space/> y , </space/> a r r [ i ] ) </space/> = = </space/> 1 ) 
 { 
 v 1 . p b ( x ) ; 
 v 2 . p b ( y ) ; 
 } 
 e l s e 
 { 
 v 1 . p b ( - 1 ) ; 
 v 2 . p b ( - 1 ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> c u r </space/> : </space/> v 1 ) 
 { 
 c o u t </space/> < < </space/> c u r </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> c u r </space/> : </space/> v 2 ) 
 { 
 c o u t </space/> < < </space/> c u r </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 / / </space/> f a c t o r i a l ( ) ; 
 / / </space/> i s o ; 
 l l </space/> t ; 
 s e i v e ( ) ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 c o n s t </space/> d o u b l e </space/> e p s </space/> = </space/> 1 e - 8 ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 2 0 0 0 0 0 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> M A X A </space/> = </space/> 1 e 7 ; 
 
 i n t </space/> a [ m a x n ] ; 
 v e c t o r < i n t > </space/> p r i m e s ; 
 i n t </space/> m i n d [ M A X A </space/> + </space/> 5 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> M A X A ; </space/> i + + ) 
 { 
 i f </space/> ( m i n d [ i ] </space/> = = </space/> 0 ) 
 { 
 p r i m e s . e m p l a c e _ b a c k ( i ) ; 
 m i n d [ i ] </space/> = </space/> i ; 
 } 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> p r i m e s ) 
 { 
 i f </space/> ( x </space/> > </space/> m i n d [ i ] </space/> | | </space/> x </space/> > </space/> M A X A </space/> / </space/> i ) 
 { 
 b r e a k ; 
 } 
 m i n d [ i </space/> * </space/> x ] </space/> = </space/> x ; 
 } 
 } 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> v e c 1 ; 
 v e c t o r < i n t > </space/> v e c 2 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> a </space/> = </space/> 1 ; 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i n t </space/> s </space/> = </space/> m i n d [ x ] ; 
 / / </space/> c o u t </space/> < < </space/> m i n d [ x ] </space/> < < </space/> e n d l ; 
 w h i l e </space/> ( x </space/> % </space/> s </space/> = = </space/> 0 ) 
 { 
 a </space/> * = </space/> s ; 
 x </space/> / = </space/> s ; 
 } 
 / / </space/> c o u t </space/> < < </space/> a </space/> < < </space/> "" </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 v e c 1 . e m p l a c e _ b a c k ( - 1 ) ; 
 v e c 2 . e m p l a c e _ b a c k ( - 1 ) ; 
 } 
 e l s e 
 { 
 v e c 1 . e m p l a c e _ b a c k ( a ) ; 
 v e c 2 . e m p l a c e _ b a c k ( x ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> v e c 1 ) 
 { 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> v e c 2 ) 
 { 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 5 0 0 0 1 0 ; 
 c o n s t </space/> l l </space/> A </space/> = </space/> 1 0 0 0 0 0 1 0 ; 
 b o o l </space/> v i s [ A ] ; 
 l l </space/> c n t P , </space/> n ; 
 l l </space/> p [ A ] , </space/> a [ N ] , </space/> d 1 [ N ] , </space/> d 2 [ N ] ; 
 v e c t o r < l l > </space/> q [ A ] ; 
 v o i d </space/> d i v i d e ( l l </space/> n ) 
 { 
 l l </space/> t m p </space/> = </space/> n ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> c n t P </space/> & & </space/> 1 l l </space/> * </space/> p [ i ] </space/> * </space/> p [ i ] </space/> < = </space/> t m p ; </space/> i + + ) 
 { 
 i f </space/> ( t m p </space/> % </space/> p [ i ] </space/> = = </space/> 0 ) 
 { 
 q [ n ] . p u s h _ b a c k ( p [ i ] ) ; 
 w h i l e </space/> ( t m p </space/> % </space/> p [ i ] </space/> = = </space/> 0 ) 
 t m p </space/> / = </space/> p [ i ] ; 
 } 
 } 
 i f </space/> ( t m p </space/> > </space/> 1 ) 
 q [ n ] . p u s h _ b a c k ( t m p ) ; 
 } 
 v o i d </space/> p r i m e ( ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> A ; </space/> i + + ) 
 { 
 i f </space/> ( ! v i s [ i ] ) 
 p [ + + c n t P ] </space/> = </space/> i ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> c n t P </space/> & & </space/> i </space/> * </space/> p [ j ] </space/> < </space/> A ; </space/> j + + ) 
 { 
 v i s [ p [ j ] </space/> * </space/> i ] </space/> = </space/> 1 ; 
 i f </space/> ( i </space/> % </space/> p [ j ] </space/> = = </space/> 0 ) 
 b r e a k ; 
 } 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & n ) ; 
 p r i m e ( ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s c a n f ( "" % l l d "" , </space/> & a [ i ] ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 / / 	 	 c o u t < < "" h i a h i a h i a "" < < e n d l < < a [ i ] < < e n d l ; 
 i f </space/> ( ! v i s [ a [ i ] ] ) 
 { 
 d 1 [ i ] </space/> = </space/> d 2 [ i ] </space/> = </space/> - 1 ; 
 c o n t i n u e ; 
 } 
 / / 	 	 c o u t < < 1 < < e n d l ; 
 i f </space/> ( q [ a [ i ] ] . s i z e ( ) </space/> = = </space/> 0 ) 
 d i v i d e ( a [ i ] ) ; 
 / / 	 	 c o u t < < 2 < < e n d l ; 
 i f </space/> ( q [ a [ i ] ] . s i z e ( ) </space/> < = </space/> 1 ) 
 { 
 d 1 [ i ] </space/> = </space/> d 2 [ i ] </space/> = </space/> - 1 ; 
 c o n t i n u e ; 
 } 
 / / 	 	 c o u t < < 3 < < e n d l ; 
 l l </space/> x </space/> = </space/> 1 , </space/> y </space/> = </space/> a [ i ] ; 
 w h i l e </space/> ( y </space/> % </space/> q [ a [ i ] ] [ 0 ] </space/> = = </space/> 0 ) 
 y </space/> / = </space/> q [ a [ i ] ] [ 0 ] , </space/> x </space/> * = </space/> q [ a [ i ] ] [ 0 ] ; 
 i f </space/> ( y </space/> > </space/> 1 </space/> & & </space/> x </space/> > </space/> 1 ) 
 d 1 [ i ] </space/> = </space/> x , </space/> d 2 [ i ] </space/> = </space/> y ; 
 e l s e 
 d 1 [ i ] </space/> = </space/> d 2 [ i ] </space/> = </space/> - 1 ; 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % l l d </space/> "" , </space/> d 1 [ i ] ) ; 
 p u t s ( "" "" ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % l l d </space/> "" , </space/> d 2 [ i ] ) ; 
 p u t s ( "" "" ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / / </space/> B I S M I L L A H I R </space/> R A H M A N I R </space/> R A H E E M 
 / / / </space/> A L L A H </space/> I S </space/> W A T C H I N G </space/> M E 
 / / / </space/> A L L A H </space/> s a v e </space/> u s </space/> f r o m </space/> C O V I D - 1 9 . A m i n . 
 / / / </space/> E v e r y </space/> s o u l </space/> s h a l l </space/> t a s t e </space/> d e a t h . 
 / * </space/> W h i c h </space/> o f </space/> t h e </space/> f a v o r s </space/> o f </space/> y o u r </space/> L o r d </space/> w i l l </space/> y o u </space/> d e n y ? </space/> * / 
 / / / </space/> I </space/> L o v e </space/> M y </space/> P r o p h e t </space/> H a z r a t </space/> M o h a m m a d ( S A ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i o s </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> c s b </space/> _ _ b u i l t i n _ p o p c o u n t 
 # d e f i n e </space/> m a x n </space/> 1 0 0 0 0 0 0 5 
 i n t </space/> d x x [ ] </space/> = </space/> { </space/> 0 , </space/> 0 , </space/> 1 , </space/> - 1 , </space/> - 1 , </space/> 1 , </space/> - 1 , </space/> 1 </space/> } ; 
 i n t </space/> d y y [ ] </space/> = </space/> { </space/> 1 , </space/> - 1 , </space/> 0 , </space/> 0 , </space/> - 1 , </space/> 1 , </space/> 1 , </space/> - 1 </space/> } ; 
 b o o l </space/> s o r t b y s e c ( c o n s t </space/> p a i r < i n t , </space/> i n t > & </space/> a , </space/> c o n s t </space/> p a i r < i n t , </space/> i n t > & </space/> b ) 
 { 
 r e t u r n </space/> ( a . s s </space/> < </space/> b . s s ) ; 
 } 
 l l </space/> a r [ m a x n ] ; 
 v o i d </space/> s e i v e ( ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> m a x n ; </space/> i + + ) 
 { 
 i f </space/> ( ! a r [ i ] ) 
 { 
 f o r </space/> ( l l </space/> j </space/> = </space/> i </space/> * </space/> i ; </space/> j </space/> < </space/> m a x n ; </space/> j </space/> + = </space/> i ) 
 i f </space/> ( ! a r [ j ] ) 
 a r [ j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 i o s ; 
 s e i v e ( ) ; 
 l l </space/> n , </space/> x ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l l > </space/> v 1 , </space/> v 2 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( ! a r [ x ] ) 
 v 1 . p b ( - 1 ) , </space/> v 2 . p b ( - 1 ) ; 
 e l s e 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 l l </space/> y </space/> = </space/> a r [ x ] ; 
 w h i l e </space/> ( x </space/> % </space/> y </space/> = = </space/> 0 ) 
 { 
 x </space/> / = </space/> y ; 
 a n s </space/> * = </space/> y ; 
 } 
 i f </space/> ( x </space/> = = </space/> 1 ) 
 v 1 . p b ( - 1 ) , </space/> v 2 . p b ( - 1 ) ; 
 e l s e 
 v 1 . p b ( x ) , </space/> v 2 . p b ( a n s ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> k </space/> : </space/> v 1 ) 
 c o u t </space/> < < </space/> k </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> v 2 ) 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 
 
 / / </space/> A l h a m d u l i l l a h 
",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v e c t o r < i n t > </space/> p r i m e s ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> * </space/> i </space/> < = </space/> 1 0 0 0 0 0 0 0 ; </space/> i + + ) 
 { 
 b o o l </space/> g o o d </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> p r i m e </space/> : </space/> p r i m e s ) 
 { 
 i f </space/> ( i </space/> % </space/> p r i m e </space/> = = </space/> 0 ) 
 { 
 g o o d </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( g o o d ) 
 p r i m e s . p u s h _ b a c k ( i ) ; 
 } 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < l o n g </space/> l o n g </space/> i n t > </space/> a ( n ) , </space/> b ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n u m ; 
 c i n </space/> > > </space/> n u m ; 
 l o n g </space/> l o n g </space/> i n t </space/> d 1 </space/> = </space/> 1 , </space/> d 2 </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> p r i m e s . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( n u m </space/> % </space/> p r i m e s [ j ] </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( d 1 </space/> = = </space/> 1 ) 
 d 1 </space/> * = </space/> p r i m e s [ j ] ; 
 e l s e 
 d 2 </space/> * = </space/> p r i m e s [ j ] ; 
 
 w h i l e </space/> ( n u m </space/> % </space/> p r i m e s [ j ] </space/> = = </space/> 0 ) 
 n u m </space/> / = </space/> p r i m e s [ j ] ; 
 } 
 } 
 i f </space/> ( n u m </space/> > </space/> 1 ) 
 d 2 </space/> * = </space/> n u m ; 
 i f </space/> ( d 1 </space/> = = </space/> 1 </space/> | | </space/> d 2 </space/> = = </space/> 1 ) 
 { 
 a [ i ] </space/> = </space/> - 1 ; 
 b [ i ] </space/> = </space/> - 1 ; 
 } 
 e l s e 
 { 
 a [ i ] </space/> = </space/> d 1 ; 
 b [ i ] </space/> = </space/> d 2 ; 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' ; 
 c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> b ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> n , </space/> x , </space/> i d x </space/> = </space/> 0 , </space/> l </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ s e t < i n t > </space/> s 1 ; 
 i n t </space/> t [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> x ; 
 s 1 . i n s e r t ( x ) ; 
 i f </space/> ( l </space/> ! = </space/> s 1 . s i z e ( ) ) 
 { 
 l + + ; 
 t [ i d x + + ] </space/> = </space/> x ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> i d x ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> t [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> i ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> v ( 2 </space/> * </space/> n ) , </space/> v e c ; 
 s e t < i n t > </space/> s ; 
 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> v [ i ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s . f i n d ( v [ i ] ) </space/> = = </space/> s . e n d ( ) ) 
 { 
 s . i n s e r t ( v [ i ] ) ; 
 v e c . p u s h _ b a c k ( v [ i ] ) ; 
 } 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> v e c [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 9 
 # d e f i n e </space/> l p ( i , </space/> n ) </space/> f o r </space/> ( s i z e _ t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> c h a r </space/> n l </space/> = </space/> ' \ n ' ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> p ( 2 </space/> * </space/> n ) ; 
 l p ( i , </space/> 2 </space/> * </space/> n ) 
 { 
 c i n </space/> > > </space/> p [ i ] ; 
 } 
 s e t < i n t > </space/> v i s ; 
 v e c t o r < i n t > </space/> r e s ; 
 l p ( i , </space/> 2 </space/> * </space/> n ) 
 { 
 i f </space/> ( ! v i s . c o u n t ( p [ i ] ) ) 
 { 
 r e s . p u s h _ b a c k ( p [ i ] ) ; 
 v i s . i n s e r t ( p [ i ] ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> e l </space/> : </space/> r e s ) 
 { 
 c o u t </space/> < < </space/> e l </space/> < < </space/> ' </space/> ' ; 
 } 
 c o u t </space/> < < </space/> n l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m o d </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ 2 </space/> * </space/> n ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 
 i n t </space/> v i s [ n </space/> + </space/> 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( v i s [ a [ i ] ] </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; 
 v i s [ a [ i ] ] </space/> = </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 s e t < i n t > </space/> s ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( s . f i n d ( x ) </space/> = = </space/> s . e n d ( ) ) 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 s . i n s e r t ( x ) ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < n u m e r i c > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 v e c t o r < i n t > </space/> v ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r ; 
 i n t </space/> f r e q [ n </space/> + </space/> 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> a r r ; 
 i f </space/> ( f r e q [ a r r ] </space/> = = </space/> 0 ) 
 { 
 f r e q [ a r r ] + + ; 
 v . p u s h _ b a c k ( a r r ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> v ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( i n t </space/> a r g c , </space/> c h a r </space/> c o n s t * </space/> a r g v [ ] ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - </space/> > </space/> 0 ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * * 
 a u t h o r : </space/> B i j o y </space/> S i n g h </space/> R a j p u t 
 "" </space/> N a m </space/> T h o </space/> S u n a h i </space/> H o g a </space/> "" 
 * * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] , </space/> k ; 
 m a p < i n t , </space/> i n t > </space/> m p ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> k ; 
 i f </space/> ( m p [ k ] ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> k </space/> < < </space/> "" </space/> "" ; 
 m p [ k ] </space/> = </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> F S T _ I O </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> F L _ I N </space/> f r e o p e n ( "" i n . t x t "" , </space/> "" r "" , </space/> s t d i n ) 
 # d e f i n e </space/> F L _ O U T </space/> f r e o p e n ( "" o u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 t y p e d e f </space/> u n s i g n e d </space/> i n t </space/> u i ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> d o u b l e </space/> d b ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d b ; 
 # d e f i n e </space/> n l </space/> "" \ n "" 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 . 0 ) 
 # d e f i n e </space/> m e m ( a r r , </space/> v a l ) </space/> m e m s e t ( a r r , </space/> v a l , </space/> s i z e o f ( a r r ) ) 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> s u r u </space/> i n t </space/> m a i n ( ) 
 # d e f i n e </space/> s e s h </space/> r e t u r n </space/> 0 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p r </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 
 # d e f i n e </space/> s i 1 ( x ) </space/> s c a n f ( "" % d "" , </space/> & x ) 
 # d e f i n e </space/> s i 2 ( x , </space/> y ) </space/> s c a n f ( "" % d </space/> % d "" , </space/> & x , </space/> & y ) 
 # d e f i n e </space/> s i 3 ( x , </space/> y , </space/> z ) </space/> s c a n f ( "" % d </space/> % d </space/> % d "" , </space/> & x , </space/> & y , </space/> & z ) 
 # d e f i n e </space/> s d 1 ( x ) </space/> s c a n f ( "" % l f "" , </space/> & x ) 
 # d e f i n e </space/> s d 2 ( x , </space/> y ) </space/> s c a n f ( "" % l f </space/> % l f "" , </space/> & x , </space/> & y ) 
 # d e f i n e </space/> s d 3 ( x , </space/> y , </space/> z ) </space/> s c a n f ( "" % l f </space/> % l f </space/> % l f "" , </space/> & x , </space/> & y , </space/> & z ) 
 # d e f i n e </space/> s l i 1 ( x ) </space/> s c a n f ( "" % l l d "" , </space/> & x ) 
 # d e f i n e </space/> s l i 2 ( x , </space/> y ) </space/> s c a n f ( "" % l l d </space/> % l l d "" , </space/> & x , </space/> & y ) 
 # d e f i n e </space/> s l i 3 ( x , </space/> y , </space/> z ) </space/> s c a n f ( "" % l l d </space/> % l l d </space/> % l l d "" , </space/> & x , </space/> & y , </space/> & z ) 
 
 s u r u 
 { 
 l l </space/> t s t ; 
 s l i 1 ( t s t ) ; 
 w h i l e </space/> ( t s t - - ) 
 { 
 l l </space/> n ; 
 s l i 1 ( n ) ; 
 n </space/> = </space/> 2 </space/> * </space/> n ; 
 l l </space/> a r r [ n ] ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 s l i 1 ( a r r [ i ] ) ; 
 l l </space/> c n t </space/> = </space/> 0 ; 
 s e t < l l > </space/> s t ; 
 v e c t o r < l l > </space/> v ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s t . i n s e r t ( a r r [ i ] ) ; 
 i f </space/> ( c n t </space/> ! = </space/> s t . s i z e ( ) ) 
 { 
 v . p b ( a r r [ i ] ) ; 
 c n t + + ; 
 } 
 } 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 c o u t </space/> < < </space/> v [ i ] </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> n l ; 
 } 
 s e s h ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n , </space/> x , </space/> y , </space/> z ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ s e t < i n t > </space/> a ; 
 v e c t o r < i n t > </space/> a n s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( a . f i n d ( x ) </space/> = = </space/> a . e n d ( ) ) 
 a n s . p u s h _ b a c k ( x ) ; 
 a . i n s e r t ( x ) ; 
 } 
 / / </space/> r e v e r s e ( a n s . b e g i n ( ) , a n s . e n d ( ) ) ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" e . i n "" , "" r "" , </space/> s t d i n ) ; 
 l l </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 / / </space/> c o u t < < "" C a s e </space/> "" < < i < < "" : </space/> "" ; 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> E x a m p l e 
 / / </space/> i n p u t C o p y 
 / / </space/> 5 
 / / </space/> 2 
 / / </space/> 1 </space/> 1 </space/> 2 </space/> 2 
 / / </space/> 4 
 / / </space/> 1 </space/> 3 </space/> 1 </space/> 4 </space/> 3 </space/> 4 </space/> 2 </space/> 2 
 / / </space/> 5 
 / / </space/> 1 </space/> 2 </space/> 1 </space/> 2 </space/> 3 </space/> 4 </space/> 3 </space/> 5 </space/> 4 </space/> 5 
 / / </space/> 3 
 / / </space/> 1 </space/> 2 </space/> 3 </space/> 1 </space/> 2 </space/> 3 
 / / </space/> 4 
 / / </space/> 2 </space/> 3 </space/> 2 </space/> 4 </space/> 1 </space/> 3 </space/> 4 </space/> 1 
 / / </space/> o u t p u t C o p y 
 / / </space/> 1 </space/> 2 
 / / </space/> 1 </space/> 3 </space/> 4 </space/> 2 
 / / </space/> 1 </space/> 2 </space/> 3 </space/> 4 </space/> 5 
 / / </space/> 1 </space/> 2 </space/> 3 
 / / </space/> 2 </space/> 3 </space/> 4 </space/> 1 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i l l </space/> i n t </space/> l o n g </space/> l o n g 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> y o u r </space/> c o d e </space/> g o e s </space/> h e r e 
 i l l </space/> t , </space/> i ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 i l l </space/> n u m ; 
 c i n </space/> > > </space/> n u m ; 
 m a p < i l l , </space/> i l l > </space/> m ; 
 i l l </space/> t 1 , </space/> j ; 
 
 f o r </space/> ( j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> ( 2 </space/> * </space/> n u m ) ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> t 1 ; 
 i f </space/> ( m [ t 1 ] </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> t 1 </space/> < < </space/> "" </space/> "" ; 
 m [ t 1 ] + + ; 
 } 
 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> p r i n t D i s t i n c t ( i n t </space/> a r r [ ] , </space/> i n t </space/> n ) 
 { 
 / / </space/> P i c k </space/> a l l </space/> e l e m e n t s </space/> o n e </space/> b y </space/> o n e 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 / / </space/> C h e c k </space/> i f </space/> t h e </space/> p i c k e d </space/> e l e m e n t </space/> i s </space/> a l r e a d y </space/> p r i n t e d 
 i n t </space/> j ; 
 f o r </space/> ( j </space/> = </space/> 0 ; </space/> j </space/> < </space/> i ; </space/> j + + ) 
 i f </space/> ( a r r [ i ] </space/> = = </space/> a r r [ j ] ) 
 b r e a k ; 
 
 / / </space/> I f </space/> n o t </space/> p r i n t e d </space/> e a r l i e r , </space/> t h e n </space/> p r i n t </space/> i t 
 i f </space/> ( i </space/> = = </space/> j ) 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ n </space/> * </space/> 2 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 } 
 p r i n t D i s t i n c t ( a r r , </space/> n </space/> * </space/> 2 ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> x ; 
 i n t </space/> a r r [ n </space/> * </space/> 2 ] </space/> = </space/> { } ; 
 i n t </space/> c o u n </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 i n t </space/> f l a g </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> i ; </space/> j + + ) 
 { 
 i f </space/> ( x </space/> = = </space/> a r r [ j ] ) 
 { 
 f l a g </space/> = </space/> 1 ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( f l a g </space/> = = </space/> 0 ) 
 { 
 a r r [ c o u n ] </space/> = </space/> x ; 
 c o u n + + ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> c o u n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
 / * </space/> s t u f f </space/> y o u </space/> s h o u l d </space/> l o o k </space/> f o r 
 * </space/> i n t </space/> o v e r f l o w , </space/> a r r a y </space/> b o u n d s 
 * </space/> s p e c i a l </space/> c a s e s </space/> ( n = 1 ? ) 
 * </space/> d o </space/> s m t h </space/> i n s t e a d </space/> o f </space/> n o t h i n g </space/> a n d </space/> s t a y </space/> o r g a n i z e d 
 * </space/> W R I T E </space/> S T U F F </space/> D O W N 
 * </space/> D O N ' T </space/> G E T </space/> S T U C K </space/> O N </space/> O N E </space/> A P P R O A C H 
 * / 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 m a i n ( ) 
 { 
 i n t </space/> t t ; 
 c i n </space/> > > </space/> t t ; 
 w h i l e </space/> ( t t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> v ( n </space/> * </space/> 2 ) , </space/> a n s ; 
 f o r </space/> ( i n t & </space/> x </space/> : </space/> v ) 
 c i n </space/> > > </space/> x ; 
 a n s . p u s h _ b a c k ( v [ 0 ] ) ; 
 f o r </space/> ( s i z e _ t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 b o o l </space/> e x i s t </space/> = </space/> t r u e ; 
 f o r </space/> ( s i z e _ t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> a n s . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( v [ i ] </space/> = = </space/> a n s [ j ] ) 
 { 
 e x i s t </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( e x i s t ) 
 a n s . p u s h _ b a c k ( v [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 
 i n t </space/> t , </space/> n , </space/> i , </space/> j ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r [ n </space/> * </space/> 2 ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r [ i ] ; 
 } 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 f o r </space/> ( j </space/> = </space/> i </space/> + </space/> 1 ; </space/> j </space/> < </space/> n </space/> * </space/> 2 ; </space/> j + + ) 
 { 
 i f </space/> ( a r [ i ] </space/> = = </space/> a r [ j ] ) 
 { 
 c o u t </space/> < < </space/> a r [ i ] </space/> < < </space/> "" </space/> "" ; 
 b r e a k ; 
 } 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ 2 </space/> * </space/> n </space/> + </space/> 1 ] , </space/> f l a g [ 2 </space/> * </space/> n </space/> + </space/> 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a r r [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( f l a g [ a r r [ i ] ] </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; 
 f l a g [ a r r [ i ] ] </space/> = </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < c m a t h > 
 / / 
 # i n c l u d e </space/> < c s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 m a p < i n t , </space/> i n t > </space/> m p ; 
 s t r i n g </space/> s t r ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 m p . c l e a r ( ) ; 
 s t r i n g </space/> s t r T e m p </space/> = </space/> "" "" ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n </space/> * </space/> 2 ; </space/> j + + ) 
 { 
 i n t </space/> t e m p ; 
 c i n </space/> > > </space/> t e m p ; 
 i f </space/> ( ! m p . c o u n t ( t e m p ) ) 
 { 
 m p [ t e m p ] + + ; 
 s t r T e m p </space/> + = </space/> t o _ s t r i n g ( t e m p ) </space/> + </space/> ' </space/> ' ; 
 } 
 } 
 s t r </space/> + = </space/> s t r T e m p </space/> + </space/> ' \ n ' ; 
 } 
 c o u t </space/> < < </space/> s t r ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 b o o l </space/> v i s i t e d A r r a y [ 5 5 ] </space/> = </space/> { </space/> f a l s e </space/> } ; 
 i n t </space/> i n p u t [ 1 1 0 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> i n p u t [ i ] ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( v i s i t e d A r r a y [ i n p u t [ i ] ] </space/> = = </space/> f a l s e ) 
 { 
 c o u t </space/> < < </space/> i n p u t [ i ] </space/> < < </space/> "" </space/> "" ; 
 v i s i t e d A r r a y [ i n p u t [ i ] ] </space/> = </space/> t r u e ; 
 } 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> x </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ n ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 a [ x </space/> - </space/> 1 ] + + ; 
 i f </space/> ( a [ x </space/> - </space/> 1 ] </space/> > </space/> 1 ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> _ i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ 1 0 5 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> c o u n t i n g [ 1 0 5 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c o u n t i n g [ a [ i ] ] + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( c o u n t i n g [ a [ i ] ] </space/> = = </space/> 2 ) 
 { 
 c o u n t i n g [ a [ i ] ] - - ; 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 _ i o ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t t ; 
 c i n </space/> > > </space/> t t ; 
 w h i l e </space/> ( t t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a [ 2 </space/> * </space/> n ] , </space/> b [ 2 </space/> * </space/> n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 </space/> * </space/> n ; </space/> j + + ) 
 { 
 b [ j ] </space/> = </space/> 0 ; 
 } 
 i n t </space/> x </space/> = </space/> 0 , </space/> f l a g </space/> = </space/> 0 , </space/> t e m p ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 </space/> * </space/> n ; </space/> j + + ) 
 { 
 i f </space/> ( b [ j ] </space/> = = </space/> a [ i ] ) 
 { 
 f l a g </space/> = </space/> 1 ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( f l a g </space/> = = </space/> 0 ) 
 { 
 t e m p </space/> = </space/> a [ i ] ; 
 a [ i ] </space/> = </space/> b [ x ] ; 
 b [ x ] </space/> = </space/> t e m p ; 
 x + + ; 
 } 
 f l a g </space/> = </space/> 0 ; 
 } 
 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> x ; </space/> j + + ) 
 { 
 c o u t </space/> < < </space/> b [ j ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> t , </space/> n , </space/> x ; 
 b i t s e t < 5 5 > </space/> f ; 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x ; 
 i f </space/> ( ! f [ x ] ) 
 { 
 c o u t </space/> < < </space/> x </space/> < < </space/> ' </space/> ' ; 
 f [ x ] </space/> = </space/> 1 ; 
 } 
 } 
 f . r e s e t ( ) ; 
 c o u t </space/> < < </space/> ' \ n ' ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ s e t < i n t > </space/> s ; 
 i n t </space/> a ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> + </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a ; 
 i f </space/> ( s . f i n d ( a ) </space/> = = </space/> s . e n d ( ) ) 
 { 
 c o u t </space/> < < </space/> a </space/> < < </space/> "" </space/> "" ; 
 s . i n s e r t ( a ) ; 
 } 
 e l s e 
 c o n t i n u e ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 u n o r d e r e d _ s e t < i n t > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> t e m p ; 
 c i n </space/> > > </space/> t e m p ; 
 
 i f </space/> ( s . c o u n t ( t e m p ) </space/> = = </space/> 0 ) 
 { 
 s . i n s e r t ( t e m p ) ; 
 c o u t </space/> < < </space/> t e m p </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < v e c t o r > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> n , </space/> n u m b e r ; 
 v e c t o r < i n t > </space/> v ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 v . c l e a r ( ) ; 
 b o o l </space/> s e e n [ 5 1 ] </space/> = </space/> { </space/> f a l s e </space/> } ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> l l </space/> = </space/> 2 </space/> * </space/> n ; 
 w h i l e </space/> ( l l - - ) 
 { 
 c i n </space/> > > </space/> n u m b e r ; 
 i f </space/> ( ! s e e n [ n u m b e r ] ) 
 { 
 s e e n [ n u m b e r ] </space/> = </space/> t r u e ; 
 / * </space/> c o u t </space/> < < </space/> n u m b e r </space/> < < </space/> "" </space/> "" ; </space/> * / 
 v . p u s h _ b a c k ( n u m b e r ) ; 
 } 
 } 
 / * </space/> c o u t </space/> < < </space/> "" P r i n t i n g </space/> a n s w e r </space/> "" </space/> < < </space/> e n d l ; </space/> * / 
 / / </space/> p r i n t </space/> a n s w e r 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> v [ i ] ; 
 i f </space/> ( i </space/> < </space/> v . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> ' </space/> ' ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < i n t > </space/> a ( 2 </space/> * </space/> n ) ; 
 s e t < i n t > </space/> s ; 
 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n </space/> = </space/> s . s i z e ( ) ; 
 c i n </space/> > > </space/> a [ i ] ; 
 s . i n s e r t ( a [ i ] ) ; 
 
 i f </space/> ( s . s i z e ( ) </space/> > </space/> n ) 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < m a t h . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> q u e [ 2 </space/> * </space/> n ] ; 
 i n t </space/> a r r [ n ] ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 a r r [ j ] </space/> = </space/> 0 ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 2 </space/> * </space/> n ; </space/> j + + ) 
 { 
 c i n </space/> > > </space/> q u e [ j ] ; 
 i f </space/> ( a r r [ q u e [ j ] </space/> - </space/> 1 ] </space/> = = </space/> 0 ) 
 { 
 a r r [ q u e [ j ] </space/> - </space/> 1 ] + + ; 
 c o u t </space/> < < </space/> q u e [ j ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 / / # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 1 ; </space/> k </space/> < = </space/> t ; </space/> k + + ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ 2 </space/> * </space/> n </space/> + </space/> 1 ] , </space/> a r r 1 [ n </space/> + </space/> 1 ] , </space/> a r r 2 [ n </space/> + </space/> 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a r r [ i ] ; 
 i n t </space/> n u m </space/> = </space/> 0 , </space/> j </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 n u m </space/> = </space/> a r r [ i ] ; 
 i f </space/> ( a r r 2 [ n u m ] </space/> ! = </space/> 1 ) 
 a r r 2 [ n u m ] </space/> = </space/> 1 ; 
 e l s e </space/> i f </space/> ( a r r 2 [ n u m ] </space/> = = </space/> 1 ) 
 { 
 a r r 1 [ j ] </space/> = </space/> n u m ; 
 j + + ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a r r 1 [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> a , </space/> b , </space/> c , </space/> d </space/> = </space/> 0 , </space/> e , </space/> f , </space/> x , </space/> y , </space/> z , </space/> w ; 
 v e c t o r < l o n g </space/> l o n g > </space/> v , </space/> s ; 
 c i n </space/> > > </space/> a ; 
 f o r </space/> ( i n t </space/> g </space/> = </space/> 0 ; </space/> g </space/> < </space/> a ; </space/> g + + ) 
 { 
 c i n </space/> > > </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> b ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> c ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> v . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( c </space/> = = </space/> v [ j ] ) 
 { 
 d + + ; 
 } 
 } 
 i f </space/> ( d </space/> = = </space/> 0 ) 
 { 
 v . p u s h _ b a c k ( c ) ; 
 } 
 d </space/> = </space/> 0 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> v [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 v . c l e a r ( ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> r e s t o r i n g ( v e c t o r < i n t > </space/> p e r m u t a t i o n , </space/> i n t </space/> n ) 
 { 
 v e c t o r < b o o l > </space/> f o u n d ( n , </space/> f a l s e ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> p e r m u t a t i o n . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( ! f o u n d [ p e r m u t a t i o n [ i ] </space/> - </space/> 1 ] ) 
 { 
 f o u n d [ p e r m u t a t i o n [ i ] </space/> - </space/> 1 ] </space/> = </space/> t r u e ; 
 c o u t </space/> < < </space/> p e r m u t a t i o n [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < i n t > </space/> p e r m u t a t i o n ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n </space/> * </space/> 2 ; </space/> j + + ) 
 { 
 i n t </space/> x ; 
 c i n </space/> > > </space/> x ; 
 p e r m u t a t i o n . p u s h _ b a c k ( x ) ; 
 } 
 r e s t o r i n g ( p e r m u t a t i o n , </space/> n ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p i ; 
 
 c o n s t </space/> l l </space/> I N F </space/> = </space/> 1 e 1 8 ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> m k p </space/> m a k e _ p a i r 
 
 # d e f i n e </space/> d b s </space/> c o u t </space/> < < </space/> "" D e b u g \ n "" ; 
 # d e f i n e </space/> d b a r ( a r r , </space/> n ) </space/> \ 
 { </space/> \ 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) </space/> \ 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; </space/> \ 
 } </space/> \ 
 c o u t </space/> < < </space/> ' \ n ' ; 
 
 # d e f i n e </space/> f l ( i , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 # d e f i n e </space/> f l s ( i , </space/> l , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> l ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 # d e f i n e </space/> f l b ( i , </space/> l , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> l ; </space/> i </space/> > = </space/> n ; </space/> - - i ) 
 # d e f i n e </space/> a l ( z , </space/> x ) </space/> f o r </space/> ( a u t o </space/> x </space/> : </space/> z ) 
 # d e f i n e </space/> a l b ( z , </space/> i t ) </space/> f o r </space/> ( a u t o </space/> i t </space/> = </space/> z . r b e g i n ( ) ; </space/> i t </space/> ! = </space/> z . r e n d ( ) ; </space/> + + i t ) 
 # d e f i n e </space/> m e m s ( z , </space/> k ) </space/> m e m s e t ( z , </space/> k , </space/> s i z e o f ( z ) ) 
 # d e f i n e </space/> f i n d i n ( a , </space/> b ) </space/> ( a . f i n d ( b ) </space/> ! = </space/> a . e n d ( ) </space/> ? </space/> t r u e </space/> : </space/> f a l s e ) 
 
 # d e f i n e </space/> m a x n </space/> ( l l ) 1 e 2 </space/> + </space/> 7 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 l l </space/> T T </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> T T ; 
 w h i l e </space/> ( T T - - ) 
 { 
 l l </space/> n , </space/> k </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 n </space/> * = </space/> 2 ; 
 b o o l </space/> v i s [ m a x n ] </space/> = </space/> { </space/> 0 </space/> } ; 
 v i </space/> r e s ; 
 f l ( i , </space/> n ) 
 { 
 c i n </space/> > > </space/> k ; 
 i f </space/> ( ! v i s [ k ] ) 
 { 
 r e s . p b ( k ) ; 
 v i s [ k ] </space/> = </space/> 1 ; 
 } 
 } 
 a l ( r e s , </space/> i t ) </space/> c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> ' \ n ' ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i n t </space/> n ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 i n t </space/> a r r [ 2 </space/> * </space/> n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a r r [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> i ; </space/> j + + ) 
 { 
 i f </space/> ( a r r [ j ] </space/> = = </space/> a r r [ i ] ) 
 { 
 a r r [ i ] </space/> = </space/> 0 ; 
 } 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a r r [ i ] </space/> ! = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> I s _ r e p e a t ( i n t </space/> a [ ] , </space/> i n t </space/> e n d ) 
 { 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 0 ; </space/> k </space/> < </space/> e n d ; </space/> k + + ) 
 { 
 i f </space/> ( a [ k ] </space/> = = </space/> a [ e n d ] ) 
 { 
 r e t u r n </space/> 1 ; 
 b r e a k ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> n , </space/> i ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> d </space/> = </space/> 2 </space/> * </space/> n ; 
 i n t </space/> a [ d ] ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 
 i n t </space/> b [ n ] ; 
 i n t </space/> j </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 </space/> * </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> c </space/> = </space/> I s _ r e p e a t ( a , </space/> i ) ; 
 i f </space/> ( c </space/> = = </space/> 0 ) 
 { 
 b [ j + + ] </space/> = </space/> a [ i ] ; 
 } 
 } 
 
 f o r </space/> ( i n t </space/> l </space/> = </space/> 0 ; </space/> l </space/> < </space/> n ; </space/> l + + ) 
 { 
 c o u t </space/> < < </space/> b [ l ] </space/> < < </space/> "" </space/> "" ; 
 } 
 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> d b ( a ) </space/> c o u t </space/> < < </space/> # a </space/> < < </space/> "" = "" </space/> < < </space/> ( a ) </space/> < < </space/> ' \ n ' ; 
 # d e f i n e </space/> D B ( a ) </space/> \ 
 { </space/> \ 
 c o u t </space/> < < </space/> # a </space/> < < </space/> "" </space/> "" ; </space/> \ 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a ) </space/> \ 
 c o u t </space/> < < </space/> x </space/> < < </space/> ' </space/> ' ; </space/> \ 
 c o u t </space/> < < </space/> ' \ n ' ; </space/> \ 
 } 
 # d e f i n e </space/> D B B ( a ) </space/> \ 
 { </space/> \ 
 c o u t </space/> < < </space/> # a </space/> < < </space/> "" </space/> "" ; </space/> \ 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a ) </space/> \ 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> ' </space/> ' </space/> < < </space/> x . s e c o n d </space/> < < </space/> "" </space/> "" ; </space/> \ 
 c o u t </space/> < < </space/> ' \ n ' ; </space/> \ 
 } 
 # d e f i n e </space/> b b </space/> b e g i n ( ) 
 # d e f i n e </space/> e e </space/> e n d ( ) 
 # d e f i n e </space/> s s </space/> s i z e ( ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> t e </space/> \ 
 i n t </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> a ; 
 c i n </space/> > > </space/> a ; 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' b ' ; </space/> c - - ) 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a . s s ; </space/> i + + ) 
 i f </space/> ( a [ i ] </space/> = = </space/> c </space/> & & </space/> ( i </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> a [ i </space/> - </space/> 1 ] </space/> = = </space/> c </space/> - </space/> 1 </space/> | | </space/> i </space/> < </space/> a . s s </space/> - </space/> 1 </space/> & & </space/> a [ i </space/> + </space/> 1 ] </space/> = = </space/> c </space/> - </space/> 1 ) ) 
 { 
 a . e r a s e ( a . b b </space/> + </space/> i ) ; 
 i </space/> = </space/> - 1 ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> a . s s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 
 # d e f i n e </space/> n l i n e </space/> c o u t </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> d c o u t ( n ) </space/> c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( n ) 
 # d e f i n e </space/> d e b u g ( a ) </space/> \ 
 ; </space/> \ 
 c o u t </space/> < < </space/> "" </space/> h e r e </space/> "" </space/> < < </space/> # a </space/> < < </space/> "" </space/> = = </space/> "" </space/> < < </space/> a </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> r e a c h </space/> c o u t </space/> < < </space/> "" - - - > r e a c h e d </space/> h e r e < - - - "" </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> m s ( s , </space/> n ) </space/> m e m s e t ( s , </space/> n , </space/> s i z e o f ( s ) ) 
 # d e f i n e </space/> r e v ( s ) </space/> r e v e r s e ( s . b e g i n ( ) , </space/> s . e n d ( ) ) ; 
 # d e f i n e </space/> t c ( ) </space/> \ 
 l l </space/> i n t </space/> N ; </space/> \ 
 c i n </space/> > > </space/> N ; </space/> \ 
 w h i l e </space/> ( N - - ) </space/> \ 
 t e s t ( ) ; 
 # d e f i n e </space/> f s o r t ( a r r ) </space/> s o r t ( a r r . b e g i n ( ) , </space/> a r r . e n d ( ) ) ; 
 # d e f i n e </space/> r s o r t ( a r r ) </space/> f s o r t ( a r r ) </space/> r e v ( a r r ) 
 # d e f i n e </space/> b i n s ( v , </space/> v a l ) </space/> b i n a r y _ s e a r c h ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> v a l ) 
 # d e f i n e </space/> u b ( v , </space/> v a l ) </space/> u p p e r _ b o u n d ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> v a l ) </space/> - </space/> v . b e g i n ( ) 
 # d e f i n e </space/> l b ( v , </space/> v a l ) </space/> l o w e r _ b o u n d ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> v a l ) </space/> - </space/> v . b e g i n ( ) 
 # d e f i n e </space/> p r i n t ( a r r ) </space/> \ 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a r r ) </space/> \ 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 # d e f i n e </space/> a c t b i t s ( x ) </space/> 3 2 </space/> - </space/> _ _ b u i l t i n _ c l z l l ( x ) 
 c o n s t </space/> u n s i g n e d </space/> i n t </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 l l </space/> i n t </space/> i n f </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; 
 l l </space/> i n t </space/> M O D I </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 T </space/> p o w e r ( T </space/> a , </space/> l l </space/> i n t </space/> n ) 
 { 
 T </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( n </space/> > </space/> 0 ) 
 { 
 i f </space/> ( n </space/> % </space/> 2 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> M O D ; 
 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> M O D , </space/> n </space/> = </space/> n </space/> / </space/> 2 ; 
 } 
 
 r e t u r n </space/> r e s </space/> % </space/> M O D ; 
 } 
 
 t e s t ( ) 
 { 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 / / 	 t c ( ) 
 l l </space/> i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 v e c t o r < p a i r < b o o l , </space/> c h a r > </space/> > </space/> a r r , </space/> t e m p , </space/> g e t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 a r r . p u s h _ b a c k ( m p ( 0 , </space/> s [ i ] ) ) ; 
 
 t e m p </space/> = </space/> a r r ; 
 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' b ' ; </space/> c - - ) 
 { 
 l l </space/> i n t </space/> r o u n d </space/> = </space/> s . l e n g t h ( ) ; 
 w h i l e </space/> ( r o u n d - - ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t e m p . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( t e m p [ i ] . s e c o n d </space/> = = </space/> c </space/> & & </space/> t e m p [ i </space/> + </space/> 1 ] . s e c o n d </space/> = = </space/> c </space/> - </space/> 1 ) 
 t e m p [ i ] . f i r s t </space/> = </space/> 1 ; 
 } 
 e l s e </space/> i f </space/> ( i </space/> = = </space/> t e m p . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 i f </space/> ( t e m p [ i ] . s e c o n d </space/> = = </space/> c </space/> & & </space/> t e m p [ i </space/> - </space/> 1 ] . s e c o n d </space/> = = </space/> c </space/> - </space/> 1 ) 
 t e m p [ i ] . f i r s t </space/> = </space/> 1 ; 
 } 
 e l s e 
 { 
 i f </space/> ( t e m p [ i ] . s e c o n d </space/> = = </space/> c 
 & & </space/> ( t e m p [ i </space/> - </space/> 1 ] . s e c o n d </space/> = = </space/> c </space/> - </space/> 1 </space/> | | </space/> t e m p [ i </space/> + </space/> 1 ] . s e c o n d </space/> = = </space/> c </space/> - </space/> 1 ) ) 
 t e m p [ i ] . f i r s t </space/> = </space/> 1 ; 
 } 
 } 
 g e t . c l e a r ( ) ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> t e m p ) 
 { 
 i f </space/> ( x . f i r s t </space/> = = </space/> 0 ) 
 { 
 g e t . p u s h _ b a c k ( m p ( 0 , </space/> x . s e c o n d ) ) ; 
 } 
 } 
 t e m p . c l e a r ( ) ; 
 t e m p </space/> = </space/> g e t ; 
 } 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> t e m p . s i z e ( ) ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < e x t / p b _ d s / a s s o c _ c o n t a i n e r . h p p > 
 # i n c l u d e </space/> < e x t / p b _ d s / t r e e _ p o l i c y . h p p > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> a r </space/> a r r a y 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> m e m ( x ) </space/> m e m s e t ( x , </space/> 0 , </space/> s i z e o f ( x ) ) 
 # d e f i n e </space/> s e t b i t s ( x ) </space/> _ _ b u i l t i n _ p o p c o u n t ( x ) 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> a l l ( c ) </space/> ( c ) . b e g i n ( ) , </space/> ( c ) . e n d ( ) 
 # d e f i n e </space/> d e b u g ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> : : </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> d e b u g 2 ( x , </space/> y ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> : : </space/> "" </space/> < < </space/> x </space/> < < </space/> "" \ t "" </space/> < < </space/> # y </space/> < < </space/> "" </space/> : : </space/> "" </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> d b </space/> d o u b l e 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> f b o ( x ) </space/> f i n d _ b y _ o r d e r ( x ) 
 # d e f i n e </space/> o o k ( x ) </space/> o r d e r _ o f _ k e y ( x ) 
 
 u s i n g </space/> n a m e s p a c e </space/> _ _ g n u _ p b d s ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d : : c h r o n o ; 
 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < v i > </space/> v v i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> i i l ; 
 t y p e d e f </space/> p a i r < l l , </space/> i n t > </space/> l i ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> i i ; 
 t y p e d e f </space/> t r e e < i n t , </space/> n u l l _ t y p e , </space/> l e s s < i n t > , </space/> r b _ t r e e _ t a g , </space/> t r e e _ o r d e r _ s t a t i s t i c s _ n o d e _ u p d a t e > </space/> o s 1 ; 
 t y p e d e f </space/> t r e e < i n t , </space/> n u l l _ t y p e , </space/> g r e a t e r < i n t > , </space/> r b _ t r e e _ t a g , </space/> t r e e _ o r d e r _ s t a t i s t i c s _ n o d e _ u p d a t e > </space/> o s 2 ; 
 
 i n l i n e </space/> v o i d </space/> f a s t ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 } 
 c o n s t </space/> l l </space/> p i </space/> = </space/> 3 1 ; 
 c o n s t </space/> l l </space/> M O D [ 2 ] </space/> = </space/> { </space/> 1 1 8 7 2 7 8 6 4 9 , </space/> 1 1 4 9 7 3 6 0 1 9 </space/> } ; </space/> / / </space/> f o r </space/> d o u b l e </space/> h a s h i n g 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> ( l l ) ( 1 e 9 ) </space/> + </space/> 7 ; 
 l l </space/> p m o d ( l l </space/> x , </space/> l l </space/> n ) 
 { 
 l l </space/> r </space/> = </space/> 1 ; 
 w h i l e </space/> ( n </space/> > </space/> 0 ) 
 { 
 i f </space/> ( n </space/> & </space/> 1 L L ) 
 r </space/> = </space/> ( r </space/> * </space/> x ) </space/> % </space/> m o d ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> m o d ; 
 n </space/> = </space/> n </space/> / </space/> 2 ; 
 n </space/> % = </space/> m o d ; 
 } 
 r e t u r n </space/> r ; 
 } 
 l l </space/> p M o d ( l l </space/> x , </space/> l l </space/> n , </space/> l l </space/> m o d ) 
 { 
 l l </space/> r </space/> = </space/> 1 ; 
 w h i l e </space/> ( n </space/> > </space/> 0 ) 
 { 
 i f </space/> ( n </space/> & </space/> 1 L L ) 
 r </space/> = </space/> ( r </space/> * </space/> x ) </space/> % </space/> m o d ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> m o d ; 
 n </space/> = </space/> n </space/> / </space/> 2 ; 
 n </space/> % = </space/> m o d ; 
 } 
 r e t u r n </space/> r ; 
 } 
 
 / / </space/> t h i n k </space/> r e c u r s i v e l y </space/> a l s o ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i n t </space/> c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> ' z ' ; </space/> i </space/> > </space/> ' a ' ; </space/> i - - ) 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> i </space/> & & </space/> ( s [ j </space/> - </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 </space/> | | </space/> s [ j </space/> + </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 ) ) 
 { 
 s . e r a s e ( j , </space/> 1 ) ; 
 j </space/> = </space/> - 1 ; 
 } 
 } 
 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ( ) ; 
 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 f o r </space/> ( i n t </space/> c a s e e </space/> = </space/> 1 ; </space/> c a s e e </space/> < = </space/> t ; </space/> c a s e e + + ) 
 { </space/> / / </space/> c o u t < < "" C a s e </space/> # "" < < c a s e e < < "" : </space/> "" ; 
 s o l v e ( ) ; 
 } 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < c t i m e > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < f s t r e a m > 
 # i n c l u d e </space/> < s t a c k > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 / / # d e f i n e </space/> f i </space/> f i r s t 
 / / # d e f i n e </space/> s e </space/> s e c o n d 
 l l </space/> i n f </space/> = </space/> 1 e 1 8 </space/> + </space/> 7 ; 
 l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> m a x n </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 v e c t o r < l l > </space/> p r e f ( m a x n ) ; 
 v e c t o r < l l > </space/> r _ p r e f ( m a x n ) ; 
 
 / / </space/> i f s t r e a m </space/> f i n ; 
 / / </space/> o f s t r e a m </space/> f o u t ; 
 
 s t r u c t </space/> p o i n t 
 { 
 i n t </space/> i r , </space/> r ; 
 } ; 
 d o u b l e </space/> c h </space/> = </space/> s q r t ( 5 ) </space/> - </space/> 1 . 0 ; 
 
 d o u b l e </space/> e </space/> = </space/> d o u b l e ( 1 . 0 ) </space/> / </space/> ( 1 e 6 ) ; 
 
 i n t </space/> m a i n ( ) 
 { 
 s r a n d ( t i m e ( N U L L ) ) ; 
 
 / / </space/> c o u t . s e t f ( i o s : : f i x e d ) ; 
 / / </space/> c o u t . p r e c i s i o n ( 2 0 ) ; 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 / / </space/> f i n . o p e n ( "" r . t x t "" ) ; 
 / / </space/> f o u t . o p e n ( "" w . t x t "" ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 s t r i n g </space/> n o w </space/> = </space/> s ; 
 s t r i n g </space/> c h </space/> = </space/> s ; 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > </space/> ' a ' ; </space/> c - - ) 
 { 
 
 b o o l </space/> y e s </space/> = </space/> 1 ; 
 
 w h i l e </space/> ( y e s ) 
 { 
 y e s </space/> = </space/> 0 ; 
 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> c h . s i z e ( ) ; </space/> i + + ) 
 { 
 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( c h [ i ] </space/> = = </space/> c </space/> & & </space/> c h [ i </space/> + </space/> 1 ] </space/> = = </space/> c h a r ( c </space/> - </space/> 1 ) ) 
 { 
 s t r i n g </space/> d </space/> = </space/> "" "" ; 
 y e s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < </space/> c h . s i z e ( ) ; </space/> j + + ) 
 { 
 d </space/> + = </space/> c h [ j ] ; 
 } 
 c h </space/> = </space/> d ; 
 a n s + + ; 
 b r e a k ; 
 } 
 c o n t i n u e ; 
 } 
 i f </space/> ( i </space/> = = </space/> c h . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 i f </space/> ( c h [ i ] </space/> = = </space/> c </space/> & & </space/> c h [ i </space/> - </space/> 1 ] </space/> = = </space/> c h a r ( c </space/> - </space/> 1 ) ) 
 { 
 y e s </space/> = </space/> 1 ; 
 s t r i n g </space/> d </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> c h . s i z e ( ) </space/> - </space/> 1 ; </space/> j + + ) 
 { 
 d </space/> + = </space/> c h [ j ] ; 
 } 
 c h </space/> = </space/> d ; 
 a n s + + ; 
 b r e a k ; 
 } 
 c o n t i n u e ; 
 } 
 i f </space/> ( c h [ i ] </space/> = = </space/> c </space/> & & </space/> ( c h [ i </space/> - </space/> 1 ] </space/> = = </space/> c h a r ( c </space/> - </space/> 1 ) </space/> | | </space/> c h [ i </space/> + </space/> 1 ] </space/> = = </space/> c h a r ( c </space/> - </space/> 1 ) ) ) 
 { 
 y e s </space/> = </space/> 1 ; 
 s t r i n g </space/> d </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> i ; </space/> j + + ) 
 { 
 d </space/> + = </space/> c h [ j ] ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> + </space/> 1 ; </space/> j </space/> < </space/> c h . s i z e ( ) ; </space/> j + + ) 
 { 
 d </space/> + = </space/> c h [ j ] ; 
 } 
 c h </space/> = </space/> d ; 
 a n s + + ; 
 b r e a k ; 
 } 
 } 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 / / </space/> c o u t </space/> < < </space/> "" N O "" </space/> < < </space/> e n d l ; 
 / / </space/> f o u t . c l o s e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> p b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> p o b </space/> p o p _ b a c k ( ) 
 # d e f i n e </space/> m s 0 ( s ) </space/> m e m s e t ( s , </space/> 0 , </space/> s i z e o f </space/> s ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> v p l l </space/> v e c t o r < p a i r < l l , </space/> l l > > 
 # d e f i n e </space/> v v l l </space/> v e c t o r < v e c t o r < l l > > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p r q </space/> p r i o r i t y _ q u e u e < l l > </space/> / / </space/> m a x - h e a p 
 # d e f i n e </space/> p s q </space/> p r i o r i t y _ q u e u e < l l , </space/> v e c t o r < l l > , </space/> g r e a t e r < l l > > </space/> / / </space/> m i n - h e a p 
 # d e f i n e </space/> m _ p </space/> m a k e _ p a i r 
 # d e f i n e </space/> v c c </space/> v e c t o r < c h a r > 
 # d e f i n e </space/> v s s </space/> v e c t o r < s t r i n g > 
 # d e f i n e </space/> b s </space/> b i n a r y _ s e a r c h 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> s e t b i t ( n ) </space/> _ _ b u i l t i n _ p o p c o u n t l l ( n ) 
 c o n s t </space/> l l </space/> m x n </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 l l </space/> t </space/> = </space/> 1 ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> i , </space/> j , </space/> k , </space/> n , </space/> m ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s ; 
 m </space/> = </space/> n ; 
 w h i l e </space/> ( 1 ) 
 { 
 l l </space/> f </space/> = </space/> - 1 ; 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > </space/> ' a ' ; </space/> c - - ) 
 { 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 i f </space/> ( s [ i ] </space/> = = </space/> c ) 
 { 
 i f </space/> ( i </space/> = = </space/> 0 </space/> & & </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> ( c </space/> - </space/> 1 ) ) 
 f </space/> = </space/> i ; 
 e l s e </space/> i f </space/> ( i </space/> = = </space/> ( n </space/> - </space/> 1 ) </space/> & & </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> ( c </space/> - </space/> 1 ) ) 
 f </space/> = </space/> i ; 
 e l s e </space/> i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> = = </space/> ( c </space/> - </space/> 1 ) </space/> | | </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> ( c </space/> - </space/> 1 ) ) 
 f </space/> = </space/> i ; 
 i f </space/> ( f </space/> ! = </space/> - 1 ) 
 b r e a k ; 
 } 
 i f </space/> ( f </space/> ! = </space/> - 1 ) 
 b r e a k ; 
 } 
 i f </space/> ( f </space/> = = </space/> - 1 ) 
 b r e a k ; 
 s t r i n g </space/> t e m p ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 i f </space/> ( i </space/> ! = </space/> f ) 
 t e m p </space/> + = </space/> s [ i ] ; 
 n </space/> = </space/> t e m p . s i z e ( ) ; 
 s </space/> = </space/> t e m p ; 
 } 
 l l </space/> a n s </space/> = </space/> m </space/> - </space/> n ; 
 c o u t </space/> < < </space/> a n s ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 / / # d e f i n e </space/> l l </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> b i n a b r e a k w a l a b r e a k </space/> c o n t i n u e 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> p u </space/> p u s h 
 # d e f i n e </space/> d b </space/> d o u b l e 
 # d e f i n e </space/> m _ p </space/> m a k e _ p a i r 
 l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 v o i d </space/> c l e a r ( s t d : : q u e u e < c h a r > & </space/> q ) 
 { 
 s t d : : q u e u e < c h a r > </space/> e m p t y ; 
 s t d : : s w a p ( q , </space/> e m p t y ) ; 
 } 
 
 / / </space/> s o r t </space/> v e c t o r </space/> p a i r </space/> b y </space/> s e c o n d </space/> e l e m e n t 
 b o o l </space/> s o r t b y s e c ( c o n s t </space/> p a i r < i n t , </space/> i n t > & </space/> a , </space/> c o n s t </space/> p a i r < i n t , </space/> i n t > & </space/> b ) 
 { 
 r e t u r n </space/> ( a . s e c o n d </space/> < </space/> b . s e c o n d ) ; 
 } 
 
 b o o l </space/> i s _ p r i m e ( l l </space/> n ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 2 ; </space/> i </space/> * </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( n </space/> % </space/> i </space/> = = </space/> 0 ) 
 { 
 / / </space/> i n d e = i ; 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 l l </space/> c o m ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 i f </space/> ( r </space/> > </space/> n </space/> - </space/> r ) 
 r </space/> = </space/> n </space/> - </space/> r ; 
 l l </space/> C [ r </space/> + </space/> 1 ] ; 
 m e m s e t ( C , </space/> 0 , </space/> s i z e o f ( C ) ) ; 
 
 C [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 f o r </space/> ( l l </space/> j </space/> = </space/> m i n ( i , </space/> r ) ; </space/> j </space/> > </space/> 0 ; </space/> j - - ) 
 C [ j ] </space/> = </space/> ( C [ j ] </space/> + </space/> C [ j </space/> - </space/> 1 ] ) </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> C [ r ] ; 
 } 
 
 l l </space/> b p w ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> 1 L L </space/> * </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> 1 L L </space/> * </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 l l </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 l l </space/> t 1 </space/> = </space/> t ; 
 w h i l e </space/> ( t 1 - - ) 
 { 
 
 / / / </space/> y o u r </space/> c o d e </space/> g o e s </space/> h e r e / / / / / 
 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 s e t < c h a r > </space/> s t ; 
 m a p < c h a r , </space/> l l > </space/> m p ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s t . i n s e r t ( s [ i ] ) ; 
 m p [ s [ i ] ] + + ; 
 } 
 
 s t r i n g </space/> s t r </space/> = </space/> "" a b c d e f g h i j k l m n o p q r s t u v w x y z "" ; 
 r e v e r s e ( s t r . b e g i n ( ) , </space/> s t r . e n d ( ) ) ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 5 ; </space/> i + + ) 
 { 
 i f </space/> ( s t . c o u n t ( s t r [ i ] ) ) 
 { 
 f o r </space/> ( l l </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 { 
 f o r </space/> ( l l </space/> k </space/> = </space/> 0 ; </space/> k </space/> < </space/> s . l e n g t h ( ) ; </space/> k + + ) 
 { 
 i f </space/> ( ( s [ k ] </space/> = = </space/> s t r [ i ] ) 
 & & </space/> ( ( s [ k </space/> - </space/> 1 ] </space/> = = </space/> s t r [ i </space/> + </space/> 1 ] </space/> & & </space/> k </space/> > </space/> 0 ) 
 | | </space/> ( s [ k </space/> + </space/> 1 ] </space/> = = </space/> s t r [ i </space/> + </space/> 1 ] </space/> & & </space/> k </space/> < </space/> s . l e n g t h ( ) </space/> - </space/> 1 ) ) ) 
 { 
 s [ k ] </space/> = </space/> ' & ' ; 
 m p [ s t r [ i ] ] - - ; 
 } 
 s t r i n g </space/> s 1 </space/> = </space/> "" "" ; 
 f o r </space/> ( l l </space/> p </space/> = </space/> 0 ; </space/> p </space/> < </space/> s . l e n g t h ( ) ; </space/> p + + ) 
 { 
 i f </space/> ( s [ p ] </space/> ! = </space/> ' & ' ) 
 s 1 </space/> + = </space/> s [ p ] ; 
 } 
 s </space/> = </space/> s 1 ; 
 i f </space/> ( m p [ s t r [ i ] ] </space/> < = </space/> 0 ) 
 b r e a k ; 
 } 
 i f </space/> ( m p [ s t r [ i ] ] </space/> < = </space/> 0 ) 
 b r e a k ; 
 } 
 } 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> s . l e n g t h ( ) </space/> < < </space/> e n d l ; 
 / / / </space/> c o d e </space/> e n d </space/> h e r e / / / / / / / / / / / / / 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> d e b u g ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> i s </space/> "" </space/> < < </space/> x </space/> < < </space/> ' \ n ' ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 5 e 2 </space/> + </space/> 2 ; 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( 3 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 v e c t o r < i n t > </space/> a ; 
 f o r </space/> ( a u t o & </space/> x </space/> : </space/> s ) 
 { 
 a . p u s h _ b a c k ( x </space/> - </space/> ' a ' ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 5 0 ; </space/> i </space/> > = </space/> 0 ; </space/> - - i ) 
 { 
 v e c t o r < i n t > </space/> b ; 
 f o r </space/> ( a u t o & </space/> x </space/> : </space/> a ) 
 { 
 i f </space/> ( ! b . e m p t y ( ) </space/> a n d </space/> b . b a c k ( ) </space/> = = </space/> x </space/> - </space/> 1 </space/> a n d </space/> b . b a c k ( ) </space/> = = </space/> i </space/> / </space/> 2 ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 b . p u s h _ b a c k ( x ) ; 
 } 
 } 
 a </space/> = </space/> b ; 
 r e v e r s e ( a . b e g i n ( ) , </space/> a . e n d ( ) ) ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> a . s i z e ( ) </space/> < < </space/> ' \ n ' ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 m a p < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > </space/> a ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 l o n g </space/> l o n g </space/> n , </space/> i , </space/> b , </space/> a n s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> a l p h a b e t </space/> = </space/> "" a b c d e f g h i j k l m n o p q r s t u v w x y z "" ; 
 c h a r </space/> c ; 
 c i n </space/> > > </space/> s ; 
 f o r </space/> ( c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' b ' ; </space/> c - - ) 
 { 
 i </space/> = </space/> 0 ; 
 w h i l e </space/> ( i </space/> < </space/> s . s i z e ( ) ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> c ) 
 i + + ; 
 e l s e 
 { 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( s [ i </space/> + </space/> 1 ] </space/> = = </space/> a l p h a b e t [ c </space/> - </space/> ' a ' </space/> - </space/> 1 ] ) 
 { 
 / / </space/> c o u t </space/> < < </space/> s [ i ] </space/> < < </space/> e n d l ; 
 s . e r a s e ( i , </space/> 1 ) ; 
 a n s + + ; 
 } 
 e l s e 
 i + + ; 
 } 
 e l s e 
 { 
 i f </space/> ( i </space/> = = </space/> s . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> = = </space/> a l p h a b e t [ c </space/> - </space/> ' a ' </space/> - </space/> 1 ] ) 
 { 
 / / </space/> c o u t </space/> < < </space/> s [ i ] </space/> < < </space/> e n d l ; 
 s . e r a s e ( i , </space/> 1 ) ; 
 a n s + + ; 
 
 i - - ; 
 } 
 e l s e 
 i + + ; 
 } 
 e l s e 
 { 
 / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> e n d l ; 
 i f </space/> ( s [ i </space/> + </space/> 1 ] </space/> = = </space/> a l p h a b e t [ c </space/> - </space/> ' a ' </space/> - </space/> 1 ] ) 
 { 
 / / </space/> c o u t </space/> < < </space/> s [ i ] </space/> < < </space/> e n d l ; 
 s . e r a s e ( i , </space/> 1 ) ; 
 a n s + + ; 
 
 i - - ; 
 } 
 e l s e 
 { 
 i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> = = </space/> a l p h a b e t [ c </space/> - </space/> ' a ' </space/> - </space/> 1 ] ) 
 { 
 / / </space/> c o u t </space/> < < </space/> s [ i ] </space/> < < </space/> e n d l ; 
 s . e r a s e ( i , </space/> 1 ) ; 
 a n s + + ; 
 
 i - - ; 
 } 
 e l s e 
 { 
 i + + ; 
 } 
 } 
 } 
 } 
 } 
 / / </space/> c o u t </space/> < < </space/> s </space/> < < </space/> e n d l ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O f a s t "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z a t i o n ( "" u n r o l l - l o o p s "" ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 c o n s t </space/> l o n g </space/> d o u b l e </space/> P i </space/> = </space/> 3 . 1 4 1 5 9 2 6 5 3 ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 l o n g </space/> l o n g </space/> I N F </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; 
 b o o l </space/> c m p ( p a i r < i n t , </space/> i n t > </space/> a , </space/> p a i r < i n t , </space/> i n t > </space/> b ) 
 { 
 r e t u r n </space/> ( a . f i r s t </space/> < </space/> b . f i r s t ) </space/> | | </space/> ( a . f i r s t </space/> = = </space/> b . f i r s t </space/> & & </space/> a . s e c o n d </space/> < </space/> b . s e c o n d ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t </space/> = </space/> 1 ; </space/> / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i f </space/> ( n </space/> = = </space/> 1 ) 
 c o u t </space/> < < </space/> 0 ; 
 e l s e 
 { 
 s t r i n g </space/> s 1 </space/> = </space/> s ; 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 w h i l e </space/> ( 1 ) 
 { 
 i n t </space/> p o s </space/> = </space/> - 1 , </space/> c </space/> = </space/> ' a ' ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . l e n g t h ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( j </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> s [ j ] </space/> = = </space/> s [ j </space/> - </space/> 1 ] </space/> + </space/> 1 ) 
 { 
 i f </space/> ( p o s </space/> = = </space/> - 1 ) 
 p o s </space/> = </space/> j , </space/> c </space/> = </space/> s [ j ] ; 
 e l s e 
 { 
 i f </space/> ( s [ j ] </space/> > </space/> c ) 
 p o s </space/> = </space/> j , </space/> c </space/> = </space/> s [ j ] ; 
 } 
 } 
 i f </space/> ( j </space/> + </space/> 1 </space/> < </space/> s . l e n g t h ( ) </space/> & & </space/> s [ j ] </space/> = = </space/> s [ j </space/> + </space/> 1 ] </space/> + </space/> 1 ) 
 { 
 i f </space/> ( p o s </space/> = = </space/> - 1 ) 
 p o s </space/> = </space/> j , </space/> c </space/> = </space/> s [ j ] ; 
 e l s e 
 { 
 i f </space/> ( s [ j ] </space/> > </space/> c ) 
 p o s </space/> = </space/> j , </space/> c </space/> = </space/> s [ j ] ; 
 } 
 } 
 } 
 i f </space/> ( p o s </space/> = = </space/> - 1 ) 
 b r e a k ; 
 e l s e 
 { 
 + + c n t ; 
 s . e r a s e ( p o s , </space/> 1 ) ; 
 } 
 } 
 c o u t </space/> < < </space/> c n t ; 
 } 
 } 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 4 </space/> * </space/> 1 e 5 </space/> + </space/> 7 ; 
 l o n g </space/> l o n g </space/> c n t [ 2 </space/> * </space/> M A X N ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 b o o l </space/> o k </space/> = </space/> t r u e ; 
 w h i l e </space/> ( o k ) 
 { 
 o k </space/> = </space/> f a l s e ; 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' a ' ; </space/> c - - ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> c ) 
 { 
 
 i f </space/> ( ( i </space/> ! = </space/> 0 </space/> & & </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> c </space/> - </space/> 1 ) 
 | | </space/> ( i </space/> + </space/> 1 </space/> < </space/> ( i n t ) s . s i z e ( ) </space/> & & </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> c </space/> - </space/> 1 ) ) 
 { 
 a n s + + ; 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> i ) ; 
 o k </space/> = </space/> t r u e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( o k ) 
 b r e a k ; 
 } 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> </space/> </space/> . c p p </space/> : </space/> </space/> </space/> </space/> </space/> "" m a i n "" . </space/> </space/> </space/> 
 / / </space/> </space/> </space/> . 
 / / 
 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t r i n g > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 w h i l e </space/> ( t r u e ) 
 { 
 i n t </space/> b e s t </space/> = </space/> - 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( ( ( i </space/> > </space/> 0 </space/> & & </space/> s [ i </space/> - </space/> 1 ] </space/> + </space/> 1 </space/> = = </space/> s [ i ] ) </space/> | | </space/> ( i </space/> + </space/> 1 </space/> < </space/> s . s i z e ( ) </space/> & & </space/> s [ i </space/> + </space/> 1 ] </space/> + </space/> 1 </space/> = = </space/> s [ i ] ) ) 
 & & </space/> ( b e s t </space/> = = </space/> - 1 </space/> | | </space/> s [ b e s t ] </space/> < </space/> s [ i ] ) ) 
 b e s t </space/> = </space/> i ; 
 } 
 i f </space/> ( b e s t </space/> = = </space/> - 1 ) 
 b r e a k ; 
 s t r i n g </space/> s _ </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> = = </space/> b e s t ) 
 c o n t i n u e ; 
 s _ </space/> + = </space/> s [ i ] ; 
 } 
 s </space/> = </space/> s _ ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) ; 
 } 
 
 / / </space/> </space/> : </space/> C T R L + F 5 </space/> </space/> </space/> "" "" </space/> > </space/> "" </space/> </space/> "" 
 / / </space/> </space/> : </space/> F 5 </space/> </space/> </space/> "" "" </space/> > </space/> "" </space/> "" 
 
 / / </space/> </space/> </space/> </space/> 
 / / </space/> 1 . </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> . 
 / / </space/> 2 . </space/> </space/> </space/> T e a m </space/> E x p l o r e r </space/> </space/> </space/> </space/> </space/> </space/> . 
 / / </space/> 3 . </space/> </space/> </space/> "" </space/> "" </space/> </space/> </space/> </space/> </space/> </space/> </space/> </space/> . 
 / / </space/> 4 . </space/> </space/> </space/> "" </space/> "" </space/> </space/> </space/> . 
 / / </space/> 5 . </space/> </space/> </space/> </space/> </space/> "" "" </space/> > </space/> "" </space/> </space/> "" , </space/> </space/> 
 / / </space/> </space/> , </space/> </space/> "" "" </space/> > </space/> "" </space/> </space/> "" , </space/> </space/> </space/> </space/> 
 / / </space/> </space/> </space/> . 
 / / </space/> 6 . </space/> </space/> </space/> </space/> </space/> </space/> , </space/> </space/> </space/> </space/> "" "" </space/> > </space/> "" "" </space/> > </space/> "" "" </space/> 
 / / </space/> </space/> S L N - . 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * B i s m i l l a h i r </space/> R a h m a n i r </space/> R a h i m * / 
 / * A l l a h </space/> H u </space/> A l l a h * / 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 
 # d e f i n e </space/> N </space/> 1 e 9 </space/> + </space/> 7 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 . 0 ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> s q ( a ) </space/> s q r t ( a ) 
 # d e f i n e </space/> g c d ( a , </space/> b ) </space/> _ _ g c d ( a , </space/> b ) 
 # d e f i n e </space/> l c m </space/> ( a </space/> * </space/> b ) </space/> / </space/> g c d ( a , </space/> b ) 
 # d e f i n e </space/> i n f </space/> 2 e 1 8 
 # d e f i n e </space/> y e s </space/> c o u t </space/> < < </space/> "" Y E S "" </space/> < < </space/> e n d l 
 # d e f i n e </space/> n o </space/> c o u t </space/> < < </space/> "" N O "" </space/> < < </space/> e n d l 
 # d e f i n e </space/> m s </space/> c o u t </space/> < < </space/> "" - 1 "" </space/> < < </space/> e n d l 
 # d e f i n e </space/> c a s e e ( r ) </space/> c o u t </space/> < < </space/> "" C a s e </space/> "" </space/> < < </space/> r </space/> < < </space/> "" : </space/> "" 
 # d e f i n e </space/> s o ( a r r , </space/> a ) </space/> a r r , </space/> a r r </space/> + </space/> a 
 # d e f i n e </space/> e n d d </space/> c o u t </space/> < < </space/> "" \ n "" 
 # d e f i n e </space/> l n </space/> "" \ n "" 
 # d e f i n e </space/> f o r r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( v 1 ) </space/> v 1 . b e g i n ( ) , </space/> v 1 . e n d ( ) 
 # d e f i n e </space/> d b g ( a ) </space/> c e r r </space/> < < </space/> "" l i n e </space/> "" </space/> < < </space/> _ _ L I N E _ _ </space/> < < </space/> "" </space/> : </space/> "" </space/> < < </space/> # a </space/> < < </space/> "" </space/> - - > </space/> "" </space/> < < </space/> ( a ) </space/> < < </space/> e n d l 
 # d e f i n e </space/> F a s t I O </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) 
 
 
 l l </space/> a r r [ 5 0 0 0 0 7 ] , </space/> b r r [ 5 0 0 0 0 7 ] , </space/> c r r [ 5 0 0 0 0 7 ] ; 
 l l </space/> a r [ 1 0 0 0 ] [ 1 0 0 0 ] , </space/> b r [ 1 0 0 0 ] [ 1 0 0 0 ] , </space/> c r [ 1 0 0 0 ] [ 1 0 0 0 ] ; 
 c h a r </space/> a t t [ 1 0 0 0 ] , </space/> m 1 , </space/> m 2 ; 
 l l </space/> d 1 , </space/> d 2 , </space/> d 3 , </space/> d 4 , </space/> d 5 , </space/> d 6 , </space/> d 7 ; 
 l l </space/> v i s [ 5 0 0 0 0 7 ] , </space/> d i s [ 5 0 0 0 0 7 ] ; 
 s t r i n g </space/> g , </space/> h , </space/> v ; 
 v e c t o r < l l > </space/> v 2 ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 
 / / </space/> F a s t I O ; 
 l l </space/> a , </space/> b , </space/> c , </space/> d , </space/> e , </space/> f , </space/> i , </space/> j , </space/> k , </space/> l , </space/> m , </space/> n , </space/> r , </space/> t , </space/> w , </space/> x , </space/> y , </space/> z , </space/> a n s , </space/> s u m ; 
 
 
 d </space/> = </space/> 0 , </space/> e </space/> = </space/> 0 , </space/> f </space/> = </space/> 0 , </space/> l </space/> = </space/> 0 , </space/> n </space/> = </space/> 0 , </space/> a n s </space/> = </space/> 0 , </space/> s u m </space/> = </space/> 0 ; 
 v e c t o r < l l > </space/> v 1 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> g ; 
 g . i n s e r t ( 0 , </space/> "" 6 "" ) ; 
 g . i n s e r t ( g . s i z e ( ) , </space/> "" 7 "" ) ; 
 / / </space/> f o r ( i = 0 ; i < g . s i z e ( ) ; i + + ) c o u t < < g [ i ] ; 
 / / </space/> e n d d ; 
 f o r </space/> ( i </space/> = </space/> ' z ' ; </space/> i </space/> > = </space/> ' a ' ; </space/> i - - ) 
 { 
 f o r </space/> ( j </space/> = </space/> 1 ; </space/> j </space/> < </space/> g . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( g [ j ] </space/> = = </space/> i ) 
 { 
 / / </space/> k = j ; 
 w h i l e </space/> ( 1 ) 
 { 
 / / </space/> i f ( g [ j ] - 1 = = g [ j - 1 ] </space/> | | </space/> g [ j ] - 1 = = g [ j + 1 ] ) g . e r a s e ( j , 1 ) , a n s + + , d b g ( g [ j ] ) ; 
 / / </space/> e l s e </space/> b r e a k ; 
 / / </space/> k = j ; 
 i f </space/> ( g [ j ] </space/> - </space/> 1 </space/> = = </space/> g [ j </space/> + </space/> 1 ] </space/> & & </space/> g [ j ] </space/> = = </space/> i ) 
 { 
 g . e r a s e ( j , </space/> 1 ) ; 
 j - - ; 
 a n s + + ; 
 } 
 e l s e </space/> i f </space/> ( g [ j ] </space/> - </space/> 1 </space/> = = </space/> g [ j </space/> - </space/> 1 ] </space/> & & </space/> g [ j ] </space/> = = </space/> i ) 
 { 
 g . e r a s e ( j , </space/> 1 ) ; 
 a n s + + ; 
 / / </space/> d b g ( a n s ) ; 
 } 
 e l s e 
 b r e a k ; 
 } 
 } 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> f r ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f r 1 ( i , </space/> k , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> k ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o r e a c h ( i , </space/> a r r ) </space/> f o r </space/> ( a u t o </space/> i </space/> : </space/> a r r ) 
 # d e f i n e </space/> s o r t _ i n c ( a ) </space/> s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) ) 
 # d e f i n e </space/> s o r t _ d e c ( a ) </space/> s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) , </space/> g r e a t e r < > ( ) ) 
 # d e f i n e </space/> e x i s t s ( a , </space/> v a l ) </space/> f i n d ( a . b e g i n ( ) , </space/> a . e n d ( ) , </space/> v a l ) </space/> ! = </space/> a . e n d ( ) 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 T </space/> m o d ( T </space/> a ) 
 { 
 a </space/> % = </space/> M O D ; 
 i f </space/> ( a </space/> < </space/> 0 ) 
 a </space/> + = </space/> M O D ; 
 r e t u r n </space/> a ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 T </space/> a d d ( T </space/> a , </space/> T </space/> b ) 
 { 
 r e t u r n </space/> m o d ( a </space/> + </space/> b ) ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 T </space/> m u l ( T </space/> a , </space/> T </space/> b ) 
 { 
 r e t u r n </space/> ( a </space/> * </space/> 1 l l </space/> * </space/> b ) </space/> % </space/> M O D ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 T </space/> b i n P o w ( T </space/> a , </space/> T </space/> b ) 
 { 
 T </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> m u l < T > ( r e s , </space/> a ) ; 
 a </space/> = </space/> m u l < T > ( a , </space/> a ) ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n 1 ; 
 c i n </space/> > > </space/> n 1 ; 
 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 w h i l e </space/> ( s . s i z e ( ) </space/> > </space/> 1 ) 
 { 
 i n t </space/> c </space/> = </space/> 0 , </space/> p </space/> = </space/> - 1 ; 
 i n t </space/> n </space/> = </space/> ( i n t ) s . s i z e ( ) ; 
 f r ( i , </space/> n ) 
 { 
 i f </space/> ( ( ( i </space/> > </space/> 0 </space/> & & </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> s [ i ] </space/> - </space/> 1 ) </space/> | | </space/> ( i </space/> < </space/> n </space/> - </space/> 1 </space/> & & </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> s [ i ] </space/> - </space/> 1 ) ) 
 & & </space/> ( i n t ) s [ i ] </space/> > </space/> c ) 
 { 
 c </space/> = </space/> m a x ( c , </space/> ( i n t ) s [ i ] ) ; 
 p </space/> = </space/> i ; 
 } 
 } 
 
 i f </space/> ( c </space/> = = </space/> 0 ) 
 b r e a k ; 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> p ) ; 
 } 
 c o u t </space/> < < </space/> n 1 </space/> - </space/> s . s i z e ( ) </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( i n t </space/> a r g c , </space/> c o n s t </space/> c h a r * </space/> a r g v [ ] ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 s o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> L L </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 c o n s t </space/> L L </space/> s z </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 L L </space/> p o w e r ( L L </space/> x , </space/> L L </space/> y , </space/> L L </space/> m ) 
 { 
 i f </space/> ( y </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 
 L L </space/> p </space/> = </space/> p o w e r ( x , </space/> y </space/> / </space/> 2 , </space/> m ) </space/> % </space/> m ; 
 p </space/> = </space/> ( p </space/> * </space/> p ) </space/> % </space/> m ; 
 
 r e t u r n </space/> ( y </space/> % </space/> 2 </space/> = = </space/> 0 ) </space/> ? </space/> p </space/> : </space/> ( x </space/> * </space/> p ) </space/> % </space/> m ; 
 } 
 L L </space/> m d i n n ( L L </space/> n ) 
 { 
 r e t u r n </space/> p o w e r ( n , </space/> m o d </space/> - </space/> 2 , </space/> m o d ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 / * 	 L L </space/> f a c t [ 1 0 1 0 ] = { 0 } , m o d i n [ 1 0 1 0 ] = { 0 } , p o w e r [ 1 0 1 0 ] ; 
 f a c t [ 0 ] = 1 , f a c t [ 1 ] = 1 ; 
 m o d i n [ 0 ] = m o d i n [ 1 ] = 1 ; 
 p o w e r [ 0 ] = 1 , p o w e r [ 1 ] = 2 ; 
 f o r ( L L </space/> i = 2 ; </space/> i < 1 0 1 0 ; </space/> i + + ) 
 { 
 f a c t [ i ] = ( i % m o d * f a c t [ i - 1 ] % m o d ) % m o d ; 
 m o d i n [ i ] = ( m o d i n [ i - 1 ] * m d i n n ( i ) % m o d ) % m o d ; 
 p o w e r [ i ] = ( 2 * p o w e r [ i - 1 ] ) % m o d ; 
 } * / 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 L L </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 L L </space/> a n s </space/> = </space/> 0 ; 
 c h a r </space/> t _ c </space/> = </space/> ' z ' ; 
 w h i l e </space/> ( t _ c </space/> > </space/> ' a ' ) 
 { 
 L L </space/> c </space/> = </space/> 0 ; 
 f o r </space/> ( L L </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> t _ c ) 
 c o n t i n u e ; 
 c h a r </space/> t e m p </space/> = </space/> t _ c ; 
 t e m p - - ; 
 i f </space/> ( i </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> t e m p ) 
 { 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> i ) ; 
 i </space/> = </space/> - 1 ; 
 } 
 e l s e </space/> i f </space/> ( i </space/> + </space/> 1 </space/> < </space/> n </space/> & & </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> t e m p ) 
 { 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> i ) ; 
 i </space/> = </space/> - 1 ; 
 } 
 / / 	 c o u t < < s < < "" \ n "" ; 
 } 
 t _ c - - ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> s . l e n g t h ( ) </space/> < < </space/> "" \ n "" ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 
 @ a m a n j a i n n n 
 
 * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < e x t / p b _ d s / a s s o c _ c o n t a i n e r . h p p > 
 # i n c l u d e </space/> < e x t / p b _ d s / t r e e _ p o l i c y . h p p > 
 # i n c l u d e </space/> < e x t / p b _ d s / d e t a i l / s t a n d a r d _ p o l i c i e s . h p p > 
 u s i n g </space/> n a m e s p a c e </space/> _ _ g n u _ p b d s ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> d e b ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" = "" </space/> < < </space/> x </space/> < < </space/> e n d l 
 # d e f i n e </space/> d e b 2 ( x , </space/> y ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" = "" </space/> < < </space/> x </space/> < < </space/> "" , "" </space/> < < </space/> # y </space/> < < </space/> "" = "" </space/> < < </space/> y </space/> < < </space/> e n d l 
 # d e f i n e </space/> d e b 3 ( x , </space/> y , </space/> z ) </space/> \ 
 c o u t </space/> < < </space/> # x </space/> < < </space/> "" = "" </space/> < < </space/> x </space/> < < </space/> "" , "" </space/> < < </space/> # y </space/> < < </space/> "" = "" </space/> < < </space/> y </space/> < < </space/> "" , "" </space/> < < </space/> # z </space/> < < </space/> "" = "" </space/> < < </space/> z </space/> < < </space/> e n d l 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p r </space/> p a i r < l o n g </space/> d o u b l e , </space/> p a i r < i n t , </space/> i n t > </space/> > 
 / / </space/> t y p e d e f </space/> t r e e < p a i r < i n t , </space/> i n t > , </space/> n u l l _ t y p e , </space/> l e s s < p a i r < i n t , </space/> i n t > > , </space/> r b _ t r e e _ t a g , 
 / / </space/> t r e e _ o r d e r _ s t a t i s t i c s _ n o d e _ u p d a t e > </space/> p b d s ; 
 c o n s t </space/> c h a r </space/> n l </space/> = </space/> ' \ n ' ; 
 c o n s t </space/> l o n g </space/> l o n g </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 </space/> * </space/> 1 e 5 </space/> + </space/> 1 0 0 ; 
 i n t </space/> d x [ ] </space/> = </space/> { </space/> - 1 , </space/> 1 , </space/> 0 , </space/> 0 , </space/> 1 , </space/> - 1 , </space/> - 1 , </space/> 1 </space/> } ; 
 i n t </space/> d y [ ] </space/> = </space/> { </space/> 0 , </space/> 0 , </space/> - 1 , </space/> 1 , </space/> 1 , </space/> - 1 , </space/> 1 , </space/> - 1 </space/> } ; 
 
 
 v o i d </space/> d e c o d e ( ) 
 { 
 i n t </space/> n u m ; 
 s t r i n g </space/> s t r ; 
 c i n </space/> > > </space/> n u m </space/> > > </space/> s t r ; 
 l l </space/> a n s </space/> = </space/> 0 ; 
 
 f o r </space/> ( c h a r </space/> c h </space/> = </space/> ' z ' ; </space/> c h </space/> > = </space/> ' a ' ; </space/> c h - - ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s t r . l e n g t h ( ) ; </space/> + + i ) 
 { 
 i f </space/> ( s t r . l e n g t h ( ) </space/> = = </space/> 1 ) 
 b r e a k ; 
 i f </space/> ( s t r [ i ] </space/> ! = </space/> c h ) 
 c o n t i n u e ; 
 i f </space/> ( i </space/> = = </space/> 0 </space/> & & </space/> s t r [ i </space/> + </space/> 1 ] </space/> = = </space/> c h </space/> - </space/> 1 ) 
 { 
 s t r . e r a s e ( s t r . b e g i n ( ) </space/> + </space/> i ) ; 
 a n s + + ; 
 i </space/> = </space/> - 1 ; 
 } 
 e l s e </space/> i f </space/> ( i </space/> = = </space/> s t r . l e n g t h ( ) </space/> - </space/> 1 </space/> & & </space/> s t r [ i </space/> - </space/> 1 ] </space/> = = </space/> c h </space/> - </space/> 1 ) 
 { 
 s t r . e r a s e ( s t r . b e g i n ( ) </space/> + </space/> i ) ; 
 a n s + + ; 
 i </space/> = </space/> - 1 ; 
 } 
 e l s e </space/> i f </space/> ( s t r [ i </space/> + </space/> 1 ] </space/> = = </space/> c h </space/> - </space/> 1 </space/> | | </space/> s t r [ i </space/> - </space/> 1 ] </space/> = = </space/> c h </space/> - </space/> 1 ) 
 { 
 s t r . e r a s e ( s t r . b e g i n ( ) </space/> + </space/> i ) ; 
 a n s + + ; 
 i </space/> = </space/> - 1 ; 
 } 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 I O S </space/> i n t </space/> T </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 d e c o d e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < u t i l i t y > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 v e c t o r < l l > </space/> a b c ( 4 e 5 </space/> + </space/> 2 , </space/> 0 ) ; 
 
 v e c t o r < l l > </space/> d e f ( 4 e 5 </space/> + </space/> 2 , </space/> 0 ) ; 
 
 v e c t o r < l l > </space/> a b c 2 ; 
 
 v e c t o r < l l > </space/> d e f 2 ; 
 
 v e c t o r < l l > </space/> t i m e ; 
 
 c i n . t i e ( 0 ) ; 
 l l </space/> a </space/> = </space/> 0 , </space/> b </space/> = </space/> 0 , </space/> c , </space/> d , </space/> n , </space/> m , </space/> r e s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s t r ; 
 c i n </space/> > > </space/> s t r ; 
 w h i l e </space/> ( 1 ) 
 { 
 l l </space/> i x </space/> = </space/> - 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s t r . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> + </space/> 1 </space/> < </space/> s t r . s i z e ( ) </space/> & & </space/> s t r [ i ] </space/> - </space/> 1 </space/> = = </space/> s t r [ i </space/> + </space/> 1 ] ) 
 { 
 i f </space/> ( i x </space/> = = </space/> - 1 </space/> | | </space/> s t r [ i ] </space/> > </space/> s t r [ i x ] ) 
 { 
 i x </space/> = </space/> i ; 
 } 
 } 
 i f </space/> ( i </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> s t r [ i ] </space/> - </space/> 1 </space/> = = </space/> s t r [ i </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( i x </space/> = = </space/> - 1 </space/> | | </space/> s t r [ i ] </space/> > </space/> s t r [ i x ] ) 
 { 
 i x </space/> = </space/> i ; 
 } 
 } 
 } 
 i f </space/> ( i x </space/> ! = </space/> - 1 ) 
 { 
 s t r . e r a s e ( i x , </space/> 1 ) ; 
 r e s + + ; 
 } 
 e l s e 
 b r e a k ; 
 } 
 c o u t </space/> < < </space/> r e s ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> e l </space/> "" \ n "" 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 
 
 b o o l </space/> i s P o w e r ( l l </space/> x ) 
 { 
 r e t u r n </space/> x </space/> & & </space/> ( ! ( x </space/> & </space/> ( x </space/> - </space/> 1 ) ) ) ; 
 } 
 l l </space/> f a c ( l l </space/> n ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n ; </space/> i </space/> > = </space/> 1 ; </space/> i - - ) 
 { 
 a n s </space/> * = </space/> n ; 
 n - - ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 l l </space/> n c r ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 l l </space/> a n s </space/> = </space/> f a c ( n ) </space/> / </space/> ( f a c ( n </space/> - </space/> r ) </space/> * </space/> f a c ( r ) ) ; 
 r e t u r n </space/> a n s ; 
 } 
 l l </space/> s u m ( l l </space/> n ) 
 { 
 l l </space/> m </space/> = </space/> n ; 
 l l </space/> s </space/> = </space/> 0 ; 
 w h i l e </space/> ( m ) 
 { 
 s </space/> + = </space/> m </space/> % </space/> 1 0 ; 
 m </space/> / = </space/> 1 0 ; 
 } 
 r e t u r n </space/> s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> ' z ' ; </space/> i </space/> > = </space/> ' b ' ; </space/> i - - ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . s i z e ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> i 
 & & </space/> ( s [ j </space/> + </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 </space/> & & </space/> j </space/> + </space/> 1 </space/> < </space/> s . s i z e ( ) </space/> | | </space/> s [ j </space/> - </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 </space/> & & </space/> j </space/> - </space/> 1 </space/> > = </space/> 0 ) ) 
 { 
 s . e r a s e ( j , </space/> 1 ) ; 
 j </space/> = </space/> - 1 ; 
 } 
 } 
 } 
 / / </space/> c o u t < < s < < e l ; 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) </space/> < < </space/> e l ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 l l </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> m a x x </space/> = </space/> 1 e 2 </space/> + </space/> 1 ; 
 s t r i n g </space/> s ; 
 i n t </space/> n , </space/> p o s ; 
 
 i n l i n e </space/> i n t </space/> c h e c k ( ) 
 { 
 c h a r </space/> _ m a x </space/> = </space/> ' a ' ; 
 i n t </space/> f l a g </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> - </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> 1 </space/> | | </space/> s [ i ] </space/> - </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> 1 ) 
 { 
 i f </space/> ( _ m a x </space/> < </space/> s [ i ] ) 
 { 
 _ m a x </space/> = </space/> s [ i ] ; 
 p o s </space/> = </space/> i ; 
 f l a g </space/> = </space/> 1 ; 
 } 
 } 
 } 
 r e t u r n </space/> f l a g ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 c i n </space/> > > </space/> s ; 
 s </space/> = </space/> ' @ ' </space/> + </space/> s </space/> + </space/> ' # ' ; 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 w h i l e </space/> ( c h e c k ( ) ) 
 { 
 s . e r a s e ( p o s , </space/> 1 ) ; 
 n - - ; 
 c n t + + ; 
 } 
 c o u t </space/> < < </space/> c n t </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 o s t r e a m & </space/> o p e r a t o r < < ( o s t r e a m & </space/> i n , </space/> v e c t o r < T > & </space/> a r r ) 
 { 
 f o r </space/> ( T & </space/> i </space/> : </space/> a r r ) 
 { 
 i n </space/> < < </space/> i </space/> < < </space/> "" </space/> "" ; 
 } 
 r e t u r n </space/> i n ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 f o r </space/> ( c h a r </space/> x </space/> = </space/> ' z ' ; </space/> x </space/> > </space/> ' a ' ; </space/> - - x ) 
 { 
 f o r </space/> ( i n t </space/> q </space/> = </space/> 0 ; </space/> q </space/> < </space/> n ; </space/> + + q ) 
 { 
 v e c t o r < b o o l > </space/> d e l ( s . s i z e ( ) , </space/> f a l s e ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> + + i ) 
 { 
 i f </space/> ( s [ i ] </space/> ! = </space/> x ) 
 c o n t i n u e ; 
 i n t </space/> l </space/> = </space/> m a x ( 0 , </space/> i </space/> - </space/> 1 ) , </space/> r </space/> = </space/> m i n ( ( i n t ) s . s i z e ( ) </space/> - </space/> 1 , </space/> i </space/> + </space/> 1 ) ; 
 i f </space/> ( s [ l ] </space/> = = </space/> s [ i ] </space/> - </space/> 1 </space/> | | </space/> s [ r ] </space/> = = </space/> s [ i ] </space/> - </space/> 1 ) 
 { 
 d e l [ i ] </space/> = </space/> t r u e ; 
 } 
 } 
 s t r i n g </space/> n e w s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> + + i ) 
 { 
 i f </space/> ( ! d e l [ i ] ) 
 n e w s . p u s h _ b a c k ( s [ i ] ) ; 
 } 
 s </space/> = </space/> n e w s ; 
 } 
 } 
 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d b o o l . h > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s t d l i b . h > 
 # i n c l u d e </space/> < s t r i n g . h > 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> l e n , </space/> n </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & l e n ) ; 
 c h a r </space/> * s </space/> = </space/> ( c h a r </space/> * ) m a l l o c ( l e n </space/> + </space/> 1 ) , </space/> q , </space/> * c </space/> = </space/> s , </space/> * p ; 
 s c a n f ( "" % s "" , </space/> s ) ; 
 f o r </space/> ( q </space/> = </space/> ' z ' ; </space/> q </space/> ! = </space/> ' a ' ; </space/> q - - ) 
 { 
 c </space/> = </space/> s ; 
 w h i l e </space/> ( * c ) 
 { 
 i f </space/> ( * c </space/> = = </space/> q </space/> & & </space/> ( ( c </space/> ! = </space/> s </space/> & & </space/> * ( c </space/> - </space/> 1 ) </space/> = = </space/> q </space/> - </space/> 1 ) </space/> | | </space/> * ( c </space/> + </space/> 1 ) </space/> = = </space/> q </space/> - </space/> 1 ) ) 
 { 
 n + + ; 
 p </space/> = </space/> c ; 
 i f </space/> ( * ( c </space/> - </space/> 1 ) </space/> = = </space/> * c ) 
 c - - ; 
 w h i l e </space/> ( * p ) 
 { 
 * p </space/> = </space/> * ( p </space/> + </space/> 1 ) ; 
 p + + ; 
 } 
 } 
 e l s e 
 c + + ; 
 } 
 } 
 p r i n t f ( "" % d \ n "" , </space/> n ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> d o u b l e </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> m i n f </space/> - 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> m p r </space/> m a k e _ p a i r 
 # d e f i n e </space/> i n f </space/> 1 0 0 0 0 0 0 0 0 0 0 0 0 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 f o r </space/> ( c h a r </space/> c </space/> = </space/> ' z ' ; </space/> c </space/> > = </space/> ' a ' ; ) 
 { 
 s t r i n g </space/> u </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> = = </space/> c ) 
 { 
 i f </space/> ( ( i </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> s [ i ] </space/> - </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> 1 ) 
 | | </space/> ( i </space/> + </space/> 1 </space/> < </space/> s . s i z e ( ) </space/> & & </space/> s [ i ] </space/> - </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> 1 ) ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 u </space/> + = </space/> s [ i ] ; 
 } 
 e l s e 
 u </space/> + = </space/> s [ i ] ; 
 } 
 i f </space/> ( u </space/> = = </space/> s ) 
 c - - ; 
 e l s e 
 s </space/> = </space/> u ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> s . s i z e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 
 / * C o d e f o r c e s * / 
 
 u n o r d e r e d _ m a p < s t r i n g , </space/> i n t > </space/> m p ; 
 
 i n t </space/> r e m o v e A d j H e l p e r ( s t r i n g </space/> s ) 
 { 
 
 i f </space/> ( s . l e n g t h ( ) </space/> < = </space/> 1 ) 
 { 
 r e t u r n </space/> 0 ; 
 } 
 
 i f </space/> ( m p . f i n d ( s ) </space/> ! = </space/> m p . e n d ( ) ) 
 { 
 r e t u r n </space/> m p [ s ] ; 
 } 
 s t r i n g </space/> n e w S t r </space/> = </space/> s ; 
 i n t </space/> t o t a l R e s </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> + </space/> 1 </space/> < </space/> s . l e n g t h ( ) </space/> a n d </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> + </space/> 1 ] </space/> + </space/> 1 ) ) 
 { 
 
 n e w S t r </space/> = </space/> s . s u b s t r ( 0 , </space/> i ) </space/> + </space/> s . s u b s t r ( i </space/> + </space/> 1 ) ; 
 / / </space/> c o u t </space/> < < </space/> n e w S t r </space/> < < </space/> e n d l </space/> ; 
 i n t </space/> c u r R e s </space/> = </space/> 1 </space/> + </space/> r e m o v e A d j H e l p e r ( n e w S t r ) ; 
 t o t a l R e s </space/> = </space/> m a x ( t o t a l R e s , </space/> c u r R e s ) ; 
 } 
 e l s e </space/> i f </space/> ( i </space/> - </space/> 1 </space/> > = </space/> 0 </space/> a n d </space/> ( s [ i ] </space/> = = </space/> s [ i </space/> - </space/> 1 ] </space/> + </space/> 1 ) ) 
 { 
 / / </space/> c o u t </space/> < < </space/> n e w S t r </space/> < < </space/> e n d l </space/> ; 
 n e w S t r </space/> = </space/> s . s u b s t r ( 0 , </space/> i ) </space/> + </space/> s . s u b s t r ( i </space/> + </space/> 1 ) ; 
 i n t </space/> c u r R e s </space/> = </space/> 1 </space/> + </space/> r e m o v e A d j H e l p e r ( n e w S t r ) ; 
 t o t a l R e s </space/> = </space/> m a x ( t o t a l R e s , </space/> c u r R e s ) ; 
 } 
 } 
 
 r e t u r n </space/> m p [ s ] </space/> = </space/> t o t a l R e s ; 
 } 
 
 i n t </space/> r e m o v e A d j H e l p e r 2 ( s t r i n g </space/> s ) 
 { 
 
 c h a r </space/> m x C </space/> = </space/> ' a ' ; 
 i n t </space/> i </space/> = </space/> - 1 ; 
 i n t </space/> r e m o v e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . l e n g t h ( ) ; </space/> j + + ) 
 { 
 i f </space/> ( j </space/> + </space/> 1 </space/> < </space/> s . l e n g t h ( ) </space/> a n d </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> + </space/> 1 ] </space/> + </space/> 1 ) ) 
 { 
 i f </space/> ( s [ j ] </space/> > </space/> m x C ) 
 { 
 m x C </space/> = </space/> s [ j ] ; 
 i </space/> = </space/> j ; 
 } 
 } 
 i f </space/> ( j </space/> - </space/> 1 </space/> > = </space/> 0 </space/> a n d </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> - </space/> 1 ] </space/> + </space/> 1 ) ) 
 { 
 i f </space/> ( s [ j ] </space/> > </space/> m x C ) 
 { 
 m x C </space/> = </space/> s [ j ] ; 
 i </space/> = </space/> j ; 
 } 
 } 
 } 
 
 i f </space/> ( i </space/> ! = </space/> - 1 ) 
 { 
 s t r i n g </space/> n e w S t r </space/> = </space/> s . s u b s t r ( 0 , </space/> i ) </space/> + </space/> s . s u b s t r ( i </space/> + </space/> 1 ) ; 
 r e m o v e s </space/> = </space/> 1 </space/> + </space/> r e m o v e A d j H e l p e r 2 ( n e w S t r ) ; 
 } 
 r e t u r n </space/> r e m o v e s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 
 c o u t </space/> < < </space/> r e m o v e A d j H e l p e r 2 ( s ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> T </space/> ; 
 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 1 ; </space/> t </space/> < = </space/> T ; </space/> t + + ) 
 { 
 / / </space/> c o u t </space/> < < </space/> "" C a s e </space/> # "" </space/> < < </space/> t </space/> < < </space/> "" </space/> : "" </space/> ; 
 s o l v e ( ) ; 
 } 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < c s t r i n g > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> a l l ( v ) </space/> ( v . b e g i n ( ) , </space/> v . e n d ( ) ) 
 # d e f i n e </space/> r a l l ( v ) </space/> ( v . r b e g i n ( ) , </space/> v . r e n d ( ) ) 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 . 0 ) 
 # d e f i n e </space/> F a s t R e a d </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> b u g ( a ) </space/> c e r r </space/> < < </space/> # a </space/> < < </space/> "" </space/> : </space/> "" </space/> < < </space/> a </space/> < < </space/> e n d l 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> m x </space/> = </space/> 2 e 6 </space/> + </space/> 1 0 ; 
 
 i n t </space/> p o s x [ ] </space/> = </space/> { </space/> 1 , </space/> - 1 , </space/> 0 , </space/> 0 </space/> } ; 
 i n t </space/> p o s y [ ] </space/> = </space/> { </space/> 0 , </space/> 0 , </space/> 1 , </space/> - 1 </space/> } ; 
 
 i n t </space/> m a i n ( ) 
 { 
 F a s t R e a d 
 
 # i f d e f </space/> M f c _ T a n z i m 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , "" w "" , </space/> s t d o u t ) ; 
 # e n d i f </space/> / / / </space/> M f c _ T a n z i m 
 
 i n t </space/> t </space/> = </space/> 1 , </space/> n , </space/> k , </space/> m , </space/> a , </space/> b , </space/> c , </space/> d ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 s t r i n g </space/> x ; 
 c i n </space/> > > </space/> n </space/> > > </space/> x ; 
 
 b o o l </space/> o k </space/> = </space/> t r u e ; 
 w h i l e </space/> ( o k ) 
 { 
 o k </space/> = </space/> f a l s e ; 
 i n t </space/> m x </space/> = </space/> - 1 , </space/> p o s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> x . s i z e ( ) </space/> & & </space/> x . s i z e ( ) </space/> > </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> = = </space/> 0 ) 
 { 
 i f </space/> ( x [ i ] </space/> = = </space/> x [ i </space/> + </space/> 1 ] </space/> + </space/> 1 ) 
 { 
 i f </space/> ( x [ i ] </space/> > </space/> m x ) 
 { 
 m x </space/> = </space/> x [ i ] ; 
 p o s </space/> = </space/> i ; 
 } 
 } 
 } 
 e l s e </space/> i f </space/> ( i </space/> = = </space/> x . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 i f </space/> ( x [ i ] </space/> = = </space/> x [ i </space/> - </space/> 1 ] </space/> + </space/> 1 ) 
 { 
 i f </space/> ( x [ i ] </space/> > </space/> m x ) 
 { 
 m x </space/> = </space/> x [ i ] ; 
 p o s </space/> = </space/> i ; 
 } 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( x [ i ] </space/> = = </space/> x [ i </space/> + </space/> 1 ] </space/> + </space/> 1 </space/> | | </space/> x [ i ] </space/> = = </space/> x [ i </space/> - </space/> 1 ] </space/> + </space/> 1 ) 
 { 
 i f </space/> ( x [ i ] </space/> > </space/> m x ) 
 { 
 m x </space/> = </space/> x [ i ] ; 
 p o s </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 o k </space/> | = </space/> ( ~ m x ) ; 
 i f </space/> ( ~ m x ) 
 x . e r a s e ( x . b e g i n ( ) </space/> + </space/> p o s ) ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> x . s i z e ( ) </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < e x t / p b _ d s / a s s o c _ c o n t a i n e r . h p p > 
 / / # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O f a s t "" ) 
 / / # p r a g m a </space/> G C C </space/> t a r g e t ( "" s s e , s s e 2 , s s e 3 , s s s e 3 , s s e 4 , p o p c n t , a b m , m m i , a v i , t u n e = n a t i v e "" ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> n a m e s p a c e </space/> _ _ g n u _ p b d s ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> r e a l </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> e l i f </space/> e l s e </space/> i f 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> r a l l ( v ) </space/> v . r b e g i n ( ) , </space/> v . r e n d ( ) 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> p i </space/> M _ P I 
 t y p e d e f </space/> t r e e < i n t , </space/> n u l l _ t y p e , </space/> l e s s < i n t > , </space/> r b _ t r e e _ t a g , </space/> t r e e _ o r d e r _ s t a t i s t i c s _ n o d e _ u p d a t e > </space/> i n d e i e d _ s e t ; 
 
 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 2 e 1 8 , </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 , 
 R A N D O M </space/> = </space/> c h r o n o : : s t e a d y _ c l o c k : : n o w ( ) . t i m e _ s i n c e _ e p o c h ( ) . c o u n t ( ) ; 
 m t 1 9 9 3 7 </space/> r n g ( R A N D O M ) ; 
 s t r u c t </space/> c h a s h 
 { 
 i n t </space/> o p e r a t o r ( ) ( i n t </space/> i ) </space/> c o n s t 
 { 
 r e t u r n </space/> ( i </space/> ^ </space/> R A N D O M ) </space/> % </space/> M O D ; 
 } 
 } ; 
 
 
 i n t </space/> n , </space/> m ; 
 s t r i n g </space/> s ; 
 
 
 v o i d </space/> s e a r c h ( ) 
 { 
 w h i l e </space/> ( n </space/> > </space/> 1 ) 
 { 
 i n t </space/> i d </space/> = </space/> - 1 , </space/> m a </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( ! i </space/> a n d </space/> s [ i ] </space/> - </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> 1 ) 
 { 
 i d </space/> = </space/> 0 ; 
 m a </space/> = </space/> s [ i ] </space/> - </space/> ' a ' ; 
 } 
 e l i f ( i </space/> = = </space/> n </space/> - </space/> 1 </space/> a n d </space/> s [ i ] </space/> - </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> 1 </space/> a n d </space/> s [ i ] </space/> - </space/> ' a ' </space/> > </space/> m a ) </space/> i d </space/> = </space/> n </space/> - </space/> 1 ; 
 e l s e 
 { 
 i f </space/> ( s [ i ] </space/> - </space/> s [ i </space/> - </space/> 1 ] </space/> = = </space/> 1 </space/> o r </space/> s [ i ] </space/> - </space/> s [ i </space/> + </space/> 1 ] </space/> = = </space/> 1 ) 
 { 
 i f </space/> ( s [ i ] </space/> - </space/> ' a ' </space/> > </space/> m a ) 
 { 
 m a </space/> = </space/> s [ i ] </space/> - </space/> ' a ' ; 
 i d </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 i f </space/> ( i d </space/> = = </space/> - 1 ) 
 b r e a k ; 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> i d ) ; 
 - - n ; 
 } 
 } 
 
 
 v o i d </space/> d e b u g ( ) 
 { 
 c e r r </space/> < < </space/> "" \ n "" ; 
 
 c e r r </space/> < < </space/> "" \ n "" ; 
 } 
 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 / / </space/> f r e o p e n ( "" i n p u t . t i t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t i t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 / / </space/> c o u t . p r e c i s i o n ( 6 ) ; 
 
 c i n </space/> > > </space/> n ; 
 m </space/> = </space/> n ; 
 c i n </space/> > > </space/> s ; 
 s e a r c h ( ) ; 
 c o u t </space/> < < </space/> m </space/> - </space/> n ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < s t r i n g > 
 i n t </space/> T , </space/> n ; 
 s t d : : s t r i n g </space/> s ; 
 t e m p l a t e </space/> < c l a s s </space/> I > 
 i n l i n e </space/> v o i d </space/> r e a d ( I & </space/> x ) 
 { 
 x </space/> = </space/> 0 ; 
 i n t </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c h ; 
 d o 
 { 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 f </space/> = </space/> - 1 ; 
 } </space/> w h i l e </space/> ( c h </space/> < </space/> ' 0 ' </space/> | | </space/> c h </space/> > </space/> ' 9 ' ) ; 
 d o 
 { 
 x </space/> = </space/> ( x </space/> < < </space/> 1 ) </space/> + </space/> ( x </space/> < < </space/> 3 ) </space/> + </space/> ( c h </space/> ^ </space/> 4 8 ) ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } </space/> w h i l e </space/> ( c h </space/> > = </space/> ' 0 ' </space/> & & </space/> c h </space/> < = </space/> ' 9 ' ) ; 
 x </space/> * = </space/> f ; 
 r e t u r n ; 
 } 
 v o i d </space/> s o l v e ( v o i d ) 
 { 
 r e a d ( n ) ; 
 s t d : : c i n </space/> > > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 5 ; </space/> i </space/> > = </space/> 0 ; </space/> - - i ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . l e n g t h ( ) ; </space/> + + j ) 
 { 
 i f </space/> ( s [ j ] </space/> - </space/> ' a ' </space/> = = </space/> i ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> - </space/> 1 ] </space/> + </space/> 1 </space/> & & </space/> j </space/> > </space/> 0 ) 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> j ) , </space/> - - j ; 
 i f </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> + </space/> 1 ] </space/> + </space/> 1 </space/> & & </space/> j </space/> < </space/> s . l e n g t h ( ) </space/> - </space/> 1 ) 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> j ) , </space/> - - j ; 
 } 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> s . l e n g t h ( ) </space/> - </space/> 1 ; </space/> j </space/> > = </space/> 0 ; </space/> - - j ) 
 { 
 i f </space/> ( s [ j ] </space/> - </space/> ' a ' </space/> = = </space/> i ) 
 { 
 i f </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> - </space/> 1 ] </space/> + </space/> 1 </space/> & & </space/> j </space/> > </space/> 0 ) 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> j ) , </space/> + + j ; 
 i f </space/> ( s [ j ] </space/> = = </space/> s [ j </space/> + </space/> 1 ] </space/> + </space/> 1 </space/> & & </space/> j </space/> < </space/> s . l e n g t h ( ) </space/> - </space/> 1 ) 
 s . e r a s e ( s . b e g i n ( ) </space/> + </space/> j ) , </space/> + + j ; 
 } 
 } 
 } 
 p r i n t f ( "" % d \ n "" , </space/> n </space/> - </space/> ( i n t ) s . l e n g t h ( ) ) ; 
 r e t u r n ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 T </space/> = </space/> 1 ; 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( c h a r </space/> i </space/> = </space/> ' z ' ; </space/> i </space/> > </space/> ' a ' ; </space/> - - i ) 
 { 
 / / </space/> c o u t < < "" h e l l o "" ; 
 s t r i n g </space/> c o p y </space/> = </space/> s ; 
 / / </space/> c o u t < < i < < e n d l ; 
 / / </space/> c o u t < < i - 1 < < e n d l ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> c o p y . l e n g t h ( ) ; </space/> + + j ) 
 { 
 i f </space/> ( j </space/> = = </space/> 0 ) 
 { 
 / / </space/> c o u t < < c o p y [ j ] < < "" </space/> "" < < i - 1 < < e n d l ; 
 i f </space/> ( c o p y [ j ] </space/> = = </space/> ( c h a r ) i </space/> & & </space/> ( c o p y [ j </space/> + </space/> 1 ] </space/> = = </space/> ( c h a r ) i </space/> - </space/> 1 </space/> | | </space/> c o p y [ j </space/> + </space/> 1 ] </space/> = = </space/> ' * ' ) ) 
 { 
 / / </space/> c o u t < < "" h e l l o "" ; 
 c o p y [ j ] </space/> = </space/> ' * ' ; 
 } 
 } 
 e l s e </space/> i f </space/> ( j </space/> = = </space/> c o p y . l e n g t h ( ) </space/> - </space/> 1 ) 
 { 
 i f </space/> ( c o p y [ j ] </space/> = = </space/> ( c h a r ) i </space/> & & </space/> ( c o p y [ j </space/> - </space/> 1 ] </space/> = = </space/> ( c h a r ) i </space/> - </space/> 1 </space/> | | </space/> c o p y [ j </space/> - </space/> 1 ] </space/> = = </space/> ' * ' ) ) 
 { 
 / / </space/> c o u t < < "" h e l l o "" ; 
 c o p y [ j ] </space/> = </space/> ' * ' ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( c o p y [ j ] </space/> = = </space/> i </space/> & & </space/> ( c o p y [ j </space/> - </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 </space/> | | </space/> c o p y [ j </space/> + </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 
 | | </space/> c o p y [ j </space/> + </space/> 1 ] </space/> = = </space/> ' * ' </space/> | | </space/> c o p y [ j </space/> - </space/> 1 ] </space/> = = </space/> ' * ' ) ) 
 { 
 / / </space/> c o u t < < "" h e l l o "" ; 
 c o p y [ j ] </space/> = </space/> ' * ' ; 
 } 
 } 
 } 
 / / </space/> c o u t < < c o p y . l e n g t h ( ) - 1 < < e n d l ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> c o p y . l e n g t h ( ) </space/> - </space/> 1 ; </space/> j </space/> > = </space/> 0 ; </space/> - - j ) 
 { 
 i f </space/> ( j </space/> = = </space/> 0 ) 
 { 
 / / </space/> c o u t < < c o p y [ j ] < < "" </space/> "" < < i - 1 < < e n d l ; 
 i f </space/> ( c o p y [ j ] </space/> = = </space/> ( c h a r ) i </space/> & & </space/> ( c o p y [ j </space/> + </space/> 1 ] </space/> = = </space/> ( c h a r ) i </space/> - </space/> 1 </space/> | | </space/> c o p y [ j </space/> + </space/> 1 ] </space/> = = </space/> ' * ' ) ) 
 { 
 / / </space/> c o u t < < "" h e l l o "" ; 
 c o p y [ j ] </space/> = </space/> ' * ' ; 
 } 
 } 
 e l s e </space/> i f </space/> ( j </space/> = = </space/> ( c o p y . l e n g t h ( ) </space/> - </space/> 1 ) ) 
 { 
 i f </space/> ( c o p y [ j ] </space/> = = </space/> ( c h a r ) i </space/> & & </space/> ( c o p y [ j </space/> - </space/> 1 ] </space/> = = </space/> ( c h a r ) i </space/> - </space/> 1 </space/> | | </space/> c o p y [ j </space/> - </space/> 1 ] </space/> = = </space/> ' * ' ) ) 
 { 
 / / </space/> c o u t < < "" h e l l o "" ; 
 c o p y [ j ] </space/> = </space/> ' * ' ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( c o p y [ j ] </space/> = = </space/> i </space/> & & </space/> ( c o p y [ j </space/> - </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 </space/> | | </space/> c o p y [ j </space/> + </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 
 | | </space/> c o p y [ j </space/> + </space/> 1 ] </space/> = = </space/> ' * ' </space/> | | </space/> c o p y [ j </space/> - </space/> 1 ] </space/> = = </space/> ' * ' ) ) 
 { 
 / / </space/> c o u t < < "" h e l l o "" ; 
 c o p y [ j ] </space/> = </space/> ' * ' ; 
 } 
 } 
 } 
 
 i n t </space/> i n d e x </space/> = </space/> 0 ; 
 s t r i n g </space/> p </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> c o p y . l e n g t h ( ) ; </space/> + + j ) 
 { 
 i f </space/> ( c o p y [ j ] </space/> ! = </space/> ' * ' ) 
 { 
 p </space/> + = </space/> c o p y [ j ] ; 
 } 
 e l s e 
 { 
 a n s + + ; 
 } 
 } 
 s </space/> = </space/> p ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" i n p u t 1 . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t 2 . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 
 s o l v e ( ) ; 
 }",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s t r i n g </space/> s ; 
 i n t </space/> s n [ 1 0 0 1 ] </space/> = </space/> { </space/> 0 </space/> } ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 c i n </space/> > > </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 s n [ s [ i ] </space/> - </space/> ' a ' ] + + ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 2 5 ; </space/> j </space/> > = </space/> 0 ; </space/> j - - ) </space/> / / </space/> a b c </space/> b c </space/> 0 </space/> z h e n g x i a n g 
 { 
 i f </space/> ( s n [ j ] </space/> = = </space/> 0 ) 
 c o n t i n u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> - </space/> ' a ' </space/> = = </space/> j ) 
 { 
 i f </space/> ( ( s [ i </space/> - </space/> 1 ] </space/> - </space/> ' a ' </space/> = = </space/> j </space/> - </space/> 1 </space/> & & </space/> i </space/> - </space/> 1 </space/> > = </space/> 0 ) 
 | | </space/> ( s [ i </space/> + </space/> 1 ] </space/> - </space/> ' a ' </space/> = = </space/> j </space/> - </space/> 1 </space/> & & </space/> i </space/> + </space/> 1 </space/> < = </space/> s . l e n g t h ( ) ) ) 
 { 
 s . e r a s e ( i , </space/> 1 ) ; 
 i - - ; </space/> / / </space/> i + 1 - > i t h i s </space/> i s </space/> i + 1 
 a n s + + ; 
 } 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> s . l e n g t h ( ) ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) </space/> / / </space/> 3 </space/> b c d a </space/> b c a </space/> b a </space/> 0 </space/> f a n x i a n g 
 { 
 i f </space/> ( s [ i ] </space/> - </space/> ' a ' </space/> = = </space/> j ) 
 { 
 i f </space/> ( ( s [ i </space/> - </space/> 1 ] </space/> - </space/> ' a ' </space/> = = </space/> j </space/> - </space/> 1 </space/> & & </space/> i </space/> - </space/> 1 </space/> > = </space/> 0 ) 
 | | </space/> ( s [ i </space/> + </space/> 1 ] </space/> - </space/> ' a ' </space/> = = </space/> j </space/> - </space/> 1 </space/> & & </space/> i </space/> + </space/> 1 </space/> < = </space/> s . l e n g t h ( ) ) ) 
 { 
 s . e r a s e ( i , </space/> 1 ) ; 
 i + + ; 
 a n s + + ; 
 } 
 } 
 } 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O f a s t , n o - s t a c k - p r o t e c t o r "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" u n r o l l - l o o p s "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" f a s t - m a t h "" ) 
 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 
 
 l l </space/> a , </space/> b , </space/> c , </space/> d , </space/> e , </space/> f , </space/> s t , </space/> m a x n ; 
 
 v e c t o r < v e c t o r < l l > </space/> > </space/> a r r ; 
 v e c t o r < l l > </space/> c n m ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 c i n </space/> > > </space/> a ; 
 s t r i n g </space/> s ; 
 c i n </space/> > > </space/> s ; 
 l l </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( t r u e ) 
 { 
 l l </space/> p o s </space/> = </space/> - 1 ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> s . l e n g t h ( ) ; </space/> + + j ) 
 { 
 i f </space/> ( j </space/> ! = </space/> 0 </space/> & & </space/> s [ j ] </space/> - </space/> 1 </space/> = = </space/> s [ j </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( p o s </space/> = = </space/> - 1 ) 
 p o s </space/> = </space/> j ; 
 e l s e </space/> i f </space/> ( s [ p o s ] </space/> < </space/> s [ j ] ) 
 p o s </space/> = </space/> j ; 
 } 
 i f </space/> ( j </space/> + </space/> 1 </space/> ! = </space/> s . l e n g t h ( ) </space/> & & </space/> s [ j ] </space/> - </space/> 1 </space/> = = </space/> s [ j </space/> + </space/> 1 ] ) 
 { 
 i f </space/> ( p o s </space/> = = </space/> - 1 ) 
 p o s </space/> = </space/> j ; 
 e l s e </space/> i f </space/> ( s [ p o s ] </space/> < </space/> s [ j ] ) 
 p o s </space/> = </space/> j ; 
 } 
 } 
 i f </space/> ( p o s </space/> = = </space/> - 1 ) 
 b r e a k ; 
 s t r i n g </space/> s 1 </space/> = </space/> "" "" ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> p o s ; </space/> + + i ) 
 s 1 </space/> + = </space/> s [ i ] ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> p o s </space/> + </space/> 1 ; </space/> i </space/> < </space/> s . l e n g t h ( ) ; </space/> + + i ) 
 s 1 </space/> + = </space/> s [ i ] ; 
 s </space/> = </space/> s 1 ; 
 + + a n s ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> a ; 
 c i n </space/> > > </space/> a ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 0 ; 
 i n t </space/> f [ 2 0 0 ] </space/> = </space/> { } ; 
 c h a r </space/> k [ 2 0 0 ] </space/> = </space/> { } ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 k [ i ] </space/> = </space/> a [ i ] ; 
 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 i n t </space/> l e n </space/> = </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> ' z ' ; </space/> i </space/> > = </space/> ' a ' ; </space/> i - - ) 
 { 
 c n t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> l e n ; </space/> j + + ) 
 f [ j ] </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> l e n ; </space/> j + + ) 
 { 
 i f </space/> ( k [ j ] </space/> = = </space/> i ) 
 { 
 i f </space/> ( ( j </space/> - </space/> 1 </space/> > = </space/> 0 </space/> & & </space/> k [ j </space/> - </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 ) </space/> | | </space/> ( j </space/> + </space/> 1 </space/> < = </space/> l e n </space/> - </space/> 1 </space/> & & </space/> k [ j </space/> + </space/> 1 ] </space/> = = </space/> i </space/> - </space/> 1 ) ) 
 { 
 i n t </space/> o p </space/> = </space/> j ; 
 w h i l e </space/> ( o p </space/> < </space/> l e n ) 
 { 
 k [ o p ] </space/> = </space/> k [ o p </space/> + </space/> 1 ] ; 
 o p + + ; 
 } 
 l e n - - ; 
 a n s + + ; 
 j </space/> - = </space/> 2 ; 
 } 
 } 
 } 
 } 
 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> a r </space/> a r r a y 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 
 c o n s t </space/> i n t </space/> M A X _ N </space/> = </space/> 1 e 5 </space/> + </space/> 1 ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 9 ; 
 c o n s t </space/> l l </space/> L I N F </space/> = </space/> 1 e 1 8 ; 
 
 l l </space/> m o d P o w ( l l </space/> a , </space/> l l </space/> x , </space/> l l </space/> p ) 
 { 
 / / </space/> c a l c u l a t e s </space/> a ^ x </space/> m o d </space/> p </space/> i n </space/> l o g a r i t h m i c </space/> t i m e . 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( x </space/> > </space/> 0 ) 
 { 
 i f </space/> ( x </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 { 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> p ; 
 } 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> p ; 
 x </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 l l </space/> m o d I n v e r s e ( l l </space/> a , </space/> l l </space/> p ) 
 { 
 / / </space/> c a l c u l a t e s </space/> t h e </space/> m o d u l a r </space/> m u l t i p l i c a t i v e </space/> o f </space/> a </space/> m o d </space/> m . 
 / / ( a s s u m i n g </space/> p </space/> i s </space/> p r i m e ) . 
 r e t u r n </space/> m o d P o w ( a , </space/> p </space/> - </space/> 2 , </space/> p ) ; 
 } 
 l l </space/> m o d B i n o m i a l ( l l </space/> n , </space/> l l </space/> k , </space/> l l </space/> p ) 
 { 
 / / </space/> c a l c u l a t e s </space/> C ( n , k ) </space/> m o d </space/> p </space/> ( a s s u m i n g </space/> p </space/> i s </space/> p r i m e ) . 
 
 l l </space/> n u m e r a t o r </space/> = </space/> 1 ; </space/> / / </space/> n </space/> * </space/> ( n - 1 ) </space/> * </space/> . . . </space/> * </space/> ( n - k + 1 ) 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> k ; </space/> i + + ) 
 { 
 n u m e r a t o r </space/> = </space/> ( n u m e r a t o r </space/> * </space/> ( n </space/> - </space/> i ) ) </space/> % </space/> p ; 
 } 
 
 l l </space/> d e n o m i n a t o r </space/> = </space/> 1 ; </space/> / / </space/> k ! 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> k ; </space/> i + + ) 
 { 
 d e n o m i n a t o r </space/> = </space/> ( d e n o m i n a t o r </space/> * </space/> i ) </space/> % </space/> p ; 
 } 
 
 / / </space/> n u m e r a t o r </space/> / </space/> d e n o m i n a t o r </space/> m o d </space/> p . 
 r e t u r n </space/> ( n u m e r a t o r </space/> * </space/> m o d I n v e r s e ( d e n o m i n a t o r , </space/> p ) ) </space/> % </space/> p ; 
 } 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 l l </space/> n , </space/> m , </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 l l </space/> f </space/> = </space/> m o d B i n o m i a l ( m , </space/> n </space/> - </space/> 1 , </space/> m o d ) </space/> % </space/> m o d ; 
 l l </space/> p </space/> = </space/> m o d P o w ( 2 , </space/> n </space/> - </space/> 3 , </space/> m o d ) </space/> % </space/> m o d ; 
 
 l l </space/> a n s </space/> = </space/> ( f </space/> * </space/> p ) </space/> % </space/> m o d ; 
 a n s </space/> * = </space/> ( n </space/> - </space/> 2 ) ; 
 a n s </space/> % = </space/> m o d ; 
 
 / / </space/> 	 c o u t < < f < < e n d l ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 / / </space/> c o u t < < p < < e n d l ; 
 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 / / </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 
 s o l v e ( ) ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m k </space/> m a k e _ p a i r 
 / / </space/> # d e f i n e </space/> e n d l </space/> "" \ n "" 
 / / </space/> # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 7 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p p b </space/> p o p _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> p p f </space/> p o p _ f r o n t 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> u n i q ( v ) </space/> ( v ) . e r a s e ( u n i q u e ( a l l ( v ) ) , </space/> ( v ) . e n d ( ) ) 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( ( x ) . s i z e ( ) ) 
 # d e f i n e </space/> f r </space/> f i r s t 
 # d e f i n e </space/> s c </space/> s e c o n d 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> m e m 1 ( a ) </space/> m e m s e t ( a , </space/> - 1 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> m e m 0 ( a ) </space/> m e m s e t ( a , </space/> 0 , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> M A X N </space/> 1 0 0 0 0 0 1 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l i ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> p a i r < l l i , </space/> l l i > </space/> i i ; 
 v e c t o r < l l i > </space/> f ( 2 0 0 0 0 5 ) ; 
 
 l l i </space/> b p o w ( l l i </space/> a , </space/> l l i </space/> b ) 
 { 
 l l i </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> m o d ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 
 v o i d </space/> f a c t ( l l i </space/> i ) 
 { 
 f [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l i </space/> k </space/> = </space/> 1 ; </space/> k </space/> < = </space/> i ; </space/> k + + ) 
 { 
 ( f [ k ] </space/> = </space/> f [ k </space/> - </space/> 1 ] </space/> * </space/> k ) </space/> % = </space/> m o d ; 
 } 
 } 
 l l i </space/> c o m b ( l l i </space/> i , </space/> l l i </space/> j ) 
 { 
 l l i </space/> k </space/> = </space/> f [ i ] ; 
 l l i </space/> g </space/> = </space/> ( f [ j ] </space/> * </space/> ( f [ i </space/> - </space/> j ] ) ) </space/> % </space/> m o d ; 
 l l i </space/> h </space/> = </space/> b p o w ( g , </space/> m o d </space/> - </space/> 2 ) ; 
 r e t u r n </space/> ( k </space/> * </space/> h ) </space/> % </space/> m o d ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 
 # e n d i f 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 
 f a c t ( 2 0 0 0 0 5 ) ; 
 
 
 w h i l e </space/> ( t - - ) 
 { 
 
 l l i </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 l l i </space/> a n s </space/> = </space/> c o m b ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 ) ; 
 a n s </space/> % = </space/> m o d ; 
 
 a n s </space/> * = </space/> b p o w ( 2 , </space/> n </space/> - </space/> 3 ) ; 
 c o u t </space/> < < </space/> a n s </space/> % </space/> m o d ; 
 
 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l o n g </space/> l o n g </space/> f a c [ 2 0 0 0 0 5 ] ; 
 
 l o n g </space/> l o n g </space/> q u i c k p o w ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b ) 
 { 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 , </space/> b a s e </space/> = </space/> a ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> % </space/> 2 ) 
 a n s </space/> = </space/> a n s </space/> * </space/> b a s e </space/> % </space/> m o d ; 
 b a s e </space/> = </space/> b a s e </space/> * </space/> b a s e </space/> % </space/> m o d ; 
 b </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 l o n g </space/> l o n g </space/> i n v ( l o n g </space/> l o n g </space/> x ) 
 { 
 r e t u r n </space/> q u i c k p o w ( x , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 
 l o n g </space/> l o n g </space/> C ( i n t </space/> n , </space/> i n t </space/> m ) 
 { 
 r e t u r n </space/> f a c [ n ] </space/> * </space/> i n v ( f a c [ m ] </space/> * </space/> f a c [ n </space/> - </space/> m ] </space/> % </space/> m o d ) </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 f a c [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 f a c [ i ] </space/> = </space/> ( f a c [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> m o d ; 
 l o n g </space/> l o n g </space/> x </space/> = </space/> C ( m , </space/> n </space/> - </space/> 1 ) ; 
 x </space/> = </space/> x </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 x </space/> = </space/> x </space/> * </space/> q u i c k p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> m o d ; 
 ; 
 c o u t </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 3 ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 i n t </space/> a d d ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 x </space/> + = </space/> y ; 
 w h i l e </space/> ( x </space/> > = </space/> M O D ) 
 x </space/> - = </space/> M O D ; 
 w h i l e </space/> ( x </space/> < </space/> 0 ) 
 x </space/> + = </space/> M O D ; 
 r e t u r n </space/> x ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> ( 1 L L </space/> * </space/> x </space/> * </space/> y ) </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> b i n p o w ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i n t </space/> r e t </space/> = </space/> 1 ; 
 w h i l e </space/> ( y ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e t </space/> = </space/> m u l ( r e t , </space/> x ) ; 
 x </space/> = </space/> m u l ( x , </space/> x ) ; 
 y </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 
 i n t </space/> i n v ( i n t </space/> x ) 
 { 
 r e t u r n </space/> b i n p o w ( x , </space/> M O D </space/> - </space/> 2 ) ; 
 } 
 
 i n t </space/> d i v i d e ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> m u l ( x , </space/> i n v ( y ) ) ; 
 } 
 
 i n t </space/> f a c t [ N ] ; 
 
 i n t </space/> n C r ( i n t </space/> n , </space/> i n t </space/> r ) 
 { 
 r e t u r n </space/> d i v i d e ( f a c t [ n ] , </space/> m u l ( f a c t [ r ] , </space/> f a c t [ n </space/> - </space/> r ] ) ) ; 
 } 
 
 i n l i n e </space/> v o i d </space/> p r e c a l c ( ) 
 { 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 { 
 f a c t [ i ] </space/> = </space/> m u l ( f a c t [ i </space/> - </space/> 1 ] , </space/> i ) ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 p r e c a l c ( ) ; 
 i n t </space/> n , </space/> m ; 
 s c a n f ( "" % d </space/> % d "" , </space/> & n , </space/> & m ) ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i f </space/> ( n </space/> > </space/> 2 ) 
 { 
 a n s </space/> = </space/> m u l ( n C r ( m , </space/> n </space/> - </space/> 1 ) , </space/> m u l ( n </space/> - </space/> 2 , </space/> b i n p o w ( 2 , </space/> n </space/> - </space/> 3 ) ) ) ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 
 
 b o o l </space/> t e s t _ c a s e s _ e x i s t </space/> = </space/> f a l s e ; 
 
 l l </space/> f a c t [ 1 0 0 0 0 0 5 ] ; 
 l l </space/> i n v e r s e F a c t o r i a l s [ 1 0 0 0 0 0 5 ] ; 
 
 l l </space/> p o w e r M o d u l o ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> m o d ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 v o i d </space/> p r e ( ) 
 { 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> 1 0 0 0 0 0 5 ; </space/> i + + ) 
 f a c t [ i ] </space/> = </space/> ( f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> m o d ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 1 0 0 0 0 0 5 ; </space/> i + + ) 
 i n v e r s e F a c t o r i a l s [ i ] </space/> = </space/> p o w e r M o d u l o ( f a c t [ i ] , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 
 l l </space/> n C r ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 i f </space/> ( n </space/> < </space/> r ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( n </space/> < = </space/> 0 </space/> | | </space/> r </space/> < = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 r e t u r n </space/> ( ( ( f a c t [ n ] </space/> * </space/> i n v e r s e F a c t o r i a l s [ r ] ) </space/> % </space/> m o d ) </space/> * </space/> i n v e r s e F a c t o r i a l s [ n </space/> - </space/> r ] ) </space/> % </space/> m o d ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> i , </space/> j , </space/> n , </space/> m , </space/> p o s , </space/> k , </space/> y , </space/> x , </space/> w e i g h , </space/> a n s , </space/> s u m , </space/> m a x i , </space/> m i n i ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 c o u t </space/> < < </space/> ( ( ( n C r ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 ) ) </space/> % </space/> m o d ) </space/> * </space/> p o w e r M o d u l o ( 2 , </space/> n </space/> - </space/> 3 ) ) </space/> % </space/> m o d </space/> < < </space/> e n d l ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 f r e o p e n ( "" d e b . t x t "" , </space/> "" w "" , </space/> s t d e r r ) ; 
 # e n d i f 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 
 p r e ( ) ; 
 l l </space/> t </space/> = </space/> 1 ; 
 i f </space/> ( t e s t _ c a s e s _ e x i s t ) 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 0 0 0 4 3 ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 i n t </space/> a d d ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 x </space/> + = </space/> y ; 
 w h i l e </space/> ( x </space/> > = </space/> M O D ) 
 x </space/> - = </space/> M O D ; 
 w h i l e </space/> ( x </space/> < </space/> 0 ) 
 x </space/> + = </space/> M O D ; 
 r e t u r n </space/> x ; 
 } 
 
 i n t </space/> m u l ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> ( x </space/> * </space/> 1 l l </space/> * </space/> y ) </space/> % </space/> M O D ; 
 } 
 
 i n t </space/> b i n p o w ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i n t </space/> z </space/> = </space/> 1 ; 
 w h i l e </space/> ( y ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 z </space/> = </space/> m u l ( z , </space/> x ) ; 
 x </space/> = </space/> m u l ( x , </space/> x ) ; 
 y </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> z ; 
 } 
 
 i n t </space/> i n v ( i n t </space/> x ) 
 { 
 r e t u r n </space/> b i n p o w ( x , </space/> M O D </space/> - </space/> 2 ) ; 
 } 
 
 i n t </space/> d i v i d e ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> m u l ( x , </space/> i n v ( y ) ) ; 
 } 
 
 i n t </space/> f a c t [ N ] ; 
 
 v o i d </space/> p r e c a l c ( ) 
 { 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 f a c t [ i ] </space/> = </space/> m u l ( f a c t [ i </space/> - </space/> 1 ] , </space/> i ) ; 
 } 
 
 i n t </space/> C ( i n t </space/> n , </space/> i n t </space/> k ) 
 { 
 r e t u r n </space/> d i v i d e ( f a c t [ n ] , </space/> m u l ( f a c t [ k ] , </space/> f a c t [ n </space/> - </space/> k ] ) ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 p r e c a l c ( ) ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i f </space/> ( n </space/> > </space/> 2 ) 
 a n s </space/> = </space/> m u l ( C ( m , </space/> n </space/> - </space/> 1 ) , </space/> m u l ( n </space/> - </space/> 2 , </space/> b i n p o w ( 2 , </space/> n </space/> - </space/> 3 ) ) ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i f d e f </space/> L O C A L 
 # i n c l u d e </space/> "" d b g . h "" 
 # e l s e 
 # d e f i n e </space/> d b g ( a r g s . . . ) 
 # e n d i f 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( x ) . s i z e ( ) 
 # d e f i n e </space/> f i l l ( x , </space/> v ) </space/> m e m s e t ( x , </space/> v , </space/> s i z e o f ( x ) ) 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v l ; 
 c o n s t </space/> l d </space/> e p s </space/> = </space/> ( l d ) 1 e - 9 ; 
 c o n s t </space/> l d </space/> P I </space/> = </space/> ( l d ) a c o s ( - 1 . 0 ) ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 1 e 9 </space/> + </space/> 5 ; 
 c o n s t </space/> l l </space/> l i n f </space/> = </space/> 1 e 1 8 L </space/> + </space/> 5 ; 
 c o n s t </space/> l l </space/> M </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 5 0 0 0 0 5 ; 
 
 l l </space/> e x p ( l l </space/> b , </space/> l l </space/> e ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( e ) 
 { 
 i f </space/> ( e </space/> & </space/> 1 ) 
 { 
 r e s </space/> = </space/> ( r e s </space/> * </space/> b ) </space/> % </space/> M ; 
 } 
 b </space/> = </space/> ( b </space/> * </space/> b ) </space/> % </space/> M ; 
 e </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 l l </space/> m o d i n v ( l l </space/> A ) 
 { 
 r e t u r n </space/> e x p ( A , </space/> M </space/> - </space/> 2 ) ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < l l > </space/> f ( N ) , </space/> i n v f ( N ) ; 
 f [ 0 ] </space/> = </space/> i n v f [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 { 
 f [ i ] </space/> = </space/> i </space/> * </space/> f [ i </space/> - </space/> 1 ] </space/> % </space/> M ; 
 i n v f [ i ] </space/> = </space/> m o d i n v ( f [ i ] ) ; 
 } 
 
 l l </space/> a n s </space/> = </space/> 0 , </space/> k </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 k </space/> = </space/> ( k </space/> + </space/> i n v f [ i </space/> - </space/> 2 ] </space/> * </space/> i n v f [ n </space/> - </space/> i </space/> - </space/> 1 ] </space/> % </space/> M ) </space/> % </space/> M ; 
 } 
 f o r </space/> ( i n t </space/> x </space/> = </space/> n </space/> - </space/> 1 ; </space/> x </space/> < = </space/> m ; </space/> + + x ) 
 { 
 a n s </space/> = </space/> ( a n s </space/> + </space/> f [ x </space/> - </space/> 1 ] </space/> * </space/> i n v f [ x </space/> - </space/> n </space/> + </space/> 1 ] </space/> % </space/> M </space/> * </space/> k </space/> % </space/> M ) </space/> % </space/> M ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( N U L L ) ; 
 
 i n t </space/> t e s t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t e s t ; 
 w h i l e </space/> ( t e s t - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> r e a d ( ) 
 { 
 i n t </space/> x </space/> = </space/> 0 , </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( c h </space/> < </space/> ' 0 ' </space/> | | </space/> c h </space/> > </space/> ' 9 ' ) 
 { 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 f </space/> = </space/> - 1 ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 w h i l e </space/> ( c h </space/> > = </space/> ' 0 ' </space/> & & </space/> c h </space/> < = </space/> ' 9 ' ) 
 { 
 x </space/> = </space/> ( x </space/> < < </space/> 3 ) </space/> + </space/> ( x </space/> < < </space/> 1 ) </space/> + </space/> c h </space/> - </space/> ' 0 ' ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 r e t u r n </space/> x </space/> * </space/> f ; 
 } 
 i n t </space/> n , </space/> m ; 
 l l </space/> a n s </space/> = </space/> 1 , </space/> t m p </space/> = </space/> 1 ; 
 l l </space/> q p ( l l </space/> x , </space/> l l </space/> p ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( p ) 
 { 
 i f </space/> ( p </space/> & </space/> 1 ) 
 r e s </space/> = </space/> 1 l l </space/> * </space/> r e s </space/> * </space/> x </space/> % </space/> m o d ; 
 x </space/> = </space/> 1 l l </space/> * </space/> x </space/> * </space/> x </space/> % </space/> m o d , </space/> p </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l l </space/> i n v ( l l </space/> x ) 
 { 
 r e t u r n </space/> q p ( x , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 n </space/> = </space/> r e a d ( ) , </space/> m </space/> = </space/> r e a d ( ) ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 p u t s ( "" 0 "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 a n s </space/> = </space/> 1 l l </space/> * </space/> a n s </space/> * </space/> i </space/> % </space/> m o d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 t m p </space/> = </space/> 1 l l </space/> * </space/> t m p </space/> * </space/> i </space/> % </space/> m o d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m </space/> - </space/> n </space/> + </space/> 1 ; </space/> i + + ) 
 t m p </space/> = </space/> 1 l l </space/> * </space/> t m p </space/> * </space/> i </space/> % </space/> m o d ; 
 a n s </space/> = </space/> 1 l l </space/> * </space/> a n s </space/> * </space/> i n v ( t m p ) </space/> % </space/> m o d </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d </space/> * </space/> q p ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> m o d ; 
 p r i n t f ( "" % l l d "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 , </space/> p </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> n , </space/> m ; 
 i n t </space/> j c [ N ] ; 
 i n t </space/> q p o w ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> p ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> p ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> C ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> j c [ a ] </space/> * </space/> q p o w ( j c [ a </space/> - </space/> b ] , </space/> p </space/> - </space/> 2 ) </space/> % </space/> p </space/> * </space/> q p o w ( j c [ b ] , </space/> p </space/> - </space/> 2 ) </space/> % </space/> p ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 ; 
 r e t u r n </space/> 0 ; 
 } 
 j c [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 { 
 j c [ i ] </space/> = </space/> j c [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> p ; 
 } 
 i n t </space/> r e s </space/> = </space/> q p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> * </space/> C ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> p </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> p ; 
 c o u t </space/> < < </space/> r e s ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 2 e 5 </space/> + </space/> 5 , </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> n , </space/> m ; 
 l l </space/> f r a c [ m a x n ] ; 
 l l </space/> q p o w ( l l </space/> b a s e , </space/> l l </space/> p ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( p ) 
 { 
 i f </space/> ( p </space/> & </space/> 1 ) 
 { 
 r e s </space/> * = </space/> b a s e ; 
 r e s </space/> % = </space/> m o d ; 
 } 
 b a s e </space/> = </space/> b a s e </space/> * </space/> b a s e </space/> % </space/> m o d ; 
 p </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l l </space/> C ( l l </space/> N , </space/> l l </space/> M ) 
 { 
 r e t u r n </space/> ( f r a c [ N ] </space/> * </space/> q p o w ( f r a c [ M ] , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ) </space/> * </space/> q p o w ( f r a c [ N </space/> - </space/> M ] , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & m ) ; 
 f r a c [ 0 ] </space/> = </space/> 1 ; 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 ; 
 r e t u r n </space/> 0 ; 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 f r a c [ i ] </space/> = </space/> f r a c [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> ( q p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> * </space/> C ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> m o d ) </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> F A S T </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( n u l l p t r ) ; </space/> \ 
 c o u t . t i e ( n u l l p t r ) ; 
 # d e f i n e </space/> s z ( a ) </space/> ( ( a ) . s i z e ( ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m e m ( a , </space/> v a l ) </space/> m e m s e t ( a , </space/> v a l , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> f o r n ( i , </space/> a , </space/> n ) </space/> f o r </space/> ( i </space/> = </space/> a ; </space/> i </space/> < </space/> ( n ) ; </space/> i + + ) 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> m a x n </space/> 9 9 8 2 4 4 3 5 3 
 c o n s t </space/> l o n g </space/> l o n g </space/> I N F 6 4 </space/> = </space/> ( l o n g </space/> l o n g ) ( 1 e 1 8 ) </space/> + </space/> 1 0 ; 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 
 l l </space/> m o d E ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 i f </space/> ( y </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 i f </space/> ( y </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 r e t u r n </space/> m o d E ( ( x </space/> * </space/> x ) </space/> % </space/> m a x n , </space/> y </space/> / </space/> 2 ) ; 
 r e t u r n </space/> ( x </space/> * </space/> m o d E ( x , </space/> y </space/> - </space/> 1 ) ) </space/> % </space/> m a x n ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 F A S T </space/> i n t </space/> q </space/> = </space/> 1 , </space/> i , </space/> j , </space/> t e s t , </space/> x , </space/> k ; 
 / / </space/> c i n > > q ; 
 f o r n ( t e s t , </space/> 1 , </space/> q </space/> + </space/> 1 ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 ; 
 l l </space/> f a c t [ 2 0 0 0 0 5 ] ; 
 l l </space/> i n v f [ 2 0 0 0 0 5 ] ; 
 f a c t [ 0 ] </space/> = </space/> 1 , </space/> i n v f [ 0 ] </space/> = </space/> 1 ; 
 f o r n ( i , </space/> 1 , </space/> 2 0 0 0 0 5 ) 
 { 
 f a c t [ i ] </space/> = </space/> ( f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> m a x n ; 
 i n v f [ i ] </space/> = </space/> m o d E ( f a c t [ i ] , </space/> m a x n </space/> - </space/> 2 ) </space/> % </space/> m a x n ; 
 } 
 f o r n ( i , </space/> n </space/> - </space/> 1 , </space/> m </space/> + </space/> 1 ) 
 { 
 a n s </space/> + = </space/> ( ( n </space/> - </space/> 2 ) </space/> * </space/> ( ( ( ( f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i n v f [ n </space/> - </space/> 2 ] ) </space/> % </space/> m a x n ) </space/> * </space/> i n v f [ i </space/> + </space/> 1 </space/> - </space/> n ] ) </space/> % </space/> m a x n ) ) 
 % </space/> m a x n ; 
 a n s </space/> % = </space/> m a x n ; 
 / / </space/> c o u t < < a n s < < "" </space/> "" ; 
 } 
 a n s </space/> * = </space/> m o d E ( 2 , </space/> n </space/> - </space/> 3 ) ; 
 a n s </space/> % = </space/> m a x n ; 
 c o u t </space/> < < </space/> a n s ; 
 } 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * </space/> * * * * Y a s h _ m i t t a l * * * * </space/> * / 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p p b </space/> p o p _ b a c k 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> p i i </space/> p a i r < l l </space/> i n t , </space/> l l </space/> i n t > 
 # d e f i n e </space/> v i </space/> v e c t o r < l l </space/> i n t > 
 # d e f i n e </space/> p q i </space/> p r i o r i t y _ q u e u e < l l > 
 # d e f i n e </space/> p q d </space/> p r i o r i t y _ q u e u e < l l , </space/> v i , </space/> g r e a t e r < l l > </space/> > 
 # d e f i n e </space/> a l l ( a ) </space/> ( a ) . b e g i n ( ) , </space/> ( a ) . e n d ( ) 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> s z ( x ) </space/> ( l l </space/> i n t ) </space/> x . s i z e ( ) 
 # d e f i n e </space/> h e l l </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> l b n d </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b n d </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> b s </space/> b i n a r y _ s e a r c h 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> N </space/> 1 0 0 0 0 5 
 / / </space/> b o o l </space/> p r i m e [ 1 0 0 0 0 0 0 1 ] ; 
 / / </space/> v i </space/> v ; 
 / / </space/> v o i d </space/> s i e v e ( ) 
 / / </space/> { 
 / / </space/> p r i m e [ 0 ] = t r u e ; 
 / / </space/> p r i m e [ 1 ] = t r u e ; 
 / / </space/> f o r ( l l </space/> i = 2 ; i < = 1 0 0 0 0 0 0 0 ; i + + ) 
 / / </space/> { 
 / / </space/> i f ( p r i m e [ i ] = = f a l s e ) 
 / / </space/> { 
 / / </space/> v . p b ( i ) ; 
 / / </space/> / / </space/> c n t [ i ] </space/> = </space/> c n t [ i - 1 ] + 1 ; 
 / / </space/> f o r ( l l </space/> j = i * i ; j < = 1 0 0 0 0 0 0 0 ; j + = i ) 
 / / </space/> p r i m e [ j ] = t r u e ; 
 / / </space/> } 
 / / </space/> } 
 / / </space/> } 
 l l </space/> g c d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 b o o l </space/> s o r t b y s e c ( c o n s t </space/> p a i r < i n t , </space/> i n t > & </space/> a , </space/> c o n s t </space/> p a i r < i n t , </space/> i n t > & </space/> b ) 
 { 
 r e t u r n </space/> ( a . s e c o n d </space/> < </space/> b . s e c o n d ) ; 
 } 
 l l </space/> f a c t [ 2 </space/> * </space/> N ] ; 
 l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> e x p o ( l l </space/> b a s e , </space/> l l </space/> e x p o n e n t , </space/> l l </space/> m o d ) 
 { </space/> / / </space/> r e t u r n </space/> b a s e ^ e x p o n e n t </space/> m o d u l o </space/> m o d u l u s 
 l l </space/> a n s </space/> = </space/> 1 ; 
 w h i l e </space/> ( e x p o n e n t </space/> ! = </space/> 0 ) 
 { 
 i f </space/> ( ( e x p o n e n t </space/> & </space/> 1 ) </space/> = = </space/> 1 ) 
 { 
 a n s </space/> = </space/> ( a n s </space/> % </space/> m o d ) </space/> * </space/> ( b a s e </space/> % </space/> m o d ) ; 
 a n s </space/> = </space/> a n s </space/> % </space/> m o d ; 
 } 
 b a s e </space/> = </space/> ( b a s e </space/> % </space/> m o d ) </space/> * </space/> ( b a s e </space/> % </space/> m o d ) ; 
 b a s e </space/> % = </space/> m o d ; 
 e x p o n e n t </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> a n s </space/> % </space/> m o d ; 
 } 
 l l </space/> n c r ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 l l </space/> a n s </space/> = </space/> f a c t [ n ] </space/> % </space/> m o d ; 
 a n s </space/> * = </space/> e x p o ( f a c t [ n </space/> - </space/> r ] , </space/> m o d </space/> - </space/> 2 , </space/> m o d ) ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> e x p o ( f a c t [ r ] , </space/> m o d </space/> - </space/> 2 , </space/> m o d ) ; 
 a n s </space/> % = </space/> m o d ; 
 r e t u r n </space/> a n s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 l l </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> "" 0 "" </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 2 </space/> * </space/> N ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i ; 
 f a c t [ i ] </space/> % = </space/> m o d ; 
 } 
 l l </space/> a n s </space/> = </space/> n c r ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> m o d ; 
 a n s </space/> * = </space/> ( n </space/> - </space/> 2 ) ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> e x p o ( 2 , </space/> n </space/> - </space/> 3 , </space/> m o d ) ; 
 a n s </space/> % = </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> m o d 1 </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> N </space/> 1 0 0 5 
 # d e f i n e </space/> h e l l </space/> 1 e 6 
 
 
 / * 
 _ _ </space/> _ _ 
 | </space/> \ </space/> | </space/> \ 
 _ | </space/> _ </space/> _ _ </space/> _ _ </space/> _ _ _ _ _ _ _ | </space/> _ _ _ _ </space/> _ _ _ _ _ _ </space/> _ _ _ _ _ _ 
 | </space/> </space/> \ </space/> | </space/> \ </space/> | </space/> \ / </space/> \ </space/> </space/> \ </space/> | </space/> \ </space/> / </space/> \ 
 \ </space/> | </space/> </space/> | </space/> </space/> </space/> \ </space/> \ \ </space/> \ 
 | </space/> </space/> _ _ | </space/> </space/> | </space/> \ </space/> \ | </space/> </space/> | </space/> / </space/> </space/> </space/> \ 
 | </space/> | </space/> \ </space/> _ _ / </space/> _ \ \ </space/> </space/> | </space/> </space/> </space/> 
 \ </space/> \ </space/> </space/> </space/> </space/> | </space/> \ </space/> </space/> 
 \ </space/> \ </space/> \ </space/> \ </space/> \ </space/> \ \ 
 
 
 * / 
 
 
 / / </space/> m i d </space/> = </space/> l o </space/> + </space/> ( h i - l o + 1 ) / 2 </space/> b i n </space/> s e a r c h ; 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y , </space/> l l </space/> p ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 
 x </space/> = </space/> x </space/> % </space/> p ; 
 w h i l e </space/> ( y </space/> > </space/> 0 ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> x ) </space/> % </space/> p ; 
 
 y </space/> = </space/> y </space/> > > </space/> 1 ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> p ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 
 l l </space/> m o d I n v e r s e ( l l </space/> n , </space/> l l </space/> p ) 
 { 
 r e t u r n </space/> p o w e r ( n , </space/> p </space/> - </space/> 2 , </space/> p ) ; 
 } 
 
 l l </space/> n C r M o d P F e r m a t ( l l </space/> n , </space/> l l </space/> r , </space/> l l </space/> p ) 
 { 
 i f </space/> ( r </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 l l </space/> f a c [ n </space/> + </space/> 1 ] ; 
 f a c [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 f a c [ i ] </space/> = </space/> f a c [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> p ; 
 
 r e t u r n </space/> ( f a c [ n ] </space/> * </space/> m o d I n v e r s e ( f a c [ r ] , </space/> p ) </space/> % </space/> p </space/> * </space/> m o d I n v e r s e ( f a c [ n </space/> - </space/> r ] , </space/> p ) </space/> % </space/> p ) </space/> % </space/> p ; 
 } 
 
 
 v o i d </space/> d y n a m i c ( ) 
 { 
 l l </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l l </space/> a n s </space/> = </space/> n C r M o d P F e r m a t ( m , </space/> n </space/> - </space/> 1 , </space/> m o d 1 ) ; 
 a n s </space/> % = </space/> m o d 1 ; 
 a n s </space/> * = </space/> ( n </space/> - </space/> 2 ) ; 
 a n s </space/> % = </space/> m o d 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> - </space/> 3 ; </space/> i + + ) 
 { 
 a n s </space/> * = </space/> 2 ; 
 a n s </space/> % = </space/> m o d 1 ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 
 d y n a m i c ( ) ; 
 } 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> D e N s E </space/> - </space/> E c L i P s E </space/> / / 
 / / </space/> W H A T </space/> i s </space/> D E A D </space/> m a y </space/> N E V E R </space/> d i e </space/> / / 
 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < u n o r d e r e d _ m a p > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < u n o r d e r e d _ s e t > 
 # i n c l u d e </space/> < c s t d l i b > 
 / / # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> n i t r o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> d o u b l e </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> c h a r T o I n t ( c ) </space/> ( c </space/> - </space/> ' A ' ) 
 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> ( 1 l l </space/> < < </space/> 6 2 ) </space/> - </space/> 1 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> M A X </space/> = </space/> 1 </space/> * </space/> 1 e 9 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 2 ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> b P o w ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 { 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> m o d ; 
 } 
 b </space/> > > = </space/> 1 ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> g c d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 s w a p ( a , </space/> b ) ; 
 } 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 
 v e c t o r < i n t > </space/> h p f ( N , </space/> 0 l l ) ; 
 v o i d </space/> s i e v e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 { 
 i f </space/> ( ! h p f [ i ] ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> i </space/> * </space/> j </space/> < </space/> N ; </space/> j + + ) 
 { 
 h p f [ i </space/> * </space/> j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 
 v e c t o r < i n t > </space/> f a c t ( N , </space/> 1 ) ; 
 
 v o i d </space/> p r e F a c t o r i a l ( ) 
 { 
 f a c t [ 0 ] </space/> = </space/> f a c t [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> N ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> ( f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> m o d ; 
 } 
 } 
 
 i n t </space/> n C r ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i f </space/> ( y </space/> > </space/> x ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( y </space/> = = </space/> x ) 
 r e t u r n </space/> 1 ; 
 i n t </space/> n u m e r a t o r </space/> = </space/> f a c t [ x ] ; 
 i n t </space/> d e n o m i n a t o r </space/> = </space/> ( f a c t [ y ] </space/> * </space/> f a c t [ x </space/> - </space/> y ] ) </space/> % </space/> m o d ; 
 i n t </space/> a n s </space/> = </space/> ( n u m e r a t o r </space/> * </space/> b P o w ( d e n o m i n a t o r , </space/> m o d </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 r e t u r n </space/> a n s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 p r e F a c t o r i a l ( ) ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 i n t </space/> a n s </space/> = </space/> ( n C r ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> b P o w ( 2 , </space/> n </space/> - </space/> 3 ) ) </space/> % </space/> m o d ; 
 a n s </space/> = </space/> ( a n s </space/> * </space/> ( n </space/> - </space/> 2 ) ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 n i t r o ; 
 i n t </space/> t c </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 c o n s t </space/> l l </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 ; 
 c o n s t </space/> l l </space/> m o d n </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 l l </space/> T , </space/> l e n , </space/> n u m , </space/> x ; 
 
 l l </space/> p o w e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 i f </space/> ( b </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 r e t u r n </space/> ( p o w e r ( a , </space/> b </space/> / </space/> 2 ) </space/> * </space/> p o w e r ( a , </space/> b </space/> / </space/> 2 ) ) </space/> % </space/> m o d n ; 
 r e t u r n </space/> ( p o w e r ( a , </space/> b </space/> / </space/> 2 ) </space/> * </space/> p o w e r ( a , </space/> b </space/> / </space/> 2 ) </space/> % </space/> m o d n </space/> * </space/> a ) </space/> % </space/> m o d n ; 
 } 
 l l </space/> c o u n t e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> o u t </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 o u t </space/> = </space/> ( o u t </space/> * </space/> i ) </space/> % </space/> m o d n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> a ; </space/> i + + ) 
 o u t </space/> = </space/> ( o u t </space/> * </space/> p o w e r ( i , </space/> m o d n </space/> - </space/> 2 ) ) </space/> % </space/> m o d n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> b </space/> - </space/> a ; </space/> i + + ) 
 o u t </space/> = </space/> ( o u t </space/> * </space/> p o w e r ( i , </space/> m o d n </space/> - </space/> 2 ) ) </space/> % </space/> m o d n ; 
 r e t u r n </space/> o u t ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n </space/> > > </space/> l e n </space/> > > </space/> n u m ; 
 x </space/> = </space/> ( ( l e n </space/> - </space/> 2 ) </space/> * </space/> p o w e r ( 2 , </space/> l e n </space/> - </space/> 3 ) ) </space/> % </space/> m o d n ; 
 x </space/> = </space/> ( x </space/> * </space/> c o u n t e r ( l e n </space/> - </space/> 1 , </space/> n u m ) ) </space/> % </space/> m o d n ; 
 c o u t </space/> < < </space/> x ; 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / * * * F I G H T </space/> T H E </space/> B E S T </space/> F O R </space/> T H E </space/> P U R P O S E </space/> F I G H T </space/> T H E </space/> B E S T </space/> B Y </space/> T H E </space/> L A W S * * * / / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 
 l l </space/> g c d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> a ; 
 } 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 / / </space/> * * T H E </space/> U L T I M A T E </space/> N U M B E R </space/> T H E O R Y </space/> P R O B L E M </space/> * * </space/> / / 
 
 c o n s t </space/> i n t </space/> M </space/> = </space/> ( i n t ) 1 e 5 </space/> + </space/> 1 ; 
 
 / / </space/> W I T H </space/> T H E </space/> H E L P </space/> O F </space/> e d i t o r i a l 
 
 l l </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 
 l l </space/> m u l ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 r e t u r n </space/> ( x </space/> * </space/> 1 l l </space/> * </space/> y ) </space/> % </space/> M O D ; 
 } 
 
 l l </space/> b i n p o w ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 / / </space/> b i n a r y </space/> e x p o n e n t i a t i o n 
 / / </space/> h t t p s : / / w w w . h a c k e r e a r t h . c o m / p r a c t i c e / m a t h / n u m b e r - t h e o r y / b a s i c - n u m b e r - t h e o r y - 1 / t u t o r i a l / 
 l l </space/> z </space/> = </space/> 1 ; 
 w h i l e </space/> ( y ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 z </space/> = </space/> m u l ( z , </space/> x ) ; 
 x </space/> = </space/> m u l ( x , </space/> x ) ; 
 y </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> z ; 
 } 
 
 l l </space/> i n v ( l l </space/> x ) 
 { </space/> / / </space/> F e r m a t ' s </space/> l i t t l e </space/> t h e o r e m 
 r e t u r n </space/> b i n p o w ( x , </space/> M O D </space/> - </space/> 2 ) ; 
 } 
 
 l l </space/> d i v i d e ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 r e t u r n </space/> m u l ( x , </space/> i n v ( y ) ) ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 
 l l </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 { 
 s t d : : c o u t </space/> < < </space/> 0 </space/> < < </space/> ' \ n ' ; 
 } 
 e l s e 
 { 
 l l </space/> n u m </space/> = </space/> 1 ; 
 l l </space/> d e n o m </space/> = </space/> 1 ; 
 l l </space/> a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 n u m </space/> = </space/> ( ( n u m </space/> % </space/> M O D ) </space/> * </space/> ( i </space/> % </space/> M O D ) ) </space/> % </space/> M O D ; 
 d e n o m </space/> = </space/> ( ( d e n o m </space/> % </space/> M O D ) </space/> * </space/> ( ( i </space/> - </space/> ( n </space/> - </space/> 1 ) ) </space/> % </space/> M O D ) ) </space/> % </space/> M O D ; 
 } 
 s t d : : c o u t </space/> < < </space/> ( ( d i v i d e ( n u m , </space/> d e n o m ) </space/> % </space/> M O D ) </space/> * </space/> ( ( b i n p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> M O D ) </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> M O D ) </space/> % </space/> M O D ) 
 % </space/> M O D 
 < < </space/> ' \ n ' ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
 / * 
 1 
 4 
 1 
 + - + + 
 4 </space/> 4 
 * / 
 / / </space/> c r e d i t </space/> b a l a n c e 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> a l l ( a ) </space/> a . b e g i n ( ) , </space/> a . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> a . r b e g i n ( ) , </space/> a . r e n d ( ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l l </space/> m o d </space/> = </space/> ( l l ) 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> f a c t [ 1 0 0 0 0 0 9 ] , </space/> i n v [ 1 0 0 0 0 0 9 ] ; 
 l l </space/> f p ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 l l </space/> a n s </space/> = </space/> f p ( a , </space/> b </space/> / </space/> 2 ) ; 
 a n s </space/> = </space/> ( a n s </space/> * </space/> a n s ) </space/> % </space/> m o d ; 
 i f </space/> ( b </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 a n s </space/> = </space/> ( a n s </space/> * </space/> ( a </space/> % </space/> m o d ) ) </space/> % </space/> m o d ; 
 r e t u r n </space/> a n s ; 
 } 
 v o i d </space/> F a c I n v ( l l </space/> n ) 
 { 
 f a c t [ 0 ] </space/> = </space/> i n v [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> ( ( i </space/> % </space/> m o d ) </space/> * </space/> f a c t [ i </space/> - </space/> 1 ] ) </space/> % </space/> m o d ; 
 i n v [ i ] </space/> = </space/> f p ( f a c t [ i ] , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 } 
 l l </space/> n c r ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 i f </space/> ( r </space/> > </space/> n ) 
 r e t u r n </space/> 0 ; 
 r e t u r n </space/> ( ( ( f a c t [ n ] </space/> * </space/> i n v [ r ] ) </space/> % </space/> m o d ) </space/> * </space/> i n v [ n </space/> - </space/> r ] ) </space/> % </space/> m o d ; 
 } 
 
 v o i d </space/> S o l v e ( ) 
 { 
 l l </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> "" \ n "" ; 
 r e t u r n ; 
 } 
 F a c I n v ( 1 0 0 0 0 0 0 ) ; 
 l l </space/> a n s </space/> = </space/> ( ( n c r ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 ) ) </space/> % </space/> m o d </space/> * </space/> f p ( 2 , </space/> n </space/> - </space/> 3 ) ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 c o u t . t i e ( n u l l p t r ) ; 
 l l </space/> t </space/> = </space/> 1 , </space/> t c </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 / / </space/> c o u t < < "" C a s e </space/> # "" < < t c + + < < "" : </space/> "" ; 
 S o l v e ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> i n v [ 2 0 0 0 0 1 ] , </space/> f a c t [ 2 0 0 0 0 1 ] ; 
 l l </space/> b i n e x p o ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> 1 l l ; 
 } 
 i f </space/> ( b </space/> = = </space/> 1 ) 
 { 
 r e t u r n </space/> a ; 
 } 
 l l </space/> t e m p </space/> = </space/> b i n e x p o ( a , </space/> b </space/> / </space/> 2 ) ; 
 i f </space/> ( b </space/> % </space/> 2 ) 
 { 
 r e t u r n </space/> ( ( ( t e m p </space/> * </space/> t e m p ) </space/> % </space/> m o d ) </space/> * </space/> a ) </space/> % </space/> m o d ; 
 } 
 e l s e 
 { 
 r e t u r n </space/> ( t e m p </space/> * </space/> t e m p ) </space/> % </space/> m o d ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n , </space/> m ; 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & m ) ; 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> i </space/> * </space/> f a c t [ i </space/> - </space/> 1 ] ; 
 f a c t [ i ] </space/> % = </space/> m o d ; 
 } 
 i n v [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 i n v [ i ] </space/> = </space/> b i n e x p o ( f a c t [ i ] , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 ; 
 } 
 e l s e 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 a n s </space/> * = </space/> f a c t [ m ] ; 
 a n s </space/> * = </space/> i n v [ m </space/> - </space/> n </space/> + </space/> 1 ] ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> i n v [ n </space/> - </space/> 1 ] ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> ( n </space/> - </space/> 2 ) ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> b i n e x p o ( 2 l l , </space/> n </space/> - </space/> 3 ) ; 
 a n s </space/> % = </space/> m o d ; 
 c o u t </space/> < < </space/> a n s ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> m a x n </space/> 2 0 0 0 0 5 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 l l </space/> i n v [ m a x n ] , </space/> s [ m a x n ] ; 
 l l </space/> k u ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 v o i d </space/> i n i t ( ) 
 { 
 s [ 0 ] </space/> = </space/> i n v [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m a x n ; </space/> i + + ) 
 { 
 s [ i ] </space/> = </space/> s [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> m o d ; 
 } 
 i n v [ m a x n ] </space/> = </space/> k u ( s [ m a x n ] , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> m a x n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 1 ; </space/> i - - ) 
 i n v [ i ] </space/> = </space/> ( i </space/> + </space/> 1 ) </space/> * </space/> i n v [ i </space/> + </space/> 1 ] </space/> % </space/> m o d ; 
 } 
 l l </space/> C ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 r e t u r n </space/> s [ a ] </space/> % </space/> m o d </space/> * </space/> i n v [ b ] </space/> % </space/> m o d </space/> * </space/> i n v [ a </space/> - </space/> b ] </space/> % </space/> m o d ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> n , </space/> m ; 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & m ) ; 
 i n i t ( ) ; 
 l l </space/> t e m p </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> - </space/> 3 ; </space/> i + + ) 
 { 
 t e m p </space/> = </space/> t e m p </space/> * </space/> 2 </space/> % </space/> m o d ; 
 } 
 p r i n t f ( "" % l l d "" , </space/> ( n </space/> - </space/> 2 ) </space/> * </space/> C ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> m o d </space/> * </space/> t e m p </space/> % </space/> m o d ) ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 i n t </space/> f a c t [ N ] ; 
 
 i n t </space/> p o w e r ( i n t </space/> a , </space/> i n t </space/> b , </space/> i n t </space/> m ) 
 { 
 i n t </space/> a n s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( ( b </space/> & </space/> 1 ) ) 
 { 
 a n s </space/> = </space/> ( a n s </space/> * </space/> a ) </space/> % </space/> m ; 
 } 
 b </space/> > > = </space/> 1 ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> m ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 i n t </space/> m o d I n v e r s e ( i n t </space/> n , </space/> i n t </space/> m ) 
 { 
 r e t u r n </space/> p o w e r ( n , </space/> m </space/> - </space/> 2 , </space/> m ) ; 
 } 
 
 i n t </space/> n c r ( i n t </space/> n , </space/> i n t </space/> r ) 
 { 
 r e t u r n </space/> ( ( f a c t [ n ] </space/> * </space/> m o d I n v e r s e ( f a c t [ r ] , </space/> m o d ) ) </space/> % </space/> m o d </space/> * </space/> ( m o d I n v e r s e ( f a c t [ n </space/> - </space/> r ] , </space/> m o d ) </space/> % </space/> m o d ) ) 
 % </space/> m o d ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> n , </space/> m ; 
 s c a n f ( "" % l l d </space/> % l l d "" , </space/> & n , </space/> & m ) ; 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f a c t [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> ( f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i f </space/> ( n </space/> > </space/> 2 ) 
 { 
 a n s </space/> = </space/> ( ( n c r ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 ) ) </space/> % </space/> m o d </space/> * </space/> p o w e r ( 2 , </space/> n </space/> - </space/> 3 , </space/> m o d ) ) </space/> % </space/> m o d ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 l o n g </space/> l o n g </space/> q p o w ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b ) 
 { 
 l o n g </space/> l o n g </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> i , </space/> n , </space/> m , </space/> a n s </space/> = </space/> 1 , </space/> r e s </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 p u t c h a r ( ' 0 ' ) ; 
 r e t u r n </space/> 0 ; 
 } 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 a n s </space/> = </space/> a n s </space/> * </space/> i </space/> % </space/> m o d ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 r e s </space/> = </space/> r e s </space/> * </space/> i </space/> % </space/> m o d ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m </space/> - </space/> n </space/> + </space/> 1 ; </space/> i + + ) 
 r e s </space/> = </space/> r e s </space/> * </space/> i </space/> % </space/> m o d ; 
 a n s </space/> = </space/> ( a n s </space/> * </space/> q p o w ( r e s , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d ) </space/> * </space/> q p o w ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 0 0 0 0 1 , </space/> P </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> n , </space/> m ; 
 l l </space/> p o w e r ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( y ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> x </space/> % </space/> P ; 
 x </space/> = </space/> x </space/> * </space/> x </space/> % </space/> P ; 
 y </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 p u t s ( "" 0 "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
 l l </space/> C </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> m ; </space/> i </space/> > = </space/> m </space/> - </space/> ( n </space/> - </space/> 1 ) </space/> + </space/> 1 ; </space/> i - - ) 
 C </space/> = </space/> C </space/> * </space/> i </space/> % </space/> P ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 C </space/> = </space/> C </space/> * </space/> p o w e r ( i , </space/> P </space/> - </space/> 2 ) </space/> % </space/> P ; 
 p r i n t f ( "" % l l d \ n "" , </space/> C </space/> * </space/> p o w e r ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> P </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> P ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> I N F </space/> 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> M O D </space/> 9 9 8 2 4 4 3 5 3 
 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> p o ( l l </space/> x , </space/> l l </space/> n ) 
 { 
 l l </space/> a n s </space/> = </space/> 1 ; 
 w h i l e </space/> ( n </space/> > </space/> 0 ) 
 { 
 i f </space/> ( n </space/> & </space/> 1 ) 
 a n s </space/> = </space/> ( a n s </space/> * </space/> x ) </space/> % </space/> M O D ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> M O D ; 
 n </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 v e c t o r < l l > </space/> f ( 1 e 6 </space/> + </space/> 1 0 , </space/> 0 ) ; 
 
 v o i d </space/> f u n c ( ) 
 { 
 
 l l </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l l </space/> m a </space/> = </space/> m a x ( n , </space/> m ) ; 
 l l </space/> a n s </space/> = </space/> 0 ; 
 
 v e c t o r < l l > </space/> f a c ( m a </space/> + </space/> 1 , </space/> 1 ) ; 
 v e c t o r < l l > </space/> i f a c ( m a </space/> + </space/> 1 , </space/> 1 ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m a ; </space/> i + + ) 
 { 
 f a c [ i ] </space/> = </space/> ( f a c [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> M O D ; 
 i f a c [ i ] </space/> = </space/> p o ( f a c [ i ] , </space/> M O D </space/> - </space/> 2 ) ; 
 } 
 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 
 l l </space/> t e m p </space/> = </space/> ( ( ( f a c [ m ] </space/> * </space/> i f a c [ n </space/> - </space/> 1 ] ) </space/> % </space/> M O D ) </space/> * </space/> ( ( i f a c [ m </space/> - </space/> n </space/> + </space/> 1 ] </space/> * </space/> ( n </space/> - </space/> 2 ) ) </space/> % </space/> M O D ) ) </space/> % </space/> M O D ; 
 
 a n s </space/> = </space/> t e m p </space/> * </space/> p o ( 2 , </space/> n </space/> - </space/> 3 ) ; 
 a n s </space/> = </space/> a n s </space/> % </space/> M O D ; 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 l l </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 f u n c ( ) ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 l l i </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 l l i </space/> p o w ( l l i </space/> x , </space/> l l i </space/> y ) 
 { 
 i f </space/> ( y </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 L L ; 
 l l i </space/> r </space/> = </space/> p o w ( x , </space/> y </space/> / </space/> 2 ) ; 
 r </space/> = </space/> r </space/> * </space/> r ; 
 r </space/> % = </space/> m o d ; 
 i f </space/> ( y </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 r </space/> * = </space/> x ; 
 r </space/> % = </space/> m o d ; 
 r e t u r n </space/> r ; 
 } 
 l l i </space/> C ( l l i </space/> x , </space/> l l i </space/> y ) 
 { 
 l l i </space/> p e r 1 </space/> = </space/> 1 L L , </space/> p e r 2 </space/> = </space/> 1 L L ; 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> x ; </space/> i + + ) 
 { 
 p e r 1 </space/> * = </space/> i ; 
 p e r 1 </space/> % = </space/> m o d ; 
 } 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> y ; </space/> i + + ) 
 { 
 p e r 2 </space/> * = </space/> i ; 
 p e r 2 </space/> % = </space/> m o d ; 
 } 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> x </space/> - </space/> y ; </space/> i + + ) 
 { 
 p e r 2 </space/> * = </space/> i ; 
 p e r 2 </space/> % = </space/> m o d ; 
 } 
 p e r 1 </space/> * = </space/> p o w ( p e r 2 , </space/> m o d </space/> - </space/> 2 ) ; 
 p e r 1 </space/> % = </space/> m o d ; 
 r e t u r n </space/> p e r 1 ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l i </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> > </space/> 2 ) 
 { 
 l l i </space/> a n s </space/> = </space/> 1 ; 
 a n s </space/> * = </space/> ( n </space/> - </space/> 2 ) ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> p o w ( 2 L L , </space/> n </space/> - </space/> 3 ) ; 
 a n s </space/> % = </space/> m o d ; 
 a n s </space/> * = </space/> C ( m , </space/> n </space/> - </space/> 1 ) ; 
 a n s </space/> % = </space/> m o d ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 
 * / 
 # p r a g m a </space/> c o m m e n t ( l i n k e r , </space/> "" / S T A C K : 1 6 7 7 7 2 1 6 "" ) 
 # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> a l l ( v ) </space/> ( v ) . b e g i n ( ) , </space/> ( v ) . e n d ( ) 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 2 0 0 0 0 5 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 s t r u c t </space/> C o m b i n a t o r i c s 
 { 
 l l </space/> f a c t [ m a x n ] , </space/> i n v [ m a x n ] ; 
 
 l l </space/> B i g M o d ( l l </space/> b , </space/> l l </space/> p , </space/> l l </space/> m ) 
 { 
 l l </space/> r e t </space/> = </space/> 1 ; 
 w h i l e </space/> ( p </space/> > </space/> 0 ) 
 { 
 i f </space/> ( p </space/> & </space/> 1 ) 
 r e t </space/> = </space/> ( r e t </space/> * </space/> b ) </space/> % </space/> m ; 
 p </space/> = </space/> p </space/> > > </space/> 1 ; 
 b </space/> = </space/> ( b </space/> * </space/> b ) </space/> % </space/> m ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 
 v o i d </space/> B u i l d ( l l </space/> n ) 
 { 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n </space/> + </space/> 2 ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> ( f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> m o d ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> n </space/> + </space/> 2 ; </space/> i + + ) 
 { 
 i n v [ i ] </space/> = </space/> B i g M o d ( f a c t [ i ] , </space/> m o d </space/> - </space/> 2 , </space/> m o d ) ; 
 } 
 } 
 
 l l </space/> C h o o s e ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 i f </space/> ( n </space/> < </space/> r ) 
 r e t u r n </space/> 0 ; 
 l l </space/> u </space/> = </space/> f a c t [ n ] ; 
 l l </space/> v </space/> = </space/> ( i n v [ r ] </space/> * </space/> i n v [ n </space/> - </space/> r ] ) </space/> % </space/> m o d ; 
 r e t u r n </space/> ( u </space/> * </space/> v ) </space/> % </space/> m o d ; 
 } 
 
 l l </space/> F a c t o r i a l ( l l </space/> n ) 
 { 
 r e t u r n </space/> f a c t [ n ] ; 
 } 
 
 } </space/> c o m b i ; 
 v o i d </space/> t a s k ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 c o m b i . B u i l d ( m ) ; 
 
 l l </space/> V a l i d S e t </space/> = </space/> c o m b i . C h o o s e ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 ) ; 
 V a l i d S e t </space/> % = </space/> m o d ; 
 
 l l </space/> w a y s </space/> = </space/> c o m b i . B i g M o d ( 2 , </space/> n </space/> - </space/> 3 , </space/> m o d ) ; 
 
 c o u t </space/> < < </space/> ( V a l i d S e t </space/> * </space/> w a y s ) </space/> % </space/> m o d </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 # i f d e f </space/> O J 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i n t </space/> T </space/> = </space/> 1 ; </space/> / / </space/> c i n </space/> > > </space/> T ; 
 f o r </space/> ( i n t </space/> _ _ </space/> = </space/> 1 ; </space/> _ _ </space/> < = </space/> T ; </space/> _ _ + + ) 
 { 
 / / </space/> c o u t </space/> < < "" C a s e </space/> "" < < _ _ < < "" : </space/> "" ; 
 t a s k ( ) ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 / / </space/> # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> d e b u g ( x ) </space/> c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> D E \ n "" ; 
 # d e f i n e </space/> d e b u g 2 ( x , </space/> y ) </space/> c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> "" </space/> D E \ n "" ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> a l l ( v ) </space/> ( v ) . b e g i n ( ) , </space/> ( v ) . e n d ( ) 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 d o u b l e </space/> P I </space/> = </space/> a c o s ( - 1 . 0 ) ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i ; 
 / / </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 i n t </space/> G C D ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> G C D ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 
 / / </space/> R e t u r n s </space/> ( a </space/> * </space/> b ) </space/> % </space/> m o d 
 i n t </space/> p r o d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 
 a </space/> % = </space/> m o d ; 
 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 l l ) 
 r e s </space/> = </space/> ( r e s </space/> + </space/> a ) </space/> % </space/> m o d ; 
 
 a </space/> = </space/> ( 2 l l </space/> * </space/> a ) </space/> % </space/> m o d ; 
 
 b </space/> > > = </space/> 1 l l ; </space/> / / </space/> b </space/> = </space/> b </space/> / </space/> 2 
 } 
 
 r e t u r n </space/> r e s ; 
 } 
 
 / / </space/> b o o l </space/> i s p r i m e ( i n t </space/> x ) { 
 / / </space/> f o r ( i n t </space/> i </space/> = </space/> 2 ; </space/> i * i </space/> < = </space/> x ; </space/> i + + ) { 
 / / </space/> i f ( x % i </space/> = = </space/> 0 ) </space/> r e t u r n </space/> f a l s e ; 
 / / </space/> } 
 / / </space/> r e t u r n </space/> t r u e ; 
 / / </space/> } 
 / / 
 i n t </space/> p o w e r ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> % </space/> 2 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> m o d ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> m o d ; 
 b </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 l l </space/> b i n a r y E x p o n e n t i a t i o n ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s u l t </space/> = </space/> 1 l l ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> % </space/> 2 </space/> = = </space/> 1 ) 
 r e s u l t </space/> = </space/> ( r e s u l t </space/> * </space/> a ) </space/> % </space/> m o d ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> m o d ; 
 b </space/> / = </space/> 2 l l ; 
 } 
 r e t u r n </space/> r e s u l t ; 
 } 
 
 l l </space/> M o d u l a r I n v e r s e ( l o n g </space/> l o n g </space/> a ) 
 { 
 r e t u r n </space/> b i n a r y E x p o n e n t i a t i o n ( a , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 / / 
 / / 
 / / 
 / / </space/> / / </space/> R e t u r n s </space/> f a c t o r i a l </space/> o f </space/> n 
 l l </space/> f a c t ( l l </space/> n ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 r e s </space/> = </space/> ( r e s </space/> * </space/> i ) </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 / / 
 l l </space/> n C r ( l l </space/> n , </space/> l l </space/> r ) 
 { 
 r e t u r n </space/> ( f a c t ( n ) </space/> * </space/> M o d u l a r I n v e r s e ( ( f a c t ( r ) </space/> * </space/> f a c t ( n </space/> - </space/> r ) ) </space/> % </space/> m o d ) ) </space/> % </space/> m o d ; 
 } 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 4 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i n t </space/> x </space/> = </space/> n C r ( m , </space/> n </space/> - </space/> 1 ) ; 
 i n t </space/> y </space/> = </space/> p r o d ( ( n </space/> - </space/> 2 ) , </space/> p o w e r ( 2 , </space/> n </space/> - </space/> 3 ) ) ; 
 a n s </space/> = </space/> p r o d ( x , </space/> y ) ; 
 / / </space/> f o r ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> n ; </space/> i + + ) { 
 / / </space/> a n s </space/> = </space/> ( a n s </space/> + </space/> p r o d ( x , </space/> p r o d ( n C r ( n - 2 , i - 1 ) , ( i - 1 ) ) </space/> + </space/> p r o d ( n C r ( n - 2 , </space/> i - 2 ) , </space/> ( n - i ) ) ) / 2 l l ) </space/> % </space/> m o d ; 
 / / </space/> } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O 3 "" ) 
 / / # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O f a s t "" ) 
 / / # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" u n r o l l - l o o p s "" ) 
 / / # p r a g m a </space/> G C C </space/> t a r g e t ( "" a v x , a v x 2 "" ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 / / # i n c l u d e < c h r o n o > 
 / / # i n c l u d e < r a n d o m > 
 c o n s t e x p r </space/> a u t o </space/> I N F </space/> = </space/> 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t </space/> u l l ; 
 
 # d e f i n e </space/> f ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> ( l l ) a ; </space/> i </space/> < </space/> ( l l ) b ; </space/> i </space/> + = </space/> 1 ) 
 # d e f i n e </space/> r f ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> ( l l ) a ; </space/> i </space/> > = </space/> ( l l ) b ; </space/> i </space/> - = </space/> 1 ) 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> M a x N </space/> 1 0 0 0 0 5 
 # d e f i n e </space/> N </space/> ( l l ) 9 9 8 2 4 4 3 5 3 </space/> / / </space/> p r i m e </space/> m o d u l o </space/> v a l u e 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> w a t c h ( x ) </space/> c o u t </space/> < < </space/> ( # x ) </space/> < < </space/> "" </space/> i s </space/> "" </space/> < < </space/> ( x ) </space/> < < </space/> e n d l 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 a u t o </space/> s e e d </space/> = </space/> c h r o n o : : h i g h _ r e s o l u t i o n _ c l o c k : : n o w ( ) . t i m e _ s i n c e _ e p o c h ( ) . c o u n t ( ) ; 
 m t 1 9 9 3 7 </space/> m t ( s e e d ) ; 
 
 i n t </space/> m y r a n d ( i n t </space/> m o d ) 
 { 
 r e t u r n </space/> m t ( ) </space/> % </space/> m o d ; 
 } 
 
 i n l i n e </space/> l l </space/> g c d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 / / </space/> T h i s </space/> i s </space/> c o d e </space/> t a k e n </space/> f r o m </space/> g e e k s f o r g e e k 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 
 l l </space/> m o d _ p o w e r ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 / / </space/> T h i s </space/> i s </space/> c o d e </space/> t a k e n </space/> f r o m </space/> g e e k s f o r g e e k 
 l l </space/> r e s </space/> = </space/> 1 ; 
 
 x </space/> = </space/> x </space/> % </space/> N ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 r e t u r n </space/> 0 ; 
 w h i l e </space/> ( y </space/> > </space/> 0 ) 
 { 
 i f </space/> ( y </space/> & </space/> 1 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> x ) </space/> % </space/> N ; 
 y </space/> = </space/> y </space/> > > </space/> 1 ; 
 x </space/> = </space/> ( x </space/> * </space/> x ) </space/> % </space/> N ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l o n g </space/> l o n g </space/> m o d I n v e r s e ( l o n g </space/> l o n g </space/> n ) 
 { 
 r e t u r n </space/> m o d _ p o w e r ( n , </space/> N </space/> - </space/> 2 ) ; 
 } 
 
 / / </space/> R e t u r n s </space/> n C r </space/> % </space/> p </space/> u s i n g </space/> F e r m a t ' s </space/> l i t t l e 
 / / </space/> t h e o r e m . 
 l o n g </space/> l o n g </space/> n C r M o d P F e r m a t ( l o n g </space/> l o n g </space/> n , </space/> l l </space/> r ) 
 { 
 / / </space/> T h i s </space/> i s </space/> c o d e </space/> t a k e n </space/> f r o m </space/> g e e k s f o r g e e k 
 i f </space/> ( r </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 v e c t o r < l l > </space/> f a c ( n </space/> + </space/> 1 , </space/> 0 ) ; 
 f a c [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 f a c [ i ] </space/> = </space/> ( f a c [ i </space/> - </space/> 1 ] </space/> * </space/> i ) </space/> % </space/> N ; 
 
 r e t u r n </space/> ( f a c [ n ] </space/> * </space/> m o d I n v e r s e ( f a c [ r ] ) </space/> % </space/> N </space/> * </space/> m o d I n v e r s e ( f a c [ n </space/> - </space/> r ] ) </space/> % </space/> N ) </space/> % </space/> N ; 
 } 
 
 
 b o o l </space/> i s p r i m e ( l l </space/> n ) 
 { 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 r e t u r n </space/> t r u e ; 
 i f </space/> ( n </space/> % </space/> 2 </space/> = = </space/> 0 </space/> | | </space/> n </space/> = = </space/> 1 ) 
 { 
 r e t u r n </space/> f a l s e ; 
 } 
 f o r </space/> ( l l </space/> j </space/> = </space/> 3 ; </space/> j </space/> < = </space/> s q r t ( n ) ; </space/> j </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( n </space/> % </space/> j </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 / / </space/> f r e o p e n ( "" i n p u t D . t x t "" , "" r "" , s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , "" w "" , s t d o u t ) ; 
 / / </space/> _ _ i n t 1 2 8 
 l l </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l l </space/> a n s </space/> = </space/> n C r M o d P F e r m a t ( m , </space/> n </space/> - </space/> 1 ) ; 
 a n s </space/> * = </space/> n </space/> - </space/> 2 ; 
 a n s </space/> % = </space/> N ; 
 a n s </space/> * = </space/> m o d _ p o w e r ( 2 , </space/> n </space/> - </space/> 3 ) ; 
 a n s </space/> % = </space/> N ; 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 0 0 0 0 5 ; 
 i n t </space/> n , </space/> m ; 
 l l </space/> f a c [ N ] , </space/> i n v [ N ] , </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 l l </space/> p o w e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 , </space/> t m p </space/> = </space/> a ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> t m p </space/> % </space/> m o d ; 
 t m p </space/> = </space/> t m p </space/> * </space/> t m p </space/> % </space/> m o d ; 
 b </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l l </space/> C ( i n t </space/> n , </space/> i n t </space/> m ) 
 { 
 r e t u r n </space/> f a c [ n ] </space/> * </space/> i n v [ m ] </space/> % </space/> m o d </space/> * </space/> i n v [ n </space/> - </space/> m ] </space/> % </space/> m o d ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 f a c [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 f a c [ i ] </space/> = </space/> f a c [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> m o d ; 
 i n v [ i ] </space/> = </space/> p o w e r ( f a c [ i ] , </space/> m o d </space/> - </space/> 2 ) ; 
 } 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 { 
 p u t s ( "" 0 "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
 p r i n t f ( "" % l l d "" , </space/> ( p o w e r ( 2 , </space/> n </space/> - </space/> 3 ) </space/> * </space/> C ( m , </space/> n </space/> - </space/> 1 ) </space/> % </space/> m o d </space/> * </space/> ( n </space/> - </space/> 2 ) </space/> % </space/> m o d </space/> + </space/> m o d ) </space/> % </space/> m o d ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 * </space/> y a s w a n t h </space/> p h a n i </space/> k o m m i n e n i 
 * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 / / # d e f i n e </space/> e n d l </space/> ' \ n ' ; 
 
 c o n s t </space/> l l </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 , </space/> M </space/> = </space/> 2 e 5 </space/> + </space/> 1 ; 
 
 v e c t o r < l l > </space/> f a c t ( M ) ; 
 
 v o i d </space/> c a l c _ f a c t ( ) 
 { 
 f a c t [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> M ; </space/> i + + ) 
 { 
 f a c t [ i ] </space/> = </space/> f a c t [ i </space/> - </space/> 1 ] </space/> * </space/> i ; 
 f a c t [ i ] </space/> % = </space/> m o d ; 
 } 
 } 
 
 l l </space/> m o d p o w ( l l </space/> n , </space/> l l </space/> x ) 
 { 
 i f </space/> ( n </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> 1 </space/> % </space/> m o d ; 
 } 
 l l </space/> u </space/> = </space/> m o d p o w ( n </space/> / </space/> 2 , </space/> x ) ; 
 u </space/> * = </space/> u ; 
 u </space/> % = </space/> m o d ; 
 i f </space/> ( n </space/> & </space/> 1 ) 
 u </space/> = </space/> ( u </space/> * </space/> x ) </space/> % </space/> m o d ; 
 r e t u r n </space/> u ; 
 } 
 
 l l </space/> i n v e r s e ( l l </space/> x ) 
 { 
 r e t u r n </space/> m o d p o w ( m o d </space/> - </space/> 2 , </space/> x ) ; 
 } 
 
 l l </space/> B C ( l l </space/> n , </space/> l l </space/> k ) 
 { 
 i f </space/> ( n </space/> < </space/> k ) 
 r e t u r n </space/> 0 ; 
 r e t u r n </space/> ( ( f a c t [ n ] </space/> * </space/> i n v e r s e ( f a c t [ n </space/> - </space/> k ] ) ) </space/> % </space/> m o d </space/> * </space/> i n v e r s e ( f a c t [ k ] ) </space/> % </space/> m o d ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> ( ( ( B C ( m </space/> - </space/> 1 , </space/> n </space/> - </space/> 2 ) </space/> - </space/> B C ( i </space/> - </space/> 1 , </space/> n </space/> - </space/> 2 ) </space/> + </space/> m o d ) </space/> % </space/> m o d ) </space/> * </space/> m o d p o w ( n </space/> - </space/> 3 , </space/> 2 ) ) </space/> % </space/> m o d ; 
 a n s </space/> % = </space/> m o d ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" i n p u t . t x t "" , "" r "" , s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , "" w "" , s t d o u t ) ; 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t c ; 
 t c </space/> = </space/> 1 ; 
 c a l c _ f a c t ( ) ; 
 / / </space/> c i n </space/> > > </space/> t c ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t c ; </space/> i + + ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> I C </space/> "" % l l d "" 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 
 i n t </space/> n , </space/> m , </space/> t ; 
 
 i n t </space/> p o w _ ( i n t </space/> x , </space/> i n t </space/> p ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 f o r </space/> ( ; </space/> p ; </space/> p </space/> > > = </space/> 1 ) 
 { 
 i f </space/> ( p </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> x </space/> % </space/> M O D ; 
 x </space/> = </space/> x </space/> * </space/> x </space/> % </space/> M O D ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> g e t C ( i n t </space/> a l l , </space/> i n t </space/> s e l ) 
 { 
 i n t </space/> u </space/> = </space/> 1 , </space/> d </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> a l l ; </space/> i </space/> > </space/> a l l </space/> - </space/> s e l ; </space/> i - - ) 
 u </space/> = </space/> u </space/> * </space/> i </space/> % </space/> M O D ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> s e l ; </space/> i + + ) 
 d </space/> = </space/> d </space/> * </space/> i </space/> % </space/> M O D ; 
 r e t u r n </space/> u </space/> * </space/> p o w _ ( d , </space/> M O D </space/> - </space/> 2 ) </space/> % </space/> M O D ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 s c a n f ( I C </space/> I C , </space/> & n , </space/> & m ) ; 
 i f </space/> ( n </space/> < </space/> 3 ) 
 { 
 p u t s ( "" 0 "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
 p r i n t f ( I C , </space/> g e t C ( m , </space/> n </space/> - </space/> 1 ) </space/> * </space/> ( n </space/> - </space/> 2 l l ) </space/> % </space/> M O D </space/> * </space/> p o w _ ( 2 , </space/> n </space/> - </space/> 3 ) </space/> % </space/> M O D ) ; 
 }",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < s t r i n g . h > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < c m a t h > 
 # d e f i n e </space/> d e b u g </space/> p r i n t f ( "" H e l l o </space/> W o r l d \ n "" ) 
 # d e f i n e </space/> i o s </space/> i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 i n t </space/> a r r [ 3 0 0 0 0 5 ] </space/> = </space/> { </space/> 0 </space/> } , </space/> n , </space/> m ; 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 i n t </space/> t m p </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a r r [ i ] </space/> + </space/> x </space/> < </space/> t m p ) 
 r e t u r n </space/> f a l s e ; 
 i f </space/> ( a r r [ i ] </space/> > </space/> t m p </space/> & & </space/> m </space/> + </space/> t m p </space/> > </space/> a r r [ i ] </space/> + </space/> x ) 
 t m p </space/> = </space/> a r r [ i ] ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a r r [ i ] ; 
 i n t </space/> l e f t </space/> = </space/> 0 , </space/> r i g h t </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( l e f t </space/> < = </space/> r i g h t ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l e f t </space/> + </space/> r i g h t ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r i g h t </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l e f t </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> r i g h t </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> F A S T </space/> \ 
 s t d : : i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> h e l l </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> r e p ( i , </space/> s , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> s ; </space/> i </space/> < </space/> ( n ) ; </space/> + + i ) 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> s z ( a ) </space/> a . s i z e ( ) 
 # d e f i n e </space/> p i i </space/> s t d : : p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> s t d : : p a i r < l l , </space/> l l > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l </space/> v e c t o r < l l > 
 # d e f i n e </space/> v v i </space/> v e c t o r < v i > 
 # d e f i n e </space/> v i i </space/> v e c t o r < p i i > 
 # d e f i n e </space/> v l l </space/> v e c t o r < p l l > 
 # d e f i n e </space/> I N F </space/> I N T _ M A X 
 # d e f i n e </space/> i n f </space/> 9 e 1 8 
 # d e f i n e </space/> N </space/> i n t ( 3 e 5 </space/> + </space/> 5 ) 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> n , </space/> m , </space/> a [ N ] ; 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 i n t </space/> l </space/> = </space/> 0 ; 
 r e p ( i , </space/> 0 , </space/> n ) 
 { 
 i f </space/> ( a [ i ] </space/> < = </space/> l </space/> & & </space/> a [ i ] </space/> + </space/> x </space/> > = </space/> l </space/> | | </space/> a [ i ] </space/> + </space/> x </space/> - </space/> m </space/> > = </space/> l ) 
 { 
 c o n t i n u e ; 
 } 
 i f </space/> ( a [ i ] </space/> < </space/> l ) 
 r e t u r n </space/> 0 ; 
 l </space/> = </space/> a [ i ] ; 
 } 
 r e t u r n </space/> 1 ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> l o w </space/> = </space/> 0 , </space/> h i g h </space/> = </space/> m , </space/> m i d ; 
 w h i l e </space/> ( h i g h </space/> - </space/> l o w </space/> > </space/> 1 ) 
 { 
 m i d </space/> = </space/> ( h i g h </space/> + </space/> l o w ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d </space/> - </space/> 1 ) ) 
 h i g h </space/> = </space/> m i d ; 
 e l s e 
 l o w </space/> = </space/> m i d ; 
 / / </space/> c o u t < < l o w < < ' </space/> ' < < m i d < < ' </space/> ' < < h i g h < < e n d l ; ; 
 } 
 c o u t </space/> < < </space/> l o w ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t e s t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t e s t ; 
 w h i l e </space/> ( t e s t - - ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 r e p ( i , </space/> 0 , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 # i n c l u d e </space/> "" d e b u g . h "" 
 # d e f i n e </space/> d e b ( x . . . ) </space/> \ 
 c e r r </space/> < < </space/> "" [ "" </space/> < < </space/> # x </space/> < < </space/> "" ] </space/> = </space/> [ "" ; </space/> \ 
 _ p r i n t ( x ) ; 
 # e l s e 
 # d e f i n e </space/> d e b ( x . . . ) 
 # e n d i f 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> M O D </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> i n f </space/> ( i n t ) ( 1 e 1 8 ) 
 # d e f i n e </space/> a l l ( c ) </space/> c . b e g i n ( ) , </space/> c . e n d ( ) 
 # d e f i n e </space/> r e a d ( v ) </space/> \ 
 f o r </space/> ( a u t o & </space/> i t </space/> : </space/> v ) </space/> \ 
 c i n </space/> > > </space/> i t ; 
 # d e f i n e </space/> p r i n t ( v ) </space/> \ 
 f o r </space/> ( a u t o & </space/> i t </space/> : </space/> v ) </space/> \ 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 # d e f i n e </space/> g e t u n i q u e ( a ) </space/> a . r e s i z e ( u n i q u e ( a . b e g i n ( ) , </space/> a . e n d ( ) ) </space/> - </space/> a . b e g i n ( ) ) ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 v e c t o r < i n t > </space/> v ( n ) ; 
 r e a d ( v ) ; 
 
 i n t </space/> l e f t </space/> = </space/> 0 , </space/> r i g h t </space/> = </space/> m , </space/> a n s </space/> = </space/> - 1 ; 
 w h i l e </space/> ( l e f t </space/> < = </space/> r i g h t ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l e f t </space/> + </space/> r i g h t ) </space/> / </space/> 2 ; 
 b o o l </space/> f l a g </space/> = </space/> t r u e ; 
 
 i n t </space/> m n </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 
 i n t </space/> r e q </space/> = </space/> m </space/> - </space/> v [ i ] ; 
 i f </space/> ( v [ i ] </space/> > </space/> m n ) 
 { 
 
 i f </space/> ( r e q </space/> + </space/> m n </space/> < = </space/> m i d ) 
 { 
 c o n t i n u e ; 
 } 
 m n </space/> = </space/> v [ i ] ; 
 } 
 e l s e </space/> i f </space/> ( v [ i ] </space/> = = </space/> m n ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 r e q </space/> = </space/> m n </space/> - </space/> v [ i ] ; 
 i f </space/> ( r e q </space/> < = </space/> m i d ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 f l a g </space/> = </space/> f a l s e ; 
 } 
 } 
 } 
 i f </space/> ( f l a g ) 
 { 
 a n s </space/> = </space/> m i d ; 
 r i g h t </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 { 
 / / </space/> a n s </space/> = </space/> m i d ; 
 l e f t </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> h t t p s : / / c o d e f o r c e s . c o m / p r o b l e m s e t / p r o b l e m / 1 1 6 9 / C 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> n , </space/> m ; 
 c o n s t </space/> i n t </space/> M A X </space/> = </space/> 3 0 0 0 0 5 ; 
 i n t </space/> a [ M A X ] ; 
 
 b o o l </space/> c h e c k ( i n t </space/> m i d ) 
 { 
 i n t </space/> p a s s </space/> = </space/> m </space/> - </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 i f </space/> ( a [ i ] </space/> > </space/> p a s s </space/> & & </space/> a [ i ] </space/> + </space/> m i d </space/> < </space/> m ) 
 r e t u r n </space/> f a l s e ; 
 i f </space/> ( a [ i ] </space/> < = </space/> p a s s ) 
 { 
 p a s s </space/> = </space/> m i n ( p a s s , </space/> a [ i ] </space/> + </space/> m i d ) ; 
 } 
 e l s e 
 p a s s </space/> = </space/> m i n ( p a s s , </space/> ( a [ i ] </space/> + </space/> m i d ) </space/> % </space/> m ) ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> - </space/> 1 ; 
 i n t </space/> a n s </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 { 
 a n s </space/> = </space/> m i d , </space/> r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> d o u b l e </space/> l o n g </space/> d o u b l e 
 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 v o i d </space/> p r i n t _ v e c ( c o n s t </space/> v e c t o r < T > & </space/> v , </space/> b o o l </space/> n e w l i n e </space/> = </space/> t r u e ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> v [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 i f </space/> ( n e w l i n e ) 
 { 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 
 # d e f i n e </space/> s z ( x ) </space/> ( ( i n t ) ( x . s i z e ( ) ) ) 
 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < = </space/> ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> r e p r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> > = </space/> ( b ) ; </space/> i - - ) 
 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p v i </space/> p a i r < v e c t o r < i n t > , </space/> i n t > 
 
 # d e f i n e </space/> p a i </space/> a r r a y < i n t , </space/> 2 > 
 # d e f i n e </space/> p d i </space/> a r r a y < d o u b l e , </space/> 2 > 
 # d e f i n e </space/> p t i </space/> a r r a y < i n t , </space/> 3 > 
 
 # d e f i n e </space/> r e v e r s e ( i ) </space/> r e v e r s e ( i . b e g i n ( ) , </space/> i . e n d ( ) ) 
 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> ( i n t ) 3 e 5 </space/> + </space/> 1 0 5 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> ( i n t ) 1 e 9 </space/> + </space/> 7 ; 
 
 
 i n t </space/> a r r [ m a x n ] ; 
 
 i n t </space/> n , </space/> m ; 
 
 b o o l </space/> c h k ( i n t </space/> m i d ) 
 { 
 i n t </space/> l a </space/> = </space/> 0 ; 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 i f </space/> ( a r r [ i ] </space/> < = </space/> l a ) 
 { 
 i f </space/> ( l a </space/> - </space/> a r r [ i ] </space/> > </space/> m i d ) 
 r e t u r n </space/> 0 ; 
 } 
 e l s e 
 { 
 i f </space/> ( m </space/> + </space/> l a </space/> - </space/> a r r [ i ] </space/> < = </space/> m i d ) 
 c o n t i n u e ; 
 l a </space/> = </space/> a r r [ i ] ; 
 } 
 } 
 r e t u r n </space/> 1 ; 
 } 
 m a i n ( ) 
 { 
 c i n . t i e ( 0 ) ; 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> a r r [ i ] ; 
 
 i n t </space/> l o </space/> = </space/> 0 , </space/> h i </space/> = </space/> 1 e 9 ; 
 
 w h i l e </space/> ( h i </space/> > </space/> l o ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( h i </space/> + </space/> l o ) </space/> / </space/> 2 ; 
 i f </space/> ( c h k ( m i d ) ) 
 h i </space/> = </space/> m i d ; 
 e l s e 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> l o ; 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> a r </space/> a r r a y 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> d e b u g 1 ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> d e b u g 2 ( x , </space/> y ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> "" </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> # y </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> d e b u g 3 ( x , </space/> y , </space/> z ) </space/> \ 
 c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> "" </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> # y </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> "" </space/> "" </space/> < < </space/> # z </space/> < < </space/> "" </space/> "" </space/> < < </space/> z </space/> < < </space/> e n d l ; 
 c o n s t </space/> i n t </space/> M A X _ N </space/> = </space/> 1 e 5 </space/> + </space/> 1 ; 
 i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 9 ; 
 c o n s t </space/> l l </space/> L I N F </space/> = </space/> 1 e 1 8 ; 
 i n t </space/> n , </space/> m ; 
 v e c t o r < i n t > </space/> a ; 
 b o o l </space/> g o o d ( i n t </space/> x ) 
 { 
 / / </space/> c h e c k </space/> i f </space/> x </space/> o p s </space/> c a n </space/> m a k e </space/> i t </space/> h a p p e n 
 i n t </space/> k </space/> = </space/> 0 ; 
 b o o l </space/> b a d </space/> = </space/> f a l s e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( a [ i ] </space/> ! = </space/> 0 ) 
 { 
 i f </space/> ( k </space/> > </space/> a [ i ] ) 
 { 
 i f </space/> ( x </space/> > = </space/> k </space/> - </space/> a [ i ] ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 b a d </space/> = </space/> t r u e ; 
 } 
 } 
 e l s e </space/> i f </space/> ( k </space/> < </space/> a [ i ] ) 
 { 
 i f </space/> ( x </space/> > = </space/> m </space/> - </space/> a [ i ] </space/> + </space/> k ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 k </space/> = </space/> a [ i ] ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( k </space/> > </space/> a [ i ] ) 
 { 
 i f </space/> ( x </space/> > = </space/> k </space/> - </space/> a [ i ] ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 b a d </space/> = </space/> t r u e ; 
 } 
 } 
 } 
 } 
 i f </space/> ( ! b a d ) 
 r e t u r n </space/> t r u e ; 
 e l s e 
 r e t u r n </space/> f a l s e ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 a </space/> = </space/> v e c t o r < i n t > ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> - </space/> 1 ; </space/> / / </space/> l </space/> i s </space/> b a d , </space/> r </space/> i s </space/> g o o d 
 w h i l e </space/> ( r </space/> - </space/> l </space/> > </space/> 1 ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( g o o d ( m i d ) ) 
 { 
 r </space/> = </space/> m i d ; 
 } 
 e l s e 
 l </space/> = </space/> m i d ; 
 } 
 i f </space/> ( g o o d ( l ) ) 
 c o u t </space/> < < </space/> l </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> r </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t 1 . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t 1 . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l s ( p ) </space/> p </space/> < < </space/> 1 
 # d e f i n e </space/> r s ( p ) </space/> p </space/> < < </space/> 1 </space/> | </space/> 1 
 # d e f i n e </space/> d e ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < = </space/> ( b ) ; </space/> + + i ) 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> P I </space/> a c o s ( - 1 . 0 ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> d e b u g ( ) 
 { 
 f r e o p e n ( "" d a t a . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" d a t a . o u t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 } 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 3 e 5 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 
 i n t </space/> n , </space/> m ; 
 i n t </space/> a [ m a x n ] ; 
 i n t </space/> c u r [ m a x n ] ; 
 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 c u r [ 1 ] </space/> = </space/> a [ 1 ] ; 
 i f </space/> ( a [ 1 ] </space/> + </space/> x </space/> > = </space/> m ) 
 c u r [ 1 ] </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> c </space/> = </space/> a [ i ] ; 
 i f </space/> ( c </space/> + </space/> x </space/> > = </space/> m </space/> & & </space/> ( c </space/> + </space/> x ) </space/> % </space/> m </space/> > = </space/> c u r [ i </space/> - </space/> 1 ] ) 
 c u r [ i ] </space/> = </space/> c u r [ i </space/> - </space/> 1 ] ; 
 e l s e </space/> i f </space/> ( c </space/> > </space/> c u r [ i </space/> - </space/> 1 ] ) 
 c u r [ i ] </space/> = </space/> c ; 
 e l s e </space/> i f </space/> ( c </space/> + </space/> x </space/> > = </space/> c u r [ i </space/> - </space/> 1 ] ) 
 c u r [ i ] </space/> = </space/> c u r [ i </space/> - </space/> 1 ] ; 
 e l s e 
 r e t u r n </space/> 0 ; 
 } 
 r e t u r n </space/> 1 ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> + </space/> 1 ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i ) ) 
 r </space/> = </space/> m i ; 
 e l s e 
 l </space/> = </space/> m i </space/> + </space/> 1 ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> r ) ; 
 r e t u r n </space/> 0 ; 
 } 
 / * 
 5 </space/> 5 
 1 </space/> 2 </space/> 1 </space/> 2 </space/> 2 
 
 * / 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> D e N s E </space/> - </space/> E c L i P s E </space/> / / 
 / / </space/> W H A T </space/> i s </space/> D E A D </space/> m a y </space/> N E V E R </space/> d i e </space/> / / 
 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < u n o r d e r e d _ m a p > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < u n o r d e r e d _ s e t > 
 # i n c l u d e </space/> < c s t d l i b > 
 / / # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> n i t r o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> d o u b l e </space/> l o n g </space/> d o u b l e 
 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> ( 1 l l </space/> < < </space/> 6 2 ) </space/> - </space/> 1 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 2 ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> b P o w ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 { 
 r e s </space/> = </space/> ( r e s </space/> * </space/> a ) </space/> % </space/> m o d ; 
 } 
 b </space/> > > = </space/> 1 ; 
 a </space/> = </space/> ( a </space/> * </space/> a ) </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s </space/> % </space/> m o d ; 
 } 
 
 i n t </space/> g c d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 s w a p ( a , </space/> b ) ; 
 } 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 
 v e c t o r < i n t > </space/> h p f ( N , </space/> 0 l l ) ; 
 v o i d </space/> s i e v e ( ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 { 
 i f </space/> ( ! h p f [ i ] ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> i </space/> * </space/> j </space/> < </space/> N ; </space/> j + + ) 
 { 
 h p f [ i </space/> * </space/> j ] </space/> = </space/> i ; 
 } 
 } 
 } 
 } 
 
 b o o l </space/> i s O k ( v e c t o r < i n t > </space/> a , </space/> i n t </space/> v a l , </space/> i n t </space/> m ) 
 { 
 i n t </space/> m a x T i l l N o w </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> v a l </space/> < </space/> m ) 
 { 
 i f </space/> ( a [ i ] </space/> > = </space/> m a x T i l l N o w ) 
 { 
 m a x T i l l N o w </space/> = </space/> a [ i ] ; 
 } 
 e l s e </space/> i f </space/> ( a [ i ] </space/> + </space/> v a l </space/> < </space/> m a x T i l l N o w ) 
 r e t u r n </space/> f a l s e ; 
 } 
 e l s e </space/> i f </space/> ( m a x T i l l N o w </space/> < = </space/> ( a [ i ] </space/> + </space/> v a l ) </space/> % </space/> m ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 { 
 m a x T i l l N o w </space/> = </space/> m a x ( m a x T i l l N o w , </space/> a [ i ] ) ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( i s O k ( a , </space/> m i d , </space/> m ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> l </space/> < < </space/> e n d l ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 n i t r o </space/> i n t </space/> t c </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> m a x n </space/> 3 0 0 0 0 5 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> n , </space/> m ; 
 i n t </space/> a [ m a x n ] ; 
 
 b o o l </space/> c h e c k ( i n t </space/> k ) 
 { 
 i n t </space/> p r e </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> > </space/> p r e ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> k </space/> > = </space/> m </space/> & & </space/> ( a [ i ] </space/> + </space/> k ) </space/> % </space/> m </space/> > = </space/> p r e ) 
 c o n t i n u e ; 
 e l s e 
 p r e </space/> = </space/> a [ i ] ; 
 } 
 e l s e </space/> i f </space/> ( a [ i ] </space/> < </space/> p r e ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> k </space/> < </space/> p r e ) 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> m i d , </space/> a n s ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 { 
 a n s </space/> = </space/> m i d ; </space/> / / 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 3 e 5 </space/> + </space/> 5 ; 
 i n t </space/> a [ m a x n ] ; 
 i n t </space/> n , </space/> m ; 
 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 i n t </space/> l a s t </space/> = </space/> a [ 0 ] ; 
 i f </space/> ( a [ 0 ] </space/> + </space/> x </space/> > = </space/> m ) 
 l a s t </space/> = </space/> 0 ; </space/> / / </space/> I f </space/> a [ 0 ] </space/> i s </space/> g r e a t e r </space/> t h a n </space/> m </space/> a f t e r </space/> x </space/> t r a n s f o r m a t i o n s , </space/> t h e n </space/> a [ 0 ] </space/> c a n </space/> b e </space/> t r e a t e d </space/> a s 
 / / </space/> 0 . 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> t e m p </space/> = </space/> - 1 ; </space/> / / </space/> S t o r e </space/> t h e </space/> o n e </space/> w i t h </space/> a [ i ] </space/> a n d </space/> l a s t . 
 i f </space/> ( a [ i ] </space/> > = </space/> l a s t ) 
 { 
 t e m p </space/> = </space/> a [ i ] ; 
 / / </space/> I f </space/> a [ i ] </space/> c a n </space/> b e </space/> l a r g e r </space/> t h a n </space/> t h e </space/> p r e v i o u s </space/> o n e </space/> a f t e r </space/> x </space/> t r a n s f o r m a t i o n s , </space/> t h e n </space/> t e m p </space/> s t o r e s 
 / / </space/> t h e </space/> p r e v i o u s </space/> v a l u e . 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> > = </space/> m </space/> & & </space/> ( a [ i ] </space/> + </space/> x ) </space/> % </space/> m </space/> > = </space/> l a s t ) 
 { 
 t e m p </space/> = </space/> l a s t ; 
 } 
 } 
 e l s e </space/> i f </space/> ( a [ i ] </space/> + </space/> x </space/> > = </space/> l a s t ) 
 t e m p </space/> = </space/> l a s t ; 
 i f </space/> ( t e m p </space/> = = </space/> - 1 ) 
 r e t u r n </space/> f a l s e ; </space/> / / </space/> C a n ' t </space/> f i n d </space/> a [ i ] </space/> l a r g e r </space/> t h a n </space/> t h e </space/> p r e v i o u s </space/> o n e . 
 l a s t </space/> = </space/> t e m p ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> + </space/> 1 , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d </space/> - </space/> 1 , </space/> a n s </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 v o i d </space/> r e a d ( T & </space/> x ) 
 { 
 T </space/> r e s </space/> = </space/> 0 , </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( ! i s d i g i t ( c ) ) 
 { 
 i f </space/> ( c </space/> = = </space/> ' - ' ) 
 f </space/> = </space/> - 1 ; 
 c </space/> = </space/> g e t c h a r ( ) ; 
 } 
 w h i l e </space/> ( i s d i g i t ( c ) ) 
 { 
 r e s </space/> = </space/> ( r e s </space/> < < </space/> 3 ) </space/> + </space/> ( r e s </space/> < < </space/> 1 ) </space/> + </space/> c </space/> - </space/> ' 0 ' ; 
 c </space/> = </space/> g e t c h a r ( ) ; 
 } 
 x </space/> = </space/> r e s </space/> * </space/> f ; 
 } 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 c o n s t </space/> l l </space/> N </space/> = </space/> 5 0 0 0 0 0 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 i n t </space/> n , </space/> m , </space/> a [ N ] , </space/> b [ N ] ; 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 b [ i ] </space/> = </space/> a [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( b [ i ] </space/> < </space/> b [ i </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( b [ i </space/> - </space/> 1 ] </space/> - </space/> b [ i ] </space/> > </space/> x ) 
 r e t u r n </space/> 0 ; 
 b [ i ] </space/> = </space/> b [ i </space/> - </space/> 1 ] ; 
 } 
 e l s e 
 { 
 i f </space/> ( b [ i </space/> - </space/> 1 ] </space/> + </space/> m </space/> < = </space/> x </space/> + </space/> b [ i ] ) 
 b [ i ] </space/> = </space/> b [ i </space/> - </space/> 1 ] ; 
 } 
 } 
 r e t u r n </space/> 1 ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 / / </space/> i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" t e s t . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f </space/> / / </space/> O N L I N E _ J U D G E 
 r e a d ( n ) , </space/> r e a d ( m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 r e a d ( a [ i ] ) ; 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> 1 e 1 5 , </space/> a n s </space/> = </space/> r ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 { 
 a n s </space/> = </space/> m i n ( a n s , </space/> m i d ) ; 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> d e b ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> "" = "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> t e s t </space/> \ 
 i n t </space/> T ; </space/> \ 
 c i n </space/> > > </space/> T ; </space/> \ 
 w h i l e </space/> ( T - - ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 9 </space/> + </space/> 9 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 5 0 0 5 0 0 ; 
 
 i n t </space/> n , </space/> m ; 
 
 b o o l </space/> s o l v e ( v e c t o r < i n t > & </space/> a , </space/> i n t </space/> x ) 
 { 
 i n t </space/> p r e v </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> n e e d e d ; 
 i f </space/> ( p r e v </space/> < </space/> a [ i ] ) 
 { 
 n e e d e d </space/> = </space/> m </space/> - </space/> ( a [ i ] </space/> - </space/> p r e v ) ; 
 } 
 e l s e 
 { 
 n e e d e d </space/> = </space/> p r e v </space/> - </space/> a [ i ] ; 
 } 
 i f </space/> ( x </space/> > = </space/> n e e d e d ) 
 { 
 c o n t i n u e ; 
 } 
 i f </space/> ( p r e v </space/> > </space/> a [ i ] ) 
 r e t u r n </space/> f a l s e ; 
 p r e v </space/> = </space/> a [ i ] ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> L </space/> = </space/> 0 , </space/> R </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( L </space/> < = </space/> R ) 
 { 
 i n t </space/> m </space/> = </space/> ( L </space/> + </space/> R ) </space/> / </space/> 2 ; 
 i f </space/> ( s o l v e ( a , </space/> m ) ) 
 { 
 R </space/> = </space/> m </space/> - </space/> 1 ; 
 } 
 e l s e 
 { 
 L </space/> = </space/> m </space/> + </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> L ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> d p [ 1 0 0 0 0 0 5 ] , </space/> n , </space/> m , </space/> l , </space/> r , </space/> m i d , </space/> i , </space/> a [ 1 0 0 0 0 0 5 ] ; 
 i n l i n e </space/> i n t </space/> c h e c k ( i n t </space/> x x ) 
 { 
 i n t </space/> i ; 
 d p [ 1 ] </space/> = </space/> a [ 1 ] ; 
 i f </space/> ( a [ 1 ] </space/> + </space/> x x </space/> > = </space/> m ) 
 d p [ 1 ] </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x x </space/> < </space/> d p [ i </space/> - </space/> 1 ] ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( a [ i ] </space/> + </space/> x x </space/> < </space/> m </space/> + </space/> d p [ i </space/> - </space/> 1 ] ) 
 d p [ i ] </space/> = </space/> m a x ( d p [ i </space/> - </space/> 1 ] , </space/> a [ i ] ) ; 
 e l s e 
 d p [ i ] </space/> = </space/> d p [ i </space/> - </space/> 1 ] ; 
 } 
 r e t u r n </space/> 1 ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l </space/> = </space/> 0 ; 
 r </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> r </space/> > > </space/> 1 ) ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> l ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> I N e e d T o S p e e d </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> p e r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 l l </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 0 0 0 1 7 ; 
 l l </space/> n , </space/> m ; 
 l l </space/> a [ 3 </space/> * </space/> N ] ; 
 l l </space/> b [ 3 </space/> * </space/> N ] ; 
 
 b o o l </space/> c h e c k ( l l </space/> k ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> b [ i ] </space/> = </space/> a [ i ] ; 
 i f </space/> ( b [ 1 ] </space/> + </space/> k </space/> > = </space/> m ) 
 b [ 1 ] </space/> = </space/> 0 ; 
 r e p ( i , </space/> 2 , </space/> n ) 
 { 
 i f </space/> ( b [ i ] </space/> < </space/> b [ i </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( b [ i ] </space/> + </space/> k </space/> > = </space/> b [ i </space/> - </space/> 1 ] ) 
 b [ i ] </space/> = </space/> b [ i </space/> - </space/> 1 ] ; 
 e l s e 
 { 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( ( b [ i ] </space/> + </space/> k ) </space/> % </space/> m </space/> > = </space/> b [ i </space/> - </space/> 1 ] </space/> & & </space/> b [ i ] </space/> + </space/> k </space/> > = </space/> m ) 
 b [ i ] </space/> = </space/> b [ i </space/> - </space/> 1 ] ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 l l </space/> l </space/> = </space/> 0 ; 
 l l </space/> r </space/> = </space/> 1 e 1 2 ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> l ; 
 } 
 m a i n ( ) 
 { 
 I N e e d T o S p e e d </space/> l l </space/> t 2 4 </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t 2 4 ; 
 w h i l e </space/> ( t 2 4 - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v v i </space/> v e c t o r < v e c t o r < i n t > </space/> > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 c o n s t </space/> i n t </space/> M X </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> l o </space/> = </space/> 0 , </space/> h i </space/> = </space/> m </space/> + </space/> 1 ; </space/> / / [ l o , </space/> h i ] 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 2 0 ; </space/> i + + ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l o </space/> + </space/> h i ) </space/> / </space/> 2 ; 
 i n t </space/> l s t </space/> = </space/> 0 ; 
 b o o l </space/> w o r k </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n </space/> & & </space/> w o r k ; </space/> j + + ) 
 { 
 i f </space/> ( a [ j ] </space/> < = </space/> l s t ) 
 { 
 i f </space/> ( l s t </space/> - </space/> a [ j ] </space/> > </space/> m i d ) 
 { 
 w o r k </space/> = </space/> f a l s e ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( m </space/> + </space/> l s t </space/> - </space/> a [ j ] </space/> > </space/> m i d ) 
 { 
 l s t </space/> = </space/> a [ j ] ; 
 } 
 } 
 } 
 i f </space/> ( w o r k ) 
 { 
 h i </space/> = </space/> m i d ; 
 } 
 e l s e 
 { 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> l o </space/> < < </space/> "" \ n "" ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l i n e </space/> "" \ n "" 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> k i c k s t a r t _ p r i n t ( l ) </space/> c o u t </space/> < < </space/> "" C a s e </space/> # "" </space/> < < </space/> l </space/> < < </space/> "" : </space/> "" 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 
 / / </space/> m a x </space/> m i n n 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 T </space/> M I N ( T </space/> f i r s t ) 
 { 
 r e t u r n </space/> f i r s t ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T , </space/> t y p e n a m e . . . </space/> A r g s > 
 T </space/> M I N ( T </space/> f i r s t , </space/> A r g s . . . </space/> a r g s ) 
 { 
 r e t u r n </space/> m i n ( f i r s t , </space/> M I N ( a r g s . . . ) ) ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 T </space/> M A X ( T </space/> f i r s t ) 
 { 
 r e t u r n </space/> f i r s t ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T , </space/> t y p e n a m e . . . </space/> A r g s > 
 T </space/> M A X ( T </space/> f i r s t , </space/> A r g s . . . </space/> a r g s ) 
 { 
 r e t u r n </space/> m a x ( f i r s t , </space/> M A X ( a r g s . . . ) ) ; 
 } 
 
 
 v e c t o r < v e c t o r < i n t > </space/> > </space/> a d j ; 
 i n t </space/> e 1 , </space/> e 2 ; 
 i n t </space/> N , </space/> M ; 
 
 
 / / # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g </space/> i n t 
 
 i n t </space/> g c d ( i n t </space/> a , </space/> i n t </space/> b ) ; 
 i n t </space/> l c m ( i n t </space/> a , </space/> i n t </space/> b ) ; 
 i n t </space/> n ; 
 i n t </space/> m ; 
 i n t * </space/> a ; 
 
 b o o l </space/> c h e c k ( i n t </space/> m i d ) 
 { 
 i n t </space/> m a x x _ y e t </space/> = </space/> a [ 0 ] ; 
 i f </space/> ( a [ 0 ] </space/> + </space/> m i d </space/> > = </space/> m ) 
 m a x x _ y e t </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> = = </space/> m a x x _ y e t ) 
 c o n t i n u e ; 
 i f </space/> ( a [ i ] </space/> > </space/> m a x x _ y e t ) 
 { 
 i f </space/> ( ( a [ i ] </space/> + </space/> m i d ) </space/> > = </space/> m </space/> & & </space/> ( a [ i ] </space/> + </space/> m i d ) </space/> % </space/> m </space/> > = </space/> m a x x _ y e t ) 
 c o n t i n u e ; 
 e l s e 
 { 
 m a x x _ y e t </space/> = </space/> a [ i ] ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> m i d </space/> > = </space/> m a x x _ y e t ) 
 { 
 c o n t i n u e ; 
 } 
 e l s e 
 r e t u r n </space/> 0 ; 
 } 
 } 
 r e t u r n </space/> 1 ; 
 } 
 
 v o i d </space/> s o l v e ( i n t </space/> i n p u t ) 
 { 
 / / </space/> r e a d </space/> p r o b l e m </space/> C </space/> i f </space/> s t u c k </space/> o n </space/> B </space/> f o r </space/> l o n g e r </space/> t h a n </space/> 2 0 </space/> m i n s ! ! 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 a </space/> = </space/> n e w </space/> i n t [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m ; 
 i n t </space/> b e s t </space/> = </space/> - 1 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 
 i f </space/> ( c h e c k ( m i d ) ) 
 { 
 b e s t </space/> = </space/> m i d ; 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 
 c o u t </space/> < < </space/> b e s t ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> x </space/> = </space/> 1 ; 
 / / </space/> c i n > > x ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> x ; </space/> i + + ) 
 s o l v e ( i ) ; 
 r e t u r n </space/> 0 ; 
 } 
 
 i n t </space/> g c d ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 
 i n t </space/> l c m ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> ( a </space/> / </space/> g c d ( a , </space/> b ) ) </space/> * </space/> b ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> A u t h o r </space/> : </space/> M a t r i x C a s c a d e 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> c l r ( f , </space/> n ) </space/> m e m s e t ( f , </space/> 0 , </space/> s i z e o f ( i n t ) </space/> * </space/> ( n ) ) 
 # d e f i n e </space/> c p y ( f , </space/> g , </space/> n ) </space/> m e m c p y ( f , </space/> g , </space/> s i z e o f ( i n t ) </space/> * </space/> ( n ) ) 
 # d e f i n e </space/> r e v ( f , </space/> n ) </space/> r e v e r s e ( f , </space/> f </space/> + </space/> n ) 
 # d e f i n e </space/> p i r </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> m k p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f s t </space/> i t - > f i r s t 
 # d e f i n e </space/> s e c </space/> i t - > s e c o n d 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u p ( i , </space/> x , </space/> y ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x , </space/> i # # e n d </space/> = </space/> y ; </space/> i </space/> < = </space/> i # # e n d ; </space/> + + i ) 
 # d e f i n e </space/> d o w n ( i , </space/> x , </space/> y ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x , </space/> i # # e n d </space/> = </space/> y ; </space/> i </space/> > = </space/> i # # e n d ; </space/> - - i ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> n , </space/> m , </space/> k ; 
 i n t </space/> r e a d ( ) 
 { 
 i n t </space/> s </space/> = </space/> 0 , </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( c h </space/> < </space/> ' 0 ' </space/> | | </space/> c h </space/> > </space/> ' 9 ' ) 
 { 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 f </space/> = </space/> - 1 ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 w h i l e </space/> ( c h </space/> > = </space/> ' 0 ' </space/> & & </space/> c h </space/> < = </space/> ' 9 ' ) 
 { 
 s </space/> = </space/> s </space/> * </space/> 1 0 </space/> + </space/> c h </space/> - </space/> ' 0 ' ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 r e t u r n </space/> s </space/> * </space/> f ; 
 } 
 i n l i n e </space/> v o i d </space/> p r i n t ( i n t * </space/> f , </space/> i n t </space/> l e n ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> l e n ; </space/> i + + ) 
 p r i n t f ( "" % l l d </space/> "" , </space/> f [ i ] ) ; 
 p u t s ( "" "" ) ; 
 } 
 i n t </space/> a [ 3 0 3 0 0 3 ] ; 
 i n t </space/> c h e c k ( i n t </space/> k ) 
 { 
 i n t </space/> m x ; 
 i f </space/> ( a [ n ] </space/> + </space/> k </space/> > = </space/> m ) 
 m x </space/> = </space/> m </space/> - </space/> 1 ; 
 e l s e 
 m x </space/> = </space/> a [ n ] </space/> + </space/> k ; 
 d o w n ( i , </space/> n </space/> - </space/> 1 , </space/> 1 ) 
 { 
 i f </space/> ( a [ i ] </space/> < = </space/> m x ) 
 m x </space/> = </space/> m i n ( k </space/> + </space/> a [ i ] , </space/> m x ) ; 
 e l s e </space/> i f </space/> ( a [ i ] </space/> > </space/> m x </space/> & & </space/> a [ i ] </space/> + </space/> k </space/> < </space/> m ) 
 r e t u r n </space/> 0 ; 
 e l s e 
 m x </space/> = </space/> m i n ( ( a [ i ] </space/> + </space/> k ) </space/> % </space/> m , </space/> m x ) ; 
 } 
 r e t u r n </space/> 1 ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 n </space/> = </space/> r e a d ( ) , </space/> m </space/> = </space/> r e a d ( ) ; 
 u p ( i , </space/> 1 , </space/> n ) </space/> a [ i ] </space/> = </space/> r e a d ( ) ; 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( ! c h e c k ( m i d ) ) 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d ; 
 } 
 c o u t </space/> < < </space/> l </space/> < < </space/> e n d l ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c s t r i n g > 
 # d e f i n e </space/> m a x n </space/> 5 0 0 5 0 0 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> l , </space/> r ; 
 i n t </space/> n , </space/> m , </space/> s [ m a x n ] , </space/> w [ m a x n ] ; 
 
 i n l i n e </space/> i n t </space/> r e a d ( ) 
 { 
 i n t </space/> w </space/> = </space/> 1 , </space/> q </space/> = </space/> 0 ; 
 c h a r </space/> c h </space/> = </space/> ' </space/> ' ; 
 w h i l e </space/> ( c h </space/> ! = </space/> ' - ' </space/> & & </space/> ( c h </space/> < </space/> ' 0 ' </space/> | | </space/> c h </space/> > </space/> ' 9 ' ) ) 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 w </space/> = </space/> - 1 , </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( c h </space/> > = </space/> ' 0 ' </space/> & & </space/> c h </space/> < = </space/> ' 9 ' ) 
 q </space/> = </space/> q </space/> * </space/> 1 0 </space/> + </space/> c h </space/> - </space/> ' 0 ' , </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 r e t u r n </space/> w </space/> * </space/> q ; 
 } 
 
 i n l i n e </space/> v o i d </space/> w r i t e ( i n t </space/> x ) 
 { 
 i f </space/> ( x </space/> < </space/> 0 ) 
 { 
 x </space/> = </space/> ~ ( x </space/> - </space/> 1 ) ; 
 p u t c h a r ( ' - ' ) ; 
 } 
 i f </space/> ( x </space/> > </space/> 9 ) 
 w r i t e ( x </space/> / </space/> 1 0 ) ; 
 p u t c h a r ( x </space/> % </space/> 1 0 </space/> + </space/> ' 0 ' ) ; 
 } 
 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s [ i ] </space/> = </space/> w [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s [ i ] </space/> < </space/> s [ i </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> - </space/> s [ i ] </space/> > </space/> x ) 
 r e t u r n </space/> f a l s e ; 
 s [ i ] </space/> = </space/> s [ i </space/> - </space/> 1 ] ; 
 } 
 e l s e </space/> i f </space/> ( s [ i </space/> - </space/> 1 ] </space/> + </space/> m </space/> - </space/> s [ i ] </space/> < = </space/> x ) 
 s [ i ] </space/> = </space/> s [ i </space/> - </space/> 1 ] ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 n </space/> = </space/> r e a d ( ) ; 
 m </space/> = </space/> r e a d ( ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 w [ i ] </space/> = </space/> r e a d ( ) ; 
 } 
 r </space/> = </space/> m ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 w r i t e ( l ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> n , </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 v e c t o r < i n t > </space/> z ( n ) ; 
 f o r </space/> ( i n t & </space/> i t </space/> : </space/> z ) 
 { 
 c i n </space/> > > </space/> i t ; 
 } 
 i n t </space/> l o </space/> = </space/> 0 , </space/> h i </space/> = </space/> k </space/> - </space/> 1 , </space/> m i d , </space/> a n s , </space/> x , </space/> p r e v ; 
 w h i l e </space/> ( l o </space/> < = </space/> h i ) 
 { 
 m i d </space/> = </space/> ( l o </space/> + </space/> h i ) </space/> > > </space/> 1 ; 
 p r e v </space/> = </space/> 0 ; 
 b o o l </space/> c h e c k </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 x </space/> = </space/> z [ i ] ; 
 i f </space/> ( p r e v </space/> > </space/> x ) 
 { 
 i f </space/> ( p r e v </space/> - </space/> x </space/> > </space/> m i d ) 
 { 
 c h e c k </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 x </space/> = </space/> p r e v ; 
 } 
 e l s e 
 { 
 i f </space/> ( p r e v </space/> < = </space/> ( x </space/> + </space/> m i d ) </space/> % </space/> k </space/> & & </space/> x </space/> > </space/> ( x </space/> + </space/> m i d ) </space/> % </space/> k ) 
 { 
 x </space/> = </space/> p r e v ; 
 } 
 } 
 p r e v </space/> = </space/> x ; 
 } 
 i f </space/> ( c h e c k ) 
 { 
 a n s </space/> = </space/> m i d ; 
 h i </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 { 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < s t r i n g > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> s z ( x ) </space/> ( ( i n t ) ( x ) . s i z e ( ) ) 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> d e b ( x ) </space/> c o u t </space/> < < </space/> # x </space/> < < </space/> ' = ' </space/> < < </space/> x </space/> < < </space/> e n d l 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 3 e 5 </space/> + </space/> 5 ; 
 l l </space/> n , </space/> m , </space/> a [ N ] , </space/> l [ N ] , </space/> r [ N ] ; 
 b o o l </space/> o k ( l l </space/> x ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l [ i ] </space/> = </space/> a [ i ] ; 
 r [ i ] </space/> = </space/> ( a [ i ] </space/> + </space/> x ) </space/> % </space/> m ; 
 } 
 l l </space/> p r e v </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( r [ i ] </space/> > = </space/> l [ i ] ) 
 { 
 i f </space/> ( p r e v </space/> > </space/> r [ i ] ) 
 { 
 r e t u r n </space/> f a l s e ; 
 } 
 p r e v </space/> = </space/> m a x ( p r e v , </space/> l [ i ] ) ; 
 } 
 e l s e 
 { 
 i f </space/> ( p r e v </space/> > </space/> r [ i ] ) 
 { 
 p r e v </space/> = </space/> m a x ( p r e v , </space/> l [ i ] ) ; 
 } 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 l l </space/> a n s </space/> = </space/> 0 , </space/> l o w </space/> = </space/> 0 , </space/> h i g h </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( l o w </space/> < </space/> h i g h ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l o w </space/> + </space/> h i g h ) </space/> / </space/> 2 ; 
 i f </space/> ( o k ( m i d ) ) 
 { 
 h i g h </space/> = </space/> m i d ; 
 } 
 e l s e 
 { 
 l o w </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 a n s </space/> = </space/> l o w ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 
 # d e f i n e </space/> f o r n ( i , </space/> e ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> f o r s n ( i , </space/> s , </space/> e ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> s ; </space/> i </space/> < </space/> e ; </space/> i + + ) 
 # d e f i n e </space/> r f o r n ( i , </space/> s ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> s ; </space/> ~ i ; </space/> i - - ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 b o o l </space/> c h e c k ( i n t </space/> x , </space/> i n t </space/> m , </space/> i n t </space/> n , </space/> v e c t o r < i n t > & </space/> a r r ) 
 { 
 i n t </space/> b a s e </space/> = </space/> 0 ; 
 f o r n ( i , </space/> n ) 
 { 
 i f </space/> ( a r r [ i ] </space/> = = </space/> b a s e ) 
 c o n t i n u e ; 
 i n t </space/> c o s t </space/> = </space/> ( m </space/> + </space/> b a s e </space/> - </space/> a r r [ i ] ) </space/> % </space/> m ; 
 i f </space/> ( c o s t </space/> > </space/> x ) 
 { 
 i f </space/> ( a r r [ i ] </space/> < </space/> b a s e ) 
 r e t u r n </space/> f a l s e ; 
 b a s e </space/> = </space/> a r r [ i ] ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 v e c t o r < i n t > </space/> a r r ( n ) ; 
 f o r n ( i , </space/> n ) </space/> c i n </space/> > > </space/> a r r [ i ] ; 
 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 
 i f </space/> ( c h e c k ( m i d , </space/> m , </space/> n , </space/> a r r ) ) 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 
 c o u t </space/> < < </space/> l </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f d e f </space/> k 4 d r o i d 3 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 
 / / </space/> i n t </space/> t ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 / / </space/> w h i l e ( t - - ) 
 s o l v e ( ) ; 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> d e b u g ( a ) </space/> c o u t </space/> < < </space/> # a </space/> < < </space/> "" = "" </space/> < < </space/> a </space/> < < </space/> e n d l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 3 e 5 </space/> + </space/> 1 0 0 ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> L L ; 
 i n l i n e </space/> L L </space/> r e a d ( ) 
 { 
 L L </space/> x </space/> = </space/> 0 , </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( ! i s d i g i t ( c h ) ) 
 { 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 f </space/> = </space/> - 1 ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 w h i l e </space/> ( i s d i g i t ( c h ) ) 
 { 
 x </space/> = </space/> x </space/> * </space/> 1 0 </space/> + </space/> c h </space/> - </space/> 4 8 ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 r e t u r n </space/> x </space/> * </space/> f ; 
 } 
 L L </space/> a [ m a x n ] , </space/> b [ m a x n ] ; 
 b o o l </space/> c h e c k ( L L </space/> x , </space/> L L </space/> n , </space/> L L </space/> m ) 
 { 
 f o r </space/> ( L L </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 b [ i ] </space/> = </space/> a [ i ] ; 
 f o r </space/> ( L L </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( b [ i </space/> - </space/> 1 ] </space/> > </space/> b [ i ] ) 
 { 
 i f </space/> ( b [ i </space/> - </space/> 1 ] </space/> - </space/> b [ i ] </space/> > </space/> x ) 
 r e t u r n </space/> f a l s e ; 
 e l s e 
 b [ i ] </space/> = </space/> b [ i </space/> - </space/> 1 ] ; 
 } 
 e l s e </space/> i f </space/> ( b [ i ] </space/> > </space/> b [ i </space/> - </space/> 1 ] ) 
 { 
 i f </space/> ( b [ i </space/> - </space/> 1 ] </space/> + </space/> m </space/> - </space/> b [ i ] </space/> < = </space/> x ) 
 b [ i ] </space/> = </space/> b [ i </space/> - </space/> 1 ] ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( v o i d ) 
 { 
 c i n . t i e ( 0 ) ; 
 s t d : : i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 L L </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( L L </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 L L </space/> l </space/> = </space/> 0 ; 
 L L </space/> r </space/> = </space/> 1 e 1 7 ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 L L </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d , </space/> n , </space/> m ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> l </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> c h e c k ( i n t </space/> n , </space/> v e c t o r < i n t > & </space/> a , </space/> i n t </space/> m , </space/> i n t </space/> v a l ) 
 { 
 i n t </space/> c </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> v a l </space/> > = </space/> m ) 
 { 
 i n t </space/> r </space/> = </space/> ( a [ i ] </space/> + </space/> v a l ) </space/> % </space/> m ; 
 i f </space/> ( r </space/> < </space/> c ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> v a l </space/> < </space/> c ) 
 r e t u r n </space/> f a l s e ; 
 c </space/> = </space/> m a x ( c , </space/> a [ i ] ) ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> v a l </space/> < </space/> c ) 
 r e t u r n </space/> f a l s e ; 
 c </space/> = </space/> m a x ( c , </space/> a [ i ] ) ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < i n t > </space/> a ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 i n t </space/> l </space/> = </space/> - 1 , </space/> r </space/> = </space/> 1 e 9 </space/> + </space/> 2 2 8 ; 
 w h i l e </space/> ( r </space/> - </space/> l </space/> > </space/> 1 ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( n , </space/> a , </space/> m , </space/> m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d ; 
 } 
 c o u t </space/> < < </space/> r </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f d e f </space/> L O C A L 
 f r e o p e n ( "" i n . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 s o l v e ( ) ; 
 / / </space/> i n t </space/> t ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 / / </space/> w h i l e </space/> ( t - - ) 
 / / </space/> 	 s o l v e ( ) ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> M A X N </space/> 3 3 3 3 3 3 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> a n s ; 
 i n t </space/> n , </space/> m ; 
 i n t </space/> a [ M A X N ] ; 
 
 b o o l </space/> j u d g e ( i n t </space/> x ) 
 { 
 i n t </space/> m x </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> < </space/> m x ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> < </space/> m x ) 
 r e t u r n </space/> 0 ; 
 } 
 i f </space/> ( a [ i ] </space/> > </space/> m x ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> > = </space/> m </space/> & & </space/> a [ i ] </space/> + </space/> x </space/> - </space/> m </space/> > = </space/> m x ) 
 { 
 } 
 e l s e 
 m x </space/> = </space/> a [ i ] ; 
 } 
 } 
 r e t u r n </space/> 1 ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 } 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m , </space/> m i d ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> r </space/> > > </space/> 1 ; 
 i f </space/> ( j u d g e ( m i d ) ) 
 a n s </space/> = </space/> m i d , </space/> r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 p r i n t f ( "" % d "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> l d </space/> = </space/> l o n g </space/> d o u b l e ; 
 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( a u t o </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < </space/> ( b ) ; </space/> + + i ) 
 # d e f i n e </space/> p e r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( a u t o </space/> i </space/> = </space/> ( b ) ; </space/> i - - </space/> > </space/> ( a ) ; ) 
 # d e f i n e </space/> a l l ( x ) </space/> b e g i n ( x ) , </space/> e n d ( x ) 
 # d e f i n e </space/> r a l l ( x ) </space/> ( x ) . r b e g i n ( ) , </space/> ( x ) . r e n d ( ) 
 # d e f i n e </space/> s z ( x ) </space/> i n t ( ( x ) . s i z e ( ) ) 
 # d e f i n e </space/> l b ( x . . . ) </space/> l o w e r _ b o u n d ( x ) 
 # d e f i n e </space/> u b ( x . . . ) </space/> u p p e r _ b o u n d ( x ) 
 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 b o o l </space/> c k m i n ( T & </space/> a , </space/> c o n s t </space/> T & </space/> b ) 
 { 
 r e t u r n </space/> a </space/> > </space/> b </space/> ? </space/> a </space/> = </space/> b , </space/> 1 </space/> : </space/> 0 ; 
 } 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 b o o l </space/> c k m a x ( T & </space/> a , </space/> c o n s t </space/> T & </space/> b ) 
 { 
 r e t u r n </space/> a </space/> < </space/> b </space/> ? </space/> a </space/> = </space/> b , </space/> 1 </space/> : </space/> 0 ; 
 } 
 
 m t 1 9 9 3 7 </space/> r n g ( c h r o n o : : s t e a d y _ c l o c k : : n o w ( ) . t i m e _ s i n c e _ e p o c h ( ) . c o u n t ( ) ) ; 
 
 
 i n t </space/> n , </space/> m ; 
 v e c t o r < i n t > </space/> a ; 
 b o o l </space/> c h e c k ( i n t </space/> x ) 
 { 
 i n t </space/> p </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o </space/> y </space/> : </space/> a ) 
 { 
 i f </space/> ( ( y </space/> < = </space/> p </space/> & & </space/> p </space/> < = </space/> x </space/> + </space/> y ) </space/> | | </space/> ( y </space/> < = </space/> p </space/> + </space/> m </space/> & & </space/> p </space/> + </space/> m </space/> < = </space/> x </space/> + </space/> y ) ) 
 c o n t i n u e ; 
 i f </space/> ( y </space/> < </space/> p ) 
 r e t u r n </space/> 0 ; 
 e l s e 
 p </space/> = </space/> y ; 
 } 
 r e t u r n </space/> 1 ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 a . r e s i z e ( n ) ; 
 f o r </space/> ( a u t o & </space/> x </space/> : </space/> a ) 
 c i n </space/> > > </space/> x ; 
 
 i n t </space/> l </space/> = </space/> - 1 , </space/> r </space/> = </space/> m ; 
 w h i l e </space/> ( r </space/> - </space/> l </space/> > </space/> 1 ) 
 { 
 l l </space/> m </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 ( c h e c k ( m ) </space/> ? </space/> r </space/> : </space/> l ) </space/> = </space/> m ; 
 } 
 c o u t </space/> < < </space/> r </space/> < < </space/> ' \ n ' ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> P ( X ) </space/> c o u t </space/> < < </space/> "" d b </space/> "" </space/> < < </space/> X </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> P 2 ( X , </space/> Y ) </space/> c o u t </space/> < < </space/> "" d 2 </space/> "" </space/> < < </space/> X </space/> < < </space/> "" </space/> "" </space/> < < </space/> Y </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> P 3 ( X , </space/> Y , </space/> Z ) </space/> c o u t </space/> < < </space/> "" d 3 </space/> "" </space/> < < </space/> X </space/> < < </space/> "" </space/> "" </space/> < < </space/> Y </space/> < < </space/> "" </space/> "" </space/> < < </space/> Z </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> S Q ( x ) </space/> ( ( x ) </space/> * </space/> ( x ) ) 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 
 # d e f i n e </space/> b c h k ( n , </space/> i ) </space/> ( b o o l ) ( n </space/> & </space/> ( 1 </space/> < < </space/> i ) ) 
 # d e f i n e </space/> b o n ( n , </space/> i ) </space/> ( n </space/> | </space/> ( 1 </space/> < < </space/> i ) ) 
 # d e f i n e </space/> b o f f ( n , </space/> i ) </space/> n </space/> = </space/> n </space/> & </space/> ( ~ ( 1 </space/> < < </space/> i ) ) 
 
 # d e f i n e </space/> d i s t a n c e ( a , </space/> b ) </space/> ( s q ( a . x </space/> - </space/> b . x ) </space/> + </space/> s q ( a . y </space/> - </space/> b . y ) ) 
 # d e f i n e </space/> M A X 3 ( a , </space/> b , </space/> c ) </space/> m a x ( a , </space/> m a x ( b , </space/> c ) ) 
 # d e f i n e </space/> M S ( X X , </space/> Y Y ) </space/> m e m s e t ( X X , </space/> Y Y , </space/> s i z e o f ( X X ) ) ; 
 # d e f i n e </space/> F a s t I O </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( n u l l p t r ) ; 
 # d e f i n e </space/> e p s </space/> 1 0 e - 9 
 # d e f i n e </space/> M X </space/> 1 0 0 0 0 0 5 
 # d e f i n e </space/> M D </space/> 1 0 0 0 0 0 0 0 0 7 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l l </space/> m , </space/> n ; 
 i n t </space/> a r [ 1 0 0 0 0 0 9 ] ; 
 b o o l </space/> v l d ( i n t </space/> d ) 
 { 
 i n t </space/> m x </space/> = </space/> 0 , </space/> t , </space/> m t ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a r [ i ] </space/> < = </space/> m x ) 
 { 
 i f </space/> ( a r [ i ] </space/> + </space/> d </space/> < </space/> m x ) 
 r e t u r n </space/> f a l s e ; 
 } 
 e l s e 
 { 
 t </space/> = </space/> ( a r [ i ] </space/> + </space/> d ) ; 
 m t </space/> = </space/> t </space/> % </space/> m ; 
 i f </space/> ( t </space/> < </space/> m </space/> | | </space/> m t </space/> < </space/> m x ) 
 { 
 m x </space/> = </space/> m a x ( m x , </space/> a r [ i ] ) ; 
 } 
 } 
 } 
 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> i , </space/> j , </space/> t e s t </space/> = </space/> 1 , </space/> c a s </space/> = </space/> 0 ; 
 l l </space/> a , </space/> b ; 
 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" t e s t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f 
 / / </space/> s c a n f ( "" % l l d "" , & t e s t ) ; 
 w h i l e </space/> ( t e s t - - ) 
 { 
 s c a n f ( "" % l l d </space/> % l l d "" , </space/> & n , </space/> & m ) ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d "" , </space/> & a r [ i ] ) ; 
 } 
 l l </space/> l o </space/> = </space/> 0 , </space/> h i </space/> = </space/> m , </space/> m i d ; 
 w h i l e </space/> ( h i </space/> - </space/> l o </space/> > </space/> 3 ) 
 { 
 m i d </space/> = </space/> ( l o </space/> + </space/> h i ) </space/> / </space/> 2 ; 
 i f </space/> ( v l d ( m i d ) ) 
 h i </space/> = </space/> m i d ; 
 e l s e 
 l o </space/> = </space/> m i d ; 
 } 
 w h i l e </space/> ( l o </space/> < = </space/> h i ) 
 { 
 i f </space/> ( v l d ( l o ) ) 
 b r e a k ; 
 l o + + ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> l o ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> v [ 3 0 0 0 0 5 ] , </space/> n , </space/> m ; 
 
 b o o l </space/> v e r i f ( i n t </space/> t ) 
 { 
 i n t </space/> u </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( v [ i ] </space/> < </space/> u </space/> & & </space/> u </space/> - </space/> v [ i ] </space/> > </space/> t ) 
 r e t u r n </space/> 0 ; 
 e l s e </space/> i f </space/> ( v [ i ] </space/> > </space/> u </space/> & & </space/> u </space/> + </space/> m </space/> - </space/> v [ i ] </space/> > </space/> t ) 
 u </space/> = </space/> v [ i ] ; 
 r e t u r n </space/> 1 ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> v [ i ] ; 
 i n t </space/> s t </space/> = </space/> 0 , </space/> d r </space/> = </space/> m </space/> - </space/> 1 ; 
 w h i l e </space/> ( s t </space/> < </space/> d r ) 
 { 
 i n t </space/> m i j </space/> = </space/> s t </space/> + </space/> ( d r </space/> - </space/> s t ) </space/> / </space/> 2 ; 
 i f </space/> ( v e r i f ( m i j ) </space/> ! = </space/> 0 ) 
 d r </space/> = </space/> m i j ; 
 e l s e 
 s t </space/> = </space/> m i j </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> s t </space/> < < </space/> ' \ n ' ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v e c t o r < i n t > </space/> a ; 
 v e c t o r < l o n g </space/> l o n g > </space/> x ; 
 i n t </space/> n , </space/> m ; 
 b o o l </space/> s o l v e ( l o n g </space/> l o n g </space/> m a x n ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 x [ i ] </space/> = </space/> a [ i ] ; 
 x [ n </space/> - </space/> 1 ] </space/> = </space/> m i n ( m </space/> - </space/> 1 L L , </space/> x [ n </space/> - </space/> 1 ] </space/> + </space/> m a x n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n </space/> - </space/> 2 ; </space/> i </space/> > = </space/> 0 ; </space/> - - i ) 
 { 
 i f </space/> ( x [ i ] </space/> < = </space/> x [ i </space/> + </space/> 1 ] ) 
 x [ i ] </space/> + = </space/> m i n ( x [ i </space/> + </space/> 1 ] </space/> - </space/> x [ i ] , </space/> m a x n ) ; 
 e l s e 
 { 
 i f </space/> ( m a x n </space/> - </space/> m </space/> + </space/> x [ i ] </space/> < </space/> 0 ) 
 r e t u r n </space/> f a l s e ; 
 x [ i ] </space/> = </space/> m i n ( x [ i </space/> + </space/> 1 ] , </space/> m a x n </space/> - </space/> m </space/> + </space/> x [ i ] ) ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 a . r e s i z e ( n ) ; 
 x . r e s i z e ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l o n g </space/> l o n g </space/> l o </space/> = </space/> 0 , </space/> h i </space/> = </space/> 1 L L </space/> < < </space/> 4 0 ; 
 w h i l e </space/> ( l o </space/> < </space/> h i ) 
 { 
 a u t o </space/> m i d </space/> = </space/> ( l o </space/> + </space/> h i ) </space/> / </space/> 2 ; 
 i f </space/> ( s o l v e ( m i d ) ) 
 h i </space/> = </space/> m i d ; 
 e l s e 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> h i </space/> < < </space/> ' \ n ' ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i n c l u d e </space/> < e x t / p b _ d s / a s s o c _ c o n t a i n e r . h p p > 
 # i n c l u d e </space/> < e x t / p b _ d s / t r e e _ p o l i c y . h p p > 
 u s i n g </space/> n a m e s p a c e </space/> _ _ g n u _ p b d s ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> p s s </space/> = </space/> p a i r < s t r i n g , </space/> s t r i n g > ; 
 u s i n g </space/> p l l </space/> = </space/> p a i r < l l , </space/> l l > ; 
 t y p e d e f </space/> t r e e < l l , </space/> n u l l _ t y p e , </space/> l e s s _ e q u a l < l l > , </space/> r b _ t r e e _ t a g , </space/> t r e e _ o r d e r _ s t a t i s t i c s _ n o d e _ u p d a t e > 
 i n d e x e d _ s e t ; 
 # d e f i n e </space/> e n d l </space/> ' \ n ' ; 
 # d e f i n e </space/> I O </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 c o n s t </space/> l o n g </space/> l o n g </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 v e c t o r < l l > </space/> a ( 3 0 0 0 0 5 ) ; 
 v o i d </space/> s h o w ( v e c t o r < l l > </space/> v e c t ) 
 { 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> v e c t ) 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
 b o o l </space/> o k ( l l </space/> x , </space/> l l </space/> n , </space/> l l </space/> m ) 
 { 
 l l </space/> p r e v </space/> = </space/> 0 ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> > = </space/> p r e v ) 
 { 
 l l </space/> k </space/> = </space/> m </space/> - </space/> ( a [ i ] </space/> - </space/> p r e v ) ; 
 i f </space/> ( k </space/> > </space/> x ) 
 p r e v </space/> = </space/> a [ i ] ; 
 } 
 e l s e 
 { 
 l l </space/> k </space/> = </space/> p r e v </space/> - </space/> a [ i ] ; 
 i f </space/> ( k </space/> > </space/> x ) 
 r e t u r n </space/> f a l s e ; 
 } 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 I O ; 
 l l </space/> i </space/> = </space/> 0 , </space/> j </space/> = </space/> 0 , </space/> m </space/> = </space/> 0 , </space/> n </space/> = </space/> 0 , </space/> k </space/> = </space/> 0 , </space/> t </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l l </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> m </space/> - </space/> 1 , </space/> p r e v </space/> = </space/> 0 , </space/> f l a g </space/> = </space/> 0 , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( o k ( m i d , </space/> n , </space/> m ) ) 
 r </space/> = </space/> m i d </space/> - </space/> 1 , </space/> a n s </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> v i </space/> v e c t o r < l l i > 
 # d e f i n e </space/> _ _ _ </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l i ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l o n g </space/> n , </space/> m , </space/> i , </space/> j , </space/> k , </space/> t , </space/> q , </space/> l , </space/> h , </space/> m i d ; 
 l l i </space/> m n </space/> = </space/> 1 0 0 0 0 0 0 1 0 0 , </space/> m x </space/> = </space/> - 1 L L , </space/> r e s , </space/> s u m </space/> = </space/> 0 L L ; 
 l o n g </space/> i n t </space/> a [ 3 0 0 0 0 5 ] , </space/> t e m p [ 3 0 0 0 0 5 ] ; 
 b o o l </space/> c h e c k ( l o n g </space/> i n t </space/> x ) 
 { 
 l o n g </space/> i n t </space/> l a s t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( a [ i ] </space/> = = </space/> l a s t ) 
 c o n t i n u e ; 
 i f </space/> ( a [ i ] </space/> > </space/> l a s t ) 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> > = </space/> m </space/> & & </space/> ( a [ i ] </space/> + </space/> x ) </space/> % </space/> m </space/> > = </space/> l a s t ) 
 { 
 } 
 e l s e 
 l a s t </space/> = </space/> a [ i ] ; 
 } 
 e l s e 
 { 
 i f </space/> ( a [ i ] </space/> + </space/> x </space/> < </space/> l a s t ) 
 r e t u r n </space/> 0 ; 
 } 
 } 
 r e t u r n </space/> 1 ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 _ _ _ 
 / / </space/> f r e o p e n ( "" C : \ \ U s e r s \ \ h a r s h \ \ D o c u m e n t s \ \ C o m p e t i t i v e </space/> C o d i n g \ \ i n . t x t "" , "" r "" , s t d i n ) ; 
 c i n 
 > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l </space/> = </space/> 0 , </space/> h </space/> = </space/> m ; 
 l o n g </space/> i n t </space/> a n s ; 
 w h i l e </space/> ( l </space/> < = </space/> h ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> h ) </space/> / </space/> 2 ; 
 b o o l </space/> b b </space/> = </space/> c h e c k ( m i d ) ; 
 / / </space/> c o u t < < m i d < < "" </space/> "" < < b b < < "" , \ n "" ; 
 i f </space/> ( b b ) 
 a n s </space/> = </space/> m i d , </space/> h </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> T e m p l a t e </space/> M a d e </space/> B y : </space/> O j a s s v i </space/> K u m a r 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> i o s </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f o ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l o n g </space/> l o n g </space/> i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> m a x 3 ( a , </space/> b , </space/> c ) </space/> m a x ( m a x ( ( a ) , </space/> ( b ) ) , </space/> ( c ) ) 
 # d e f i n e </space/> m a x 4 ( a , </space/> b , </space/> c , </space/> d ) </space/> m a x ( m a x ( ( a ) , </space/> ( b ) ) , </space/> m a x ( ( c ) , </space/> ( d ) ) ) 
 # d e f i n e </space/> m i n 3 ( a , </space/> b , </space/> c ) </space/> m i n ( m i n ( ( a ) , </space/> ( b ) ) , </space/> ( c ) ) 
 # d e f i n e </space/> m i n 4 ( a , </space/> b , </space/> c , </space/> d ) </space/> m i n ( m i n ( ( a ) , </space/> ( b ) ) , </space/> m i n ( ( c ) , </space/> ( d ) ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u p </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> a l l ( V ) </space/> V . b e g i n ( ) , </space/> V . e n d ( ) 
 # d e f i n e </space/> i t v </space/> v e c t o r < l o n g </space/> l o n g </space/> i n t > : : i t e r a t o r 
 # d e f i n e </space/> p l l </space/> p a i r < l o n g </space/> l o n g </space/> i n t , </space/> l o n g </space/> l o n g </space/> i n t > 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> i t p </space/> v e c t o r < p a i r < l o n g </space/> l o n g </space/> i n t , </space/> l o n g </space/> l o n g </space/> i n t > > : : i t e r a t o r 
 # d e f i n e </space/> s l l </space/> s e t < l o n g </space/> l o n g </space/> i n t , </space/> g r e a t e r < l o n g </space/> l o n g </space/> i n t > > 
 # d e f i n e </space/> i t s </space/> s e t < l o n g </space/> l o n g </space/> i n t , </space/> g r e a t e r < l o n g </space/> l o n g </space/> i n t > > : : i t e r a t o r 
 # d e f i n e </space/> d 0 ( x ) </space/> c o u t </space/> < < </space/> ( x ) </space/> < < </space/> "" </space/> "" 
 # d e f i n e </space/> d 1 ( x ) </space/> c o u t </space/> < < </space/> ( x ) </space/> < < </space/> e n d l 
 # d e f i n e </space/> d 2 ( x , </space/> y ) </space/> c o u t </space/> < < </space/> ( x ) </space/> < < </space/> "" </space/> "" </space/> < < </space/> ( y ) </space/> < < </space/> e n d l 
 
 / / </space/> c o n s t </space/> l o n g </space/> d o u b l e </space/> p i </space/> = </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 ; 
 / / </space/> T e m p l a t e </space/> E n d s 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" I N P U T . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" O U T P U T . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 l l </space/> T e s t s </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> T e s t s ; 
 w h i l e </space/> ( T e s t s - - ) 
 { 
 l l </space/> N ; 
 c i n </space/> > > </space/> N ; 
 i f </space/> ( N </space/> < </space/> 9 ) 
 { 
 i f </space/> ( N </space/> = = </space/> 3 ) 
 { 
 c o u t </space/> < < </space/> "" 2 \ n 3 </space/> 2 \ n 3 </space/> 2 \ n "" ; 
 } 
 e l s e </space/> i f </space/> ( N </space/> = = </space/> 4 ) 
 { 
 c o u t </space/> < < </space/> "" 3 \ n 3 </space/> 4 \ n 4 </space/> 2 \ n 4 </space/> 2 \ n "" ; 
 } 
 e l s e 
 { 
 v e c t o r < p l l > </space/> m o v e ; 
 f o ( i , </space/> 3 , </space/> N ) 
 { 
 i f </space/> ( i </space/> = = </space/> 4 ) 
 c o n t i n u e ; 
 m o v e . p b ( { </space/> i , </space/> N </space/> } ) ; 
 } 
 m o v e . p b ( { </space/> N , </space/> 4 </space/> } ) ; 
 m o v e . p b ( { </space/> N , </space/> 4 </space/> } ) ; 
 m o v e . p b ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 m o v e . p b ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 c o u t </space/> < < </space/> m o v e . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> m o v e ) 
 { 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 e l s e 
 { 
 v e c t o r < p l l > </space/> m o v e ; 
 f o ( i , </space/> 3 , </space/> N ) 
 { 
 i f </space/> ( i </space/> = = </space/> 4 </space/> | | </space/> i </space/> = = </space/> 8 ) 
 c o n t i n u e ; 
 e l s e 
 { 
 m o v e . p b ( { </space/> i , </space/> N </space/> } ) ; 
 } 
 } 
 f o ( i , </space/> 0 , </space/> 6 ) 
 { 
 m o v e . p b ( { </space/> N , </space/> 8 </space/> } ) ; 
 } 
 m o v e . p b ( { </space/> 8 , </space/> 4 </space/> } ) ; 
 m o v e . p b ( { </space/> 8 , </space/> 4 </space/> } ) ; 
 m o v e . p b ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 m o v e . p b ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 c o u t </space/> < < </space/> N </space/> + </space/> 5 </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> m o v e ) 
 { 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 
 
 c o n s t </space/> l l </space/> N </space/> = </space/> 1 e 5 ; 
 
 p l l </space/> l l e r s e c t ( p l l </space/> a , </space/> p l l </space/> b ) 
 { 
 i f </space/> ( a . f i r s t </space/> > </space/> b . f i r s t ) 
 { 
 r e t u r n </space/> l l e r s e c t ( b , </space/> a ) ; 
 } 
 i f </space/> ( a . s e c o n d </space/> < </space/> b . f i r s t ) 
 { 
 r e t u r n </space/> m p ( - 1 , </space/> - 1 ) ; 
 } 
 r e t u r n </space/> m p ( b . f i r s t , </space/> m i n ( a . s e c o n d , </space/> b . s e c o n d ) ) ; 
 } 
 
 / / </space/> i n t </space/> m a i n ( ) { 
 / / </space/> 	 i n t </space/> t ; 
 / / </space/> 	 c i n </space/> > > </space/> t ; 
 / / </space/> 	 w h i l e ( t - - ) { 
 / / </space/> 	 	 i n t </space/> a , b , c , d ; 
 / / </space/> 	 	 c o u t </space/> < < </space/> "" f i r s t </space/> i n t e r a v l </space/> "" </space/> < < </space/> e n d l ; 
 / / </space/> 	 	 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 / / </space/> 	 	 c o u t </space/> < < </space/> "" S e f c o n d </space/> "" </space/> < < </space/> e n d l ; 
 / / </space/> 	 	 c i n </space/> > > </space/> c </space/> > > </space/> d ; 
 / / </space/> 	 	 a u t o </space/> a x </space/> = </space/> m p ( a , b ) ; 
 / / </space/> 	 	 a u t o </space/> b x </space/> = </space/> m p ( c , d ) ; 
 / / </space/> 	 	 a u t o </space/> v i </space/> = </space/> l l e r s e c t ( a x , b x ) ; 
 / / </space/> 	 	 c o u t </space/> < < </space/> v i . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> v i . s e c o n d </space/> < < </space/> e n d l ; 
 / / </space/> 	 } 
 / / </space/> } 
 
 v o i d </space/> s o l v e ( i n t </space/> u b , </space/> v e c t o r < p i i > & </space/> a n s ) 
 { 
 / / </space/> c o u t </space/> < < </space/> "" C u r r e n t </space/> "" </space/> < < </space/> u b </space/> < < </space/> e n d l ; 
 i f </space/> ( u b </space/> < = </space/> 2 ) 
 { 
 r e t u r n ; 
 } 
 i n t </space/> n e x t i t e r a t i o n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> u b ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> > = </space/> ( ( u b </space/> + </space/> i </space/> - </space/> 1 ) </space/> / </space/> i ) ) 
 { 
 n e x t i t e r a t i o n </space/> = </space/> i ; 
 b r e a k ; 
 } 
 } 
 / / </space/> c o u t </space/> < < </space/> n e x t i t e r a t i o n </space/> < < </space/> "" </space/> n e x t </space/> i t e r a t i o n </space/> "" </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> n e x t i t e r a t i o n </space/> + </space/> 1 ; </space/> i </space/> < </space/> u b ; </space/> i + + ) 
 { 
 a n s . p b ( m p ( i , </space/> u b ) ) ; 
 } 
 a n s . p b ( m p ( u b , </space/> n e x t i t e r a t i o n ) ) ; 
 a n s . p b ( m p ( u b , </space/> n e x t i t e r a t i o n ) ) ; 
 s o l v e ( n e x t i t e r a t i o n , </space/> a n s ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 / / </space/> c o u t </space/> < < </space/> ( 3 </space/> + </space/> 2 </space/> - </space/> 1 ) </space/> / </space/> 2 </space/> < < </space/> e n d l ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p i i > </space/> a n s ; 
 s o l v e ( n , </space/> a n s ) ; 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a n s . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a n s [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> a n s [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p i l </space/> p a i r < i n t , </space/> l l > 
 # d e f i n e </space/> p l i </space/> p a i r < l l , </space/> i n t > 
 # d e f i n e </space/> p p i </space/> p a i r < p i i , </space/> i n t > 
 # d e f i n e </space/> p i p </space/> p a i r < i n t , </space/> p i i > 
 # d e f i n e </space/> p p p </space/> p a i r < p i i , </space/> p i i > 
 # d e f i n e </space/> p d d </space/> p a i r < d o u b l e , </space/> d o u b l e > 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> m k p </space/> m a k e _ p a i r 
 # d e f i n e </space/> F O R ( i , </space/> l , </space/> r ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> l ; </space/> i </space/> < = </space/> r ; </space/> i + + ) 
 # d e f i n e </space/> L O R ( i , </space/> l , </space/> r ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> l ; </space/> i </space/> < = </space/> r ; </space/> i + + ) 
 # d e f i n e </space/> F O R D ( i , </space/> r , </space/> l ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> r ; </space/> i </space/> > = </space/> l ; </space/> i - - ) 
 # d e f i n e </space/> L O R D ( i , </space/> r , </space/> l ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> r ; </space/> i </space/> > = </space/> l ; </space/> i - - ) 
 # d e f i n e </space/> C L ( x ) </space/> m e m s e t ( x , </space/> 0 , </space/> s i z e o f ( x ) ) 
 # d e f i n e </space/> A L L ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> S Z ( x ) </space/> ( i n t ) ( x . s i z e ( ) ) 
 # d e f i n e </space/> U I ( x ) </space/> ( i n t ) ( x </space/> - </space/> ' A ' ) 
 # d e f i n e </space/> L I ( x ) </space/> ( i n t ) ( x </space/> - </space/> ' a ' ) 
 # d e f i n e </space/> D I ( x ) </space/> ( i n t ) ( x </space/> - </space/> ' 0 ' ) 
 # d e f i n e </space/> L L _ M A X </space/> ( 1 L L </space/> < < </space/> 6 0 ) 
 # d e f i n e </space/> D B </space/> 0 
 # d e f i n e </space/> D B G ( x ) </space/> \ 
 i f </space/> ( D B ) </space/> \ 
 c o u t </space/> < < </space/> # x </space/> < < </space/> "" </space/> : </space/> "" </space/> < < </space/> x </space/> < < </space/> ' \ n ' 
 # d e f i n e </space/> P R A L L ( v ) </space/> \ 
 i f </space/> ( D B ) </space/> \ 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> v ) </space/> \ 
 c o u t </space/> < < </space/> v </space/> < < </space/> ' </space/> ' ; </space/> \ 
 N L ; 
 # d e f i n e </space/> N L </space/> c o u t </space/> < < </space/> ' \ n ' ; 
 # d e f i n e </space/> F N D ( S , </space/> x ) </space/> ( S . f i n d ( x ) </space/> ! = </space/> S . e n d ( ) ) 
 # d e f i n e </space/> b i t ( x , </space/> y ) </space/> ( ! ! ( x </space/> & </space/> ( 1 </space/> < < </space/> y ) ) ) 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 
 i n t </space/> T , </space/> N ; 
 v e c t o r < p i i > </space/> a n s ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 
 c i n </space/> > > </space/> T ; 
 F O R ( t , </space/> 1 , </space/> T ) 
 { 
 c i n </space/> > > </space/> N ; 
 a n s . c l e a r ( ) ; 
 i f </space/> ( N </space/> < = </space/> 6 4 ) 
 { 
 F O R ( i , </space/> 3 , </space/> N </space/> - </space/> 1 ) </space/> a n s . p b ( m k p ( i , </space/> N ) ) ; 
 i n t </space/> x </space/> = </space/> N ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s . p b ( m k p ( N , </space/> 2 ) ) ; 
 x </space/> = </space/> ( x </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 } 
 } 
 e l s e 
 { 
 F O R ( i , </space/> 3 , </space/> N </space/> - </space/> 1 ) 
 { 
 i f </space/> ( i </space/> = = </space/> 6 4 ) 
 c o n t i n u e ; 
 a n s . p b ( m k p ( i , </space/> N ) ) ; 
 } 
 i n t </space/> x </space/> = </space/> N ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s . p b ( m k p ( N , </space/> 6 4 ) ) ; 
 x </space/> = </space/> ( x </space/> + </space/> 6 3 ) </space/> / </space/> 6 4 ; 
 } 
 F O R ( i , </space/> 1 , </space/> 6 ) </space/> a n s . p b ( m k p ( 6 4 , </space/> 2 ) ) ; 
 } 
 c o u t </space/> < < </space/> S Z ( a n s ) </space/> < < </space/> ' \ n ' ; 
 f o r </space/> ( p i i </space/> a i </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> a i . f </space/> < < </space/> ' </space/> ' </space/> < < </space/> a i . s </space/> < < </space/> ' \ n ' ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p l l </space/> p a i r < l o n g </space/> l o n g , </space/> l o n g </space/> l o n g > 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> d e b u g </space/> c o u t </space/> < < </space/> "" h e r e \ n "" 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 2 e 5 </space/> + </space/> 1 5 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n ; 
 m </space/> = </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> v ; 
 w h i l e </space/> ( m </space/> > </space/> 3 ) 
 { 
 n </space/> = </space/> m ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> * </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 { 
 m </space/> = </space/> i ; 
 i f </space/> ( ( i </space/> - </space/> 1 ) </space/> * </space/> ( i </space/> - </space/> 1 ) </space/> < </space/> n ) 
 b r e a k ; 
 v . p b ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 v . p b ( { </space/> n , </space/> m </space/> } ) ; 
 v . p b ( { </space/> n , </space/> m </space/> } ) ; 
 } 
 i f </space/> ( m </space/> = = </space/> 3 ) 
 { 
 v . p b ( { </space/> 3 , </space/> 2 </space/> } ) ; 
 v . p b ( { </space/> 3 , </space/> 2 </space/> } ) ; 
 } 
 c o u t </space/> < < </space/> v . s i z e ( ) ; 
 f o r </space/> ( a u t o </space/> p p </space/> : </space/> v ) 
 { 
 c o u t </space/> < < </space/> "" \ n "" </space/> < < </space/> p p . f </space/> < < </space/> "" </space/> "" </space/> < < </space/> p p . s ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c o u t . t i e ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( 1 2 ) ; 
 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < t i m e . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 l l </space/> k </space/> = </space/> c b r t ( n ) ; 
 l l </space/> c n t </space/> = </space/> 0 ; 
 v e c t o r < p a i r < l l , </space/> l l > > </space/> s o l ; 
 i f </space/> ( n </space/> < </space/> 1 0 ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < i < < "" </space/> "" < < i + 1 < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> i , </space/> i </space/> + </space/> 1 </space/> } ) ; 
 } 
 d o u b l e </space/> n n </space/> = </space/> n ; 
 w h i l e </space/> ( n n </space/> > </space/> 1 ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < n < < "" </space/> "" < < 2 < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> n , </space/> 2 </space/> } ) ; 
 n n </space/> / = </space/> 2 ; 
 } 
 } 
 e l s e 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 8 ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < i < < "" </space/> "" < < i + 1 < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> i , </space/> i </space/> + </space/> 1 </space/> } ) ; 
 } 
 } 
 d o u b l e </space/> n n </space/> = </space/> n ; 
 w h i l e </space/> ( n n </space/> > </space/> 1 ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < n < < "" </space/> "" < < k < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> n , </space/> 8 </space/> } ) ; 
 n n </space/> / = </space/> ( 1 . 0 </space/> * </space/> 8 ) ; 
 } 
 n n </space/> = </space/> 8 ; 
 w h i l e </space/> ( n n </space/> > </space/> 1 ) 
 { 
 c n t + + ; 
 / / </space/> c o u t < < k < < "" </space/> "" < < 2 < < e n d l ; 
 s o l . p u s h _ b a c k ( { </space/> 8 , </space/> 2 </space/> } ) ; 
 n n </space/> / = </space/> 2 ; 
 } 
 } 
 c o u t </space/> < < </space/> c n t </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> u </space/> : </space/> s o l ) 
 { 
 c o u t </space/> < < </space/> u . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> u . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" i o s t r e a m "" 
 # i n c l u d e </space/> "" c l i m i t s "" 
 # i n c l u d e </space/> "" l i s t "" 
 # i n c l u d e </space/> "" q u e u e "" 
 # i n c l u d e </space/> "" s t a c k "" 
 # i n c l u d e </space/> "" s e t "" 
 # i n c l u d e </space/> "" f u n c t i o n a l "" 
 # i n c l u d e </space/> "" a l g o r i t h m "" 
 # i n c l u d e </space/> "" s t r i n g "" 
 # i n c l u d e </space/> "" m a p "" 
 # i n c l u d e </space/> "" u n o r d e r e d _ m a p "" 
 # i n c l u d e </space/> "" u n o r d e r e d _ s e t "" 
 # i n c l u d e </space/> "" i o m a n i p "" 
 # i n c l u d e </space/> "" c m a t h "" 
 # i n c l u d e </space/> "" r a n d o m "" 
 # i n c l u d e </space/> "" b i t s e t "" 
 # i n c l u d e </space/> "" c s t d i o "" 
 # i n c l u d e </space/> "" n u m e r i c "" 
 # i n c l u d e </space/> "" c a s s e r t "" 
 # i n c l u d e </space/> "" c t i m e "" 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 / / </space/> c o n s t e x p r </space/> l o n g </space/> l o n g </space/> i n t </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 / / </space/> c o n s t e x p r </space/> i n t </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 / / </space/> c o n s t e x p r </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t e x p r </space/> l o n g </space/> l o n g </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t e x p r </space/> d o u b l e </space/> E P S </space/> = </space/> 1 e - 8 ; 
 
 / / </space/> i n t </space/> N , </space/> M , </space/> K , </space/> T , </space/> H , </space/> W , </space/> L , </space/> R ; 
 l o n g </space/> l o n g </space/> i n t </space/> N , </space/> M , </space/> K , </space/> T , </space/> H , </space/> W , </space/> L , </space/> R ; 
 
 v o i d </space/> S o l v e ( ) 
 { 
 c i n </space/> > > </space/> N ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a n s ; 
 i n t </space/> n u m </space/> = </space/> N ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> N </space/> - </space/> 1 ; </space/> i </space/> > </space/> 1 ; </space/> i - - ) 
 { 
 w h i l e </space/> ( n u m </space/> / </space/> i </space/> + </space/> ! ! ( n u m </space/> % </space/> i ) </space/> > = </space/> i ) 
 { 
 a n s . p u s h _ b a c k ( { </space/> N , </space/> i </space/> } ) ; 
 n u m </space/> = </space/> n u m </space/> / </space/> i </space/> + </space/> ! ! ( n u m </space/> % </space/> i ) ; 
 } 
 a n s . p u s h _ b a c k ( { </space/> i , </space/> N </space/> } ) ; 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> i . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> i . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 
 T </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 S o l v e ( ) ; 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / / </space/> F i x </space/> t h e </space/> c a u s e , </space/> n o t </space/> t h e </space/> s y m p t o m . 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> d b </space/> d o u b l e 
 # d e f i n e </space/> s f </space/> s c a n f 
 # d e f i n e </space/> p f </space/> p r i n t f 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i </space/> a c o s ( - 1 ) 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> p i i </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> t i m e _ s a v e </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; 
 
 # d e f i n e </space/> D ( x ) </space/> c e r r </space/> < < </space/> _ _ L I N E _ _ </space/> < < </space/> "" : </space/> "" </space/> < < </space/> # x </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> ( x ) </space/> < < </space/> ' \ n ' 
 # d e f i n e </space/> D D ( x , </space/> y ) </space/> c e r r </space/> < < </space/> _ _ L I N E _ _ </space/> < < </space/> "" : </space/> "" </space/> < < </space/> # x </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> # y </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> y </space/> < < </space/> ' \ n ' 
 # d e f i n e </space/> D D D ( x , </space/> y , </space/> z ) </space/> \ 
 c e r r </space/> < < </space/> _ _ L I N E _ _ </space/> < < </space/> "" : </space/> "" </space/> < < </space/> # x </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> # y </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> y </space/> < < </space/> "" </space/> "" </space/> < < </space/> # z </space/> \ 
 < < </space/> "" </space/> = </space/> "" </space/> < < </space/> z </space/> < < </space/> ' \ n ' 
 # d e f i n e </space/> D B G </space/> c e r r </space/> < < </space/> _ _ L I N E _ _ </space/> < < </space/> "" : </space/> H i "" </space/> < < </space/> ' \ n ' 
 
 
 / * - - - - - - - - - - - - - - - - - - - - - - G r a p h </space/> M o v e s - - - - - - - - - - - - - - - - * / 
 / / </space/> c o n s t </space/> l l </space/> d x [ ] = { + 1 , - 1 , + 0 , + 0 } ; 
 / / </space/> c o n s t </space/> l l </space/> d y [ ] = { + 0 , + 0 , + 1 , - 1 } ; 
 / / </space/> c o n s t </space/> l l </space/> d x [ ] = { + 0 , + 0 , + 1 , - 1 , - 1 , + 1 , - 1 , + 1 } ; </space/> / / </space/> K i n g s </space/> M o v e 
 / / </space/> c o n s t </space/> l l </space/> d y [ ] = { - 1 , + 1 , + 0 , + 0 , + 1 , + 1 , - 1 , - 1 } ; </space/> / / </space/> K i n g s </space/> M o v e 
 / / </space/> c o n s t </space/> l l </space/> d x [ ] = { - 2 , </space/> - 2 , </space/> - 1 , </space/> - 1 , </space/> 1 , </space/> 1 , </space/> 2 , </space/> 2 } ; </space/> / / </space/> K n i g h t s </space/> M o v e 
 / / </space/> c o n s t </space/> l l </space/> d y [ ] = { - 1 , </space/> 1 , </space/> - 2 , </space/> 2 , </space/> - 2 , </space/> 2 , </space/> - 1 , </space/> 1 } ; </space/> / / </space/> K n i g h t s </space/> M o v e 
 / * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - * / 
 
 / * - - - - - - - - - - - - - - - - - - - - - - - B i t m a s k - - - - - - - - - - - - - - - - - - * / 
 / / </space/> i n t </space/> S e t ( i n t </space/> N , i n t </space/> p o s ) { r e t u r n </space/> N = N </space/> ( 1 < < p o s ) ; } 
 / / </space/> i n t </space/> r e s e t ( i n t </space/> N , i n t </space/> p o s ) { r e t u r n </space/> N = </space/> N </space/> & </space/> ~ ( 1 < < p o s ) ; } 
 / / </space/> b o o l </space/> c h e c k ( i n t </space/> N , i n t </space/> p o s ) { r e t u r n </space/> ( b o o l ) ( N </space/> & </space/> ( 1 < < p o s ) ) ; } 
 / * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - * / 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / / </space/> f r e o p e n ( "" o u t . t x t "" , "" w "" , s t d o u t ) ; 
 # e n d i f 
 
 t i m e _ s a v e ; 
 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < p i i > </space/> a r ; 
 w h i l e </space/> ( n </space/> > </space/> 2 ) 
 { 
 l l </space/> s q </space/> = </space/> s q r t ( n ) ; 
 i f </space/> ( s q </space/> * </space/> s q </space/> ! = </space/> n ) 
 s q + + ; 
 
 f o r </space/> ( l l </space/> i </space/> = </space/> s q </space/> + </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a r . p b ( { </space/> i , </space/> i </space/> + </space/> 1 </space/> } ) ; 
 } 
 a r . p b ( { </space/> n , </space/> s q </space/> } ) ; 
 a r . p b ( { </space/> n , </space/> s q </space/> } ) ; 
 n </space/> = </space/> s q ; 
 } 
 
 c o u t </space/> < < </space/> a r . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a r . s i z e ( ) ; </space/> i + + ) 
 c o u t </space/> < < </space/> a r [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> a r [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 / / </space/> c o u t < < "" - - - - - - - - - - - "" < < e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 # d e f i n e </space/> m s ( a , </space/> n ) </space/> m e m s e t ( a , </space/> n , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> m a x n </space/> 1 0 0 0 0 5 </space/> + </space/> 5 
 # d e f i n e </space/> i n f </space/> 0 x 3 f 3 f 3 3 f 3 f 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 l l </space/> t , </space/> n , </space/> i , </space/> t e m p , </space/> m , </space/> a , </space/> b , </space/> m a x r , </space/> m a x b ; 
 l l </space/> r [ 1 0 6 ] , </space/> l [ 1 0 7 ] ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> s z [ 3 5 ] , </space/> c n t [ 1 0 ] ; 
 r e p ( i , </space/> 3 0 ) </space/> s z [ i ] </space/> = </space/> p o w ( 2 , </space/> i ) ; 
 r e p ( i , </space/> 7 ) </space/> c n t [ i ] </space/> = </space/> p o w ( 1 2 , </space/> i ) ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 i f </space/> ( n </space/> < = </space/> 1 2 ) 
 { 
 r e p ( i , </space/> 3 0 ) </space/> i f </space/> ( s z [ i ] </space/> > = </space/> n ) 
 { 
 a n s </space/> + = </space/> i ; 
 b r e a k ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> + </space/> n </space/> - </space/> 3 </space/> < < </space/> e n d l ; 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 t e m p </space/> = </space/> n ; 
 w h i l e </space/> ( 1 ) 
 { 
 c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 i f </space/> ( t e m p </space/> & </space/> 1 ) 
 t e m p </space/> = </space/> t e m p </space/> / </space/> 2 </space/> + </space/> 1 ; 
 e l s e 
 t e m p </space/> / = </space/> 2 ; 
 i f </space/> ( t e m p </space/> = = </space/> 1 ) 
 b r e a k ; 
 } 
 } 
 e l s e 
 { 
 r e p ( i , </space/> 7 ) 
 { 
 i f </space/> ( c n t [ i ] </space/> > = </space/> n ) 
 { 
 a n s </space/> + = </space/> i ; 
 b r e a k ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> + </space/> n </space/> < < </space/> e n d l ; 
 f o r </space/> ( i </space/> = </space/> 1 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 t e m p </space/> = </space/> n ; 
 w h i l e </space/> ( 1 ) 
 { 
 c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> 1 2 </space/> < < </space/> e n d l ; 
 i f </space/> ( t e m p </space/> % </space/> 1 2 ) 
 t e m p </space/> = </space/> t e m p </space/> / </space/> 1 2 </space/> + </space/> 1 ; 
 e l s e 
 t e m p </space/> / = </space/> 1 2 ; 
 i f </space/> ( t e m p </space/> = = </space/> 1 ) 
 b r e a k ; 
 } 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> 1 2 ; </space/> i + + ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> 1 2 </space/> < < </space/> e n d l ; 
 r e p ( i , </space/> 4 ) </space/> c o u t </space/> < < </space/> 1 2 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # d e f i n e </space/> _ f o r ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < </space/> ( b ) ; </space/> + + i ) 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 
 i n t </space/> f i n d ( i n t </space/> n ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> n , </space/> m i d , </space/> a n s ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l ) </space/> / </space/> 2 ; 
 i f </space/> ( m i d </space/> > = </space/> c e i l ( 1 . 0 </space/> * </space/> n </space/> / </space/> m i d ) ) 
 { 
 a n s </space/> = </space/> m i d ; 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 { 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 v o i d </space/> s o l v e ( i n t </space/> n , </space/> v e c t o r < p i i > & </space/> a n s , </space/> i n t & </space/> m ) 
 { 
 i f </space/> ( n </space/> < = </space/> 2 ) 
 r e t u r n ; 
 i n t </space/> y </space/> = </space/> f i n d ( n ) ; 
 m </space/> + = </space/> n </space/> - </space/> y </space/> - </space/> 1 ; 
 _ f o r ( i , </space/> y </space/> + </space/> 1 , </space/> n ) 
 { 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 } 
 m </space/> + = </space/> 2 ; 
 a n s . e m p l a c e _ b a c k ( n , </space/> y ) ; 
 a n s . e m p l a c e _ b a c k ( n , </space/> y ) ; 
 s o l v e ( y , </space/> a n s , </space/> m ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p i i > </space/> a n s ; 
 i n t </space/> m </space/> = </space/> 0 ; 
 s o l v e ( n , </space/> a n s , </space/> m ) ; 
 
 c o u t </space/> < < </space/> m </space/> < < </space/> ' \ n ' ; 
 f o r </space/> ( c o n s t </space/> a u t o & </space/> i t </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> i t . f i r s t </space/> < < </space/> ' </space/> ' </space/> < < </space/> i t . s e c o n d </space/> < < </space/> ' \ n ' ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 c o n s t </space/> l l </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 , </space/> i n f </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t c </space/> = </space/> 1 , </space/> t </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> r s ; 
 v e c t o r < i n t > </space/> v e c ; 
 v e c . p u s h _ b a c k ( 2 ) ; 
 i n t </space/> p r v </space/> = </space/> n ; 
 w h i l e </space/> ( p r v </space/> > </space/> 2 ) 
 { 
 i n t </space/> c u r </space/> = </space/> i n t ( s q r t ( p r v </space/> - </space/> 1 ) ) ; 
 i f </space/> ( ( p r v </space/> - </space/> 1 </space/> + </space/> c u r ) </space/> / </space/> c u r </space/> > </space/> c u r ) 
 c u r + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> c u r </space/> + </space/> 1 ; </space/> i </space/> < </space/> p r v ; </space/> i + + ) 
 r s . p u s h _ b a c k ( m a k e _ p a i r ( i , </space/> p r v ) ) ; 
 r s . p u s h _ b a c k ( m a k e _ p a i r ( p r v , </space/> c u r ) ) ; 
 r s . p u s h _ b a c k ( m a k e _ p a i r ( p r v , </space/> c u r ) ) ; 
 p r v </space/> = </space/> c u r ; 
 } 
 c o u t </space/> < < </space/> r s . s i z e ( ) </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> r s ) 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s e c o n d </space/> < < </space/> "" \ n "" ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> c a l c u l a t e ( i n t </space/> n , </space/> i n t </space/> d i v ) 
 { 
 i n t </space/> c o u n t e r </space/> = </space/> 0 ; 
 w h i l e </space/> ( n </space/> ! = </space/> 1 ) 
 { 
 c o u n t e r + + ; 
 n </space/> = </space/> ( n </space/> + </space/> d i v </space/> - </space/> 1 ) </space/> / </space/> d i v ; 
 } 
 r e t u r n </space/> c o u n t e r ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t e s t ; 
 c i n </space/> > > </space/> t e s t ; 
 w h i l e </space/> ( t e s t - - ) 
 { 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> a n s ; 
 i n t </space/> n , </space/> i , </space/> f o ; 
 c i n </space/> > > </space/> n ; 
 i f </space/> ( n </space/> > </space/> 1 6 ) 
 { 
 f o r </space/> ( i </space/> = </space/> 1 7 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 f o </space/> = </space/> c a l c u l a t e ( n , </space/> 1 6 ) ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> f o ; </space/> i + + ) 
 a n s . e m p l a c e _ b a c k ( n , </space/> 1 6 ) ; 
 n </space/> = </space/> 1 6 ; 
 } 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 f o </space/> = </space/> c a l c u l a t e ( n , </space/> 2 ) ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> f o ; </space/> i + + ) 
 a n s . e m p l a c e _ b a c k ( n , </space/> 2 ) ; 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 ' C a u s e </space/> I </space/> l o v e </space/> t h e </space/> a d r e n a l i n e </space/> i n </space/> m y </space/> v e i n s 
 * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> r e p ( i , </space/> j , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> j ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> p r e ( i , </space/> j , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> j ; </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 # d e f i n e </space/> d e b u g ( a . . . ) </space/> \ 
 c o u t </space/> < < </space/> # a </space/> < < </space/> "" : </space/> "" ; </space/> \ 
 f o r </space/> ( a u t o </space/> i t </space/> : </space/> a ) </space/> \ 
 c o u t </space/> < < </space/> i t </space/> < < </space/> "" </space/> "" ; </space/> \ 
 c o u t </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> d e b ( a ) </space/> c o u t </space/> < < </space/> # a </space/> < < </space/> "" </space/> "" </space/> < < </space/> a </space/> < < </space/> e n d l ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 
 c o n s t </space/> s t r i n g </space/> n o </space/> = </space/> "" N O "" , </space/> y e s </space/> = </space/> "" Y E S "" ; 
 c o n s t </space/> l l </space/> i n f </space/> = </space/> 1 e 1 8 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l d </space/> p i </space/> = </space/> a c o s l ( - 1 . 0 ) ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a n s ; 
 i f </space/> ( n </space/> < = </space/> 7 0 ) 
 { 
 p r e ( i , </space/> n </space/> - </space/> 1 , </space/> 3 ) </space/> a n s . p u s h _ b a c k ( { </space/> i , </space/> n </space/> } ) ; 
 i n t </space/> n 1 </space/> = </space/> n ; 
 w h i l e </space/> ( n </space/> > </space/> 1 ) 
 { 
 n </space/> = </space/> c e i l ( n </space/> / </space/> ( d o u b l e ) 2 ) ; 
 a n s . p u s h _ b a c k ( { </space/> n 1 , </space/> 2 </space/> } ) ; 
 / / </space/> c o u t < < n 1 < < "" </space/> "" < < 2 < < e n d l ; 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 r e p ( i , </space/> 0 , </space/> a n s . s i z e ( ) ) </space/> c o u t </space/> < < </space/> a n s [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> a n s [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 e l s e 
 { 
 p r e ( i , </space/> n </space/> - </space/> 1 , </space/> 3 ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 6 4 ) 
 a n s . p u s h _ b a c k ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 i n t </space/> n 1 </space/> = </space/> n ; 
 w h i l e </space/> ( n </space/> > </space/> 1 ) 
 { 
 n </space/> = </space/> c e i l ( n </space/> / </space/> ( d o u b l e ) 6 4 ) ; 
 a n s . p u s h _ b a c k ( { </space/> n 1 , </space/> 6 4 </space/> } ) ; 
 / / </space/> c o u t < < n 1 < < "" </space/> "" < < 2 < < e n d l ; 
 } 
 r e p ( i , </space/> 0 , </space/> 6 ) </space/> a n s . p u s h _ b a c k ( { </space/> 6 4 , </space/> 2 </space/> } ) ; 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 r e p ( i , </space/> 0 , </space/> a n s . s i z e ( ) ) </space/> c o u t </space/> < < </space/> a n s [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> a n s [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 / / 	 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / 	 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 f a s t ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f ( n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f o ( n ) </space/> f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v p </space/> v e c t o r < p i i > 
 # d e f i n e </space/> t e s t </space/> \ 
 i n t </space/> t t ; </space/> \ 
 c i n </space/> > > </space/> t t ; </space/> \ 
 w h i l e </space/> ( t t - - ) 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 v o i d </space/> f a s t i o ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" a i n . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" a o u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t i o ( ) ; 
 t e s t 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v p </space/> a n s ; 
 i f </space/> ( n </space/> < = </space/> 3 2 ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s . p b ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 i n t </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s . p b ( { </space/> n , </space/> 2 </space/> } ) ; 
 x </space/> = </space/> ( x </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 } 
 } 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 3 2 ) 
 { 
 a n s . p b ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 } 
 i n t </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 a n s . p b ( { </space/> n , </space/> 3 2 </space/> } ) ; 
 x </space/> = </space/> ( x </space/> + </space/> 3 1 ) </space/> / </space/> 3 2 ; 
 } 
 f ( 5 ) 
 { 
 a n s . p b ( { </space/> 3 2 , </space/> 2 </space/> } ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a n s ) 
 { 
 c o u t </space/> < < </space/> x . f f </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s s </space/> < < </space/> e n d l ; 
 } 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c o u t . t i e ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a n s ; 
 w h i l e </space/> ( n </space/> > </space/> 2 ) 
 { 
 i n t </space/> s </space/> = </space/> s q r t ( n ) </space/> + </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> s </space/> + </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 a n s . e m p l a c e _ b a c k ( n , </space/> s ) ; 
 a n s . e m p l a c e _ b a c k ( n , </space/> s ) ; 
 n </space/> = </space/> s ; 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> e l </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> e l . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> e l . s e c o n d </space/> < < </space/> "" \ n "" ; 
 } 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 
 l l </space/> p o w e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> 1 ; 
 l l </space/> r e s </space/> = </space/> p o w e r ( a , </space/> b </space/> / </space/> 2 ) ; 
 r e s </space/> = </space/> r e s </space/> * </space/> r e s ; 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a ; 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( 0 ) ; 
 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> v ; 
 i n t </space/> i </space/> = </space/> n ; 
 w h i l e </space/> ( i </space/> > </space/> 2 ) 
 { 
 i n t </space/> j </space/> = </space/> i </space/> - </space/> 1 ; 
 / / </space/> l l </space/> x </space/> = </space/> ( j - 1 ) * ( j - 1 ) ; 
 w h i l e </space/> ( ( l l ) ( j </space/> - </space/> 1 ) </space/> * </space/> ( j </space/> - </space/> 1 ) </space/> > = </space/> i </space/> & & </space/> j </space/> > </space/> 2 ) 
 { 
 v . p u s h _ b a c k ( { </space/> i , </space/> j </space/> } ) ; 
 j - - ; 
 } 
 v . p u s h _ b a c k ( { </space/> j , </space/> i </space/> } ) ; 
 v . p u s h _ b a c k ( { </space/> j , </space/> i </space/> } ) ; 
 i </space/> = </space/> j ; 
 } 
 c o u t </space/> < < </space/> ( l l ) v . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> v ) 
 { 
 c o u t </space/> < < </space/> a . s e c o n d </space/> < < </space/> ' </space/> ' </space/> < < </space/> a . f i r s t </space/> < < </space/> e n d l ; 
 } 
 } 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> r e p ( i , </space/> m , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> m ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> p e r ( i , </space/> m , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> m ; </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> I N F </space/> 0 x 3 f 3 f 3 f 3 f 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> N ; 
 c i n </space/> > > </space/> N ; 
 i f </space/> ( N </space/> = = </space/> 2 ) 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> "" \ n "" ; 
 i f </space/> ( N </space/> < = </space/> 8 ) 
 { 
 i n t </space/> s u m </space/> = </space/> N </space/> - </space/> 3 ; 
 i n t </space/> x </space/> = </space/> N ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 x </space/> = </space/> c e i l ( ( d o u b l e ) x </space/> / </space/> ( d o u b l e ) 2 ) ; 
 s u m + + ; 
 } 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> "" \ n "" ; 
 r e p ( i , </space/> 3 , </space/> N </space/> - </space/> 1 ) </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> N </space/> < < </space/> ' \ n ' ; 
 r e p ( i , </space/> 1 , </space/> s u m </space/> - </space/> ( N </space/> - </space/> 3 ) ) 
 { 
 c o u t </space/> < < </space/> N </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 e l s e 
 { 
 i n t </space/> s u m </space/> = </space/> N </space/> - </space/> 4 ; 
 i n t </space/> x </space/> = </space/> N ; 
 w h i l e </space/> ( x </space/> > </space/> 1 ) 
 { 
 x </space/> = </space/> c e i l ( ( d o u b l e ) x </space/> / </space/> ( d o u b l e ) 8 ) ; 
 s u m + + ; 
 } 
 s u m </space/> + = </space/> 3 ; 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> "" \ n "" ; 
 r e p ( i , </space/> 3 , </space/> N </space/> - </space/> 1 ) </space/> i f </space/> ( i </space/> ! = </space/> 8 ) </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> N </space/> < < </space/> "" \ n "" ; 
 r e p ( i , </space/> 1 , </space/> ( s u m </space/> - </space/> ( N </space/> - </space/> 1 ) ) ) </space/> c o u t </space/> < < </space/> N </space/> < < </space/> "" </space/> "" </space/> < < </space/> 8 </space/> < < </space/> "" \ n "" ; 
 r e p ( i , </space/> 1 , </space/> 3 ) </space/> c o u t </space/> < < </space/> 8 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> "" b i t s / s t d c + + . h "" 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 
 u s i n g </space/> v i </space/> = </space/> v e c t o r < i n t > ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> r s z </space/> r e s i z e 
 # d e f i n e </space/> a l l ( x ) </space/> b e g i n ( x ) , </space/> e n d ( x ) 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( x ) . s i z e ( ) 
 
 u s i n g </space/> p i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> i n f </space/> = </space/> l l ( 1 e 1 8 ) ; 
 c o n s t </space/> d o u b l e </space/> P I </space/> = </space/> a c o s ( - 1 ) , </space/> e p s </space/> = </space/> 1 e - 9 ; 
 
 / * 
 l l </space/> f a s t _ p o w ( i n t </space/> a , </space/> i n t </space/> p ) </space/> { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( p ) </space/> { 
 i f </space/> ( p </space/> % </space/> 2 </space/> = = </space/> 0 ) </space/> { 
 a </space/> = </space/> a </space/> * </space/> 1 l l </space/> * </space/> a </space/> % </space/> m o d ; 
 p </space/> / = </space/> 2 ; 
 } </space/> e l s e </space/> { 
 r e s </space/> = </space/> r e s </space/> * </space/> 1 l l </space/> * </space/> a </space/> % </space/> m o d ; 
 p - - ; 
 } 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 
 l l </space/> f a c t ( i n t </space/> n ) </space/> { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) </space/> { 
 r e s </space/> = </space/> r e s </space/> * </space/> 1 l l </space/> * </space/> i </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 l l </space/> c ( i n t </space/> n , </space/> i n t </space/> k ) </space/> { 
 r e t u r n </space/> f a c t ( n ) </space/> * </space/> 1 l l </space/> * </space/> f a s t _ p o w ( f a c t ( k ) , </space/> m o d </space/> - </space/> 2 ) </space/> % </space/> m o d </space/> * </space/> 1 l l </space/> * </space/> f a s t _ p o w ( f a c t ( n </space/> - </space/> k ) , </space/> m o d </space/> - </space/> 2 ) </space/> % 
 m o d ; 
 } 
 * / 
 
 c o n s t </space/> i n t </space/> m x a </space/> = </space/> 5 e 6 ; 
 / / </space/> i n t </space/> s i e v e [ m x a + 5 ] ; 
 / / </space/> l l </space/> n c r [ m x a + 5 ] [ m x a + 5 ] ; 
 
 / * 
 v o i d </space/> i n i t ( ) </space/> { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> m x a ; </space/> + + i ) </space/> { 
 n c r [ i ] [ i ] </space/> = </space/> n c r [ i ] [ 0 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < </space/> i ; </space/> + + j ) </space/> { 
 n c r [ i ] [ j ] </space/> = </space/> ( n c r [ i - 1 ] [ j - 1 ] </space/> + </space/> n c r [ i - 1 ] [ j ] ) </space/> % </space/> m o d ; 
 } 
 } 
 s i e v e [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> m x a ; </space/> + + i ) </space/> { 
 i f </space/> ( s i e v e [ i ] ) </space/> c o n t i n u e ; 
 s i e v e [ i ] </space/> = </space/> i ; 
 f o r </space/> ( l l </space/> j </space/> = </space/> i * 1 l l * i ; </space/> j </space/> < = </space/> m x a ; </space/> j </space/> + = </space/> i ) </space/> s i e v e [ j ] </space/> = </space/> i ; 
 } 
 } 
 * / 
 
 c o n s t </space/> i n t </space/> m x n </space/> = </space/> 5 e 3 ; 
 
 i n t </space/> n ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 
 v e c t o r < p i > </space/> a n s ; 
 v e c t o r < b o o l > </space/> r o o t ( n </space/> + </space/> 1 ) ; 
 i n t </space/> c u r </space/> = </space/> n ; 
 w h i l e </space/> ( c u r </space/> > </space/> 2 ) 
 { 
 r o o t [ c u r ] </space/> = </space/> 1 ; 
 c u r </space/> = </space/> c e i l ( s q r t ( c u r ) ) ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( ! r o o t [ i ] ) 
 a n s . p b ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 
 i n t </space/> p r e </space/> = </space/> n ; 
 c u r </space/> = </space/> c e i l ( s q r t ( n ) ) ; 
 w h i l e </space/> ( t r u e ) 
 { 
 a n s . p b ( { </space/> p r e , </space/> c u r </space/> } ) ; 
 a n s . p b ( { </space/> p r e , </space/> c u r </space/> } ) ; 
 
 p r e </space/> = </space/> c u r ; 
 c u r </space/> = </space/> c e i l ( s q r t ( c u r ) ) ; 
 
 i f </space/> ( p r e </space/> < = </space/> 2 ) 
 b r e a k ; 
 } 
 
 c o u t </space/> < < </space/> s z ( a n s ) </space/> < < </space/> ' \ n ' ; 
 f o r </space/> ( c o n s t </space/> a u t o & </space/> p </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> p . f </space/> < < </space/> ' </space/> ' </space/> < < </space/> p . s </space/> < < </space/> ' \ n ' ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 / / </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 
 
 w h i l e </space/> ( t - - </space/> > </space/> 0 ) 
 s o l v e ( ) ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> e n d l l </space/> ' \ n ' 
 v o i d </space/> s o l v e ( v o i d ) ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 l l </space/> _ _ _ ; 
 c i n </space/> > > </space/> _ _ _ ; 
 w h i l e </space/> ( _ _ _ - - ) 
 s o l v e ( ) ; 
 } 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < l l , </space/> l l > > </space/> a n s ; 
 l l </space/> i </space/> = </space/> n , </space/> j </space/> = </space/> i , </space/> c </space/> = </space/> 0 ; 
 w h i l e </space/> ( - - j </space/> > </space/> 1 ) 
 i f </space/> ( ( j </space/> - </space/> 1 ) </space/> * </space/> ( j </space/> - </space/> 1 ) </space/> < </space/> i ) 
 a n s . p u s h _ b a c k ( { </space/> i , </space/> j </space/> } ) , </space/> a n s . p u s h _ b a c k ( { </space/> i , </space/> j </space/> } ) , </space/> i </space/> = </space/> j ; 
 e l s e 
 a n s . p u s h _ b a c k ( { </space/> j , </space/> i </space/> } ) ; 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l l ; 
 f o r </space/> ( a u t o & </space/> x </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> ' </space/> ' </space/> < < </space/> x . s e c o n d </space/> < < </space/> e n d l l ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> M i n ( a , </space/> b , </space/> c ) </space/> m i n ( a , </space/> m i n ( b , </space/> c ) ) 
 # d e f i n e </space/> M a x ( a , </space/> b , </space/> c ) </space/> m a x ( a , </space/> m a x ( b , </space/> c ) ) 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> d o u b l e </space/> p i </space/> = </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 ; 
 c o n s t </space/> d o u b l e </space/> e p s </space/> = </space/> 1 e - 8 ; 
 
 i n t </space/> s h a n g ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> % </space/> b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a </space/> / </space/> b ; 
 r e t u r n </space/> a </space/> / </space/> b </space/> + </space/> 1 ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n t </space/> m </space/> = </space/> 0 ; 
 i f </space/> ( n </space/> < = </space/> 1 6 ) 
 { 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 i n t </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> ! = </space/> 1 ) 
 { 
 c n t + + ; 
 x </space/> = </space/> s h a n g ( x , </space/> 2 ) ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> 3 </space/> + </space/> c n t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' </space/> < < </space/> i </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> c n t ; </space/> i + + ) 
 c o u t </space/> < < </space/> n </space/> < < </space/> ' </space/> ' </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 i n t </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> ! = </space/> 1 ) 
 { 
 c n t + + ; 
 x </space/> = </space/> s h a n g ( x , </space/> 1 6 ) ; 
 } 
 c o u t </space/> < < </space/> n </space/> + </space/> c n t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> = = </space/> 1 6 ) 
 c o n t i n u e ; 
 c o u t </space/> < < </space/> i </space/> < < </space/> ' </space/> ' </space/> < < </space/> i </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> c n t ; </space/> i + + ) 
 c o u t </space/> < < </space/> n </space/> < < </space/> ' </space/> ' </space/> < < </space/> 1 6 </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 4 ; </space/> i + + ) 
 c o u t </space/> < < </space/> 1 6 </space/> < < </space/> ' </space/> ' </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 } 
 } 
 / / </space/> s y s t e m ( "" p a u s e "" ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l o o p ( i , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> l o o p n ( i , </space/> j , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> j ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> m _ a r r ( a r r , </space/> n ) </space/> v e c t o r < l l > </space/> a r r ( n ) 
 # d e f i n e </space/> m _ a r r e ( a r r ) </space/> v e c t o r < l l > </space/> a r r 
 # d e f i n e </space/> m _ s e t ( s a t ) </space/> s e t < l l > </space/> s a t 
 # d e f i n e </space/> p p n ( n a m e ) </space/> p a i r < l l , </space/> l l > </space/> n a m e 
 # d e f i n e </space/> p p </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> s o r t _ a l l ( a r r ) </space/> s o r t ( a r r . b e g i n ( ) , </space/> a r r . e n d ( ) ) 
 # d e f i n e </space/> p i </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 
 l l </space/> g c d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( a </space/> = = </space/> 0 ) 
 r e t u r n </space/> b ; 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> g c d ( b </space/> % </space/> a , </space/> a ) ; 
 } 
 
 l l </space/> p o w e r ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( b </space/> > </space/> 0 ) 
 { 
 i f </space/> ( b </space/> % </space/> 2 </space/> ! = </space/> 0 ) 
 r e s </space/> = </space/> ( r e s </space/> * </space/> 1 l l </space/> * </space/> a ) </space/> % </space/> m o d ; 
 b </space/> / = </space/> 2 ; 
 a </space/> = </space/> ( a </space/> * </space/> 1 l l </space/> * </space/> a ) </space/> % </space/> m o d ; 
 } 
 
 r e t u r n </space/> r e s ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p p > </space/> r e s ; 
 i f </space/> ( n </space/> < = </space/> 4 ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 r e s . p u s h _ b a c k ( { </space/> i , </space/> 2 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> i , </space/> 2 </space/> } ) ; 
 } 
 } 
 e l s e </space/> i f </space/> ( n </space/> < = </space/> 1 6 ) 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 3 ; </space/> i - - ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 4 ) 
 { 
 r e s . p u s h _ b a c k ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 } 
 
 r e s . p u s h _ b a c k ( { </space/> n , </space/> 4 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> n , </space/> 4 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 } 
 e l s e 
 { 
 f o r </space/> ( l l </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 3 ; </space/> i - - ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 4 </space/> & & </space/> i </space/> ! = </space/> 1 6 ) 
 { 
 r e s . p u s h _ b a c k ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 } 
 
 r e s . p u s h _ b a c k ( { </space/> n , </space/> 1 6 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> n , </space/> 1 6 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> n , </space/> 1 6 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> n , </space/> 1 6 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> n , </space/> 1 6 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> 1 6 , </space/> 4 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> 1 6 , </space/> 4 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 r e s . p u s h _ b a c k ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 } 
 
 l l </space/> l </space/> = </space/> r e s . s i z e ( ) ; 
 c o u t </space/> < < </space/> l </space/> < < </space/> e n d l ; 
 l o o p ( i , </space/> l ) 
 { 
 c o u t </space/> < < </space/> r e s [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> r e s [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> / / </space/> / / * * * c o u n t = 2 * * * / / 
 / / </space/> / / </space/> / / * * * T r y i n g </space/> t o </space/> m a k e </space/> i t </space/> 6 0 * * * / / 
 / / </space/> / / * * * </space/> W h a t </space/> i f </space/> n = = 1 * * * / / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 / / </space/> i n t </space/> k ; 
 / / </space/> c i n </space/> > > </space/> k ; 
 / / </space/> / / </space/> 2 + 1 + 5 = 8 
 / / </space/> i n t </space/> a [ n + 2 ] = { 0 } ; 
 / / </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n + 1 ; i + + ) { 
 / / </space/> 	 a [ i ] </space/> = </space/> i </space/> + </space/> 1 ; 
 / / </space/> } 
 / / </space/> i n t </space/> c n t </space/> = </space/> 0 ; 
 / / </space/> w h i l e </space/> ( n > 1 ) 
 / / </space/> { 
 / / </space/> 	 n </space/> = </space/> n </space/> / </space/> k ; 
 / / </space/> 	 i f ( n % k ) { 
 / / </space/> 	 	 n + + ; 
 / / </space/> 	 } 
 / / </space/> 	 c n t + + ; 
 / / </space/> } 
 
 / / </space/> w h i l e </space/> ( k > 1 ) 
 / / </space/> { 
 / / </space/> 	 k </space/> = </space/> k </space/> / </space/> 8 ; 
 / / </space/> 	 i f ( k % 8 ) { 
 / / </space/> 	 	 k + + ; 
 / / </space/> 	 } 
 / / </space/> 	 c n t + + ; 
 / / </space/> } 
 
 / / </space/> c o u t </space/> < < </space/> c n t + 3 </space/> < < </space/> e n d l ; 
 / / </space/> 1 0 0 0 0 0 / 1 0 = > 1 0 0 0 0 / 1 0 - > 1 0 0 0 / 1 0 - > 1 0 0 / 1 0 - > 1 0 / 1 0 - > 1 
 
 / / </space/> 1 0 / 2 - > 5 
 / / </space/> 5 / 2 - > 3 
 / / </space/> 3 / 2 - > 2 
 / / </space/> 2 / 2 - > 1 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a r r ; 
 i f </space/> ( n </space/> < = </space/> 8 ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a r r . p u s h _ b a c k ( m a k e _ p a i r ( i , </space/> i </space/> + </space/> 1 ) ) ; 
 } 
 i n t </space/> m </space/> = </space/> n ; 
 w h i l e </space/> ( n </space/> > </space/> 1 ) 
 { 
 n </space/> = </space/> n </space/> / </space/> 2 </space/> + </space/> n </space/> % </space/> 2 ; 
 a r r . p u s h _ b a c k ( m a k e _ p a i r ( m , </space/> 2 ) ) ; 
 } 
 c o u t </space/> < < </space/> a r r . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a r r . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> a r r [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 e l s e 
 { 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> 8 ; </space/> i + + ) 
 { 
 a r r . p u s h _ b a c k ( m a k e _ p a i r ( i , </space/> i </space/> + </space/> 1 ) ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 9 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a r r . p u s h _ b a c k ( m a k e _ p a i r ( i , </space/> i </space/> + </space/> 1 ) ) ; 
 } 
 
 i n t </space/> n u m </space/> = </space/> n ; 
 w h i l e </space/> ( n u m </space/> > </space/> 1 ) 
 { 
 n u m </space/> = </space/> n u m </space/> / </space/> 8 ; 
 i f </space/> ( n u m </space/> % </space/> 8 ) 
 { 
 n u m + + ; 
 } 
 a r r . p u s h _ b a c k ( m a k e _ p a i r ( n , </space/> 8 ) ) ; 
 } 
 / / </space/> c o u t </space/> < < </space/> "" H E S L L O "" </space/> < < </space/> e n d l ; 
 a r r . p u s h _ b a c k ( m a k e _ p a i r ( 8 , </space/> 2 ) ) ; 
 a r r . p u s h _ b a c k ( m a k e _ p a i r ( 8 , </space/> 2 ) ) ; 
 a r r . p u s h _ b a c k ( m a k e _ p a i r ( 8 , </space/> 2 ) ) ; 
 
 c o u t </space/> < < </space/> a r r . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a r r . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> a r r [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> l o n g </space/> t ; 
 t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
 
 / / </space/> 1 </space/> 2 </space/> 3 </space/> 4 </space/> 5 </space/> 6 </space/> 7 </space/> 8 </space/> 9 </space/> 1 0 </space/> 1 1 </space/> 1 2 </space/> 1 3 </space/> 1 4 </space/> 1 5 </space/> 1 6 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < m a t h . h > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> p r i n t ( a , </space/> n ) </space/> \ 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) </space/> \ 
 { </space/> \ 
 c o u t </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" ; </space/> \ 
 } </space/> \ 
 c o u t </space/> < < </space/> "" \ n "" ; 
 # d e f i n e </space/> e </space/> ' \ n ' 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> M A X </space/> 1 0 0 0 0 0 6 
 # d e f i n e </space/> p </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 
 # d e f i n e </space/> m k </space/> m a k e _ p a i r 
 # d e f i n e </space/> M E M ( a , </space/> b ) </space/> m e m s e t ( a , </space/> ( b ) , </space/> s i z e o f ( a ) ) 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p i i ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> V I ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> V L ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p l l ; 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f u ( i , </space/> a , </space/> n ) </space/> f o r </space/> ( i </space/> = </space/> a ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f d ( i , </space/> n , </space/> a ) </space/> f o r </space/> ( i </space/> = </space/> n ; </space/> i </space/> > = </space/> a ; </space/> i - - ) 
 # d e f i n e </space/> g i ( n ) </space/> s c a n f ( "" % d "" , </space/> & n ) 
 # d e f i n e </space/> g l ( n ) </space/> s c a n f ( "" % l l d "" , </space/> & n ) 
 # d e f i n e </space/> p l ( n ) </space/> p r i n t f ( "" % l l d "" , </space/> n ) 
 # d e f i n e </space/> p i ( n ) </space/> p r i n t f ( "" % d "" , </space/> n ) 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n , </space/> n u m </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < v e c t o r < i n t > </space/> > </space/> a n s ; 
 
 i n t </space/> y </space/> = </space/> n ; 
 w h i l e </space/> ( y </space/> ! = </space/> 2 ) 
 { 
 i n t </space/> x </space/> = </space/> y ; 
 y </space/> = </space/> c e i l ( ( d o u b l e ) s q r t ( x </space/> * </space/> 1 . 0 ) ) ; 
 
 / / </space/> m a k e </space/> y </space/> + </space/> 1 </space/> t o </space/> x </space/> - </space/> 1 </space/> a s </space/> 1 
 i n t </space/> s t a r t </space/> = </space/> y </space/> + </space/> 1 ; 
 w h i l e </space/> ( s t a r t </space/> ! = </space/> x ) 
 { 
 a n s . p u s h _ b a c k ( { </space/> s t a r t , </space/> x </space/> } ) ; 
 s t a r t + + ; 
 n u m + + ; 
 } 
 
 / / </space/> m a k e </space/> x t h </space/> e l e m e n t </space/> a s </space/> 1 
 a n s . p u s h _ b a c k ( { </space/> x , </space/> y </space/> } ) ; 
 a n s . p u s h _ b a c k ( { </space/> x , </space/> y </space/> } ) ; 
 n u m </space/> = </space/> n u m </space/> + </space/> 2 ; 
 } 
 
 c o u t </space/> < < </space/> n u m </space/> < < </space/> "" \ n </space/> "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a n s . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a n s [ i ] [ 0 ] </space/> < < </space/> "" </space/> "" </space/> < < </space/> a n s [ i ] [ 1 ] </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> P B </space/> p u s h _ b a c k 
 # d e f i n e </space/> M P </space/> m a k e _ p a i r 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> i , </space/> j , </space/> k , </space/> l , </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < l l , </space/> l l > </space/> > </space/> v ; 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 4 </space/> & & </space/> i </space/> ! = </space/> 1 6 ) 
 v . P B ( { </space/> i , </space/> i </space/> + </space/> 1 </space/> } ) ; 
 } 
 i f </space/> ( n </space/> > </space/> 1 6 ) 
 { 
 j </space/> = </space/> n ; 
 w h i l e </space/> ( j </space/> > </space/> 1 ) 
 { 
 v . P B ( { </space/> n , </space/> 1 6 </space/> } ) ; 
 j </space/> = </space/> ( j </space/> + </space/> 1 5 ) </space/> / </space/> 1 6 ; 
 } 
 v . P B ( { </space/> 1 6 , </space/> 4 </space/> } ) ; 
 v . P B ( { </space/> 1 6 , </space/> 4 </space/> } ) ; 
 v . P B ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 v . P B ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 } 
 e l s e 
 { 
 j </space/> = </space/> n ; 
 w h i l e </space/> ( j </space/> > </space/> 1 ) 
 { 
 v . P B ( { </space/> n , </space/> 2 </space/> } ) ; 
 j </space/> = </space/> ( j </space/> + </space/> 1 ) </space/> / </space/> 2 ; 
 } 
 i f </space/> ( n </space/> > </space/> 4 ) 
 { 
 v . P B ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 v . P B ( { </space/> 4 , </space/> 2 </space/> } ) ; 
 } 
 } 
 c o u t </space/> < < </space/> v . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 c o u t </space/> < < </space/> v [ i ] . F </space/> < < </space/> "" </space/> "" </space/> < < </space/> v [ i ] . S </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> s p e c i a l [ 2 0 0 0 1 0 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 1 ; </space/> t </space/> < = </space/> T ; </space/> t + + ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s p e c i a l [ i ] </space/> = </space/> f a l s e ; 
 v e c t o r < i n t > </space/> v ; 
 f o r </space/> ( i n t </space/> t m p </space/> = </space/> n ; </space/> t m p </space/> > </space/> 2 ; </space/> t m p </space/> = </space/> ( i n t ) ( c e i l ( s q r t ( t m p ) ) ) ) 
 { 
 s p e c i a l [ t m p ] </space/> = </space/> t r u e ; 
 v . p u s h _ b a c k ( t m p ) ; 
 } 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> a n s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( s p e c i a l [ i ] ) 
 c o n t i n u e ; 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> i , </space/> n </space/> } ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> v . s i z e ( ) </space/> - </space/> 1 ) 
 { 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> v [ i ] , </space/> v [ i </space/> + </space/> 1 ] </space/> } ) ; 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> v [ i ] , </space/> v [ i </space/> + </space/> 1 ] </space/> } ) ; 
 } 
 e l s e 
 { 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> v [ i ] , </space/> 2 </space/> } ) ; 
 a n s . p u s h _ b a c k ( ( p a i r < i n t , </space/> i n t > ) { </space/> v [ i ] , </space/> 2 </space/> } ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a n s . s i z e ( ) ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a n s [ i ] . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> a n s [ i ] . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u i n t </space/> u n s i g n e d </space/> i n t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> s t r </space/> s t r i n g 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> s z ( a ) </space/> ( i n t ) ( a . s i z e ( ) ) 
 # d e f i n e </space/> R E P ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( i n t ) n ; </space/> + + i ) 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 # d e f i n e </space/> r a l l ( x ) </space/> ( x ) . r b e g i n ( ) , </space/> ( x ) . r e n d ( ) 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> I N F </space/> = </space/> 1 e 1 8 ; 
 c o n s t </space/> d o u b l e </space/> P I </space/> = </space/> a c o s ( - 1 . 0 ) ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> ( i n t ) 3 e 5 </space/> + </space/> 7 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i f </space/> ( n </space/> < = </space/> 1 2 ) 
 { 
 i n t </space/> a n s </space/> = </space/> n </space/> - </space/> 3 ; 
 i n t </space/> l a s t </space/> = </space/> n ; 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 w h i l e </space/> ( l a s t </space/> > </space/> 1 ) 
 { 
 l a s t </space/> = </space/> l a s t </space/> / </space/> 2 </space/> + </space/> l a s t </space/> % </space/> 2 ; 
 + + c n t ; 
 } 
 c o u t </space/> < < </space/> c n t </space/> + </space/> a n s </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> i </space/> + </space/> 1 </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> c n t ; </space/> + + i ) 
 c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 i n t </space/> a n s </space/> = </space/> n </space/> - </space/> 4 ; 
 i n t </space/> c n t </space/> = </space/> 0 ; 
 i n t </space/> l a s t </space/> = </space/> n ; 
 w h i l e </space/> ( l a s t </space/> > </space/> 1 ) 
 { 
 l a s t </space/> = </space/> l a s t </space/> / </space/> 1 2 </space/> + </space/> ( l a s t </space/> % </space/> 1 2 </space/> ? </space/> 1 </space/> : </space/> 0 ) ; 
 + + c n t ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> + </space/> c n t </space/> + </space/> 4 </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 1 2 ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> i </space/> + </space/> 1 </space/> < < </space/> "" \ n "" ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> c n t ; </space/> + + i ) 
 c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> 1 2 </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 4 ; </space/> + + i ) 
 c o u t </space/> < < </space/> 1 2 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 c o u t . t i e ( n u l l p t r ) ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 v o i d </space/> f a s t ( v o i d ) </space/> _ _ a t t r i b u t e _ _ ( ( c o n s t r u c t o r ) ) ; 
 v o i d </space/> f a s t ( v o i d ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> c o u n t </space/> = </space/> 0 ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> a n s ; 
 c i n </space/> > > </space/> n ; 
 i f </space/> ( n </space/> < = </space/> 1 3 ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 c o u n t + + ; 
 } 
 d o u b l e </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> > </space/> 1 . 0 ) 
 { 
 a n s . e m p l a c e _ b a c k ( n , </space/> 2 ) ; 
 x </space/> = </space/> ( 1 . 0 </space/> * </space/> x ) </space/> / </space/> 2 ; 
 c o u n t + + ; 
 } 
 } 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> 1 2 ; </space/> + + i ) 
 { 
 a n s . e m p l a c e _ b a c k ( i , </space/> 1 2 ) ; 
 c o u n t + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 a n s . e m p l a c e _ b a c k ( i , </space/> n ) ; 
 c o u n t + + ; 
 } 
 
 d o u b l e </space/> x </space/> = </space/> n ; 
 w h i l e </space/> ( x </space/> > </space/> 1 . 0 ) 
 { 
 a n s . e m p l a c e _ b a c k ( n , </space/> 1 2 ) ; 
 x </space/> = </space/> ( 1 . 0 </space/> * </space/> x ) </space/> / </space/> 1 2 ; 
 c o u n t + + ; 
 } 
 
 x </space/> = </space/> 1 2 ; 
 w h i l e </space/> ( x </space/> > </space/> 1 . 0 ) 
 { 
 a n s . e m p l a c e _ b a c k ( 1 2 , </space/> 2 ) ; 
 x </space/> = </space/> ( 1 . 0 </space/> * </space/> x ) </space/> / </space/> 2 ; 
 c o u n t + + ; 
 } 
 } 
 
 c o u t </space/> < < </space/> c o u n t </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> c </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> c . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> c . s e c o n d </space/> < < </space/> "" \ n "" ; 
 } 
 
 i n t </space/> m a i n ( v o i d ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> c o u n t ( i n t </space/> n ) 
 { 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( n </space/> = = </space/> 3 ) 
 r e t u r n </space/> 2 ; 
 i f </space/> ( n </space/> = = </space/> 4 ) 
 r e t u r n </space/> 3 ; 
 i n t </space/> k </space/> = </space/> c e i l ( s q r t ( n ) ) ; 
 i n t </space/> s u m </space/> = </space/> n </space/> - </space/> k </space/> + </space/> 1 ; 
 r e t u r n </space/> s u m </space/> + </space/> c o u n t ( k ) ; 
 } 
 v o i d </space/> f u n ( i n t </space/> n ) 
 { 
 i f </space/> ( n </space/> = = </space/> 2 ) 
 r e t u r n ; 
 i f </space/> ( n </space/> = = </space/> 3 ) 
 { 
 c o u t </space/> < < </space/> 3 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> 3 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 i n t </space/> k </space/> = </space/> c e i l ( s q r t ( n ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> k </space/> + </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> i </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> k </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> k </space/> < < </space/> e n d l ; 
 f u n ( k ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 c o u t </space/> < < </space/> c o u n t ( n ) </space/> < < </space/> e n d l ; 
 f u n ( n ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l i n t ; 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( l i n t ( i ) </space/> = </space/> 0 ; </space/> ( i ) </space/> < </space/> ( n ) ; </space/> ( i ) + + ) 
 # d e f i n e </space/> r e p p ( i , </space/> m , </space/> n ) </space/> f o r </space/> ( l i n t ( i ) </space/> = </space/> ( m ) ; </space/> ( i ) </space/> < </space/> ( n ) ; </space/> ( i ) + + ) 
 # d e f i n e </space/> r e p m ( i , </space/> n ) </space/> f o r </space/> ( l i n t ( i ) </space/> = </space/> ( n </space/> - </space/> 1 ) ; </space/> ( i ) </space/> > = </space/> 0 ; </space/> ( i ) - - ) 
 # d e f i n e </space/> I N F </space/> ( 1 l l </space/> < < </space/> 6 0 ) 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 / / </space/> c o n s t </space/> l i n t </space/> M O D </space/> = 1 0 0 0 0 0 0 0 0 7 ; 
 c o n s t </space/> l i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> l i n t </space/> M A X </space/> = </space/> 4 0 0 0 0 0 0 ; 
 u s i n g </space/> G r a p h </space/> = </space/> v e c t o r < v e c t o r < l i n t > > ; 
 t y p e d e f </space/> p a i r < l i n t , </space/> l i n t > </space/> P ; 
 t y p e d e f </space/> m a p < l i n t , </space/> l i n t > </space/> M ; 
 # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O f a s t "" ) 
 # d e f i n e </space/> c h m a x ( x , </space/> y ) </space/> x </space/> = </space/> m a x ( x , </space/> y ) 
 # d e f i n e </space/> c h m i n ( x , </space/> y ) </space/> x </space/> = </space/> m i n ( x , </space/> y ) 
 
 
 l i n t </space/> f a c [ M A X ] , </space/> f i n v [ M A X ] , </space/> i n v [ M A X ] ; 
 
 v o i d </space/> C O M i n i t ( ) 
 { 
 f a c [ 0 ] </space/> = </space/> f a c [ 1 ] </space/> = </space/> 1 ; 
 f i n v [ 0 ] </space/> = </space/> f i n v [ 1 ] </space/> = </space/> 1 ; 
 i n v [ 1 ] </space/> = </space/> 1 ; 
 f o r </space/> ( l i n t </space/> i </space/> = </space/> 2 ; </space/> i </space/> < </space/> M A X ; </space/> i + + ) 
 { 
 f a c [ i ] </space/> = </space/> f a c [ i </space/> - </space/> 1 ] </space/> * </space/> i </space/> % </space/> M O D ; 
 i n v [ i ] </space/> = </space/> M O D </space/> - </space/> i n v [ M O D </space/> % </space/> i ] </space/> * </space/> ( M O D </space/> / </space/> i ) </space/> % </space/> M O D ; 
 f i n v [ i ] </space/> = </space/> f i n v [ i </space/> - </space/> 1 ] </space/> * </space/> i n v [ i ] </space/> % </space/> M O D ; 
 } 
 } 
 
 l o n g </space/> l o n g </space/> C O M ( l i n t </space/> n , </space/> l i n t </space/> k ) 
 { 
 i f </space/> ( n </space/> < </space/> k ) 
 r e t u r n </space/> 0 ; 
 i f </space/> ( n </space/> < </space/> 0 </space/> | | </space/> k </space/> < </space/> 0 ) 
 r e t u r n </space/> 0 ; 
 r e t u r n </space/> f a c [ n ] </space/> * </space/> ( f i n v [ k ] </space/> * </space/> f i n v [ n </space/> - </space/> k ] </space/> % </space/> M O D ) </space/> % </space/> M O D ; 
 } 
 
 l i n t </space/> p r i m a r y ( l i n t </space/> n u m ) 
 { 
 i f </space/> ( n u m </space/> < </space/> 2 ) 
 r e t u r n </space/> 0 ; 
 e l s e </space/> i f </space/> ( n u m </space/> = = </space/> 2 ) 
 r e t u r n </space/> 1 ; 
 e l s e </space/> i f </space/> ( n u m </space/> % </space/> 2 </space/> = = </space/> 0 ) 
 r e t u r n </space/> 0 ; 
 
 d o u b l e </space/> s q r t N u m </space/> = </space/> s q r t ( n u m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < = </space/> s q r t N u m ; </space/> i </space/> + = </space/> 2 ) 
 { 
 i f </space/> ( n u m </space/> % </space/> i </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> 0 ; 
 } 
 } 
 
 r e t u r n </space/> 1 ; 
 } 
 l o n g </space/> l o n g </space/> m o d p o w ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> n , </space/> l o n g </space/> l o n g </space/> m o d ) 
 { 
 l o n g </space/> l o n g </space/> r e s </space/> = </space/> 1 ; 
 w h i l e </space/> ( n </space/> > </space/> 0 ) 
 { 
 i f </space/> ( n </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 n </space/> > > = </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 l i n t </space/> l c m ( l i n t </space/> a , </space/> l i n t </space/> b ) 
 { 
 r e t u r n </space/> a </space/> / </space/> _ _ g c d ( a , </space/> b ) </space/> * </space/> b ; 
 } 
 l i n t </space/> g c d ( l i n t </space/> a , </space/> l i n t </space/> b ) 
 { 
 r e t u r n </space/> _ _ g c d ( a , </space/> b ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 l i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 c o u t </space/> < < </space/> n </space/> + </space/> 4 </space/> < < </space/> e n d l ; 
 i f </space/> ( n </space/> < = </space/> 6 4 ) 
 { 
 r e p ( i , </space/> n </space/> - </space/> 3 ) </space/> c o u t </space/> < < </space/> i </space/> + </space/> 3 </space/> < < </space/> "" </space/> "" </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 r e p ( i , </space/> 7 ) </space/> c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> 2 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 r e p ( i , </space/> n </space/> - </space/> 2 ) 
 { 
 i f </space/> ( ( i </space/> + </space/> 2 ) </space/> = = </space/> 4 </space/> | | </space/> ( i </space/> + </space/> 2 ) </space/> = = </space/> 3 2 ) 
 c o n t i n u e ; 
 c o u t </space/> < < </space/> i </space/> + </space/> 2 </space/> < < </space/> "" </space/> "" </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 } 
 r e p ( i , </space/> 4 ) </space/> c o u t </space/> < < </space/> n </space/> < < </space/> "" </space/> "" </space/> < < </space/> 3 2 </space/> < < </space/> e n d l ; 
 r e p ( i , </space/> 2 ) </space/> c o u t </space/> < < </space/> 3 2 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 4 </space/> < < </space/> e n d l ; 
 r e p ( i , </space/> 2 ) </space/> c o u t </space/> < < </space/> 4 </space/> < < </space/> "" </space/> "" </space/> < < </space/> 3 2 </space/> < < </space/> e n d l ; 
 } 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> K D B </space/> G . O . A . T </space/> M I D 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> i o </space/> i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) , </space/> c i n . t i e ( N U L L ) 
 # d e f i n e </space/> M A X N </space/> 1 0 0 0 0 9 
 # d e f i n e </space/> i n </space/> i n s e r t 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> p i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p p </space/> p a i r < d o u b l e , </space/> d o u b l e > 
 # d e f i n e </space/> N </space/> 1 5 0 9 
 # d e f i n e </space/> M O D </space/> 9 9 8 2 4 4 3 5 3 
 i n t </space/> g e ( i n t </space/> n ) 
 { 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( n </space/> > </space/> 1 ) 
 { 
 a n s + + ; 
 n </space/> = </space/> c e i l ( n </space/> * </space/> 1 . 0 </space/> / </space/> 1 6 ) ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o ; 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> i , </space/> j , </space/> n ; 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p i > </space/> a n s ; 
 i f </space/> ( n </space/> < = </space/> 1 6 ) 
 { 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 a n s . p b ( { </space/> i , </space/> n </space/> } ) ; 
 i n t </space/> x </space/> = </space/> c e i l ( l o g 2 ( n ) ) ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> x ; </space/> i + + ) 
 a n s . p b ( { </space/> n , </space/> 2 </space/> } ) ; 
 } 
 e l s e 
 { 
 f o r </space/> ( i </space/> = </space/> 3 ; </space/> i </space/> < </space/> 1 6 ; </space/> i + + ) 
 a n s . p b ( { </space/> i , </space/> n </space/> } ) ; 
 f o r </space/> ( i </space/> = </space/> 1 7 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 a n s . p b ( { </space/> i , </space/> n </space/> } ) ; 
 i n t </space/> x </space/> = </space/> g e ( n ) ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> x ; </space/> i + + ) 
 a n s . p b ( { </space/> n , </space/> 1 6 </space/> } ) ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 4 ; </space/> i + + ) 
 a n s . p b ( { </space/> 1 6 , </space/> 2 </space/> } ) ; 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a n s . s i z e ( ) ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s [ i ] . f </space/> < < </space/> "" </space/> "" </space/> < < </space/> a n s [ i ] . s e </space/> < < </space/> "" \ n "" ; 
 } 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p a i i ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 1 e 9 ; 
 i n t </space/> c e i l 1 ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i f </space/> ( a </space/> % </space/> b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a </space/> / </space/> b ; 
 e l s e 
 r e t u r n </space/> a </space/> / </space/> b </space/> + </space/> 1 ; 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> c n t </space/> = </space/> 0 ; 
 s c a n f ( "" % d "" , </space/> & n ) ; 
 i f </space/> ( n </space/> < = </space/> 8 ) 
 { 
 c n t </space/> = </space/> n </space/> - </space/> 3 ; 
 i n t </space/> t </space/> = </space/> n ; 
 w h i l e </space/> ( t </space/> > = </space/> 2 ) 
 { 
 t </space/> = </space/> c e i l 1 ( t , </space/> 2 ) ; 
 c n t + + ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> c n t ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 p r i n t f ( "" % d </space/> % d \ n "" , </space/> i , </space/> n ) ; 
 } 
 t </space/> = </space/> n ; 
 w h i l e </space/> ( t </space/> > = </space/> 2 ) 
 { 
 t </space/> = </space/> c e i l 1 ( t , </space/> 2 ) ; 
 p r i n t f ( "" % d </space/> 2 \ n "" , </space/> n ) ; 
 } 
 } 
 e l s e 
 { 
 c n t </space/> = </space/> n </space/> - </space/> 1 ; 
 i n t </space/> t </space/> = </space/> n ; 
 w h i l e </space/> ( t </space/> > = </space/> 2 ) 
 { 
 t </space/> = </space/> c e i l 1 ( t , </space/> 8 ) ; 
 c n t + + ; 
 } 
 p r i n t f ( "" % d \ n "" , </space/> c n t ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( i </space/> ! = </space/> 8 ) 
 p r i n t f ( "" % d </space/> % d \ n "" , </space/> i , </space/> n ) ; 
 } 
 t </space/> = </space/> n ; 
 w h i l e </space/> ( t </space/> > = </space/> 2 ) 
 { 
 t </space/> = </space/> c e i l 1 ( t , </space/> 8 ) ; 
 p r i n t f ( "" % d </space/> 8 \ n "" , </space/> n ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 3 ; </space/> i + + ) 
 { 
 p r i n t f ( "" 8 </space/> 2 \ n "" ) ; 
 } 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 s c a n f ( "" % d "" , </space/> & t ) ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 l l </space/> g c d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 e l s e 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> n m a x </space/> = </space/> 2 0 0 0 1 0 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 
 i n t </space/> T ; 
 i n t </space/> n , </space/> m ; 
 s t r i n g </space/> c u r ; 
 i n t </space/> q [ n m a x ] ; 
 b o o l </space/> u s e d [ n m a x ] ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> a n s ; 
 w h i l e </space/> ( n </space/> > </space/> 2 ) 
 { 
 i n t </space/> s </space/> = </space/> s q r t ( 1 . 0 </space/> * </space/> n ) ; 
 i f </space/> ( s </space/> * </space/> s </space/> < = </space/> n ) 
 s + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> s </space/> + </space/> 1 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s . p u s h _ b a c k ( { </space/> i , </space/> n </space/> } ) ; 
 } 
 a n s . p u s h _ b a c k ( { </space/> n , </space/> s </space/> } ) ; 
 a n s . p u s h _ b a c k ( { </space/> n , </space/> s </space/> } ) ; 
 n </space/> = </space/> s ; 
 } 
 c o u t </space/> < < </space/> a n s . s i z e ( ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> x . f i r s t </space/> < < </space/> "" </space/> "" </space/> < < </space/> x . s e c o n d </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s r a n d ( t i m e ( 0 ) ) ; 
 s t d : : i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 
 
 c i n </space/> > > </space/> T ; 
 w h i l e </space/> ( T - - ) 
 { 
 s o l v e ( ) ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 u n o r d e r e d _ s e t < i n t > </space/> r o o t ; 
 i n t </space/> s </space/> = </space/> n , </space/> k </space/> = </space/> 1 , </space/> s n </space/> = </space/> n ; 
 w h i l e </space/> ( s n </space/> > </space/> 2 ) 
 { 
 s </space/> = </space/> s q r t ( s n ) ; 
 i f </space/> ( s </space/> * </space/> s </space/> ! = </space/> s n ) 
 + + s ; 
 / / </space/> c o u t < < s < < e n d l ; 
 i f </space/> ( s </space/> > </space/> 2 ) 
 { 
 + + k ; 
 r o o t . i n s e r t ( s ) ; 
 } 
 s n </space/> = </space/> s ; 
 } 
 c o u t </space/> < < </space/> n </space/> - </space/> ( k </space/> + </space/> 2 ) </space/> + </space/> ( k </space/> * </space/> 2 ) </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 3 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( r o o t . f i n d ( i ) </space/> = = </space/> r o o t . e n d ( ) ) 
 c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> n </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> x </space/> = </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> k ; </space/> + + i ) 
 { 
 i n t </space/> y </space/> = </space/> s q r t ( x ) ; 
 i f </space/> ( y </space/> * </space/> y </space/> ! = </space/> x ) 
 + + y ; 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 x </space/> = </space/> y ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t d i o . h > 
 # i n c l u d e </space/> < s e t > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b , </space/> k </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> r ; 
 i f </space/> ( a </space/> > = </space/> b ) 
 r </space/> = </space/> a </space/> - </space/> b ; 
 e l s e 
 r </space/> = </space/> b </space/> - </space/> a ; 
 i n t </space/> c </space/> = </space/> r </space/> % </space/> 1 0 ; 
 k </space/> = </space/> r </space/> / </space/> 1 0 ; 
 i f </space/> ( c </space/> ! = </space/> 0 ) 
 k + + ; 
 p r i n t f ( "" % d \ n "" , </space/> k ) ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 l o n g </space/> l o n g </space/> i n t </space/> a , </space/> b , </space/> a b s v a l ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 a b s v a l </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( a b s v a l </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a b s v a l </space/> < < </space/> e n d l ; 
 } 
 e l s e </space/> i f </space/> ( a b s v a l </space/> < = </space/> 1 0 ) 
 { 
 c o u t </space/> < < </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 i f </space/> ( a b s v a l </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> a b s v a l </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a b s v a l </space/> / </space/> 1 0 ) </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < i t e r a t o r > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < t u p l e > 
 # i n c l u d e </space/> < s t r i n g > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 0 ; </space/> t </space/> < </space/> T ; </space/> + + t ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 i n t </space/> a n s </space/> = </space/> ( b </space/> - </space/> a ) </space/> / </space/> 1 0 </space/> + </space/> ( b </space/> % </space/> 1 0 </space/> ! = </space/> a </space/> % </space/> 1 0 ) ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 0 0 0 0 0 0 0 0 0 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 i n t </space/> t </space/> = </space/> a b s ( a </space/> - </space/> b ) </space/> + </space/> 9 ; 
 t </space/> = </space/> t </space/> / </space/> 1 0 ; 
 c o u t </space/> < < </space/> t </space/> < < </space/> e n d l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 c o u t </space/> < < </space/> "" \ n T i m e </space/> E l a p s e d : </space/> "" </space/> < < </space/> 1 . 0 </space/> * </space/> c l o c k ( ) </space/> / </space/> C L O C K S _ P E R _ S E C </space/> < < </space/> "" </space/> s e c \ n "" ; 
 # e n d i f 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> T ; 
 c i n </space/> > > </space/> T ; 
 i n t </space/> n u m s [ ] </space/> = </space/> { </space/> 1 0 , </space/> 9 , </space/> 8 , </space/> 7 , </space/> 6 , </space/> 5 , </space/> 4 , </space/> 3 , </space/> 2 , </space/> 1 </space/> } ; 
 f o r </space/> ( i n t </space/> t </space/> = </space/> 0 ; </space/> t </space/> < </space/> T ; </space/> t + + ) 
 { 
 i n t </space/> i </space/> = </space/> 0 ; 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> m o v e s </space/> = </space/> 0 ; 
 i n t </space/> t o c h e c k </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 w h i l e </space/> ( t o c h e c k </space/> > </space/> 0 ) 
 { 
 m o v e s </space/> + = </space/> ( t o c h e c k </space/> - </space/> ( t o c h e c k </space/> % </space/> n u m s [ i ] ) ) </space/> / </space/> n u m s [ i ] ; 
 t o c h e c k </space/> - = </space/> ( t o c h e c k </space/> - </space/> ( t o c h e c k </space/> % </space/> n u m s [ i ] ) ) ; 
 i + + ; 
 } 
 } 
 e l s e </space/> i f </space/> ( b </space/> > </space/> a ) 
 { 
 w h i l e </space/> ( t o c h e c k </space/> > </space/> 0 ) 
 { 
 m o v e s </space/> + = </space/> ( t o c h e c k </space/> - </space/> ( t o c h e c k </space/> % </space/> n u m s [ i ] ) ) </space/> / </space/> n u m s [ i ] ; 
 t o c h e c k </space/> - = </space/> ( t o c h e c k </space/> - </space/> ( t o c h e c k </space/> % </space/> n u m s [ i ] ) ) ; 
 i + + ; 
 } 
 } 
 c o u t </space/> < < </space/> m o v e s </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 0 ; </space/> k </space/> < </space/> t ; </space/> k + + ) 
 { 
 l o n g </space/> l o n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 l o n g </space/> l o n g </space/> c </space/> = </space/> a ; 
 a </space/> = </space/> b ; 
 b </space/> = </space/> c ; 
 } 
 b </space/> - = </space/> a ; 
 a </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> c n t </space/> = </space/> 0 ; 
 i n t </space/> i </space/> = </space/> 1 0 ; 
 w h i l e </space/> ( b ) 
 { 
 i f </space/> ( i </space/> < </space/> 1 ) 
 { 
 b r e a k ; 
 } 
 c n t </space/> + = </space/> b </space/> / </space/> i ; 
 b </space/> = </space/> b </space/> % </space/> i ; 
 i - - ; 
 } 
 c o u t </space/> < < </space/> c n t </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( b </space/> > </space/> a ) 
 { 
 c o u t </space/> < < </space/> ( b </space/> - </space/> a </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> ( a </space/> - </space/> b </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 1 7 : 5 0 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 2 0 : 5 1 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 2 1 : 0 5 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 2 7 : 5 3 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 3 0 : 5 4 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
 
 / * </space/> S a t </space/> A p r </space/> 0 3 </space/> 2 0 2 1 </space/> 2 0 : 3 4 : 0 6 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> + + i ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> m a x x i m </space/> = </space/> a ; 
 i n t </space/> m i n n i m </space/> = </space/> b ; 
 i f </space/> ( b </space/> > </space/> a ) 
 { 
 m a x x i m </space/> = </space/> b ; 
 m i n n i m </space/> = </space/> a ; 
 } 
 
 i n t </space/> r e s u l t </space/> = </space/> ( m a x x i m </space/> - </space/> m i n n i m ) </space/> / </space/> 1 0 ; 
 i f </space/> ( ( ( m a x x i m </space/> - </space/> m i n n i m ) </space/> % </space/> 1 0 ) </space/> ! = </space/> 0 ) 
 { 
 r e s u l t </space/> = </space/> r e s u l t </space/> + </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> r e s u l t </space/> < < </space/> e n d l ; 
 } 
 
 / / </space/> c o u t </space/> < < </space/> "" H e l l o </space/> w o r l d ! "" </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 / * </space/> S u n </space/> A p r </space/> 0 4 </space/> 2 0 2 1 </space/> 2 3 : 1 1 : 0 4 </space/> G M T + 0 3 0 0 </space/> ( , </space/> </space/> ) </space/> * / 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> o p t i m i z e ( ) </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 o p t i m i z e ( ) ; 
 i n t </space/> i , </space/> n , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> n ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> c </space/> = </space/> 0 ; 
 i n t </space/> a n s ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> "" 0 "" </space/> < < </space/> e n d l ; 
 } 
 
 e l s e 
 { 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 a n s </space/> = </space/> a </space/> - </space/> b ; 
 i n t </space/> a n s 1 </space/> = </space/> a n s </space/> / </space/> 1 0 ; 
 
 c </space/> = </space/> c </space/> + </space/> a n s 1 ; 
 i f </space/> ( a n s </space/> = = </space/> ( a n s 1 </space/> * </space/> 1 0 ) ) 
 { 
 c o u t </space/> < < </space/> c </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> c </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
 e l s e 
 { 
 
 a n s </space/> = </space/> b </space/> - </space/> a ; 
 i n t </space/> a n s 1 </space/> = </space/> a n s </space/> / </space/> 1 0 ; 
 
 c </space/> = </space/> c </space/> + </space/> a n s 1 ; 
 i f </space/> ( a n s </space/> = = </space/> ( a n s 1 </space/> * </space/> 1 0 ) ) 
 { 
 c o u t </space/> < < </space/> c </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> c </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
 } 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i n t </space/> r e t [ t ] ; 
 i n t </space/> i </space/> = </space/> 0 ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> d </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 r e t [ i + + ] </space/> = </space/> d </space/> / </space/> 1 0 </space/> + </space/> ( d </space/> % </space/> 1 0 </space/> = = </space/> 0 </space/> ? </space/> 0 </space/> : </space/> 1 ) ; 
 } 
 f o r </space/> ( i n t </space/> x </space/> : </space/> r e t ) 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> x </space/> = </space/> 1 ; 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> x ; 
 w h i l e </space/> ( x - - ) 
 { 
 l o n g </space/> l o n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 s w a p ( a , </space/> b ) ; 
 l o n g </space/> l o n g </space/> d </space/> = </space/> ( - a </space/> + </space/> b ) ; 
 i f </space/> ( d </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 l o n g </space/> l o n g </space/> t </space/> = </space/> d </space/> / </space/> 1 0 ; 
 i f </space/> ( d </space/> % </space/> 1 0 </space/> ! = </space/> 0 ) 
 t + + ; 
 c o u t </space/> < < </space/> t </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> T ; 
 i n t </space/> a , </space/> b ; 
 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d "" , </space/> & T ) ; 
 w h i l e </space/> ( T - - ) 
 { 
 s c a n f ( "" % d </space/> % d "" , </space/> & a , </space/> & b ) ; 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 i f </space/> ( a </space/> ! = </space/> b ) 
 r e s </space/> = </space/> ( a b s ( a </space/> - </space/> b ) </space/> - </space/> 1 ) </space/> / </space/> 1 0 </space/> + </space/> 1 ; 
 p r i n t f ( "" % d \ n "" , </space/> r e s ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i n t </space/> a r r [ t ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> + + i ) 
 { 
 i n t </space/> a , </space/> b , </space/> m o v e s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 a r r [ i ] </space/> = </space/> 0 ; 
 c o n t i n u e ; 
 } 
 i n t </space/> t e m p ; 
 i f </space/> ( a </space/> > </space/> b ) 
 t e m p </space/> = </space/> a </space/> - </space/> b ; 
 e l s e 
 t e m p </space/> = </space/> b </space/> - </space/> a ; 
 i f </space/> ( t e m p </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 { 
 a r r [ i ] </space/> = </space/> t e m p </space/> / </space/> 1 0 ; 
 } 
 i f </space/> ( t e m p </space/> % </space/> 1 0 </space/> ! = </space/> 0 ) 
 { 
 a r r [ i ] </space/> = </space/> ( t e m p </space/> / </space/> 1 0 </space/> + </space/> 1 ) ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> a r r [ i ] </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 l o n g </space/> a , </space/> b , </space/> r </space/> = </space/> 0 , </space/> t e s t ; 
 d o u b l e </space/> t ; 
 c i n </space/> > > </space/> t e s t ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t e s t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> < </space/> b ) 
 { 
 
 t </space/> = </space/> b </space/> - </space/> a ; 
 t </space/> = </space/> t </space/> / </space/> 1 0 ; 
 r </space/> = </space/> c e i l ( t ) ; 
 } 
 e l s e </space/> i f </space/> ( a </space/> > </space/> b ) 
 { 
 t </space/> = </space/> a </space/> - </space/> b ; 
 t </space/> = </space/> t </space/> / </space/> 1 0 ; 
 r </space/> = </space/> c e i l ( t ) ; 
 } 
 e l s e </space/> i f </space/> ( a </space/> = = </space/> b ) 
 { 
 r </space/> = </space/> 0 ; 
 } 
 c o u t </space/> < < </space/> r </space/> < < </space/> e n d l ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> a n s ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> a n s w e r ; 
 i n t </space/> c </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( c </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 { 
 a n s w e r </space/> = </space/> c </space/> / </space/> 1 0 ; 
 } 
 e l s e 
 { 
 a n s w e r </space/> = </space/> c </space/> / </space/> 1 0 </space/> + </space/> 1 ; 
 } 
 r e t u r n </space/> a n s w e r ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 i n t </space/> a [ t ] , </space/> b [ t ] ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] </space/> > > </space/> b [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> a n s ( a [ i ] , </space/> b [ i ] ) </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> m o d </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> s z ( a ) </space/> ( l o n g </space/> l o n g ) ( ( a ) . s i z e ( ) ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a l l ( c ) </space/> c . b e g i n ( ) , </space/> c . e n d ( ) 
 # d e f i n e </space/> t r ( c , </space/> i ) </space/> f o r </space/> ( t y p e o f ( c ) . b e g i n ( ) </space/> i </space/> = </space/> c . b e g i n ( ) ; </space/> i </space/> ! = </space/> c . e n d ( ) ; </space/> i + + ) 
 # d e f i n e </space/> p r e s e n t ( c , </space/> x ) </space/> ( c . f i n d ( x ) </space/> ! = </space/> c . e n d ( ) ) 
 # d e f i n e </space/> c p r e s e n t ( c , </space/> x ) </space/> ( f i n d ( a l l ( c ) , </space/> x ) </space/> ! = </space/> c . e n d ( ) ) 
 # d e f i n e </space/> f o ( i , </space/> a ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> a ; </space/> i + + ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> r e v ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a </space/> - </space/> 1 ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 # d e f i n e </space/> b h a r o ( a , </space/> n ) </space/> f o ( i , </space/> n ) </space/> c i n </space/> > > </space/> a [ i ] 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> s e t d ( n ) </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( n ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> v e c t o r < l l > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < v i > </space/> v v i ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p i i ; 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / B a s i c </space/> T e m p 
 / / / O v e r / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 v o i d </space/> f a l t u ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 } 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / I n p u t 
 / / / F u n c / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 c o n s t </space/> l l </space/> N </space/> = </space/> 0 ; 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / D e p / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> d i f </space/> = </space/> a b s ( b </space/> - </space/> a ) ; 
 
 i n t </space/> a n s </space/> = </space/> ( d i f </space/> + </space/> 9 ) </space/> / </space/> 1 0 ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 f a l t u ( ) ; 
 f a s t 
 
 l l </space/> t 
 = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 e l s e 
 { 
 i n t </space/> d i f f </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( d i f f </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> ( d i f f </space/> / </space/> 1 0 ) </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> ( d i f f </space/> / </space/> 1 0 ) </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 c o u t </space/> < < </space/> ( a b s ( n </space/> - </space/> m ) </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> a , </space/> b , </space/> i , </space/> j , </space/> c n t </space/> = </space/> 0 , </space/> c n t 1 </space/> = </space/> 0 , </space/> n , </space/> f l a g </space/> = </space/> 0 , </space/> f l a g _ m a i n </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i f </space/> ( a </space/> > </space/> b ) 
 { 
 c o u t </space/> < < </space/> ( a </space/> - </space/> b </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 e l s e </space/> i f </space/> ( b </space/> > </space/> a ) 
 { 
 c o u t </space/> < < </space/> ( b </space/> - </space/> a </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # i n c l u d e </space/> < s t r i n g . h > 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> l o o p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l i </space/> i </space/> = </space/> a ; </space/> i </space/> < = </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> r l o o p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( l l i </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 
 l l i </space/> c h e c k ( s t r i n g </space/> x , </space/> s t r i n g </space/> y , </space/> l l i </space/> n ) 
 { 
 l l i </space/> z </space/> = </space/> n </space/> - </space/> 1 ; 
 f o r </space/> ( l l i </space/> i </space/> = </space/> n </space/> - </space/> 1 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 i f </space/> ( x [ i ] </space/> = = </space/> y [ i ] ) 
 { 
 z </space/> = </space/> i ; 
 } 
 e l s e 
 { 
 b r e a k ; 
 } 
 } 
 r e t u r n </space/> z ; 
 } 
 
 l l i </space/> s r c h ( s t r i n g </space/> x , </space/> l l i </space/> n ) 
 { 
 l l i </space/> z , </space/> a , </space/> b , </space/> c ; 
 z </space/> = </space/> 0 ; 
 c </space/> = </space/> 0 ; 
 a </space/> = </space/> b </space/> = </space/> 0 ; 
 f o r </space/> ( l l i </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( x [ i ] </space/> = = </space/> ' 0 ' ) 
 { 
 a + + ; 
 } 
 e l s e 
 { 
 b + + ; 
 } 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 z </space/> = </space/> a ; 
 c </space/> = </space/> i ; 
 } 
 } 
 r e t u r n </space/> c ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 l l i </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l i </space/> a , </space/> b , </space/> z ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 z </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 z </space/> = </space/> z </space/> / </space/> 1 0 </space/> + </space/> b o o l ( z </space/> % </space/> 1 0 ) ; 
 c o u t </space/> < < </space/> z </space/> < < </space/> e n d l ; 
 } 
 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> s e t u p ( ) </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> N I L </space/> - 1 
 # d e f i n e </space/> M A X </space/> 5 
 # d e f i n e </space/> M O D </space/> 1 e 9 </space/> + </space/> 7 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 m a p < s t r i n g , </space/> i n t > </space/> m ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> e n d l ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s e t u p ( ) ; 
 / / </space/> i n i t i a l i z e ( ) ; 
 i n t </space/> t t ; 
 c i n </space/> > > </space/> t t ; 
 / / </space/> t t </space/> = </space/> 1 ; 
 w h i l e </space/> ( t t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> g c d </space/> _ _ g c d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a l l ( v ) </space/> v . b e g i n ( ) , </space/> v . e n d ( ) 
 # d e f i n e </space/> s u m </space/> a c c u m u l a t e 
 # d e f i n e </space/> g </space/> g r e a t e r < i n t > ( ) 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> I N F </space/> L O N G _ L O N G _ M A X 
 # d e f i n e </space/> N I N F </space/> L O N G _ L O N G _ M I N 
 # d e f i n e </space/> p r e c i s e ( x ) </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( x ) 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) 
 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> d o u b l e </space/> e </space/> = </space/> 2 . 7 1 8 2 8 ; 
 c o n s t </space/> d o u b l e </space/> p i </space/> = </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0 2 8 ; 
 
 / / </space/> c o u t </space/> < < </space/> c e i l ( l o g 2 ( 5 ) ) ; 
 / / </space/> l o g 1 0 ( 7 ) </space/> - </space/> m e a n s </space/> l o g </space/> o f </space/> 7 </space/> t o </space/> t h e </space/> b a s e </space/> 1 0 
 / / </space/> l o g ( 7 ) </space/> - </space/> m e a n s </space/> l o g </space/> o f </space/> 7 </space/> t o </space/> b a s e </space/> e , </space/> b y </space/> d e f a u l t 
 
 b o o l </space/> i s P r i m e ( l l </space/> n ) 
 { 
 l l </space/> i ; 
 i f </space/> ( n </space/> = = </space/> 1 ) 
 r e t u r n </space/> f a l s e ; 
 f o r </space/> ( i </space/> = </space/> 2 ; </space/> i </space/> < = </space/> s q r t ( n ) ; </space/> i + + ) 
 { 
 i f </space/> ( n </space/> % </space/> i </space/> = = </space/> 0 ) 
 r e t u r n </space/> f a l s e ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 l l </space/> f a c t ( l l </space/> n ) 
 { 
 i f </space/> ( n </space/> < = </space/> 1 ) 
 r e t u r n </space/> 1 ; 
 e l s e 
 r e t u r n </space/> n </space/> * </space/> f a c t ( n </space/> - </space/> 1 ) ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t ; 
 i n t </space/> t e s t c a s e </space/> = </space/> 1 ; 
 c i n </space/> > > </space/> t e s t c a s e ; 
 
 w h i l e </space/> ( t e s t c a s e - - ) 
 { 
 l l </space/> a , </space/> b , </space/> n u m ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 n u m </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 
 i f </space/> ( n u m </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> ( n u m </space/> / </space/> 1 0 ) </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> ( n u m </space/> / </space/> 1 0 ) </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> c n t ; 
 i n t </space/> m a i n ( ) 
 { 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 w h i l e </space/> ( n - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> c </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( c </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> c </space/> / </space/> 1 0 </space/> < < </space/> "" \ n "" ; 
 e l s e 
 c o u t </space/> < < </space/> c </space/> / </space/> 1 0 </space/> + </space/> 1 </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 
 i n t </space/> d </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i n t </space/> r e s </space/> = </space/> ( d </space/> % </space/> 1 0 ) </space/> ? </space/> ( d </space/> / </space/> 1 0 </space/> + </space/> 1 ) </space/> : </space/> ( d </space/> / </space/> 1 0 ) ; 
 c o u t </space/> < < </space/> r e s </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> a , </space/> b , </space/> c o u n t , </space/> n ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c o u n t </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 i n t </space/> k </space/> = </space/> b </space/> - </space/> a ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 0 ; </space/> k </space/> ! = </space/> 0 ; </space/> i - - ) 
 { 
 n </space/> = </space/> k </space/> / </space/> i ; 
 c o u n t </space/> + = </space/> n ; 
 k </space/> = </space/> k </space/> % </space/> i ; 
 } 
 c o u t </space/> < < </space/> a b s ( c o u n t ) </space/> < < </space/> "" \ n "" ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> f u ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> b ; </space/> i + + ) 
 # d e f i n e </space/> f d ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> b ; </space/> i - - ) 
 
 i n t </space/> m a i n ( ) 
 { 
 
 i n t </space/> N , </space/> P , </space/> Q , </space/> R , </space/> S , </space/> T ; 
 s t d : : c i n </space/> > > </space/> N ; 
 w h i l e </space/> ( N - - ) 
 { 
 s t d : : c i n </space/> > > </space/> S </space/> > > </space/> T ; 
 i f </space/> ( S </space/> > = </space/> T ) 
 { 
 Q </space/> = </space/> T ; 
 T </space/> = </space/> S ; 
 S </space/> = </space/> Q ; 
 } 
 i n t </space/> d i f f </space/> = </space/> T </space/> - </space/> S ; 
 i n t </space/> c o n t </space/> = </space/> 0 ; 
 w h i l e </space/> ( d i f f ) 
 { 
 i f </space/> ( d i f f </space/> > = </space/> 1 0 ) 
 { 
 i n t </space/> t m p </space/> = </space/> d i f f </space/> / </space/> 1 0 ; 
 c o n t </space/> + = </space/> t m p ; 
 d i f f </space/> - = </space/> t m p </space/> * </space/> 1 0 ; 
 } 
 e l s e 
 { 
 c o n t + + ; 
 d i f f </space/> = </space/> 0 ; 
 } 
 } 
 s t d : : c o u t </space/> < < </space/> c o n t </space/> < < </space/> s t d : : e n d l ; 
 } 
 # i f d e f </space/> D E B U G 
 
 # e n d i f 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t , </space/> x , </space/> y ; 
 l o n g </space/> l o n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> t ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 x </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 y </space/> = </space/> x </space/> / </space/> 1 0 ; 
 i f </space/> ( x </space/> % </space/> 1 0 </space/> > </space/> 0 ) 
 y + + ; 
 c o u t </space/> < < </space/> y </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 
 w h i l e </space/> ( t - - ) 
 { 
 i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 c o u t </space/> < < </space/> ( a b s ( a </space/> - </space/> b ) </space/> + </space/> 9 ) </space/> / </space/> 1 0 </space/> < < </space/> ' \ n ' ; 
 } 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < b i t s e t > 
 # i n c l u d e </space/> < s t r i n g > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> f a s t i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; 
 v o i d </space/> a n g l e s ( l l </space/> a , </space/> l l </space/> b , </space/> l l </space/> c ) 
 { 
 f l o a t </space/> a 2 </space/> = </space/> s q r t ( a ) ; 
 f l o a t </space/> b 2 </space/> = </space/> s q r t ( b ) ; 
 f l o a t </space/> c 2 </space/> = </space/> s q r t ( c ) ; 
 / / </space/> a p p l y </space/> c o s i n e </space/> l a w 
 f l o a t </space/> a l p h a </space/> = </space/> a c o s ( ( b </space/> + </space/> c </space/> - </space/> a ) </space/> / </space/> ( 2 </space/> * </space/> b 2 </space/> * </space/> c 2 ) ) ; 
 f l o a t </space/> b e t a </space/> = </space/> a c o s ( ( a </space/> + </space/> c </space/> - </space/> b ) </space/> / </space/> ( 2 </space/> * </space/> a 2 </space/> * </space/> c 2 ) ) ; 
 f l o a t </space/> g a m m a </space/> = </space/> a c o s ( ( b </space/> + </space/> a </space/> - </space/> c ) </space/> / </space/> ( 2 </space/> * </space/> b 2 </space/> * </space/> a 2 ) ) ; 
 a l p h a </space/> * = </space/> ( 1 8 0 </space/> / </space/> 3 . 1 4 ) ; 
 b e t a </space/> * = </space/> ( 1 8 0 </space/> / </space/> 3 . 1 4 ) ; 
 g a m m a </space/> * = </space/> ( 1 8 0 </space/> / </space/> 3 . 1 4 ) ; 
 c o u t </space/> < < </space/> a l p h a </space/> < < </space/> "" </space/> "" </space/> < < </space/> b e t a </space/> < < </space/> "" </space/> "" </space/> < < </space/> g a m m a </space/> < < </space/> "" \ n "" ; 
 } 
 l l </space/> d i f f ( l l </space/> n ) 
 { 
 l l </space/> a r e a </space/> = </space/> ( i n t ) s q r t ( n ) ; 
 l l </space/> l , </space/> b ; 
 f o r </space/> ( l l </space/> i </space/> = </space/> a r e a ; </space/> i </space/> > = </space/> 1 ; </space/> - - i ) 
 { 
 i f </space/> ( n </space/> % </space/> i </space/> = = </space/> 0 ) 
 { 
 l </space/> = </space/> n </space/> / </space/> i ; 
 b </space/> = </space/> i ; 
 b r e a k ; 
 } 
 } 
 r e t u r n </space/> ( l </space/> - </space/> b ) ; 
 } 
 
 l l </space/> x o r _ n ( l l </space/> n ) 
 { 
 l l </space/> x </space/> = </space/> ( n </space/> % </space/> 4 ) ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 { 
 r e t u r n </space/> n ; 
 } 
 e l s e </space/> i f </space/> ( x </space/> = = </space/> 1 ) 
 { 
 r e t u r n </space/> 1 ; 
 } 
 e l s e </space/> i f </space/> ( x </space/> = = </space/> 2 ) 
 { 
 r e t u r n </space/> n </space/> + </space/> 1 ; 
 } 
 e l s e </space/> i f </space/> ( x </space/> = = </space/> 3 ) 
 { 
 r e t u r n </space/> 0 ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 f a s t i o </space/> c l o c k _ t </space/> s t a r t , </space/> e n d i n g ; 
 s t a r t </space/> = </space/> c l o c k ( ) ; 
 l l </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l l </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l l </space/> s u m ; 
 i f </space/> ( a </space/> = = </space/> b ) 
 { 
 c o u t </space/> < < </space/> "" 0 "" 
 < < </space/> "" \ n "" ; 
 } 
 e l s e </space/> i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> < </space/> 1 1 ) 
 { 
 c o u t </space/> < < </space/> "" 1 "" 
 < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 s u m </space/> = </space/> ( a b s ( a </space/> - </space/> b ) </space/> / </space/> 1 0 ) ; 
 i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e </space/> i f </space/> ( a b s ( a </space/> - </space/> b ) </space/> % </space/> 1 0 </space/> > </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> s u m </space/> + </space/> 1 </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 } 
 / / </space/> c o u t < < ( 1 0 0 5 0 0 - 9 0 0 0 ) / 1 0 ; 
 e n d i n g </space/> = </space/> c l o c k ( ) ; 
 / / </space/> c o u t < < f i x e d < < d o u b l e ( e n d i n g - s t a r t ) < < s e t p r e c i s i o n ( 5 ) < < "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> t ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 l o n g </space/> l o n g </space/> i n t </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l o n g </space/> l o n g </space/> i n t </space/> c o u n t ; 
 l o n g </space/> l o n g </space/> i n t </space/> d </space/> = </space/> a b s ( b </space/> - </space/> a ) ; 
 
 c o u n t </space/> = </space/> d </space/> / </space/> 1 0 ; 
 
 d </space/> = </space/> d </space/> % </space/> 1 0 ; 
 i f </space/> ( d ) 
 c o u n t + + ; 
 
 c o u t </space/> < < </space/> c o u n t </space/> < < </space/> e n d l ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> m a x n </space/> 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 
 i n t </space/> m a i n ( ) 
 { 
 l l </space/> t , </space/> a , </space/> b ; 
 c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 l l </space/> x </space/> = </space/> a b s ( a </space/> - </space/> b ) ; 
 i f </space/> ( x </space/> = = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> 0 </space/> < < </space/> e n d l ; 
 c o n t i n u e ; 
 } 
 l l </space/> s u m </space/> = </space/> 0 ; 
 s u m </space/> = </space/> x </space/> / </space/> 1 0 ; 
 i f </space/> ( x </space/> % </space/> 1 0 </space/> = = </space/> 0 ) 
 c o u t </space/> < < </space/> s u m </space/> < < </space/> e n d l ; 
 e l s e 
 c o u t </space/> < < </space/> s u m </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 } 
",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < f s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < d e q u e > 
 # i n c l u d e </space/> < q u e u e > 
 
 # d e f i n e </space/> F A S T </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i f s t r e a m </space/> f i n ( "" i n p u t "" ) ; 
 
 
 v o i d </space/> i n i t ( ) 
 { 
 F A S T 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 c i n . r d b u f ( f i n . r d b u f ( ) ) ; 
 # e n d i f 
 } 
 
 s t r i n g </space/> a , </space/> b ; 
 i n t </space/> n ; 
 c o n s t </space/> i n t </space/> m x </space/> = </space/> 3 e 5 </space/> + </space/> 1 0 0 ; 
 
 s t r i n g </space/> a l t e r n a t e ( c o n s t </space/> s t r i n g & </space/> p a t t e r n ) 
 { 
 s t r i n g </space/> r e s u l t ; 
 r e s u l t . r e s i z e ( 3 </space/> * </space/> n ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n ; </space/> i + + ) 
 { 
 r e s u l t [ i ] </space/> = </space/> p a t t e r n [ i </space/> % </space/> ( p a t t e r n . l e n g t h ( ) ) ] ; 
 } 
 r e t u r n </space/> r e s u l t ; 
 } 
 
 s t r i n g </space/> n o n _ a l t e r n a t e ( c o n s t </space/> s t r i n g & </space/> p a t t e r n ) 
 { 
 s t r i n g </space/> r e s u l t ; 
 r e s u l t . r e s i z e ( 3 </space/> * </space/> n ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n ; </space/> i + + ) 
 { 
 r e s u l t [ i ] </space/> = </space/> p a t t e r n [ i </space/> / </space/> n ] ; 
 } 
 r e t u r n </space/> r e s u l t ; 
 } 
 
 b o o l </space/> o k ( c o n s t </space/> s t r i n g & </space/> x ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> * </space/> 3 </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( x [ i ] </space/> = = </space/> a [ 0 ] </space/> & & </space/> x [ i </space/> + </space/> 1 ] </space/> = = </space/> a [ 1 ] ) 
 r e t u r n </space/> f a l s e ; 
 i f </space/> ( x [ i ] </space/> = = </space/> b [ 0 ] </space/> & & </space/> x [ i </space/> + </space/> 1 ] </space/> = = </space/> b [ 1 ] ) 
 r e t u r n </space/> f a l s e ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 
 v o i d </space/> r e a d ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> a </space/> > > </space/> b ; 
 } 
 
 s t r i n g </space/> s o l v e ( ) 
 { 
 s t r i n g </space/> x </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 s t r i n g </space/> p </space/> = </space/> a l t e r n a t e ( x ) , </space/> q </space/> = </space/> n o n _ a l t e r n a t e ( x ) ; 
 i f </space/> ( o k ( p ) ) 
 { 
 r e t u r n </space/> p ; 
 } 
 i f </space/> ( o k ( q ) ) 
 r e t u r n </space/> q ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( x . b e g i n ( ) , </space/> x . e n d ( ) ) ) ; 
 r e t u r n </space/> "" "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n i t ( ) ; 
 r e a d ( ) ; 
 s t r i n g </space/> r e s </space/> = </space/> s o l v e ( ) ; 
 i f </space/> ( r e s . e m p t y ( ) ) 
 c o u t </space/> < < </space/> "" N O "" ; 
 e l s e 
 c o u t </space/> < < </space/> "" Y E S "" </space/> < < </space/> e n d l </space/> < < </space/> r e s ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> t o c h a r ( x ) </space/> ( c h a r ) ( x </space/> + </space/> ' a ' ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> p a i r < l l , </space/> l l > </space/> p i ; 
 i n t </space/> n ; 
 b o o l </space/> e d g e [ 3 ] [ 3 ] ; 
 i n t </space/> a , </space/> b , </space/> c ; 
 
 v o i d </space/> f ( ) 
 { 
 i f </space/> ( e d g e [ c ] [ c ] ) 
 { 
 i f </space/> ( e d g e [ c ] [ a ] ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( c ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( a ) </space/> < < </space/> t o c h a r ( b ) ; 
 } 
 e l s e </space/> i f </space/> ( e d g e [ c ] [ b ] ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( c ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( b ) </space/> < < </space/> t o c h a r ( a ) ; 
 } 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( b ) </space/> < < </space/> t o c h a r ( a ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( c ) ; 
 } 
 } 
 e l s e 
 { 
 i f </space/> ( ! ( e d g e [ a ] [ c ] </space/> & & </space/> e d g e [ c ] [ a ] ) ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( a ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( b ) </space/> < < </space/> t o c h a r ( c ) ; 
 } 
 e l s e </space/> i f </space/> ( ! ( e d g e [ c ] [ b ] </space/> & & </space/> e d g e [ b ] [ c ] ) ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( b ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( a ) </space/> < < </space/> t o c h a r ( c ) ; 
 } 
 e l s e 
 { 
 i f </space/> ( e d g e [ a ] [ a ] ) 
 { </space/> / / </space/> c , b </space/> </space/> </space/> 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( a ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( b ) </space/> < < </space/> t o c h a r ( c ) ; 
 } 
 e l s e 
 { </space/> / / </space/> c , a </space/> </space/> </space/> 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( b ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> t o c h a r ( a ) </space/> < < </space/> t o c h a r ( c ) ; 
 } 
 } 
 } 
 } 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> a a , </space/> b b ; 
 c i n </space/> > > </space/> a a </space/> > > </space/> b b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 3 ; </space/> j + + ) 
 e d g e [ i ] [ j ] </space/> = </space/> 1 ; 
 } 
 e d g e [ a a [ 0 ] </space/> - </space/> ' a ' ] [ a a [ 1 ] </space/> - </space/> ' a ' ] </space/> = </space/> 0 ; 
 e d g e [ b b [ 0 ] </space/> - </space/> ' a ' ] [ b b [ 1 ] </space/> - </space/> ' a ' ] </space/> = </space/> 0 ; 
 c o u t </space/> < < </space/> "" Y E S "" </space/> < < </space/> ' \ n ' ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> i </space/> + </space/> 1 ; </space/> j </space/> < </space/> 3 ; </space/> j + + ) 
 { 
 i f </space/> ( e d g e [ i ] [ j ] </space/> & & </space/> e d g e [ j ] [ i ] ) 
 { 
 a </space/> = </space/> i ; 
 b </space/> = </space/> j ; 
 c </space/> = </space/> 3 </space/> - </space/> a </space/> - </space/> b ; 
 f ( ) ; 
 r e t u r n ; 
 } 
 } 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # i n c l u d e </space/> < e x t / p b _ d s / a s s o c _ c o n t a i n e r . h p p > 
 # i n c l u d e </space/> < e x t / p b _ d s / t r e e _ p o l i c y . h p p > 
 # d e f i n e </space/> d o u b l e </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v i i </space/> v e c t o r < p a i r < i n t , </space/> i n t > </space/> > 
 # d e f i n e </space/> p i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> f a s t </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> d e b ( x ) </space/> c e r r </space/> < < </space/> # x </space/> < < </space/> "" </space/> : </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> m i </space/> m a p < i n t , </space/> i n t > 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 3 5 8 9 
 # d e f i n e </space/> a l l ( a ) </space/> ( a ) . b e g i n ( ) , </space/> ( a ) . e n d ( ) 
 # d e f i n e </space/> r a l l ( a ) </space/> ( a ) . r b e g i n ( ) , </space/> ( a ) . r e n d ( ) 
 # d e f i n e </space/> f ( i , </space/> x , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> r f ( i , </space/> x , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> n ; </space/> i </space/> > = </space/> x ; </space/> i - - ) 
 # d e f i n e </space/> c h e c k ( x ) </space/> c e r r </space/> < < </space/> # x </space/> < < </space/> "" </space/> : </space/> "" </space/> < < </space/> x </space/> < < </space/> e n d l ; 
 # d e f i n e </space/> o r d e r e d _ s e t </space/> \ 
 t r e e < i n t , </space/> n u l l _ t y p e , </space/> l e s s _ e q u a l < i n t > , </space/> r b _ t r e e _ t a g , </space/> t r e e _ o r d e r _ s t a t i s t i c s _ n o d e _ u p d a t e > 
 # d e f i n e </space/> f b o </space/> f i n d _ b y _ o r d e r 
 # d e f i n e </space/> o o k </space/> o r d e r _ o f _ k e y 
 # d e f i n e </space/> b a a r </space/> e x i t ( 0 ) 
 # d e f i n e </space/> y e s </space/> c o u t </space/> < < </space/> "" Y e s \ n "" ; 
 # d e f i n e </space/> n o </space/> c o u t </space/> < < </space/> "" N o \ n "" ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 9 </space/> + </space/> 5 ; 
 u s i n g </space/> n a m e s p a c e </space/> _ _ g n u _ p b d s ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> p o w m o d ( i n t </space/> b a s e , </space/> i n t </space/> e x p o n e n t , </space/> i n t </space/> m o d ) 
 { 
 i n t </space/> a n s </space/> = </space/> 1 ; 
 w h i l e </space/> ( e x p o n e n t ) 
 { 
 i f </space/> ( e x p o n e n t </space/> & </space/> 1 ) 
 a n s </space/> = </space/> ( a n s </space/> * </space/> b a s e ) </space/> % </space/> m o d ; 
 b a s e </space/> = </space/> ( b a s e </space/> * </space/> b a s e ) </space/> % </space/> m o d ; 
 e x p o n e n t </space/> / = </space/> 2 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 f a s t </space/> s t r i n g </space/> s </space/> = </space/> "" a b c "" ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> o n e , </space/> t w o ; 
 c i n </space/> > > </space/> o n e </space/> > > </space/> t w o ; 
 v e c t o r < s t r i n g > </space/> v ; 
 d o 
 { 
 s t r i n g </space/> e x </space/> = </space/> "" "" ; 
 f ( i , </space/> 0 , </space/> n ) </space/> e x </space/> + = </space/> s ; 
 v . p b ( e x ) ; 
 e x </space/> = </space/> "" "" ; 
 f ( i , </space/> 0 , </space/> n ) </space/> e x </space/> + = </space/> s [ 0 ] ; 
 f ( i , </space/> 0 , </space/> n ) </space/> e x </space/> + = </space/> s [ 1 ] ; 
 f ( i , </space/> 0 , </space/> n ) </space/> e x </space/> + = </space/> s [ 2 ] ; 
 v . p b ( e x ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a l l ( s ) ) ) ; 
 f o r </space/> ( s t r i n g </space/> s </space/> : </space/> v ) 
 { 
 i f </space/> ( s . f i n d ( o n e ) </space/> = = </space/> s t r i n g : : n p o s </space/> & & </space/> s . f i n d ( t w o ) </space/> = = </space/> s t r i n g : : n p o s ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 c o u t </space/> < < </space/> s ; 
 e x i t ( 0 ) ; 
 } 
 } 
 c o u t </space/> < < </space/> "" N O "" ; 
 c e r r </space/> < < </space/> "" \ n t i m e </space/> t a k e n </space/> : </space/> "" </space/> < < </space/> ( f l o a t ) c l o c k ( ) </space/> / </space/> C L O C K S _ P E R _ S E C </space/> < < </space/> "" </space/> s e c s "" </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 / / # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f a s t r e a d </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> o p e n f i l e </space/> \ 
 i f s t r e a m </space/> c i n ; </space/> \ 
 o f s t r e a m </space/> c o u t ; </space/> \ 
 c i n . o p e n ( "" i n p u t . t x t "" ) ; </space/> \ 
 c o u t . o p e n ( "" o u t p u t . t x t "" ) ; 
 # d e f i n e </space/> f ( i , </space/> x , </space/> y ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> < </space/> y ; </space/> i + + ) 
 # d e f i n e </space/> a l l ( X ) </space/> X . b e g i n ( ) , </space/> X . e n d ( ) 
 / / </space/> # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> k e y </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> k e y y </space/> p a i r < p a i r < i n t , </space/> i n t > , </space/> i n t > 
 # d e f i n e </space/> k e y y y </space/> p a i r < p a i r < i n t , </space/> i n t > , </space/> p a i r < i n t , </space/> i n t > </space/> > 
 # d e f i n e </space/> k e y d </space/> p a i r < d o u b l e , </space/> d o u b l e > 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> d o u b l e </space/> l o n g </space/> d o u b l e 
 i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 / / </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 / / </space/> c o n s t </space/> i n t </space/> i n f </space/> = </space/> 1 e 1 8 ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s t r i n g </space/> f i n d ( s t r i n g </space/> s , </space/> v e c t o r < k e y > </space/> v , </space/> s t r i n g </space/> a , </space/> s t r i n g </space/> b ) 
 { 
 d o 
 { 
 b o o l </space/> f l a g </space/> = </space/> t r u e ; 
 f ( i , </space/> 0 , </space/> v . s i z e ( ) ) 
 { 
 s t r i n g </space/> t 1 </space/> = </space/> "" "" ; 
 t 1 </space/> + = </space/> s [ v [ i ] . f f ] ; 
 t 1 </space/> + = </space/> s [ v [ i ] . s s ] ; 
 s t r i n g </space/> t 2 </space/> = </space/> "" "" ; 
 t 2 </space/> + = </space/> s [ v [ i ] . s s ] ; 
 t 2 </space/> + = </space/> s [ v [ i ] . f f ] ; 
 s t r i n g </space/> t 3 </space/> = </space/> "" "" ; 
 i f </space/> ( i </space/> > </space/> 0 ) 
 t 3 </space/> + = </space/> s [ v [ i </space/> - </space/> 1 ] . s s ] ; 
 t 3 </space/> + = </space/> s [ v [ i ] . f f ] ; 
 / / </space/> c o u t < < s < < "" </space/> "" < < t 1 < < "" </space/> "" < < t 2 < < "" </space/> "" < < t 3 < < "" </space/> "" < < a < < "" </space/> "" < < b < < "" \ n "" ; 
 i f </space/> ( ( t 1 </space/> = = </space/> a ) </space/> o r </space/> ( t 2 </space/> = = </space/> a ) </space/> o r </space/> ( t 3 </space/> = = </space/> a ) </space/> o r </space/> ( t 1 </space/> = = </space/> b ) </space/> o r </space/> ( t 2 </space/> = = </space/> b ) </space/> o r </space/> ( t 3 </space/> = = </space/> b ) ) 
 f l a g </space/> = </space/> f a l s e ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 i f </space/> ( f l a g ) 
 r e t u r n </space/> s ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( s . b e g i n ( ) , </space/> s . e n d ( ) ) ) ; 
 r e t u r n </space/> "" "" ; 
 } 
 
 v o i d </space/> a n s w e r ( s t r i n g </space/> s , </space/> v e c t o r < k e y > </space/> v , </space/> i n t </space/> n ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( k e y </space/> k </space/> : </space/> v ) 
 f ( i , </space/> 0 , </space/> n ) </space/> i f </space/> ( k . f f </space/> = = </space/> k . s s ) </space/> c o u t </space/> < < </space/> s [ k . f f ] ; 
 e l s e </space/> c o u t </space/> < < </space/> s [ k . f f ] </space/> < < </space/> s [ k . s s ] ; 
 } 
 
 m a i n ( ) 
 { 
 f a s t r e a d ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> a , </space/> b ; 
 c i n </space/> > > </space/> a </space/> > > </space/> b ; 
 s t r i n g </space/> s </space/> = </space/> "" a b c "" ; 
 v e c t o r < k e y > </space/> v ; 
 v . p b ( { </space/> 0 , </space/> 0 </space/> } ) ; 
 v . p b ( { </space/> 1 , </space/> 1 </space/> } ) ; 
 v . p b ( { </space/> 2 , </space/> 2 </space/> } ) ; 
 s t r i n g </space/> t </space/> = </space/> f i n d ( s , </space/> v , </space/> a , </space/> b ) ; 
 i f </space/> ( t </space/> ! = </space/> "" "" ) 
 { 
 a n s w e r ( t , </space/> v , </space/> n ) ; 
 r e t u r n </space/> 0 ; 
 } 
 s </space/> = </space/> "" a b c "" ; 
 v . c l e a r ( ) ; 
 v . p b ( { </space/> 0 , </space/> 1 </space/> } ) ; 
 v . p b ( { </space/> 2 , </space/> 2 </space/> } ) ; 
 t </space/> = </space/> f i n d ( s , </space/> v , </space/> a , </space/> b ) ; 
 a n s w e r ( t , </space/> v , </space/> n ) ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 l l </space/> i n f </space/> = </space/> 4 e 1 8 , </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 v e c t o r < s t r i n g > </space/> v [ 1 2 ] ; 
 v [ 0 ] </space/> = </space/> { </space/> "" a b "" , </space/> "" b c "" , </space/> "" c a "" </space/> } ; 
 v [ 1 ] </space/> = </space/> { </space/> "" a c "" , </space/> "" c b "" , </space/> "" b a "" </space/> } ; 
 v [ 2 ] </space/> = </space/> { </space/> "" b a "" , </space/> "" a c "" , </space/> "" c b "" </space/> } ; 
 v [ 3 ] </space/> = </space/> { </space/> "" b c "" , </space/> "" c a "" , </space/> "" a b "" </space/> } ; 
 v [ 4 ] </space/> = </space/> { </space/> "" c a "" , </space/> "" a b "" , </space/> "" b c "" </space/> } ; 
 v [ 5 ] </space/> = </space/> { </space/> "" c b "" , </space/> "" b a "" , </space/> "" a c "" </space/> } ; 
 v [ 6 ] </space/> = </space/> { </space/> "" a a "" , </space/> "" b b "" , </space/> "" c c "" , </space/> "" a b "" , </space/> "" b c "" </space/> } ; 
 v [ 7 ] </space/> = </space/> { </space/> "" a a "" , </space/> "" b b "" , </space/> "" c c "" , </space/> "" a c "" , </space/> "" c b "" </space/> } ; 
 v [ 8 ] </space/> = </space/> { </space/> "" a a "" , </space/> "" b b "" , </space/> "" c c "" , </space/> "" b a "" , </space/> "" a c "" </space/> } ; 
 v [ 9 ] </space/> = </space/> { </space/> "" a a "" , </space/> "" b b "" , </space/> "" c c "" , </space/> "" b c "" , </space/> "" c a "" </space/> } ; 
 v [ 1 0 ] </space/> = </space/> { </space/> "" a a "" , </space/> "" b b "" , </space/> "" c c "" , </space/> "" c a "" , </space/> "" a b "" </space/> } ; 
 v [ 1 1 ] </space/> = </space/> { </space/> "" a a "" , </space/> "" b b "" , </space/> "" c c "" , </space/> "" c b "" , </space/> "" b a "" </space/> } ; 
 
 s t r i n g </space/> s t [ 1 2 ] 
 = </space/> { </space/> "" a b c "" , </space/> "" a c b "" , </space/> "" b a c "" , </space/> "" b c a "" , </space/> "" c a b "" , </space/> "" c b a "" , </space/> "" a b c "" , </space/> "" a c b "" , </space/> "" b a c "" , </space/> "" b c a "" , </space/> "" c a b "" , </space/> "" c b a "" </space/> } ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 1 2 ; </space/> i + + ) 
 { 
 b o o l </space/> s e e </space/> = </space/> 1 ; 
 f o r </space/> ( a u t o </space/> k t </space/> : </space/> v [ i ] ) 
 { 
 i f </space/> ( k t </space/> = = </space/> s </space/> | | </space/> k t </space/> = = </space/> t ) 
 s e e </space/> = </space/> 0 ; 
 } 
 
 i f </space/> ( s e e ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 c h a r </space/> a </space/> = </space/> s t [ i ] [ 0 ] , </space/> b </space/> = </space/> s t [ i ] [ 1 ] , </space/> c </space/> = </space/> s t [ i ] [ 2 ] ; 
 i f </space/> ( i </space/> < </space/> 6 ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> j + + ) 
 c o u t </space/> < < </space/> a </space/> < < </space/> b </space/> < < </space/> c ; 
 } 
 e l s e 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> j + + ) 
 c o u t </space/> < < </space/> a ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> j + + ) 
 c o u t </space/> < < </space/> b ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> j + + ) 
 c o u t </space/> < < </space/> c ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 } 
 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> i i </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> v l </space/> v e c t o r < l l > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> m t </space/> m a k e _ t u p l e 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p i </space/> 3 . 1 4 1 5 9 2 6 5 
 # d e f i n e </space/> o o </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> l o o </space/> 0 x 7 f f f f f f f f f f f f f f f 
 
 # d e f i n e </space/> p r i m e </space/> 1 0 0 0 0 0 0 0 0 7 
 l l </space/> m o d </space/> = </space/> p r i m e ; 
 l l </space/> p o w m o d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 l l </space/> r e s </space/> = </space/> 1 ; 
 a </space/> % = </space/> m o d ; 
 a s s e r t ( b </space/> > = </space/> 0 ) ; 
 f o r </space/> ( ; </space/> b ; </space/> b </space/> > > = </space/> 1 ) 
 { 
 i f </space/> ( b </space/> & </space/> 1 ) 
 r e s </space/> = </space/> r e s </space/> * </space/> a </space/> % </space/> m o d ; 
 a </space/> = </space/> a </space/> * </space/> a </space/> % </space/> m o d ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 # d e f i n e </space/> W ( x ) </space/> \ 
 c e r r </space/> < < </space/> "" \ 0 3 3 [ 3 1 m "" </space/> < < </space/> # x </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> x </space/> < < </space/> "" \ 0 3 3 [ 0 m "" </space/> \ 
 < < </space/> "" \ n "" ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> f ( s t r i n g </space/> a , </space/> s t r i n g </space/> b ) 
 { 
 r e t u r n </space/> ( ( b </space/> ! = </space/> a . s u b s t r ( 0 , </space/> 2 ) ) </space/> & & </space/> ( b </space/> ! = </space/> a . s u b s t r ( 1 , </space/> 2 ) ) ) ; 
 } 
 
 b o o l </space/> g ( s t r i n g </space/> a , </space/> s t r i n g </space/> b ) 
 { 
 b o o l </space/> r e t </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 5 ; </space/> + + i ) 
 { 
 r e t </space/> & = </space/> ( b </space/> ! = </space/> a . s u b s t r ( i , </space/> 2 ) ) ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 v e c t o r < s t r i n g > </space/> v { </space/> "" a b c "" , </space/> "" a c b "" , </space/> "" b a c "" , </space/> "" b c a "" , </space/> "" c a b "" , </space/> "" c b a "" </space/> } ; 
 v e c t o r < s t r i n g > </space/> d ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 6 ; </space/> + + i ) 
 { 
 d . p b ( v [ i ] </space/> + </space/> v [ i ] ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 6 ; </space/> + + i ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> 6 ; </space/> + + j ) 
 { 
 i f </space/> ( i </space/> ! = </space/> j ) 
 d . p b ( v [ i ] </space/> + </space/> v [ j ] ) ; 
 } 
 } 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> a u x </space/> = </space/> t ; 
 r e v e r s e ( a u x . b e g i n ( ) , </space/> a u x . e n d ( ) ) ; 
 i f </space/> ( n </space/> = = </space/> 1 ) 
 { 
 i n t </space/> p o s </space/> = </space/> - 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 6 ; </space/> + + i ) 
 { 
 i f </space/> ( f ( v [ i ] , </space/> s ) </space/> & & </space/> f ( v [ i ] , </space/> t ) ) 
 { 
 p o s </space/> = </space/> i ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( p o s </space/> = = </space/> - 1 ) 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 e l s e 
 c o u t </space/> < < </space/> "" Y E S \ n "" </space/> < < </space/> v [ p o s ] </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 { 
 i n t </space/> p o s </space/> = </space/> - 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 6 ; </space/> + + i ) 
 { 
 i f </space/> ( g ( d [ i ] , </space/> s ) </space/> & & </space/> g ( d [ i ] , </space/> t ) ) 
 { 
 p o s </space/> = </space/> i ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( p o s </space/> = = </space/> - 1 ) 
 { 
 i f </space/> ( s [ 0 ] </space/> = = </space/> t [ 0 ] ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> s [ 1 ] </space/> < < </space/> t [ 1 ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> s [ 0 ] ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e </space/> i f </space/> ( s [ 1 ] </space/> = = </space/> t [ 1 ] ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> s [ 1 ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> s [ 0 ] </space/> < < </space/> t [ 0 ] ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 e l s e 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n </space/> / </space/> 2 ; </space/> + + i ) 
 { 
 c o u t </space/> < < </space/> d [ p o s ] ; 
 } 
 i f </space/> ( n </space/> % </space/> 2 ) 
 c o u t </space/> < < </space/> d [ p o s ] . s u b s t r ( 0 , </space/> 3 ) ; 
 c o u t </space/> < < </space/> "" \ n "" ; 
 } 
 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a l l ( _ o b j ) </space/> _ o b j . b e g i n ( ) , </space/> _ o b j . e n d ( ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> I N F </space/> 1 e 1 8 
 # d e f i n e </space/> p l l </space/> p a i r < l l , </space/> l l > 
 # d e f i n e </space/> v l l </space/> v e c t o r < l l > 
 # d e f i n e </space/> v v l l </space/> v e c t o r < v l l > 
 # d e f i n e </space/> v p l l </space/> v e c t o r < p a i r < l l , </space/> l l > </space/> > 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 # d e f i n e </space/> t e s t </space/> \ 
 l l </space/> t ; </space/> \ 
 c i n </space/> > > </space/> t ; </space/> \ 
 w h i l e </space/> ( t - - ) 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 5 e 5 </space/> + </space/> 5 0 ; 
 i n l i n e </space/> l l </space/> m a x ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 r e t u r n </space/> ( ( a </space/> > </space/> b ) </space/> ? </space/> a </space/> : </space/> b ) ; 
 } 
 i n l i n e </space/> l l </space/> m i n ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 r e t u r n </space/> ( ( a </space/> > </space/> b ) </space/> ? </space/> b </space/> : </space/> a ) ; 
 } 
 i n l i n e </space/> l l </space/> g c d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 a </space/> % = </space/> b ; 
 r e t u r n </space/> g c d ( b , </space/> a ) ; 
 } 
 
 l l </space/> n , </space/> i ; 
 
 v o i d </space/> s o l ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> a b c </space/> = </space/> "" a b c "" ; 
 v e c t o r < s t r i n g > </space/> r e s ; 
 d o 
 { 
 s t r i n g </space/> c u r ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c u r </space/> + = </space/> a b c ; 
 r e s . p b ( c u r ) ; 
 r e s . p b ( s t r i n g ( n , </space/> a b c [ 0 ] ) </space/> + </space/> s t r i n g ( n , </space/> a b c [ 1 ] ) </space/> + </space/> s t r i n g ( n , </space/> a b c [ 2 ] ) ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a b c . b e g i n ( ) , </space/> a b c . e n d ( ) ) ) ; 
 f o r </space/> ( a u t o </space/> s t r </space/> : </space/> r e s ) 
 { 
 i f </space/> ( s t r . f i n d ( s ) </space/> = = </space/> s t r i n g : : n p o s </space/> & & </space/> s t r . f i n d ( t ) </space/> = = </space/> s t r i n g : : n p o s ) 
 { 
 c o u t </space/> < < </space/> "" Y E S "" </space/> < < </space/> e n d l </space/> < < </space/> s t r </space/> < < </space/> e n d l ; 
 r e t u r n ; 
 } 
 } 
 r e t u r n ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 / / </space/> t e s t 
 s o l ( ) ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s t r i n g </space/> s , </space/> t ; 
 
 v o i d </space/> c h e c k ( s t r i n g & </space/> s t r ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> + </space/> 1 </space/> < </space/> s t r . s i z e ( ) ; </space/> i + + ) 
 { 
 s t r i n g </space/> a </space/> = </space/> "" "" ; 
 a </space/> + = </space/> s t r [ i ] ; 
 a </space/> + = </space/> s t r [ i </space/> + </space/> 1 ] ; 
 i f </space/> ( a </space/> = = </space/> s </space/> | | </space/> a </space/> = = </space/> t ) 
 r e t u r n ; 
 } 
 c o u t </space/> < < </space/> "" Y E S "" </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> s t r ; 
 e x i t ( 0 ) ; 
 } 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 v e c t o r < c h a r > </space/> v ; 
 v . p u s h _ b a c k ( ' a ' ) ; 
 v . p u s h _ b a c k ( ' b ' ) ; 
 v . p u s h _ b a c k ( ' c ' ) ; 
 d o 
 { 
 s t r i n g </space/> s </space/> = </space/> "" "" ; 
 s t r i n g </space/> t </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 ; </space/> i + + ) 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 s </space/> + = </space/> v [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n ; </space/> i + + ) 
 t </space/> + = </space/> v [ i </space/> % </space/> 3 ] ; 
 c h e c k ( s ) ; 
 c h e c k ( t ) ; 
 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ) ; 
 c o u t </space/> < < </space/> "" N O "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> B i s m i l l a h i r </space/> R a h m a n i r </space/> R a h i m 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i ; 
 t y p e d e f </space/> v e c t o r < i n t > </space/> v i ; 
 t y p e d e f </space/> v e c t o r < l o n g </space/> l o n g > </space/> v l l ; 
 t y p e d e f </space/> v e c t o r < p a i r < i n t , </space/> i n t > > </space/> v p i ; 
 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p f </space/> p u s h _ f r o n t 
 # d e f i n e </space/> a l l ( x ) </space/> b e g i n ( x ) , </space/> e n d ( x ) 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( x ) . s i z e ( ) 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> T c a s e ( ) </space/> \ 
 i n t </space/> t c c ; </space/> \ 
 c i n </space/> > > </space/> t c c ; </space/> \ 
 w h i l e </space/> ( t c c - - ) 
 # d e f i n e </space/> F O R ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < </space/> ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> F 0 R ( i , </space/> a ) </space/> F O R ( i , </space/> 0 , </space/> a ) 
 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> l l </space/> I N F </space/> = </space/> 9 e 1 8 ; 
 c o n s t </space/> i n t </space/> M X </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> l d </space/> P I </space/> = </space/> a c o s ( ( l d ) - 1 ) ; 
 c o n s t </space/> i n t </space/> d x [ 8 ] </space/> = </space/> { </space/> 0 , </space/> 1 , </space/> 0 , </space/> - 1 , </space/> 1 , </space/> - 1 , </space/> 1 , </space/> - 1 </space/> } ; 
 c o n s t </space/> i n t </space/> d y [ 8 ] </space/> = </space/> { </space/> 1 , </space/> 0 , </space/> - 1 , </space/> 0 , </space/> 1 , </space/> - 1 , </space/> - 1 , </space/> 1 </space/> } ; 
 
 v o i d </space/> s e t I O ( s t r i n g </space/> n a m e </space/> = </space/> "" "" ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i f </space/> ( s z ( n a m e ) ) 
 { 
 f r e o p e n ( ( n a m e </space/> + </space/> "" . i n "" ) . c _ s t r ( ) , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( ( n a m e </space/> + </space/> "" . o u t "" ) . c _ s t r ( ) , </space/> "" w "" , </space/> s t d o u t ) ; 
 } 
 } 
 
 b o o l </space/> c h k ( s t r i n g </space/> a , </space/> s t r i n g </space/> s , </space/> s t r i n g </space/> t ) 
 { 
 F 0 R ( i , </space/> s z ( a ) ) </space/> i f </space/> ( a . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> s </space/> | | </space/> a . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> t ) </space/> r e t u r n </space/> f a l s e ; 
 s t r i n g </space/> l ; 
 l </space/> + = </space/> a [ 2 ] ; 
 l </space/> + = </space/> a [ 0 ] ; 
 i f </space/> ( l </space/> = = </space/> s </space/> | | </space/> l </space/> = = </space/> t ) 
 r e t u r n </space/> f a l s e ; 
 r e t u r n </space/> t r u e ; 
 } 
 
 b o o l </space/> c h k 2 ( s t r i n g </space/> a , </space/> s t r i n g </space/> s , </space/> s t r i n g </space/> t ) 
 { 
 F 0 R ( i , </space/> s z ( a ) ) </space/> i f </space/> ( a . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> s </space/> | | </space/> a . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> t ) </space/> r e t u r n </space/> f a l s e ; 
 i f </space/> ( s [ 0 ] </space/> = = </space/> s [ 1 ] ) 
 r e t u r n </space/> f a l s e ; 
 i f </space/> ( t [ 0 ] </space/> = = </space/> t [ 1 ] ) 
 r e t u r n </space/> f a l s e ; 
 r e t u r n </space/> t r u e ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 
 s e t I O ( ) ; 
 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 
 s t r i n g </space/> a n s </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 i f </space/> ( c h k ( a n s , </space/> s , </space/> t ) ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 F 0 R ( i , </space/> n ) </space/> c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
 i f </space/> ( c h k 2 ( a n s , </space/> s , </space/> t ) ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 F 0 R ( j , </space/> 3 ) </space/> F 0 R ( i , </space/> n ) </space/> c o u t </space/> < < </space/> a n s [ j ] ; 
 r e t u r n </space/> 0 ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a l l ( a n s ) ) ) ; 
 
 c o u t </space/> < < </space/> "" N O "" ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> i n f </space/> 1 e 1 6 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> u m a p </space/> u n o r d e r e d _ m a p 
 # d e f i n e </space/> u s e t </space/> u n o r d e r e d _ s e t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> i n s </space/> i n s e r t 
 # d e f i n e </space/> v c </space/> v e c t o r 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> p i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> f r ( i , </space/> a , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> f r r ( i , </space/> a , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> a ; </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 # d e f i n e </space/> f i l e _ i n </space/> f r e o p e n ( "" a . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 c o n s t </space/> i n t </space/> m x n </space/> = </space/> 1 e 6 ; 
 s t r i n g </space/> c r e a t e ( s t r i n g </space/> p , </space/> i n t </space/> n ) 
 { 
 s t r i n g </space/> r e s </space/> = </space/> "" "" ; 
 / / </space/> f o r ( i n t </space/> i = 0 ; </space/> i < p . l e n g t h ( ) ; </space/> i + + ) </space/> { 
 / / </space/> f o r ( i n t </space/> j = 0 ; </space/> j < n ; </space/> j + + ) 
 / / </space/> r e s </space/> + = </space/> p [ i ] ; 
 / / </space/> } 
 f r ( i , </space/> 0 , </space/> n ) </space/> r e s </space/> + = </space/> p ; 
 r e t u r n </space/> r e s ; 
 } 
 
 s t r i n g </space/> c r e a t e 2 ( s t r i n g </space/> p , </space/> i n t </space/> n ) 
 { 
 s t r i n g </space/> r e s </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> p . l e n g t h ( ) ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> j + + ) 
 r e s </space/> + = </space/> p [ i ] ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 v o i d </space/> t c ( ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> p </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 s t r i n g </space/> r e s </space/> = </space/> c r e a t e ( p , </space/> n ) ; 
 i f </space/> ( r e s . f i n d ( s ) </space/> = = </space/> s t r i n g : : n p o s </space/> a n d </space/> r e s . f i n d ( t ) </space/> = = </space/> s t r i n g : : n p o s ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 / / </space/> r e s </space/> = </space/> c r e a t e ( p , n ) ; 
 c o u t </space/> < < </space/> r e s </space/> < < </space/> "" \ n "" ; 
 r e t u r n ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a l l ( p ) ) ) ; 
 s o r t ( a l l ( p ) ) ; 
 d o 
 { 
 s t r i n g </space/> r e s </space/> = </space/> c r e a t e 2 ( p , </space/> n ) ; 
 i f </space/> ( r e s . f i n d ( s ) </space/> = = </space/> s t r i n g : : n p o s </space/> a n d </space/> r e s . f i n d ( t ) </space/> = = </space/> s t r i n g : : n p o s ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 c o u t </space/> < < </space/> r e s </space/> < < </space/> "" \ n "" ; 
 r e t u r n ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a l l ( p ) ) ) ; 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 } 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 t c ( ) ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> d o u b l e </space/> d b ; 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t . t i e ( N U L L ) ; 
 i n t </space/> T </space/> = </space/> 1 ; 
 w h i l e </space/> ( T - - ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> i m p </space/> = </space/> "" a b c "" ; 
 s t r i n g </space/> a n s ; 
 d o 
 { 
 s t r i n g </space/> t 1 </space/> = </space/> "" "" ; 
 s t r i n g </space/> t 2 </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 t 1 </space/> + = </space/> i m p ; 
 t 2 </space/> + = </space/> i m p [ 0 ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 t 2 </space/> + = </space/> i m p [ 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 t 2 </space/> + = </space/> i m p [ 2 ] ; 
 b o o l </space/> o k </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( t 1 . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> s </space/> | | </space/> t 1 . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> t ) 
 { 
 o k </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( o k ) 
 { 
 a n s </space/> = </space/> t 1 ; 
 b r e a k ; 
 } 
 o k </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 i f </space/> ( t 2 . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> s </space/> | | </space/> t 2 . s u b s t r ( i , </space/> 2 ) </space/> = = </space/> t ) 
 { 
 o k </space/> = </space/> f a l s e ; 
 b r e a k ; 
 } 
 } 
 i f </space/> ( o k ) 
 { 
 a n s </space/> = </space/> t 2 ; 
 b r e a k ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( i m p . b e g i n ( ) , </space/> i m p . e n d ( ) ) ) ; 
 i f </space/> ( a n s </space/> = = </space/> "" "" ) 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 e l s e 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c c t y p e > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < c t i m e > 
 # i n c l u d e </space/> < u t i l i t y > 
 # i n c l u d e </space/> < m a p > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> l d </space/> l o n g </space/> d o u b l e 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> P ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> l l </space/> L N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> d o u b l e </space/> e p s </space/> = </space/> 1 e - 6 ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 5 0 0 1 0 ; 
 s t r i n g </space/> a b c </space/> = </space/> "" a b c "" ; 
 s t r i n g </space/> s t 1 , </space/> s t 2 ; 
 v e c t o r < s t r i n g > </space/> s t ; 
 i n t </space/> m a i n ( v o i d ) 
 { 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s t 1 </space/> > > </space/> s t 2 ; 
 
 d o 
 { 
 s t r i n g </space/> s t 3 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 s t 3 </space/> + = </space/> a b c ; 
 s t . p u s h _ b a c k ( s t 3 ) ; 
 s t . p u s h _ b a c k ( s t r i n g ( n , </space/> a b c [ 0 ] ) </space/> + </space/> s t r i n g ( n , </space/> a b c [ 1 ] ) </space/> + </space/> s t r i n g ( n , </space/> a b c [ 2 ] ) ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a b c . b e g i n ( ) , </space/> a b c . e n d ( ) ) ) ; 
 
 v e c t o r < s t r i n g > : : i t e r a t o r </space/> i t </space/> = </space/> s t . b e g i n ( ) ; 
 w h i l e </space/> ( i t </space/> ! = </space/> s t . e n d ( ) ) 
 { 
 s t r i n g </space/> s t 4 </space/> = </space/> * i t ; 
 i f </space/> ( s t 4 . f i n d ( s t 1 ) </space/> = = </space/> - 1 </space/> & & </space/> s t 4 . f i n d ( s t 2 ) </space/> = = </space/> - 1 ) 
 { 
 p r i n t f ( "" Y E S \ n "" ) ; 
 c o u t </space/> < < </space/> s t 4 </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 i t + + ; 
 } 
 p r i n t f ( "" N O \ n "" ) ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 / / </space/> P r o b l e m : </space/> E . </space/> T w o </space/> S m a l l </space/> S t r i n g s 
 / / </space/> C o n t e s t : </space/> C o d e f o r c e s </space/> - </space/> C o d e f o r c e s </space/> R o u n d </space/> # 5 8 2 </space/> ( D i v . </space/> 3 ) 
 / / </space/> U R L : </space/> h t t p s : / / c o d e f o r c e s . c o m / c o n t e s t / 1 2 1 3 / p r o b l e m / E 
 / / </space/> M e m o r y </space/> L i m i t : </space/> 2 5 6 </space/> M B 
 / / </space/> T i m e </space/> L i m i t : </space/> 2 0 0 0 </space/> m s 
 / / </space/> P o w e r e d </space/> b y </space/> C P </space/> E d i t o r </space/> ( h t t p s : / / g i t h u b . c o m / c p e d i t o r / c p e d i t o r ) 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> V I </space/> v e c t o r < i n t > 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> p c i </space/> p a i r < c h a r , </space/> i n t > 
 # d e f i n e </space/> m i i </space/> m a p < i n t , </space/> i n t > 
 # d e f i n e </space/> m c i </space/> m a p < c h a r , </space/> i n t > 
 # d e f i n e </space/> s e t b i t s ( n ) </space/> _ _ b u i l t i n _ p o p c o u n t ( n ) 
 # d e f i n e </space/> f i l l ( a , </space/> b ) </space/> m e m s e t ( a , </space/> b , </space/> s i z e o f ( a ) ) 
 # d e f i n e </space/> a l l ( v ) </space/> ( v ) . b e g i n ( ) , </space/> ( v ) . e n d ( ) 
 # d e f i n e </space/> y e s </space/> c o u t </space/> < < </space/> "" Y e s "" </space/> < < </space/> e n d l 
 # d e f i n e </space/> n o </space/> c o u t </space/> < < </space/> "" N o "" </space/> < < </space/> e n d l 
 # d e f i n e </space/> e n d l </space/> "" \ n "" 
 # d e f i n e </space/> I O S </space/> \ 
 s t d : : i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> P I </space/> 3 . 1 4 1 5 9 2 6 5 
 c o n s t </space/> l o n g </space/> l o n g </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> l o n g </space/> l o n g </space/> m o d </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; </space/> / / </space/> 9 9 8 , 2 4 4 , 3 5 3 
 
 i n t </space/> l c m ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 i n t </space/> g </space/> = </space/> _ _ g c d ( a , </space/> b ) ; 
 r e t u r n </space/> a </space/> / </space/> g </space/> * </space/> b ; 
 } 
 i n t </space/> n ; 
 s t r i n g </space/> s 1 , </space/> s 2 ; 
 s t r i n g </space/> g e n e r a t e ( s t r i n g </space/> s ) 
 { 
 s t r i n g </space/> r e s </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 r e s . p b ( s [ 0 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 r e s . p b ( s [ 1 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 r e s . p b ( s [ 2 ] ) ; 
 r e t u r n </space/> r e s ; 
 } 
 b o o l </space/> c h e c k ( s t r i n g </space/> s , </space/> i n t </space/> b ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> s . s i z e ( ) </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 s t r i n g </space/> t e m p </space/> = </space/> s . s u b s t r ( i , </space/> 2 ) ; 
 i f </space/> ( t e m p </space/> = = </space/> s 1 </space/> | | </space/> t e m p </space/> = = </space/> s 2 ) 
 r e t u r n </space/> 0 ; 
 } 
 i f </space/> ( b ) 
 r e t u r n </space/> 1 ; 
 s t r i n g </space/> t 1 </space/> = </space/> "" "" ; 
 t 1 . p b ( s [ 2 ] ) ; 
 t 1 . p b ( s [ 0 ] ) ; 
 i f </space/> ( t 1 </space/> = = </space/> s 1 </space/> | | </space/> t 1 </space/> = = </space/> s 2 ) 
 r e t u r n </space/> 0 ; 
 r e t u r n </space/> 1 ; 
 } 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> t ; 
 t </space/> = </space/> 1 ; 
 / / </space/> 	 c i n > > t ; 
 w h i l e </space/> ( t - - ) 
 { 
 c i n </space/> > > </space/> n ; 
 c i n </space/> > > </space/> s 1 </space/> > > </space/> s 2 ; 
 s t r i n g </space/> a </space/> = </space/> "" a b c "" ; 
 y e s ; 
 d o 
 { 
 i f </space/> ( c h e c k ( a , </space/> 0 ) ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a ; 
 b r e a k ; 
 } 
 s t r i n g </space/> t e m p </space/> = </space/> g e n e r a t e ( a ) ; 
 i f </space/> ( c h e c k ( t e m p , </space/> 1 ) ) 
 { 
 c o u t </space/> < < </space/> t e m p ; 
 b r e a k ; 
 } 
 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a l l ( a ) ) ) ; 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> I O S </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( 0 ) 
 # d e f i n e </space/> i n f i n i t e </space/> 9 1 2 3 4 5 6 7 8 9 
 # d e f i n e </space/> P R E C I S I O N </space/> \ 
 c o u t . p r e c i s i o n ( 3 ) ; </space/> \ 
 c o u t . s e t f ( i o s : : f i x e d ) ; 
 # d e f i n e </space/> d b </space/> \ 
 c o u t </space/> < < </space/> "" D e b u g "" </space/> \ 
 < < </space/> "" \ n "" ; 
 # d e f i n e </space/> l e r _ e n t r a d a </space/> f r e o p e n ( "" t e s t _ i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 
 i n t </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 
 b o o l </space/> c h e c k ( s t r i n g </space/> a ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 ; </space/> i + + ) 
 { 
 / / </space/> c o u t </space/> < < </space/> t [ i ] </space/> < < </space/> "" </space/> "" </space/> < < </space/> a [ i ] </space/> < < </space/> "" </space/> "" </space/> < < </space/> t [ i </space/> + </space/> 1 ] </space/> < < </space/> "" </space/> "" </space/> < < </space/> a [ i </space/> + </space/> 1 ] </space/> < < </space/> "" \ n "" ; 
 i f </space/> ( s [ 0 ] </space/> = = </space/> a [ i ] </space/> a n d </space/> a [ i </space/> + </space/> 1 ] </space/> = = </space/> s [ 1 ] ) 
 r e t u r n </space/> f a l s e ; 
 i f </space/> ( t [ 0 ] </space/> = = </space/> a [ i ] </space/> a n d </space/> a [ i </space/> + </space/> 1 ] </space/> = = </space/> t [ 1 ] ) 
 r e t u r n </space/> f a l s e ; 
 } 
 r e t u r n </space/> t r u e ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 
 v e c t o r < s t r i n g > </space/> t e s t e ; 
 t e s t e . p u s h _ b a c k ( "" a b c a "" ) ; 
 t e s t e . p u s h _ b a c k ( "" a c b a "" ) ; 
 t e s t e . p u s h _ b a c k ( "" b a c b "" ) ; 
 t e s t e . p u s h _ b a c k ( "" b c a b "" ) ; 
 t e s t e . p u s h _ b a c k ( "" c a b c "" ) ; 
 t e s t e . p u s h _ b a c k ( "" c b a c "" ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> t e s t e . s i z e ( ) ; </space/> i + + ) 
 { 
 i f </space/> ( c h e c k ( t e s t e [ i ] ) ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> n ; </space/> j + + ) 
 f o r </space/> ( i n t </space/> k </space/> = </space/> 0 ; </space/> k </space/> < </space/> 3 ; </space/> k + + ) 
 c o u t </space/> < < </space/> t e s t e [ i ] [ k ] ; 
 r e t u r n ; 
 } 
 } 
 
 s e t < i n t > </space/> t e m ; 
 t e m . i n s e r t ( ' a ' ) ; 
 t e m . i n s e r t ( ' b ' ) ; 
 t e m . i n s e r t ( ' c ' ) ; 
 
 i f </space/> ( s [ 0 ] </space/> = = </space/> t [ 1 ] </space/> a n d </space/> t [ 1 ] </space/> = = </space/> s [ 0 ] ) 
 { 
 t e m . e r a s e ( s [ 0 ] ) ; 
 t e m . e r a s e ( s [ 1 ] ) ; 
 
 i f </space/> ( s [ 0 ] </space/> ! = </space/> s [ 1 ] ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> s [ 0 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> c h a r ( * t e m . b e g i n ( ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> s [ 1 ] ; 
 r e t u r n ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> "" a b c "" ; 
 r e t u r n ; 
 } 
 } 
 
 i f </space/> ( s [ 0 ] </space/> = = </space/> t [ 0 ] </space/> a n d </space/> s [ 1 ] </space/> ! = </space/> s [ 0 ] </space/> a n d </space/> t [ 1 ] </space/> ! = </space/> t [ 0 ] ) 
 { 
 t e m . e r a s e ( s [ 0 ] ) ; 
 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> c h a r ( * + + t e m . b e g i n ( ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> c h a r ( * t e m . b e g i n ( ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> s [ 0 ] ; 
 r e t u r n ; 
 } 
 
 i f </space/> ( s [ 1 ] </space/> = = </space/> t [ 1 ] </space/> a n d </space/> s [ 1 ] </space/> ! = </space/> s [ 0 ] </space/> a n d </space/> t [ 1 ] </space/> ! = </space/> t [ 0 ] ) 
 { 
 t e m . e r a s e ( s [ 1 ] ) ; 
 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> s [ 1 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> c h a r ( * + + t e m . b e g i n ( ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> c h a r ( * t e m . b e g i n ( ) ) ; 
 
 r e t u r n ; 
 } 
 / / </space/> c o u t </space/> < < </space/> c h e c k ( "" a b c a "" ) ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 s o l v e ( ) ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 n a m e s p a c e </space/> F A S T _ I O 
 { 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 v o i d </space/> r e a d ( T & </space/> a ) 
 { 
 a </space/> = </space/> 0 ; 
 i n t </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( ! i s d i g i t ( c ) ) 
 { 
 i f </space/> ( c </space/> = = </space/> ' - ' ) 
 { 
 f </space/> = </space/> - 1 ; 
 } 
 c </space/> = </space/> g e t c h a r ( ) ; 
 } 
 w h i l e </space/> ( i s d i g i t ( c ) ) 
 { 
 a </space/> = </space/> a </space/> * </space/> 1 0 </space/> + </space/> c </space/> - </space/> ' 0 ' ; 
 c </space/> = </space/> g e t c h a r ( ) ; 
 } 
 a </space/> = </space/> a </space/> * </space/> f ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 v o i d </space/> w r i t e ( T </space/> a ) 
 { 
 i f </space/> ( a </space/> < </space/> 0 ) 
 { 
 a </space/> = </space/> - a ; 
 p u t c h a r ( ' - ' ) ; 
 } 
 i f </space/> ( a </space/> > </space/> 9 ) 
 { 
 w r i t e ( a </space/> / </space/> 1 0 ) ; 
 } 
 p u t c h a r ( a </space/> % </space/> 1 0 </space/> + </space/> ' 0 ' ) ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 v o i d </space/> w r i t e l n ( T </space/> a ) 
 { 
 w r i t e ( a ) ; 
 p u t s ( "" "" ) ; 
 } 
 } 
 i n t </space/> n ; 
 i n t </space/> a [ 3 ] [ 3 ] ; 
 s t r i n g </space/> s , </space/> t ; 
 v o i d </space/> d o 1 ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t </space/> z ) 
 { 
 p u t s ( "" Y E S "" ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> c h a r ( c h a r ( x </space/> + </space/> ' a ' ) ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> c h a r ( z </space/> + </space/> ' a ' ) </space/> < < </space/> c h a r ( y </space/> + </space/> ' a ' ) ; 
 } 
 } 
 v o i d </space/> d o 2 ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t </space/> z ) 
 { 
 p u t s ( "" Y E S "" ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> c h a r ( x </space/> + </space/> ' a ' ) </space/> < < </space/> c h a r ( y </space/> + </space/> ' a ' ) </space/> < < </space/> c h a r ( z </space/> + </space/> ' a ' ) ; 
 } 
 } 
 v o i d </space/> d o 3 ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t </space/> z ) 
 { 
 p u t s ( "" Y E S "" ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> c h a r ( x </space/> + </space/> ' a ' ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> c h a r ( y </space/> + </space/> ' a ' ) </space/> < < </space/> c h a r ( z </space/> + </space/> ' a ' ) ; 
 } 
 } 
 v o i d </space/> d o 4 ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t </space/> z ) 
 { 
 p u t s ( "" Y E S "" ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> c h a r ( y </space/> + </space/> ' a ' ) </space/> < < </space/> c h a r ( z </space/> + </space/> ' a ' ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> c h a r ( x </space/> + </space/> ' a ' ) ; 
 } 
 } 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> s </space/> > > </space/> t ; 
 a [ s [ 0 ] </space/> - </space/> ' a ' ] [ s [ 1 ] </space/> - </space/> ' a ' ] </space/> = </space/> 1 ; 
 a [ t [ 0 ] </space/> - </space/> ' a ' ] [ t [ 1 ] </space/> - </space/> ' a ' ] </space/> = </space/> 1 ; 
 i f </space/> ( a [ 0 ] [ 1 ] </space/> & & </space/> a [ 1 ] [ 0 ] ) 
 { 
 d o 1 ( 0 , </space/> 1 , </space/> 2 ) ; 
 } 
 e l s e </space/> i f </space/> ( a [ 0 ] [ 2 ] </space/> & & </space/> a [ 2 ] [ 0 ] ) 
 { 
 d o 1 ( 2 , </space/> 0 , </space/> 1 ) ; 
 } 
 e l s e </space/> i f </space/> ( a [ 1 ] [ 2 ] </space/> & & </space/> a [ 2 ] [ 1 ] ) 
 { 
 d o 1 ( 2 , </space/> 1 , </space/> 0 ) ; 
 } 
 e l s e </space/> i f </space/> ( ! a [ 0 ] [ 1 ] </space/> & & </space/> ! a [ 1 ] [ 2 ] </space/> & & </space/> ! a [ 2 ] [ 0 ] ) 
 { 
 d o 2 ( 0 , </space/> 1 , </space/> 2 ) ; 
 } 
 e l s e </space/> i f </space/> ( ! a [ 1 ] [ 0 ] </space/> & & </space/> ! a [ 0 ] [ 2 ] </space/> & & </space/> ! a [ 2 ] [ 1 ] ) 
 { 
 d o 2 ( 1 , </space/> 0 , </space/> 2 ) ; 
 } 
 e l s e </space/> i f </space/> ( a [ 0 ] [ 1 ] </space/> & & </space/> a [ 2 ] [ 1 ] ) 
 { 
 d o 3 ( 1 , </space/> 0 , </space/> 2 ) ; 
 } 
 e l s e </space/> i f </space/> ( a [ 1 ] [ 0 ] </space/> & & </space/> a [ 2 ] [ 0 ] ) 
 { 
 d o 3 ( 0 , </space/> 1 , </space/> 2 ) ; 
 } 
 e l s e </space/> i f </space/> ( a [ 1 ] [ 2 ] </space/> & & </space/> a [ 0 ] [ 2 ] ) 
 { 
 d o 3 ( 2 , </space/> 0 , </space/> 1 ) ; 
 } 
 e l s e </space/> i f </space/> ( a [ 1 ] [ 2 ] </space/> & & </space/> a [ 1 ] [ 0 ] ) 
 { 
 d o 4 ( 1 , </space/> 0 , </space/> 2 ) ; 
 } 
 e l s e </space/> i f </space/> ( a [ 0 ] [ 1 ] </space/> & & </space/> a [ 0 ] [ 2 ] ) 
 { 
 d o 4 ( 0 , </space/> 1 , </space/> 2 ) ; 
 } 
 e l s e </space/> i f </space/> ( a [ 2 ] [ 0 ] </space/> & & </space/> a [ 2 ] [ 1 ] ) 
 { 
 d o 4 ( 2 , </space/> 0 , </space/> 1 ) ; 
 } 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 / / </space/> 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> F </space/> f i r s t 
 # d e f i n e </space/> S </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l b </space/> l o w e r _ b o u n d 
 # d e f i n e </space/> u b </space/> u p p e r _ b o u n d 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> f i x </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( 1 0 ) 
 # d e f i n e </space/> r e p ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> i n t ( a ) ; </space/> i </space/> < = </space/> i n t ( b ) ; </space/> i + + ) 
 # d e f i n e </space/> r e p b ( i , </space/> b , </space/> a ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> i n t ( b ) ; </space/> i </space/> > = </space/> i n t ( a ) ; </space/> i - - ) 
 # d e f i n e </space/> F a s t I O </space/> i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) 
 
 t y p e d e f </space/> d o u b l e </space/> d b ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 F a s t I O ; 
 i n t </space/> n ; 
 s t r i n g </space/> s [ 2 ] ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s [ 0 ] </space/> > > </space/> s [ 1 ] ; 
 s o r t ( s , </space/> s </space/> + </space/> 2 ) ; 
 b o o l </space/> o k </space/> = </space/> 0 ; 
 s t r i n g </space/> p </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 b o o l </space/> f </space/> = </space/> 1 ; 
 s t r i n g </space/> c ; 
 c </space/> = </space/> p . s u b s t r ( 0 , </space/> 2 ) ; 
 i f </space/> ( c </space/> = = </space/> s [ 0 ] </space/> o r </space/> c </space/> = = </space/> s [ 1 ] ) 
 f </space/> = </space/> 0 ; 
 c </space/> = </space/> p . s u b s t r ( 1 , </space/> 2 ) ; 
 i f </space/> ( c </space/> = = </space/> s [ 0 ] </space/> o r </space/> c </space/> = = </space/> s [ 1 ] ) 
 f </space/> = </space/> 0 ; 
 c </space/> = </space/> p . s u b s t r ( 2 , </space/> 1 ) </space/> + </space/> p . s u b s t r ( 0 , </space/> 1 ) ; 
 i f </space/> ( n </space/> > </space/> 1 </space/> a n d </space/> ( c </space/> = = </space/> s [ 0 ] </space/> o r </space/> c </space/> = = </space/> s [ 1 ] ) ) 
 f </space/> = </space/> 0 ; 
 i f </space/> ( f ) 
 { 
 o k </space/> = </space/> 1 ; 
 b r e a k ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a l l ( p ) ) ) ; 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 i f </space/> ( o k ) 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> p ; 
 e l s e 
 { 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" a b "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" a c "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" b c "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a "" ; 
 } 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" b a "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" b c "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a c "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" b "" ; 
 } 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" c a "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" c b "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a b "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" c "" ; 
 } 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" b a "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" c a "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" b c "" ; 
 } 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" a b "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" c b "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" b "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a c "" ; 
 } 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" a c "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" b c "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" c "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a b "" ; 
 } 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" a b "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" b a "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" c "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" b "" ; 
 } 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" a c "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" c a "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" b "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" c "" ; 
 } 
 i f </space/> ( s [ 0 ] </space/> = = </space/> "" b c "" </space/> a n d </space/> s [ 1 ] </space/> = = </space/> "" c b "" ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" c "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" a "" ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> "" b "" ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < b i t s e t > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < u n o r d e r e d _ m a p > 
 # i n c l u d e </space/> < f u n c t i o n a l > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < c a s s e r t > 
 # i n c l u d e </space/> < d e q u e > 
 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> v i </space/> v e c t o r < i n t > 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 / / </space/> f r e o p e n ( "" i n p u t </space/> f i l e n a m e "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t </space/> f i l e n a m e "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 i n t </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> p </space/> = </space/> "" a b c "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 6 ; </space/> i + + ) 
 { 
 s t r i n g </space/> r e s </space/> = </space/> s t r i n g ( n , </space/> p [ 0 ] ) </space/> + </space/> s t r i n g ( n , </space/> p [ 1 ] ) </space/> + </space/> s t r i n g ( n , </space/> p [ 2 ] ) ; 
 i f </space/> ( r e s . f i n d ( s ) </space/> = = </space/> s t r i n g : : n p o s </space/> & & </space/> r e s . f i n d ( t ) </space/> = = </space/> s t r i n g : : n p o s ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 c o u t </space/> < < </space/> r e s ; 
 r e t u r n </space/> 0 ; 
 } 
 r e s </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 r e s </space/> + = </space/> p ; 
 } 
 i f </space/> ( r e s . f i n d ( s ) </space/> = = </space/> s t r i n g : : n p o s </space/> & & </space/> r e s . f i n d ( t ) </space/> = = </space/> s t r i n g : : n p o s ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" ; 
 c o u t </space/> < < </space/> r e s ; 
 r e t u r n </space/> 0 ; 
 } 
 n e x t _ p e r m u t a t i o n ( p . b e g i n ( ) , </space/> p . e n d ( ) ) ; 
 } 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < s t d i o . h > 
 
 i n t </space/> n ; 
 c h a r </space/> s [ 5 ] , </space/> t [ 5 ] , </space/> a n s [ 3 0 0 0 0 5 ] ; 
 
 c h a r </space/> g [ 6 ] [ 5 ] </space/> = </space/> { </space/> "" \ 0 a b c "" , </space/> "" \ 0 a c b "" , </space/> "" \ 0 b a c "" , </space/> "" \ 0 b c a "" , </space/> "" \ 0 c a b "" , </space/> "" \ 0 c b a "" </space/> } ; 
 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % s % s "" , </space/> & n , </space/> s </space/> + </space/> 1 , </space/> t </space/> + </space/> 1 ) ; 
 p r i n t f ( "" Y E S \ n "" ) ; 
 i f </space/> ( s [ 1 ] </space/> = = </space/> t [ 1 ] </space/> & & </space/> s [ 1 ] </space/> ! = </space/> s [ 2 ] </space/> & & </space/> t [ 1 ] </space/> ! = </space/> t [ 2 ] </space/> & & </space/> s [ 2 ] </space/> ! = </space/> t [ 2 ] ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( s [ 2 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( t [ 2 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( s [ 1 ] ) ; 
 r e t u r n </space/> 0 ; 
 } 
 i f </space/> ( s [ 2 ] </space/> = = </space/> t [ 2 ] </space/> & & </space/> s [ 1 ] </space/> ! = </space/> s [ 2 ] </space/> & & </space/> t [ 1 ] </space/> ! = </space/> t [ 2 ] </space/> & & </space/> s [ 1 ] </space/> ! = </space/> t [ 1 ] ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( s [ 2 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( t [ 1 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( s [ 1 ] ) ; 
 r e t u r n </space/> 0 ; 
 } 
 i f </space/> ( s [ 1 ] </space/> ! = </space/> s [ 2 ] </space/> & & </space/> s [ 1 ] </space/> = = </space/> t [ 2 ] </space/> & & </space/> s [ 2 ] </space/> = = </space/> t [ 1 ] ) 
 { 
 i n t </space/> t e m p [ 3 ] ; 
 t e m p [ 0 ] </space/> = </space/> t e m p [ 1 ] </space/> = </space/> t e m p [ 2 ] </space/> = </space/> 1 ; 
 t e m p [ s [ 1 ] </space/> - </space/> ' a ' ] - - , </space/> t e m p [ s [ 2 ] </space/> - </space/> ' a ' ] - - ; 
 c h a r </space/> c </space/> = </space/> t e m p [ 0 ] </space/> ? </space/> ' a ' </space/> : </space/> t e m p [ 1 ] </space/> ? </space/> ' b ' </space/> : </space/> ' c ' ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( s [ 2 ] ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( c ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p u t c h a r ( s [ 1 ] ) ; 
 r e t u r n </space/> 0 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 6 ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> 3 </space/> * </space/> n ; </space/> j </space/> + = </space/> 3 ) 
 a n s [ j ] </space/> = </space/> g [ i ] [ 1 ] , </space/> a n s [ j </space/> + </space/> 1 ] </space/> = </space/> g [ i ] [ 2 ] , </space/> a n s [ j </space/> + </space/> 2 ] </space/> = </space/> g [ i ] [ 3 ] ; 
 i n t </space/> f l a g </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < </space/> 3 </space/> * </space/> n ; </space/> j + + ) 
 i f </space/> ( a n s [ j ] </space/> = = </space/> s [ 1 ] </space/> & & </space/> a n s [ j </space/> + </space/> 1 ] </space/> = = </space/> s [ 2 ] ) 
 f l a g </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < </space/> 3 </space/> * </space/> n ; </space/> j + + ) 
 i f </space/> ( a n s [ j ] </space/> = = </space/> t [ 1 ] </space/> & & </space/> a n s [ j </space/> + </space/> 1 ] </space/> = = </space/> t [ 2 ] ) 
 f l a g </space/> = </space/> 1 ; 
 i f </space/> ( ! f l a g ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 1 ; </space/> j </space/> < = </space/> 3 </space/> * </space/> n ; </space/> j + + ) 
 p u t c h a r ( a n s [ j ] ) ; 
 r e t u r n </space/> 0 ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( "" O 3 "" ) 
 # p r a g m a </space/> G C C </space/> t a r g e t ( "" p o p c n t "" ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> F A S T I O </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( N U L L ) 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> c h m a x ( x , </space/> a ) </space/> x </space/> = </space/> m a x ( x , </space/> a ) ; 
 # d e f i n e </space/> c h m i n ( x , </space/> a ) </space/> x </space/> = </space/> m i n ( x , </space/> a ) ; 
 
 i n t </space/> m a i n ( ) 
 { 
 F A S T I O ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> m y s t r i n g </space/> = </space/> "" a b c "" ; 
 s t r i n g </space/> a n s </space/> = </space/> "" "" ; 
 d o 
 { 
 s t r i n g </space/> c h e c k </space/> = </space/> m y s t r i n g </space/> + </space/> m y s t r i n g ; 
 i n t </space/> f i r s t </space/> = </space/> 0 , </space/> s e c o n d </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> i n t ( c h e c k . s i z e ( ) ) </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 s t r i n g </space/> s u b s t r i n g </space/> = </space/> c h e c k . s u b s t r ( i , </space/> 2 ) ; 
 i f </space/> ( ! ( s </space/> = = </space/> s u b s t r i n g </space/> | | </space/> t </space/> = = </space/> s u b s t r i n g ) ) 
 { 
 f i r s t + + ; 
 } 
 } 
 i f </space/> ( ! ( s </space/> = = </space/> "" a a "" </space/> | | </space/> s </space/> = = </space/> "" b b "" </space/> | | </space/> s </space/> = = </space/> "" c c "" </space/> | | </space/> t </space/> = = </space/> "" a a "" </space/> | | </space/> t </space/> = = </space/> "" b b "" </space/> | | </space/> t </space/> = = </space/> "" c c "" 
 | | </space/> s </space/> = = </space/> m y s t r i n g . s u b s t r ( 0 , </space/> 2 ) </space/> | | </space/> s </space/> = = </space/> m y s t r i n g . s u b s t r ( 1 , </space/> 2 ) 
 | | </space/> t </space/> = = </space/> m y s t r i n g . s u b s t r ( 1 , </space/> 2 ) </space/> | | </space/> t </space/> = = </space/> m y s t r i n g . s u b s t r ( 0 , </space/> 2 ) ) ) 
 { 
 s e c o n d </space/> = </space/> 1 ; 
 } 
 i f </space/> ( f i r s t </space/> = = </space/> i n t ( c h e c k . s i z e ( ) ) </space/> - </space/> 1 ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> m y s t r i n g ; 
 } 
 b r e a k ; 
 } 
 i f </space/> ( s e c o n d </space/> = = </space/> 1 ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> m y s t r i n g [ 0 ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> m y s t r i n g [ 1 ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 a n s </space/> + = </space/> m y s t r i n g [ 2 ] ; 
 } 
 b r e a k ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( m y s t r i n g . b e g i n ( ) , </space/> m y s t r i n g . e n d ( ) ) ) ; 
 c o u t </space/> < < </space/> "" Y E S "" 
 < < </space/> "" \ n "" ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> M A X N </space/> 1 0 0 0 0 5 
 # d e f i n e </space/> I N F </space/> 1 0 0 0 0 0 0 0 0 1 
 # d e f i n e </space/> M O D </space/> 1 0 0 0 0 0 0 0 0 7 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> i n t </space/> l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> P ; 
 # d e f i n e </space/> m a x 3 ( a , </space/> b , </space/> c ) </space/> m a x ( m a x ( a , </space/> b ) , </space/> c ) 
 # d e f i n e </space/> m i n 3 ( a , </space/> b , </space/> c ) </space/> m i n ( m i n ( a , </space/> b ) , </space/> c ) 
 # d e f i n e </space/> m a x 4 ( a , </space/> b , </space/> c , </space/> d ) </space/> m a x ( a , </space/> m a x 3 ( b , </space/> c , </space/> d ) ) 
 # d e f i n e </space/> m i n 4 ( a , </space/> b , </space/> c , </space/> d ) </space/> m i n ( a , </space/> m i n 3 ( b , </space/> c , </space/> d ) ) 
 # d e f i n e </space/> m a x 5 ( a , </space/> b , </space/> c , </space/> d , </space/> e ) </space/> m a x ( m a x 4 ( a , </space/> b , </space/> c , </space/> d ) , </space/> e ) 
 # d e f i n e </space/> m i n 5 ( a , </space/> b , </space/> c , </space/> d , </space/> e ) </space/> m i n ( m i n 4 ( a , </space/> b , </space/> c , </space/> d ) , </space/> e ) 
 # d e f i n e </space/> f o r i ( i , </space/> a , </space/> n ) </space/> f o r </space/> ( l l </space/> i </space/> = </space/> a ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 / / </space/> v e c t o r < l l > : : i t e r a t o r </space/> l o w e r , </space/> u p p e r ; 
 / / </space/> l o w e r </space/> = </space/> l o w e r _ b o u n d ( p r e f . b e g i n ( ) , </space/> p r e f . e n d ( ) , </space/> b [ i ] ) ; 
 l l </space/> g c d ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( b </space/> = = </space/> 0 ) 
 r e t u r n </space/> a ; 
 r e t u r n </space/> g c d ( b , </space/> a </space/> % </space/> b ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 l l </space/> t c ; 
 t c </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t c ; 
 w h i l e </space/> ( t c - - ) 
 { 
 l l </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 l l </space/> i ; 
 s t r i n g </space/> a b c </space/> = </space/> "" a b c "" ; 
 v e c t o r < s t r i n g > </space/> r e s ; 
 d o 
 { 
 s t r i n g </space/> c u r ; 
 f o r </space/> ( i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c u r </space/> + = </space/> a b c ; 
 } 
 r e s . p u s h _ b a c k ( c u r ) ; 
 r e s . p u s h _ b a c k ( s t r i n g ( n , </space/> a b c [ 0 ] ) </space/> + </space/> s t r i n g ( n , </space/> a b c [ 1 ] ) </space/> + </space/> s t r i n g ( n , </space/> a b c [ 2 ] ) ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( a b c . b e g i n ( ) , </space/> a b c . e n d ( ) ) ) ; 
 l l </space/> f l a g </space/> = </space/> 0 ; 
 s t r i n g </space/> a n s ; 
 f o r </space/> ( a u t o </space/> t e m p </space/> : </space/> r e s ) 
 { 
 i f </space/> ( t e m p . f i n d ( s ) </space/> = = </space/> s t r i n g : : n p o s </space/> & & </space/> t e m p . f i n d ( t ) </space/> = = </space/> s t r i n g : : n p o s ) 
 { 
 a n s </space/> = </space/> t e m p ; 
 f l a g </space/> = </space/> 1 ; 
 b r e a k ; 
 } 
 i f </space/> ( f l a g </space/> = = </space/> 1 ) 
 { 
 b r e a k ; 
 } 
 } 
 i f </space/> ( f l a g </space/> = = </space/> 1 ) 
 { 
 c o u t </space/> < < </space/> "" Y E S "" </space/> < < </space/> e n d l ; 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 e l s e 
 { 
 c o u t </space/> < < </space/> "" N O "" </space/> < < </space/> e n d l ; 
 } 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 i n t </space/> m a i n ( ) 
 { 
 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> x </space/> = </space/> s t r i n g ( n , </space/> ' s ' ) ; </space/> / / </space/> c o u t < < x < < e n d l ; 
 s t r i n g </space/> r </space/> = </space/> "" a b c "" ; 
 v e c t o r < s t r i n g > </space/> v ; 
 d o 
 { 
 s t r i n g </space/> x ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 x </space/> + = </space/> r ; 
 } 
 v . p u s h _ b a c k ( x ) ; 
 v . p u s h _ b a c k ( s t r i n g ( n , </space/> r [ 0 ] ) </space/> + </space/> s t r i n g ( n , </space/> r [ 1 ] ) </space/> + </space/> s t r i n g ( n , </space/> r [ 2 ] ) ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( r . b e g i n ( ) , </space/> r . e n d ( ) ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> v . s i z e ( ) ; </space/> i + + ) 
 { 
 s t r i n g </space/> d </space/> = </space/> v [ i ] ; 
 i f </space/> ( d . f i n d ( s ) </space/> = = </space/> d . n p o s </space/> & & </space/> d . f i n d ( t ) </space/> = = </space/> d . n p o s ) 
 { 
 / / </space/> c o u t < < d < < e n d l ; 
 c o u t </space/> < < </space/> "" Y E S "" 
 < < </space/> "" \ n "" </space/> < < </space/> d ; 
 r e t u r n </space/> 0 ; 
 } 
 } 
 c o u t </space/> < < </space/> "" N O "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 U s e r n a m e </space/> : </space/> m o o n d a n c e r 
 N a m e </space/> : </space/> M o o n </space/> D a n c e r 
 * / 
 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 s t r i n g </space/> s , </space/> t ; 
 c i n </space/> > > </space/> s </space/> > > </space/> t ; 
 s t r i n g </space/> x </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 s t r i n g </space/> t e m p ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 t e m p </space/> + = </space/> x ; 
 } 
 b o o l </space/> i s i t </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n </space/> - </space/> 1 ; </space/> + + i ) 
 { 
 i f </space/> ( s [ 0 ] </space/> = = </space/> t e m p [ i ] </space/> & & </space/> s [ 1 ] </space/> = = </space/> t e m p [ i </space/> + </space/> 1 ] ) 
 { 
 i s i t </space/> = </space/> f a l s e ; 
 } 
 i f </space/> ( t [ 0 ] </space/> = = </space/> t e m p [ i ] </space/> & & </space/> t [ 1 ] </space/> = = </space/> t e m p [ i </space/> + </space/> 1 ] ) 
 { 
 i s i t </space/> = </space/> f a l s e ; 
 } 
 } 
 i f </space/> ( i s i t ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" </space/> < < </space/> t e m p </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( x . b e g i n ( ) , </space/> x . e n d ( ) ) ) ; 
 
 x </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 s t r i n g </space/> t e m p ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 ; </space/> + + i ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> n ; </space/> + + j ) 
 { 
 t e m p </space/> + = </space/> x [ i ] ; 
 } 
 } 
 b o o l </space/> i s i t </space/> = </space/> t r u e ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 3 </space/> * </space/> n </space/> - </space/> 1 ; </space/> + + i ) 
 { 
 i f </space/> ( s [ 0 ] </space/> = = </space/> t e m p [ i ] </space/> & & </space/> s [ 1 ] </space/> = = </space/> t e m p [ i </space/> + </space/> 1 ] ) 
 { 
 i s i t </space/> = </space/> f a l s e ; 
 } 
 i f </space/> ( t [ 0 ] </space/> = = </space/> t e m p [ i ] </space/> & & </space/> t [ 1 ] </space/> = = </space/> t e m p [ i </space/> + </space/> 1 ] ) 
 { 
 i s i t </space/> = </space/> f a l s e ; 
 } 
 } 
 i f </space/> ( i s i t ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" </space/> < < </space/> t e m p </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( x . b e g i n ( ) , </space/> x . e n d ( ) ) ) ; 
 c o u t </space/> < < </space/> "" N O "" ; 
 r e t u r n </space/> 0 ; 
 }",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> t a r g e t ( "" a v x 2 "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z a t i o n ( "" O 3 "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z a t i o n ( "" u n r o l l - l o o p s "" ) 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f a s t i o </space/> \ 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; </space/> \ 
 c i n . t i e ( N U L L ) ; </space/> \ 
 c o u t . t i e ( N U L L ) ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 
 c o n s t </space/> i n t </space/> M D L S </space/> = </space/> 1 e 7 </space/> + </space/> 7 ; 
 
 b o o l </space/> c [ 3 ] [ 3 ] ; 
 i n t </space/> a r [ 3 ] ; 
 c h a r </space/> c h [ 3 ] </space/> = </space/> { </space/> ' a ' , </space/> ' b ' , </space/> ' c ' </space/> } ; 
 i n t </space/> n , </space/> s 0 , </space/> s 1 , </space/> t 0 , </space/> t 1 ; 
 s t r i n g </space/> s , </space/> t , </space/> s R e s , </space/> s e e d , </space/> s e p ; 
 v e c t o r < s t r i n g > </space/> v ; 
 
 s t r i n g </space/> P c ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> s </space/> > > </space/> t ; 
 f o r </space/> ( c h a r </space/> x </space/> : </space/> { </space/> ' a ' , </space/> ' b ' , </space/> ' c ' </space/> } ) 
 { 
 f o r </space/> ( c h a r </space/> y </space/> : </space/> { </space/> ' a ' , </space/> ' b ' , </space/> ' c ' </space/> } ) 
 { 
 f o r </space/> ( c h a r </space/> z </space/> : </space/> { </space/> ' a ' , </space/> ' b ' , </space/> ' c ' </space/> } ) 
 { 
 i f </space/> ( x </space/> ! = </space/> y </space/> & & </space/> y </space/> ! = </space/> z </space/> & & </space/> z </space/> ! = </space/> x ) 
 { 
 v . p u s h _ b a c k ( s t r i n g ( n , </space/> x ) </space/> + </space/> s t r i n g ( n , </space/> y ) </space/> + </space/> s t r i n g ( n , </space/> z ) ) ; 
 
 s e e d </space/> = </space/> s t r i n g ( 1 , </space/> x ) </space/> + </space/> s t r i n g ( 1 , </space/> y ) ; 
 s e p </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 s e p </space/> + = </space/> s e e d ; 
 s e p </space/> + = </space/> s t r i n g ( n , </space/> z ) ; 
 v . p u s h _ b a c k ( s e p ) ; 
 
 s e e d </space/> + = </space/> s t r i n g ( 1 , </space/> z ) ; 
 s e p </space/> = </space/> "" "" ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 s e p </space/> + = </space/> s e e d ; 
 v . p u s h _ b a c k ( s e p ) ; 
 } 
 } 
 } 
 } 
 
 f o r </space/> ( a u t o </space/> i </space/> : </space/> v ) 
 { 
 / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> e n d l ; 
 i f </space/> ( i . f i n d ( s ) </space/> = = </space/> s t r i n g : : n p o s </space/> & & </space/> i . f i n d ( t ) </space/> = = </space/> s t r i n g : : n p o s ) 
 { 
 s R e s </space/> = </space/> "" Y E S \ n "" </space/> + </space/> i ; 
 r e t u r n </space/> s R e s ; 
 } 
 } 
 r e t u r n </space/> "" N O \ n "" ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 f a s t i o ; 
 c o u t </space/> < < </space/> P c ( ) </space/> < < </space/> e n d l ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d l i b > 
 # i n c l u d e </space/> < c c t y p e > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s t r i n g > 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < s s t r e a m > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < s t a c k > 
 # i n c l u d e </space/> < f s t r e a m > 
 # i n c l u d e </space/> < n u m e r i c > 
 # i n c l u d e </space/> < i o m a n i p > 
 # i n c l u d e </space/> < b i t s e t > 
 # i n c l u d e </space/> < l i s t > 
 # i n c l u d e </space/> < s t d e x c e p t > 
 # i n c l u d e </space/> < f u n c t i o n a l > 
 # i n c l u d e </space/> < u t i l i t y > 
 # i n c l u d e </space/> < c t i m e > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> L L ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> U L L ; 
 # d e f i n e </space/> M E M ( a , </space/> b ) </space/> m e m s e t ( ( a ) , </space/> ( b ) , </space/> s i z e o f ( a ) ) 
 c o n s t </space/> L L </space/> I N F </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 2 e 5 </space/> + </space/> 1 0 ; 
 v e c t o r < s t r i n g > </space/> v s ; 
 v o i d </space/> i n i t 1 ( i n t </space/> n ) 
 { 
 s t r i n g </space/> s t r </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 s t r i n g </space/> k e y ; 
 f o r </space/> ( a u t o & </space/> c </space/> : </space/> s t r ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 k e y </space/> + = </space/> c ; 
 } 
 v s . p u s h _ b a c k ( k e y ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( s t r . b e g i n ( ) , </space/> s t r . e n d ( ) ) ) ; 
 } 
 v o i d </space/> i n i t 2 ( i n t </space/> n ) 
 { 
 s t r i n g </space/> s t r </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 s t r i n g </space/> k e y ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 k e y </space/> + = </space/> s t r [ 0 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 k e y </space/> + = </space/> s t r [ 1 ] , </space/> k e y </space/> + = </space/> s t r [ 2 ] ; 
 v s . p u s h _ b a c k ( k e y ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( s t r . b e g i n ( ) , </space/> s t r . e n d ( ) ) ) ; 
 } 
 v o i d </space/> i n i t 3 ( i n t </space/> n ) 
 { 
 s t r i n g </space/> s t r </space/> = </space/> "" a b c "" ; 
 d o 
 { 
 s t r i n g </space/> k e y ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 k e y </space/> + = </space/> s t r [ 1 ] , </space/> k e y </space/> + = </space/> s t r [ 2 ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 k e y </space/> + = </space/> s t r [ 0 ] ; 
 v s . p u s h _ b a c k ( k e y ) ; 
 } </space/> w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( s t r . b e g i n ( ) , </space/> s t r . e n d ( ) ) ) ; 
 } 
 v o i d </space/> i n i t ( i n t </space/> n ) 
 { 
 i n i t 1 ( n ) ; 
 i n i t 2 ( n ) ; 
 i n i t 3 ( n ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" i n p u t . t x t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 / / </space/> f r e o p e n ( "" o u t p u t . t x t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 i n t </space/> n ; 
 c i n </space/> > > </space/> n ; 
 i n i t ( n ) ; 
 s t r i n g </space/> s 1 , </space/> s 2 ; 
 c i n </space/> > > </space/> s 1 </space/> > > </space/> s 2 ; 
 f o r </space/> ( a u t o & </space/> s </space/> : </space/> v s ) 
 { 
 i f </space/> ( s . f i n d ( s 1 ) </space/> ! = </space/> s . n p o s ) 
 c o n t i n u e ; 
 i f </space/> ( s . f i n d ( s 2 ) </space/> ! = </space/> s . n p o s ) 
 c o n t i n u e ; 
 p u t s ( "" Y E S "" ) ; 
 p u t s ( s . c _ s t r ( ) ) ; 
 r e t u r n </space/> 0 ; 
 } 
 p u t s ( "" N O "" ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f f </space/> f i r s t 
 # d e f i n e </space/> s s </space/> s e c o n d 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> l l i </space/> l o n g </space/> l o n g </space/> i n t 
 # d e f i n e </space/> s f ( a ) </space/> s c a n f ( "" % d "" , </space/> & a ) 
 # d e f i n e </space/> f o r n ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 c o n s t </space/> i n t </space/> m x </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 i n t </space/> n ; 
 s t r i n g </space/> s , </space/> t , </space/> x </space/> = </space/> "" a b c "" ; 
 c i n </space/> > > </space/> n </space/> > > </space/> s </space/> > > </space/> t ; 
 v e c t o r < s t r i n g > </space/> a l l ; 
 w h i l e </space/> ( n e x t _ p e r m u t a t i o n ( x . b e g i n ( ) , </space/> x . e n d ( ) ) ) 
 { 
 s t r i n g </space/> a </space/> = </space/> "" "" , </space/> b </space/> = </space/> "" "" ; 
 f o r n ( i , </space/> n ) 
 { 
 a . p b ( x [ 0 ] ) ; 
 a . p b ( x [ 1 ] ) ; 
 a . p b ( x [ 2 ] ) ; 
 b . p b ( x [ 0 ] ) ; 
 } 
 f o r n ( i , </space/> n ) </space/> b . p b ( x [ 1 ] ) ; 
 f o r n ( i , </space/> n ) </space/> b . p b ( x [ 2 ] ) ; 
 a l l . p b ( a ) ; 
 a l l . p b ( b ) ; 
 } 
 f o r </space/> ( s t r i n g </space/> i </space/> : </space/> a l l ) 
 { 
 b o o l </space/> a n s </space/> = </space/> t r u e ; 
 f o r n ( j , </space/> 3 </space/> * </space/> n </space/> - </space/> 1 ) 
 { 
 s t r i n g </space/> s i </space/> = </space/> i . s u b s t r ( j , </space/> 2 ) ; 
 i f </space/> ( s i </space/> = = </space/> s </space/> | | </space/> s i </space/> = = </space/> t ) 
 { 
 a n s </space/> = </space/> f a l s e ; 
 } 
 } 
 i f </space/> ( a n s ) 
 { 
 c o u t </space/> < < </space/> "" Y E S \ n "" </space/> < < </space/> i </space/> < < </space/> ' \ n ' ; 
 r e t u r n </space/> 0 ; 
 } 
 } 
 c o u t </space/> < < </space/> "" N O \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # p r a g m a </space/> c o m m e n t ( l i n k e r , </space/> "" / S T A C K : 1 0 2 4 0 0 0 0 0 0 , </space/> 1 0 2 4 0 0 0 0 0 0 "" ) 
 # p r a g m a </space/> G C C </space/> o p t i m i z e ( 3 ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> l l </space/> L I N F </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> d o u b l e </space/> E P S </space/> = </space/> 1 e - 1 0 ; 
 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> l l </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 L L ; 
 i n t </space/> n , </space/> m ; 
 i n t </space/> s u m [ M A X N ] ; 
 i n t </space/> l o w b i t ( i n t </space/> x ) 
 { 
 r e t u r n </space/> ( x </space/> & </space/> ( - x ) ) ; 
 } 
 v o i d </space/> a d d ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 w h i l e </space/> ( x </space/> < </space/> M A X N ) 
 { 
 s u m [ x ] </space/> + = </space/> y ; 
 x </space/> + = </space/> l o w b i t ( x ) ; 
 } 
 } 
 i n t </space/> q u e r y ( i n t </space/> x ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 w h i l e </space/> ( x </space/> > </space/> 0 ) 
 { 
 r e t </space/> + = </space/> s u m [ x ] ; 
 x </space/> - = </space/> l o w b i t ( x ) ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 s t r u c t </space/> E v e n t 
 { 
 i n t </space/> t y ; </space/> / / </space/> 0 </space/> u p d a t e , </space/> 1 </space/> q u e r y 
 i n t </space/> h , </space/> a , </space/> b ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> E v e n t & </space/> r h s ) </space/> c o n s t 
 { 
 i f </space/> ( h </space/> ! = </space/> r h s . h ) 
 r e t u r n </space/> h </space/> < </space/> r h s . h ; 
 r e t u r n </space/> t y </space/> < </space/> r h s . t y ; 
 } 
 } ; 
 v e c t o r < E v e n t > </space/> v e ; 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 l l </space/> a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> y , </space/> l x , </space/> r x ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & y , </space/> & l x , </space/> & r x ) ; 
 i f </space/> ( l x </space/> = = </space/> 0 </space/> & & </space/> r x </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 + + a n s ; 
 v e . p u s h _ b a c k ( { </space/> 1 , </space/> y , </space/> l x </space/> + </space/> 1 , </space/> r x </space/> + </space/> 1 </space/> } ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> x , </space/> l y , </space/> r y ; </space/> i </space/> < </space/> m ; </space/> + + i ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & l y , </space/> & r y ) ; 
 i f </space/> ( l y </space/> = = </space/> 0 </space/> & & </space/> r y </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 + + a n s ; 
 v e . p u s h _ b a c k ( { </space/> 0 , </space/> l y , </space/> x </space/> + </space/> 1 , </space/> 1 </space/> } ) ; 
 v e . p u s h _ b a c k ( { </space/> 0 , </space/> r y </space/> + </space/> 1 , </space/> x </space/> + </space/> 1 , </space/> - 1 </space/> } ) ; 
 } 
 s o r t ( v e . b e g i n ( ) , </space/> v e . e n d ( ) ) ; 
 f o r </space/> ( E v e n t & </space/> e </space/> : </space/> v e ) 
 { 
 i f </space/> ( e . t y </space/> = = </space/> 0 ) 
 { 
 a d d ( e . a , </space/> e . b ) ; 
 } 
 e l s e 
 { 
 a n s </space/> + = </space/> ( l l ) ( q u e r y ( e . b ) </space/> - </space/> q u e r y ( e . a </space/> - </space/> 1 ) ) ; 
 } 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 } 
 
 / * 
 0 0 0 1 0 0 
 0 1 0 1 0 0 
 1 1 1 1 1 0 
 0 1 0 1 0 0 
 0 1 0 0 0 0 
 * / 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 3 ; 
 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> i i ; 
 
 i n t </space/> m , </space/> n , </space/> u , </space/> v , </space/> w , </space/> b i t [ N ] ; 
 
 v e c t o r < i n t > </space/> v i [ N ] ; 
 v e c t o r < i i > </space/> v i i [ N ] ; 
 
 l o n g </space/> l o n g </space/> a n s ; 
 
 v o i d </space/> u p d ( i n t </space/> i d , </space/> i n t </space/> v a l ) 
 { 
 i d + + ; 
 f o r </space/> ( ; </space/> i d </space/> < = </space/> N ; </space/> i d </space/> + = </space/> i d </space/> & </space/> - i d ) 
 b i t [ i d ] </space/> + = </space/> v a l ; 
 } 
 
 l o n g </space/> l o n g </space/> g e t ( i n t </space/> i d ) 
 { 
 i d + + ; 
 l o n g </space/> l o n g </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( ; </space/> i d </space/> > </space/> 0 ; </space/> i d </space/> - = </space/> i d </space/> & </space/> - i d ) 
 r e s </space/> + = </space/> b i t [ i d ] ; 
 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 / / </space/> f r e o p e n ( "" x . i n p "" , "" r "" , s t d i n ) ; 
 / / </space/> f r e o p e n ( "" x . o u t "" , "" w "" , s t d o u t ) ; 
 c i n </space/> > > </space/> m </space/> > > </space/> n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> w </space/> > > </space/> u </space/> > > </space/> v ; 
 i f </space/> ( u </space/> = = </space/> 0 </space/> & & </space/> v </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 a n s + + ; 
 v i [ u ] . p u s h _ b a c k ( w ) ; 
 v i [ v </space/> + </space/> 1 ] . p u s h _ b a c k ( - w ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> w </space/> > > </space/> u </space/> > > </space/> v ; 
 i f </space/> ( u </space/> = = </space/> 0 </space/> & & </space/> v </space/> = = </space/> 1 e 6 ) 
 a n s + + ; 
 v i i [ w ] . p u s h _ b a c k ( { </space/> u , </space/> v </space/> } ) ; 
 } 
 / / </space/> c o u t < < a n s < < e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 1 e 6 ; </space/> i + + ) 
 { 
 f o r </space/> ( a u t o </space/> v a l </space/> : </space/> v i [ i ] ) 
 { 
 i f </space/> ( v a l </space/> > = </space/> 0 ) 
 u p d ( v a l , </space/> 1 ) ; 
 e l s e 
 u p d ( - v a l , </space/> - 1 ) ; 
 } 
 f o r </space/> ( a u t o </space/> v a l </space/> : </space/> v i i [ i ] ) 
 { 
 a n s </space/> + = </space/> g e t ( v a l . s e ) </space/> - </space/> g e t ( v a l . f i </space/> - </space/> 1 ) ; 
 } 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> + </space/> 1 ; 
 r e t u r n </space/> 0 ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 # d e f i n e </space/> I O S </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> L L ; 
 u s i n g </space/> P I I </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 2 e 9 </space/> + </space/> 1 ; 
 
 s t r u c t </space/> n o d e 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> n o d e & </space/> a ) </space/> c o n s t 
 { 
 r e t u r n </space/> x </space/> = = </space/> a . x </space/> ? </space/> ( l </space/> = = </space/> a . l </space/> ? </space/> r </space/> < </space/> a . r </space/> : </space/> l </space/> < </space/> a . l ) </space/> : </space/> x </space/> < </space/> a . x ; 
 } 
 } </space/> h s [ m a x n ] , </space/> v s [ m a x n ] ; 
 
 i n l i n e </space/> b o o l </space/> c m p ( c o n s t </space/> n o d e & </space/> a , </space/> c o n s t </space/> n o d e & </space/> b ) 
 { 
 r e t u r n </space/> a . l </space/> = = </space/> b . l </space/> ? </space/> a . r </space/> < </space/> b . r </space/> : </space/> a . l </space/> < </space/> b . l ; 
 } 
 
 # d e f i n e </space/> l s </space/> ( r t </space/> < < </space/> 1 ) 
 # d e f i n e </space/> r s </space/> ( r t </space/> < < </space/> 1 </space/> | </space/> 1 ) 
 i n t </space/> t r e e [ m a x n </space/> < < </space/> 2 ] ; 
 i n l i n e </space/> v o i d </space/> p u s h _ u p ( i n t </space/> r t ) 
 { 
 t r e e [ r t ] </space/> = </space/> t r e e [ l s ] </space/> + </space/> t r e e [ r s ] ; 
 } 
 
 i n l i n e </space/> v o i d </space/> u p d a t e ( i n t </space/> l , </space/> i n t </space/> r , </space/> i n t </space/> p o s , </space/> i n t </space/> c , </space/> i n t </space/> r t ) 
 { 
 i f </space/> ( l </space/> = = </space/> r ) 
 { 
 t r e e [ r t ] </space/> + = </space/> c ; 
 r e t u r n ; 
 } 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( p o s </space/> < = </space/> m i d ) 
 u p d a t e ( l , </space/> m i d , </space/> p o s , </space/> c , </space/> l s ) ; 
 e l s e 
 u p d a t e ( m i d </space/> + </space/> 1 , </space/> r , </space/> p o s , </space/> c , </space/> r s ) ; 
 p u s h _ u p ( r t ) ; 
 } 
 
 i n l i n e </space/> i n t </space/> q u e r y ( i n t </space/> l , </space/> i n t </space/> r , </space/> i n t </space/> L , </space/> i n t </space/> R , </space/> i n t </space/> r t ) 
 { 
 i f </space/> ( L </space/> < = </space/> l </space/> & & </space/> r </space/> < = </space/> R ) 
 { 
 r e t u r n </space/> t r e e [ r t ] ; 
 } 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 , </space/> a n s </space/> = </space/> 0 ; 
 i f </space/> ( L </space/> < = </space/> m i d ) 
 a n s </space/> + = </space/> q u e r y ( l , </space/> m i d , </space/> L , </space/> R , </space/> l s ) ; 
 i f </space/> ( R </space/> > </space/> m i d ) 
 a n s </space/> + = </space/> q u e r y ( m i d </space/> + </space/> 1 , </space/> r , </space/> L , </space/> R , </space/> r s ) ; 
 r e t u r n </space/> a n s ; 
 } 
 
 s e t < p a i r < i n t , </space/> i n t > </space/> > </space/> i d ; 
 
 i n t </space/> m a i n ( ) 
 { 
 I O S ; 
 i n t </space/> n , </space/> m , </space/> s z </space/> = </space/> 1 e 6 ; 
 L L </space/> a n s </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> h s [ i ] . x </space/> > > </space/> h s [ i ] . l </space/> > > </space/> h s [ i ] . r ; 
 i f </space/> ( h s [ i ] . l </space/> = = </space/> 0 </space/> & & </space/> h s [ i ] . r </space/> = = </space/> s z ) 
 a n s + + ; 
 } 
 s o r t ( h s </space/> + </space/> 1 , </space/> h s </space/> + </space/> 1 </space/> + </space/> n ) ; 
 h s [ 0 ] . x </space/> = </space/> i n f ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> v s [ i ] . x </space/> > > </space/> v s [ i ] . l </space/> > > </space/> v s [ i ] . r ; 
 i f </space/> ( v s [ i ] . l </space/> = = </space/> 0 </space/> & & </space/> v s [ i ] . r </space/> = = </space/> s z ) 
 a n s + + ; 
 } 
 s o r t ( v s </space/> + </space/> 1 , </space/> v s </space/> + </space/> 1 </space/> + </space/> m , </space/> c m p ) ; 
 v s [ m </space/> + </space/> 1 ] . l </space/> = </space/> i n f ; 
 v s [ m </space/> + </space/> 1 ] . r </space/> = </space/> i n f ; 
 i n t </space/> p </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 w h i l e </space/> ( v s [ p </space/> + </space/> 1 ] . l </space/> < = </space/> h s [ i ] . x ) 
 { 
 p + + ; 
 i f </space/> ( v s [ p ] . r </space/> > = </space/> h s [ i ] . x ) 
 { 
 i d . i n s e r t ( m a k e _ p a i r ( v s [ p ] . r , </space/> p ) ) ; 
 u p d a t e ( 1 , </space/> s z , </space/> v s [ p ] . x , </space/> 1 , </space/> 1 ) ; 
 } 
 } 
 w h i l e </space/> ( ! i d . e m p t y ( ) </space/> & & </space/> i d . b e g i n ( ) - > f i r s t </space/> < </space/> h s [ i ] . x ) 
 { 
 u p d a t e ( 1 , </space/> s z , </space/> v s [ i d . b e g i n ( ) - > s e c o n d ] . x , </space/> - 1 , </space/> 1 ) ; 
 i d . e r a s e ( i d . b e g i n ( ) ) ; 
 } 
 a n s </space/> + = </space/> q u e r y ( 1 , </space/> s z , </space/> h s [ i ] . l , </space/> h s [ i ] . r , </space/> 1 ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 
 c l a s s </space/> B I T 
 { 
 v e c t o r < l o n g </space/> l o n g > </space/> t r e e ; 
 
 p u b l i c : 
 B I T ( i n t </space/> n ) 
 { 
 t r e e . a s s i g n ( n , </space/> 0 ) ; 
 } 
 i n t </space/> r e a d ( i n t </space/> i d x ) 
 { 
 l o n g </space/> l o n g </space/> v a l </space/> = </space/> 0 ; 
 w h i l e </space/> ( i d x </space/> > </space/> 0 ) 
 { 
 v a l </space/> + = </space/> t r e e [ i d x ] ; 
 i d x </space/> - = </space/> ( i d x </space/> & </space/> ( - i d x ) ) ; 
 } 
 r e t u r n </space/> v a l ; 
 } 
 v o i d </space/> w r i t e ( i n t </space/> i d x , </space/> i n t </space/> v a l ) 
 { 
 w h i l e </space/> ( i d x </space/> < </space/> t r e e . s i z e ( ) ) 
 { 
 t r e e [ i d x ] </space/> + = </space/> v a l ; 
 i d x </space/> + = </space/> ( i d x </space/> & </space/> - i d x ) ; 
 } 
 } 
 } ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> n , </space/> m , </space/> x , </space/> y , </space/> z ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 v e c t o r < v e c t o r < i n t > > </space/> x s ( M A X N ) , </space/> x e ( M A X N ) ; 
 v e c t o r < v e c t o r < p a i r < i n t , </space/> i n t > > > </space/> x q ( M A X N ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x </space/> > > </space/> y </space/> > > </space/> z ; 
 x + + , </space/> y + + , </space/> z + + ; 
 i f </space/> ( y </space/> = = </space/> 1 </space/> & & </space/> z </space/> = = </space/> M A X N </space/> - </space/> 4 ) 
 { 
 a n s + + ; 
 } 
 x s [ y ] . p u s h _ b a c k ( x ) ; 
 x e [ z ] . p u s h _ b a c k ( x ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x </space/> > > </space/> y </space/> > > </space/> z ; 
 x + + , </space/> y + + , </space/> z + + ; 
 i f </space/> ( y </space/> = = </space/> 1 </space/> & & </space/> z </space/> = = </space/> M A X N </space/> - </space/> 4 ) 
 { 
 a n s + + ; 
 } 
 x q [ x ] . p u s h _ b a c k ( { </space/> y , </space/> z </space/> } ) ; 
 } 
 B I T </space/> b i t 1 ( M A X N ) , </space/> b i t 2 ( M A X N ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> M A X N ; </space/> i + + ) 
 { 
 / / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x s [ i ] ) 
 { 
 b i t 1 . w r i t e ( a , </space/> 1 ) ; 
 i f </space/> ( b i t 2 . r e a d ( a ) </space/> - </space/> b i t 2 . r e a d ( a </space/> - </space/> 1 ) </space/> = = </space/> 0 ) 
 { 
 b i t 2 . w r i t e ( a , </space/> 1 ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x q [ i ] ) 
 { 
 a n s </space/> + = </space/> b i t 2 . r e a d ( a . s e c o n d ) </space/> - </space/> b i t 2 . r e a d ( a . f i r s t </space/> - </space/> 1 ) ; 
 / / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> s t . q u e r y ( 1 , </space/> 0 , </space/> M A X N </space/> - </space/> 1 , </space/> a . f i r s t , </space/> a . s e c o n d ) </space/> < < </space/> e n d l ; 
 } 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x e [ i ] ) 
 { 
 b i t 1 . w r i t e ( a , </space/> - 1 ) ; 
 i f </space/> ( b i t 1 . r e a d ( a ) </space/> - </space/> b i t 1 . r e a d ( a </space/> - </space/> 1 ) </space/> = = </space/> 0 ) 
 { 
 b i t 2 . w r i t e ( a , </space/> - 1 ) ; 
 } 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 , </space/> p </space/> = </space/> 1 e 6 </space/> + </space/> 1 ; 
 s t r u c t </space/> h s e g 
 { </space/> / / 
 i n t </space/> x , </space/> y ; 
 i n t </space/> k ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> h s e g & </space/> r h s ) </space/> c o n s t 
 { 
 r e t u r n </space/> x </space/> < </space/> r h s . x ; 
 } 
 } </space/> a [ m a x n </space/> * </space/> 2 ] ; 
 
 s t r u c t </space/> v s e g 
 { </space/> / / 
 i n t </space/> x , </space/> l y , </space/> r y ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> v s e g & </space/> r h s ) </space/> c o n s t 
 { 
 r e t u r n </space/> x </space/> < </space/> r h s . x ; 
 } 
 } </space/> b [ m a x n ] ; 
 
 l l </space/> C [ m a x n ] ; 
 i n t </space/> l o w b i t ( i n t </space/> x ) 
 { 
 r e t u r n </space/> x </space/> & </space/> ( - x ) ; 
 } 
 v o i d </space/> a d d ( i n t </space/> p o s , </space/> l l </space/> v a l ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p o s ; </space/> i </space/> < = </space/> p ; </space/> i </space/> + = </space/> l o w b i t ( i ) ) 
 C [ i ] </space/> + = </space/> v a l ; 
 } 
 l l </space/> q u e r y ( i n t </space/> p o s ) 
 { 
 l l </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p o s ; </space/> i </space/> > = </space/> 1 ; </space/> i </space/> - = </space/> l o w b i t ( i ) ) 
 r e s </space/> + = </space/> C [ i ] ; 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 l l </space/> a n s </space/> = </space/> 1 ; 
 i n t </space/> x l , </space/> x r , </space/> y , </space/> c n t </space/> = </space/> 0 ; 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & y , </space/> & x l , </space/> & x r ) ; 
 i f </space/> ( x l </space/> = = </space/> 0 </space/> & & </space/> x r </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 + + a n s ; 
 a [ + + c n t ] </space/> = </space/> { </space/> x l </space/> + </space/> 1 , </space/> y </space/> + </space/> 1 , </space/> 1 </space/> } ; 
 a [ + + c n t ] </space/> = </space/> { </space/> x r </space/> + </space/> 2 , </space/> y </space/> + </space/> 1 , </space/> - 1 </space/> } ; </space/> / / 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> + + i ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & b [ i ] . x , </space/> & b [ i ] . l y , </space/> & b [ i ] . r y ) ; 
 i f </space/> ( b [ i ] . l y </space/> = = </space/> 0 </space/> & & </space/> b [ i ] . r y </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 + + a n s ; 
 + + b [ i ] . x ; 
 + + b [ i ] . l y ; 
 + + b [ i ] . r y ; 
 } 
 s o r t ( a </space/> + </space/> 1 , </space/> a </space/> + </space/> 1 </space/> + </space/> c n t ) ; 
 s o r t ( b </space/> + </space/> 1 , </space/> b </space/> + </space/> 1 </space/> + </space/> m ) ; 
 
 i n t </space/> j </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> + + i ) 
 { </space/> / / 
 w h i l e </space/> ( j </space/> < = </space/> c n t </space/> & & </space/> a [ j ] . x </space/> < = </space/> b [ i ] . x ) 
 { </space/> / / 
 a d d ( a [ j ] . y , </space/> a [ j ] . k ) ; 
 + + j ; 
 } 
 a n s </space/> + = </space/> ( q u e r y ( b [ i ] . r y ) </space/> - </space/> q u e r y ( b [ i ] . l y </space/> - </space/> 1 ) ) ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 
 c l a s s </space/> S e g m e n t T r e e 
 { 
 v e c t o r < l o n g </space/> l o n g > </space/> t r e e , </space/> p o s ; 
 
 p u b l i c : 
 S e g m e n t T r e e ( i n t </space/> n ) 
 { 
 t r e e . a s s i g n ( 4 </space/> * </space/> n , </space/> 0 ) ; 
 p o s . a s s i g n ( 4 </space/> * </space/> n , </space/> 0 ) ; 
 } 
 v o i d </space/> u p d a t e ( i n t </space/> n o d e , </space/> i n t </space/> b , </space/> i n t </space/> e , </space/> i n t </space/> i d x , </space/> i n t </space/> v a l ) 
 { 
 / / / </space/> c o u t </space/> < < </space/> n o d e </space/> < < </space/> "" </space/> "" </space/> < < </space/> b </space/> < < </space/> "" </space/> "" </space/> < < </space/> e </space/> < < </space/> "" </space/> "" </space/> < < </space/> i d x </space/> < < </space/> "" \ n "" ; 
 i f </space/> ( i d x </space/> < </space/> b </space/> | | </space/> i d x </space/> > </space/> e ) 
 { 
 r e t u r n ; 
 } 
 e l s e </space/> i f </space/> ( b </space/> = = </space/> e ) 
 { 
 / / / </space/> c o u t </space/> < < </space/> b </space/> < < </space/> "" \ n "" ; 
 t r e e [ n o d e ] </space/> + = </space/> v a l ; 
 p o s [ n o d e ] </space/> = </space/> t r e e [ n o d e ] </space/> > </space/> 0 </space/> ? </space/> 1 </space/> : </space/> 0 ; 
 } 
 e l s e 
 { 
 i n t </space/> m i d </space/> = </space/> ( b </space/> + </space/> e ) </space/> / </space/> 2 ; 
 u p d a t e ( 2 </space/> * </space/> n o d e , </space/> b , </space/> m i d , </space/> i d x , </space/> v a l ) ; 
 u p d a t e ( 2 </space/> * </space/> n o d e </space/> + </space/> 1 , </space/> m i d </space/> + </space/> 1 , </space/> e , </space/> i d x , </space/> v a l ) ; 
 t r e e [ n o d e ] </space/> = </space/> t r e e [ 2 </space/> * </space/> n o d e ] </space/> + </space/> t r e e [ 2 </space/> * </space/> n o d e </space/> + </space/> 1 ] ; 
 p o s [ n o d e ] </space/> = </space/> p o s [ 2 </space/> * </space/> n o d e ] </space/> + </space/> p o s [ 2 </space/> * </space/> n o d e </space/> + </space/> 1 ] ; 
 } 
 } 
 l o n g </space/> l o n g </space/> q u e r y ( i n t </space/> n o d e , </space/> i n t </space/> b , </space/> i n t </space/> e , </space/> i n t </space/> l , </space/> i n t </space/> r ) 
 { 
 i f </space/> ( e </space/> < </space/> l </space/> | | </space/> b </space/> > </space/> r ) 
 { 
 / / / </space/> c o u t </space/> < < </space/> b </space/> < < </space/> "" </space/> "" </space/> < < </space/> e </space/> < < </space/> "" </space/> "" </space/> < < </space/> l </space/> < < </space/> "" </space/> "" </space/> < < </space/> r </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
 e l s e </space/> i f </space/> ( l </space/> < = </space/> b </space/> & & </space/> e </space/> < = </space/> r ) 
 { 
 / / / </space/> c o u t </space/> < < </space/> b </space/> < < </space/> "" </space/> "" </space/> < < </space/> e </space/> < < </space/> "" </space/> "" </space/> < < </space/> l </space/> < < </space/> "" </space/> "" </space/> < < </space/> r </space/> < < </space/> "" </space/> "" </space/> < < </space/> p o s [ n o d e ] </space/> < < </space/> e n d l ; 
 r e t u r n </space/> p o s [ n o d e ] ; 
 } 
 e l s e 
 { 
 i n t </space/> m i d </space/> = </space/> ( b </space/> + </space/> e ) </space/> / </space/> 2 ; 
 r e t u r n </space/> q u e r y ( 2 </space/> * </space/> n o d e , </space/> b , </space/> m i d , </space/> l , </space/> r ) </space/> + </space/> q u e r y ( 2 </space/> * </space/> n o d e </space/> + </space/> 1 , </space/> m i d </space/> + </space/> 1 , </space/> e , </space/> l , </space/> r ) ; 
 } 
 } 
 } ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> n , </space/> m , </space/> x , </space/> y , </space/> z ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 v e c t o r < v e c t o r < i n t > > </space/> x s ( M A X N ) , </space/> x e ( M A X N ) ; 
 v e c t o r < v e c t o r < p a i r < i n t , </space/> i n t > > > </space/> x q ( M A X N ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x </space/> > > </space/> y </space/> > > </space/> z ; 
 i f </space/> ( y </space/> = = </space/> 0 </space/> & & </space/> z </space/> = = </space/> M A X N </space/> - </space/> 5 ) 
 { 
 a n s + + ; 
 } 
 x s [ y ] . p u s h _ b a c k ( x ) ; 
 x e [ z ] . p u s h _ b a c k ( x ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x </space/> > > </space/> y </space/> > > </space/> z ; 
 i f </space/> ( y </space/> = = </space/> 0 </space/> & & </space/> z </space/> = = </space/> M A X N </space/> - </space/> 5 ) 
 { 
 a n s + + ; 
 } 
 x q [ x ] . p u s h _ b a c k ( { </space/> y , </space/> z </space/> } ) ; 
 } 
 S e g m e n t T r e e </space/> s t ( M A X N ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> M A X N ; </space/> i + + ) 
 { 
 / / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x s [ i ] ) 
 { 
 s t . u p d a t e ( 1 , </space/> 0 , </space/> M A X N </space/> - </space/> 3 , </space/> a , </space/> 1 ) ; 
 } 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x q [ i ] ) 
 { 
 a n s </space/> + = </space/> s t . q u e r y ( 1 , </space/> 0 , </space/> M A X N </space/> - </space/> 3 , </space/> a . f i r s t , </space/> a . s e c o n d ) ; 
 / / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> s t . q u e r y ( 1 , </space/> 0 , </space/> M A X N </space/> - </space/> 1 , </space/> a . f i r s t , </space/> a . s e c o n d ) </space/> < < </space/> e n d l ; 
 } 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x e [ i ] ) 
 { 
 s t . u p d a t e ( 1 , </space/> 0 , </space/> M A X N </space/> - </space/> 3 , </space/> a , </space/> - 1 ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f a s t </space/> i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) , </space/> c i n . t i e ( N U L L ) , </space/> c o u t . t i e ( N U L L ) ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> 1 e 1 5 </space/> + </space/> 5 ; 
 
 
 i n t </space/> b i t [ N ] ; 
 i n t </space/> n , </space/> m , </space/> a n s ; 
 i n t </space/> y [ N ] , </space/> l x [ N ] , </space/> r x [ N ] , </space/> x [ N ] , </space/> l y [ N ] , </space/> r y [ N ] ; 
 v e c t o r < i n t > </space/> l [ N ] , </space/> r [ N ] , </space/> v [ N ] ; 
 
 i n t </space/> s u m ( i n t </space/> x ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 f o r </space/> ( ; </space/> x </space/> > </space/> 0 ; </space/> x </space/> - = </space/> x </space/> & </space/> - x ) 
 r e t </space/> + = </space/> b i t [ x ] ; 
 r e t u r n </space/> r e t ; 
 } 
 
 i n t </space/> s u m ( i n t </space/> l , </space/> i n t </space/> r ) 
 { 
 r e t u r n </space/> s u m ( r ) </space/> - </space/> s u m ( l </space/> - </space/> 1 ) ; 
 } 
 
 v o i d </space/> a d d ( i n t </space/> x , </space/> i n t </space/> d e l t a ) 
 { 
 f o r </space/> ( ; </space/> x </space/> < = </space/> N ; </space/> x </space/> + = </space/> x </space/> & </space/> - x ) 
 b i t [ x ] </space/> + = </space/> d e l t a ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> y [ i ] </space/> > > </space/> l x [ i ] </space/> > > </space/> r x [ i ] ; 
 i f </space/> ( l x [ i ] </space/> = = </space/> 0 </space/> & & </space/> r x [ i ] </space/> = = </space/> 1 e 6 ) 
 a n s + + ; 
 l [ l x [ i ] ] . p u s h _ b a c k ( i ) ; 
 r [ r x [ i ] </space/> + </space/> 1 ] . p u s h _ b a c k ( i ) ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x [ i ] </space/> > > </space/> l y [ i ] </space/> > > </space/> r y [ i ] ; 
 i f </space/> ( l y [ i ] </space/> = = </space/> 0 </space/> & & </space/> r y [ i ] </space/> = = </space/> 1 e 6 ) 
 a n s + + ; 
 v [ x [ i ] ] . p u s h _ b a c k ( i ) ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> 1 e 6 ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> : </space/> l [ i ] ) 
 a d d ( y [ j ] , </space/> 1 ) ; 
 f o r </space/> ( i n t </space/> j </space/> : </space/> r [ i ] ) 
 a d d ( y [ j ] , </space/> - 1 ) ; 
 f o r </space/> ( i n t </space/> j </space/> : </space/> v [ i ] ) 
 a n s </space/> + = </space/> s u m ( l y [ j ] , </space/> r y [ j ] ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 } 
 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 f a s t ; 
 i n t </space/> t ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 t </space/> = </space/> 1 ; 
 w h i l e </space/> ( t - - ) 
 { 
 s o l v e ( ) ; 
 } 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # i n c l u d e </space/> < e x t / p b _ d s / a s s o c _ c o n t a i n e r . h p p > 
 # i n c l u d e </space/> < e x t / p b _ d s / t r e e _ p o l i c y . h p p > 
 u s i n g </space/> n a m e s p a c e </space/> _ _ g n u _ p b d s ; 
 
 
 u s i n g </space/> L L </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> p i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 
 # d e f i n e </space/> o r d e r e d _ s e t </space/> t r e e < p i i , </space/> n u l l _ t y p e , </space/> l e s s < p i i > , </space/> r b _ t r e e _ t a g , </space/> t r e e _ o r d e r _ s t a t i s t i c s _ n o d e _ u p d a t e > 
 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 ; 
 
 
 i n t 3 2 _ t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 v e c t o r < t u p l e < i n t , </space/> i n t , </space/> i n t > </space/> > </space/> H ( n ) , </space/> V ( m ) ; 
 
 f o r </space/> ( a u t o </space/> & </space/> [ </space/> l x , </space/> r x , </space/> y </space/> ] </space/> : </space/> H ) 
 c i n </space/> > > </space/> y </space/> > > </space/> l x </space/> > > </space/> r x ; 
 f o r </space/> ( a u t o </space/> & </space/> [ </space/> x , </space/> l y , </space/> r y </space/> ] </space/> : </space/> V ) 
 c i n </space/> > > </space/> x </space/> > > </space/> l y </space/> > > </space/> r y ; 
 
 H . p u s h _ b a c k ( m a k e _ t u p l e ( 0 , </space/> N , </space/> 0 ) ) ; 
 H . p u s h _ b a c k ( m a k e _ t u p l e ( 0 , </space/> N , </space/> N ) ) ; 
 V . p u s h _ b a c k ( m a k e _ t u p l e ( 0 , </space/> 0 , </space/> N ) ) ; 
 V . p u s h _ b a c k ( m a k e _ t u p l e ( N , </space/> 0 , </space/> N ) ) ; 
 
 
 s o r t ( V . b e g i n ( ) , </space/> V . e n d ( ) ) ; 
 s o r t ( H . b e g i n ( ) , </space/> H . e n d ( ) ) ; 
 
 i n t </space/> p t r </space/> = </space/> 0 ; 
 
 s e t < p i i > </space/> s t , </space/> t m p ; 
 o r d e r e d _ s e t </space/> G ; 
 
 L L </space/> a n s </space/> = </space/> 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> V . s i z e ( ) </space/> - </space/> 1 ; </space/> i + + ) 
 { 
 a u t o [ x 1 , </space/> l y 0 , </space/> r y 0 ] </space/> = </space/> V [ i ] ; 
 a u t o [ x 2 , </space/> l y , </space/> r y ] </space/> = </space/> V [ i </space/> + </space/> 1 ] ; 
 
 w h i l e </space/> ( p t r </space/> < </space/> H . s i z e ( ) </space/> & & </space/> g e t < 0 > ( H [ p t r ] ) </space/> < = </space/> x 1 ) 
 { 
 a u t o [ l x , </space/> r x , </space/> y ] </space/> = </space/> H [ p t r + + ] ; 
 t m p . i n s e r t ( m a k e _ p a i r ( y , </space/> r x ) ) ; 
 } 
 
 w h i l e </space/> ( t m p . s i z e ( ) ) 
 { 
 a u t o [ y , </space/> r x ] </space/> = </space/> * t m p . b e g i n ( ) ; 
 i f </space/> ( y </space/> > </space/> r y 0 </space/> | | </space/> y </space/> < </space/> l y 0 ) 
 b r e a k ; 
 t m p . e r a s e ( m a k e _ p a i r ( y , </space/> r x ) ) ; 
 s t . i n s e r t ( m a k e _ p a i r ( r x , </space/> y ) ) ; 
 G . i n s e r t ( m a k e _ p a i r ( y , </space/> r x ) ) ; 
 } 
 
 w h i l e </space/> ( t m p . s i z e ( ) ) 
 { 
 a u t o [ y , </space/> r x ] </space/> = </space/> * t m p . r b e g i n ( ) ; 
 i f </space/> ( y </space/> > </space/> r y 0 </space/> | | </space/> y </space/> < </space/> l y 0 ) 
 b r e a k ; 
 t m p . e r a s e ( m a k e _ p a i r ( y , </space/> r x ) ) ; 
 s t . i n s e r t ( m a k e _ p a i r ( r x , </space/> y ) ) ; 
 G . i n s e r t ( m a k e _ p a i r ( y , </space/> r x ) ) ; 
 } 
 
 w h i l e </space/> ( s t . s i z e ( ) </space/> & & </space/> s t . b e g i n ( ) - > f i r s t </space/> < </space/> x 2 ) 
 { 
 a u t o [ x , </space/> y ] </space/> = </space/> * s t . b e g i n ( ) ; 
 s t . e r a s e ( s t . b e g i n ( ) ) ; 
 G . e r a s e ( m a k e _ p a i r ( y , </space/> x ) ) ; 
 } 
 
 i n t </space/> k </space/> = </space/> G . o r d e r _ o f _ k e y ( m a k e _ p a i r ( r y </space/> + </space/> 1 , </space/> - 1 ) ) </space/> - </space/> G . o r d e r _ o f _ k e y ( m a k e _ p a i r ( l y , </space/> - 1 ) ) ; 
 a n s </space/> + = </space/> k </space/> - </space/> 1 ; 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # d e f i n e </space/> L L </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> M x </space/> 1 0 0 0 0 0 1 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> n , </space/> m , </space/> p _ t </space/> = </space/> 0 , </space/> q _ t </space/> = </space/> 0 , </space/> p t </space/> = </space/> 1 , </space/> q t </space/> = </space/> 1 , </space/> t ; 
 L L </space/> a n s </space/> = </space/> 1 ; 
 L L </space/> a r r [ 1 0 0 0 0 0 2 ] </space/> = </space/> { } ; 
 s t r u c t </space/> a a a 
 { 
 i n t </space/> t i m , </space/> p o s , </space/> o p t ; 
 } </space/> p [ 2 0 0 0 0 2 ] ; 
 s t r u c t </space/> b b b 
 { 
 i n t </space/> t i m , </space/> s t , </space/> e d ; 
 } </space/> q [ 1 0 0 0 0 2 ] ; 
 i n l i n e </space/> b o o l </space/> c m p ( a a a </space/> a , </space/> a a a </space/> b ) 
 { 
 r e t u r n </space/> a . t i m </space/> = = </space/> b . t i m </space/> ? </space/> ( a . o p t </space/> > </space/> b . o p t ) </space/> : </space/> ( a . t i m </space/> < </space/> b . t i m ) ; 
 } 
 i n l i n e </space/> b o o l </space/> c m p 1 ( b b b </space/> a , </space/> b b b </space/> b ) 
 { 
 r e t u r n </space/> a . t i m </space/> < </space/> b . t i m </space/> ? </space/> 1 </space/> : </space/> 0 ; 
 } 
 i n l i n e </space/> i n t </space/> m i n ( i n t </space/> a , </space/> i n t </space/> b ) 
 { 
 r e t u r n </space/> a </space/> < </space/> b </space/> ? </space/> a </space/> : </space/> b ; 
 } 
 i n l i n e </space/> i n t </space/> l o w b i t ( i n t </space/> x ) 
 { 
 r e t u r n </space/> x </space/> & </space/> ( - x ) ; 
 } 
 i n l i n e </space/> v o i d </space/> m o d i f y ( i n t </space/> x , </space/> i n t </space/> d ) 
 { 
 w h i l e </space/> ( x </space/> < = </space/> M x ) 
 a r r [ x ] </space/> + = </space/> d , </space/> x </space/> + = </space/> l o w b i t ( x ) ; 
 } 
 i n l i n e </space/> L L </space/> q u e r y ( i n t </space/> x ) 
 { 
 L L </space/> r e s </space/> = </space/> 0 ; 
 w h i l e </space/> ( x ) 
 r e s </space/> + = </space/> a r r [ x ] , </space/> x </space/> - = </space/> l o w b i t ( x ) ; 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 , </space/> x , </space/> y , </space/> z ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & y , </space/> & z ) , </space/> + + x , </space/> + + y , </space/> + + z , </space/> p [ + + p _ t ] </space/> = </space/> ( a a a ) { </space/> y , </space/> x , </space/> 1 </space/> } , 
 p [ + + p _ t ] </space/> = </space/> ( a a a ) { </space/> z , </space/> x , </space/> - 1 </space/> } ; 
 i f </space/> ( y </space/> = = </space/> 1 </space/> & & </space/> z </space/> = = </space/> M x ) 
 + + a n s ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 , </space/> x , </space/> y , </space/> z ; </space/> i </space/> < = </space/> m ; </space/> + + i ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & y , </space/> & z ) , </space/> + + x , </space/> + + y , </space/> + + z , </space/> q [ + + q _ t ] </space/> = </space/> ( b b b ) { </space/> x , </space/> y , </space/> z </space/> } ; 
 i f </space/> ( y </space/> = = </space/> 1 </space/> & & </space/> z </space/> = = </space/> M x ) 
 + + a n s ; 
 } 
 s o r t ( p </space/> + </space/> 1 , </space/> p </space/> + </space/> p _ t </space/> + </space/> 1 , </space/> c m p ) , </space/> s o r t ( q </space/> + </space/> 1 , </space/> q </space/> + </space/> q _ t </space/> + </space/> 1 , </space/> c m p 1 ) ; 
 w h i l e </space/> ( p t </space/> < = </space/> p _ t </space/> & & </space/> q t </space/> < = </space/> q _ t ) 
 { 
 t </space/> = </space/> m i n ( p [ p t ] . t i m , </space/> q [ q t ] . t i m ) ; 
 
 w h i l e </space/> ( p t </space/> < = </space/> p _ t </space/> & & </space/> p [ p t ] . t i m </space/> = = </space/> t </space/> & & </space/> p [ p t ] . o p t </space/> = = </space/> 1 ) 
 m o d i f y ( p [ p t ] . p o s , </space/> p [ p t ] . o p t ) , </space/> + + p t ; 
 w h i l e </space/> ( q t </space/> < = </space/> q _ t </space/> & & </space/> q [ q t ] . t i m </space/> = = </space/> t ) 
 a n s </space/> + = </space/> q u e r y ( q [ q t ] . e d ) </space/> - </space/> q u e r y ( q [ q t ] . s t </space/> - </space/> 1 ) , </space/> + + q t ; 
 w h i l e </space/> ( p t </space/> < = </space/> p _ t </space/> & & </space/> p [ p t ] . t i m </space/> = = </space/> t ) 
 m o d i f y ( p [ p t ] . p o s , </space/> p [ p t ] . o p t ) , </space/> + + p t ; 
 } 
 w h i l e </space/> ( q t </space/> < = </space/> q _ t ) 
 a n s </space/> + = </space/> q u e r y ( q [ q t ] . e d ) </space/> - </space/> q u e r y ( q [ q t ] . s t </space/> - </space/> 1 ) , </space/> + + q t ; 
 p r i n t f ( "" % l l d "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 
 # d e f i n e </space/> l s o n </space/> l , </space/> m i d , </space/> r t </space/> < < </space/> 1 
 # d e f i n e </space/> r s o n </space/> m i d </space/> + </space/> 1 , </space/> r , </space/> r t </space/> < < </space/> 1 </space/> | </space/> 1 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> K </space/> = </space/> 1 e 6 ; 
 
 i n t </space/> s u m [ m a x n </space/> < < </space/> 2 ] ; 
 
 v o i d </space/> p u s h _ u p ( i n t </space/> r t ) 
 { 
 s u m [ r t ] </space/> = </space/> s u m [ r t </space/> < < </space/> 1 ] </space/> + </space/> s u m [ r t </space/> < < </space/> 1 </space/> | </space/> 1 ] ; 
 } 
 v o i d </space/> u p d a t e ( i n t </space/> x , </space/> i n t </space/> z , </space/> i n t </space/> l , </space/> i n t </space/> r , </space/> i n t </space/> r t ) 
 { 
 i f </space/> ( l </space/> = = </space/> r ) 
 { 
 s u m [ r t ] </space/> + = </space/> z ; 
 r e t u r n ; 
 } 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( x </space/> < = </space/> m i d ) 
 u p d a t e ( x , </space/> z , </space/> l s o n ) ; 
 e l s e 
 u p d a t e ( x , </space/> z , </space/> r s o n ) ; 
 p u s h _ u p ( r t ) ; 
 } 
 i n t </space/> q u e r y ( i n t </space/> x , </space/> i n t </space/> y , </space/> i n t </space/> l , </space/> i n t </space/> r , </space/> i n t </space/> r t ) 
 { 
 i f </space/> ( x </space/> < = </space/> l </space/> & & </space/> r </space/> < = </space/> y ) 
 { 
 r e t u r n </space/> s u m [ r t ] ; 
 } 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i n t </space/> a n s </space/> = </space/> 0 ; 
 i f </space/> ( x </space/> < = </space/> m i d ) 
 a n s </space/> + = </space/> q u e r y ( x , </space/> y , </space/> l s o n ) ; 
 i f </space/> ( y </space/> > </space/> m i d ) 
 a n s </space/> + = </space/> q u e r y ( x , </space/> y , </space/> r s o n ) ; 
 r e t u r n </space/> a n s ; 
 } 
 
 s t r u c t </space/> L i n e 
 { 
 i n t </space/> y , </space/> l x , </space/> r x ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> L i n e & </space/> a ) </space/> c o n s t 
 { 
 r e t u r n </space/> y </space/> > </space/> a . y ; 
 } 
 } ; 
 L i n e </space/> s e g [ N ] ; 
 
 s t r u c t </space/> n o d e 
 { 
 i n t </space/> x , </space/> y , </space/> t p ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> n o d e & </space/> a ) </space/> c o n s t 
 { 
 r e t u r n </space/> y </space/> > </space/> a . y ; 
 } 
 } ; 
 n o d e </space/> a [ N </space/> < < </space/> 1 ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 l l </space/> a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & s e g [ i ] . y , </space/> & s e g [ i ] . l x , </space/> & s e g [ i ] . r x ) ; 
 i f </space/> ( s e g [ i ] . l x </space/> = = </space/> 0 </space/> & & </space/> s e g [ i ] . r x </space/> = = </space/> K ) 
 { 
 a n s + + ; 
 } 
 s e g [ i ] . l x </space/> = </space/> m a x ( s e g [ i ] . l x , </space/> 1 ) ; 
 s e g [ i ] . r x </space/> = </space/> m i n ( s e g [ i ] . r x , </space/> K </space/> - </space/> 1 ) ; 
 } 
 s o r t ( s e g </space/> + </space/> 1 , </space/> s e g </space/> + </space/> n </space/> + </space/> 1 ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> l y , </space/> r y ; 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & l y , </space/> & r y ) ; 
 i f </space/> ( l y </space/> = = </space/> 0 </space/> & & </space/> r y </space/> = = </space/> K ) 
 a n s + + ; 
 a [ 2 </space/> * </space/> i </space/> - </space/> 1 ] . x </space/> = </space/> a [ 2 </space/> * </space/> i ] . x </space/> = </space/> x ; 
 a [ 2 </space/> * </space/> i </space/> - </space/> 1 ] . y </space/> = </space/> r y ; 
 a [ 2 </space/> * </space/> i ] . y </space/> = </space/> l y </space/> - </space/> 1 ; 
 a [ 2 </space/> * </space/> i </space/> - </space/> 1 ] . t p </space/> = </space/> 1 ; 
 a [ 2 </space/> * </space/> i ] . t p </space/> = </space/> - 1 ; 
 } 
 s o r t ( a </space/> + </space/> 1 , </space/> a </space/> + </space/> 2 </space/> * </space/> m </space/> + </space/> 1 ) ; 
 i n t </space/> l </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 w h i l e </space/> ( l </space/> + </space/> 1 </space/> < = </space/> 2 </space/> * </space/> m </space/> & & </space/> a [ l </space/> + </space/> 1 ] . y </space/> > = </space/> s e g [ i ] . y ) 
 { 
 l + + ; 
 u p d a t e ( a [ l ] . x , </space/> a [ l ] . t p , </space/> 1 , </space/> K , </space/> 1 ) ; 
 } 
 a n s </space/> + = </space/> q u e r y ( s e g [ i ] . l x , </space/> s e g [ i ] . r x , </space/> 1 , </space/> K , </space/> 1 ) ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 1 ; 
 i n t </space/> l o w b i t ( i n t </space/> x ) 
 { 
 r e t u r n </space/> x </space/> & </space/> - x ; 
 } 
 i n t </space/> t r e e [ N </space/> + </space/> 1 0 ] ; 
 i n t </space/> q u e r y ( i n t </space/> x ) 
 { 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 x + + ; 
 f o r </space/> ( ; </space/> x ; </space/> x </space/> - = </space/> l o w b i t ( x ) ) 
 { 
 r e s </space/> + = </space/> t r e e [ x ] ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 v o i d </space/> u p d a t e ( i n t </space/> x , </space/> i n t </space/> k ) 
 { 
 x + + ; 
 f o r </space/> ( ; </space/> x </space/> < = </space/> N ; </space/> x </space/> + = </space/> l o w b i t ( x ) ) 
 { 
 t r e e [ x ] </space/> + = </space/> k ; 
 } 
 } 
 s t r u c t </space/> e v e n t 
 { 
 i n t </space/> s t ; 
 i n t </space/> x , </space/> l , </space/> r ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> e v e n t </space/> r h s ) </space/> c o n s t 
 { 
 r e t u r n </space/> m a k e _ t u p l e ( x , </space/> s t ) </space/> < </space/> m a k e _ t u p l e ( r h s . x , </space/> r h s . s t ) ; 
 } 
 } ; 
 i n t </space/> m a i n ( ) 
 { 
 v e c t o r < e v e n t > </space/> v ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> y </space/> > > </space/> l </space/> > > </space/> r ; 
 v . p u s h _ b a c k ( { </space/> 0 , </space/> l , </space/> y , </space/> 0 </space/> } ) ; 
 v . p u s h _ b a c k ( { </space/> 2 , </space/> r , </space/> y , </space/> 0 </space/> } ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> x </space/> > > </space/> l </space/> > > </space/> r ; 
 v . p u s h _ b a c k ( { </space/> 1 , </space/> x , </space/> l , </space/> r </space/> } ) ; 
 } 
 c o n s t </space/> i n t </space/> L I M </space/> = </space/> 1 e 6 ; 
 v . p u s h _ b a c k ( { </space/> 0 , </space/> 0 , </space/> L I M , </space/> 0 </space/> } ) ; 
 v . p u s h _ b a c k ( { </space/> 2 , </space/> L I M , </space/> L I M , </space/> 0 </space/> } ) ; 
 v . p u s h _ b a c k ( { </space/> 0 , </space/> 0 , </space/> 0 , </space/> 0 </space/> } ) ; 
 v . p u s h _ b a c k ( { </space/> 2 , </space/> L I M , </space/> 0 , </space/> 0 </space/> } ) ; 
 v . p u s h _ b a c k ( { </space/> 1 , </space/> 0 , </space/> 0 , </space/> L I M </space/> } ) ; 
 v . p u s h _ b a c k ( { </space/> 1 , </space/> L I M , </space/> 0 , </space/> L I M </space/> } ) ; 
 s o r t ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o & </space/> i </space/> : </space/> v ) 
 { 
 i f </space/> ( i . s t </space/> = = </space/> 1 ) 
 { 
 a n s </space/> + = </space/> q u e r y ( i . r ) </space/> - </space/> q u e r y ( i . l </space/> - </space/> 1 ) ; 
 } 
 i f </space/> ( i . s t </space/> = = </space/> 0 ) 
 { 
 u p d a t e ( i . l , </space/> 1 ) ; 
 } 
 i f </space/> ( i . s t </space/> = = </space/> 2 ) 
 { 
 u p d a t e ( i . l , </space/> - 1 ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> - </space/> n </space/> - </space/> m </space/> - </space/> 3 ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < c s t r i n g > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 # i n c l u d e </space/> < c s t d i o > 
 # i n c l u d e </space/> < c m a t h > 
 # i n c l u d e </space/> < v e c t o r > 
 # i n c l u d e </space/> < s e t > 
 # i n c l u d e </space/> < m a p > 
 # i n c l u d e </space/> < q u e u e > 
 # i n c l u d e </space/> < c a s s e r t > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i ; 
 
 i n t </space/> n , </space/> m ; 
 
 s t r u c t </space/> l i n e 
 { 
 i n t </space/> x ; 
 i n t </space/> l , </space/> r ; 
 i n t </space/> l e n ; 
 l i n e ( i n t </space/> _ x </space/> = </space/> 0 , </space/> i n t </space/> _ l </space/> = </space/> 0 , </space/> i n t </space/> _ r </space/> = </space/> 0 , </space/> i n t </space/> _ l e n </space/> = </space/> 0 ) 
 : </space/> x ( _ x ) 
 , </space/> l ( _ l ) 
 , </space/> r ( _ r ) 
 , </space/> l e n ( _ l e n ) 
 { 
 } 
 } ; 
 
 v e c t o r < l i n e > </space/> v , </space/> a , </space/> b ; 
 
 b o o l </space/> c m p 1 ( l i n e </space/> l 1 , </space/> l i n e </space/> l 2 ) 
 { 
 r e t u r n </space/> l 1 . x </space/> < </space/> l 2 . x ; 
 } 
 
 b o o l </space/> c m p 3 ( l i n e </space/> l 1 , </space/> l i n e </space/> l 2 ) 
 { 
 r e t u r n </space/> l 1 . l e n </space/> < </space/> l 2 . l e n ; 
 } 
 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 
 i n t </space/> c [ m a x n ] ; 
 
 v o i d </space/> a d d ( i n t </space/> p , </space/> i n t </space/> v ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p ; </space/> i </space/> < </space/> m a x n ; </space/> i </space/> + = </space/> i </space/> & </space/> - i ) 
 { 
 c [ i ] </space/> + = </space/> v ; 
 } 
 } 
 
 i n t </space/> s u m ( i n t </space/> p ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p ; </space/> i </space/> > </space/> 0 ; </space/> i </space/> - = </space/> i </space/> & </space/> - i ) 
 { 
 r e t </space/> + = </space/> c [ i ] ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 
 v o i d </space/> a d d ( i n t </space/> l , </space/> i n t </space/> r , </space/> i n t </space/> v ) 
 { 
 a d d ( l , </space/> v ) ; 
 a d d ( r </space/> + </space/> 1 , </space/> - v ) ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) , </space/> c i n . t i e ( 0 ) , </space/> c o u t . t i e ( 0 ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> x </space/> > > </space/> l </space/> > > </space/> r ; 
 v . p u s h _ b a c k ( l i n e ( x , </space/> l , </space/> r , </space/> r </space/> - </space/> l ) ) ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> a n d </space/> r </space/> = = </space/> 1 e 6 ) 
 a n s + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> x </space/> > > </space/> l </space/> > > </space/> r ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> a n d </space/> r </space/> = = </space/> 1 e 6 ) 
 a n s + + ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> a n d </space/> r </space/> < </space/> 1 e 6 ) 
 { 
 a . p u s h _ b a c k ( l i n e ( x , </space/> l , </space/> r , </space/> r </space/> - </space/> l ) ) ; 
 } 
 e l s e 
 { 
 b . p u s h _ b a c k ( l i n e ( x , </space/> l , </space/> r , </space/> r </space/> - </space/> l ) ) ; 
 } 
 } 
 s o r t ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> c m p 1 ) ; 
 m e m s e t ( c , </space/> 0 , </space/> s i z e o f ( c ) ) ; 
 i n t </space/> n o w </space/> = </space/> 0 ; 
 s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) , </space/> c m p 3 ) ; 
 f o r </space/> ( a u t o </space/> l </space/> : </space/> a ) 
 { 
 w h i l e </space/> ( n o w </space/> < </space/> n </space/> a n d </space/> v [ n o w ] . x </space/> < = </space/> l . r ) 
 { 
 a d d ( v [ n o w ] . l </space/> + </space/> 1 , </space/> v [ n o w ] . r </space/> + </space/> 1 , </space/> 1 ) ; 
 n o w + + ; 
 } 
 a n s </space/> + = </space/> s u m ( l . x </space/> + </space/> 1 ) ; 
 } 
 m e m s e t ( c , </space/> 0 , </space/> s i z e o f ( c ) ) ; 
 s o r t ( b . b e g i n ( ) , </space/> b . e n d ( ) , </space/> c m p 3 ) ; 
 n o w </space/> = </space/> n </space/> - </space/> 1 ; 
 f o r </space/> ( a u t o </space/> l </space/> : </space/> b ) 
 { 
 w h i l e </space/> ( n o w </space/> > = </space/> 0 </space/> a n d </space/> v [ n o w ] . x </space/> > = </space/> l . l ) 
 { 
 a d d ( v [ n o w ] . l </space/> + </space/> 1 , </space/> v [ n o w ] . r </space/> + </space/> 1 , </space/> 1 ) ; 
 n o w - - ; 
 } 
 a n s </space/> + = </space/> s u m ( l . x </space/> + </space/> 1 ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s t r u c t </space/> f t r e e 
 { 
 v e c t o r < i n t > </space/> b i t ; 
 f t r e e ( i n t </space/> _ n ) 
 { 
 b i t . a s s i g n ( _ n </space/> + </space/> 5 , </space/> 0 ) ; 
 } 
 
 v o i d </space/> u p d a t e ( i n t </space/> x , </space/> i n t </space/> v a l ) 
 { 
 + + x ; 
 w h i l e </space/> ( x </space/> < </space/> ( i n t ) b i t . s i z e ( ) ) 
 { 
 b i t [ x ] </space/> + = </space/> v a l ; 
 x </space/> + = </space/> x </space/> & </space/> - x ; 
 } 
 } 
 
 i n t </space/> q u e r y ( i n t </space/> x ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 + + x ; 
 w h i l e </space/> ( x </space/> > </space/> 0 ) 
 { 
 r e t </space/> + = </space/> b i t [ x ] ; 
 x </space/> - = </space/> x </space/> & </space/> - x ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 } ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 i n t </space/> n , </space/> m , </space/> s </space/> = </space/> 1 e 6 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 
 v e c t o r < v e c t o r < i n t > > </space/> h [ 2 ] , </space/> v ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> l , </space/> r , </space/> y ; 
 c i n </space/> > > </space/> y </space/> > > </space/> l </space/> > > </space/> r ; 
 h [ ( l </space/> ! = </space/> 0 ) ] . p u s h _ b a c k ( v e c t o r < i n t > ( ) </space/> = </space/> { </space/> y , </space/> l , </space/> r </space/> } ) ; 
 
 i f </space/> ( ! l </space/> & & </space/> r </space/> = = </space/> s ) 
 + + a n s ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> + + i ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> x </space/> > > </space/> l </space/> > > </space/> r ; 
 v . p u s h _ b a c k ( v e c t o r < i n t > ( ) </space/> = </space/> { </space/> x , </space/> l , </space/> r </space/> } ) ; 
 
 i f </space/> ( ! l </space/> & & </space/> r </space/> = = </space/> s ) 
 + + a n s ; 
 } 
 
 s o r t ( v . b e g i n ( ) , </space/> v . e n d ( ) , </space/> [ & ] ( a u t o </space/> a , </space/> a u t o </space/> b ) 
 { 
 r e t u r n </space/> a [ 0 ] </space/> < </space/> b [ 0 ] ; 
 } ) ; 
 
 s o r t ( h [ 0 ] . b e g i n ( ) , </space/> h [ 0 ] . e n d ( ) , </space/> [ & ] ( a u t o </space/> a , </space/> a u t o </space/> b ) 
 { 
 r e t u r n </space/> a [ 2 ] </space/> < </space/> b [ 2 ] ; 
 } ) ; 
 
 s o r t ( h [ 1 ] . b e g i n ( ) , </space/> h [ 1 ] . e n d ( ) , </space/> [ & ] ( a u t o </space/> a , </space/> a u t o </space/> b ) 
 { 
 r e t u r n </space/> a [ 1 ] </space/> > </space/> b [ 1 ] ; 
 } ) ; 
 
 f t r e e </space/> b i t ( 1 e 6 ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> j </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( i n t ) h [ 0 ] . s i z e ( ) ; </space/> + + i ) 
 { 
 i n t </space/> y </space/> = </space/> h [ 0 ] [ i ] [ 0 ] , </space/> r </space/> = </space/> h [ 0 ] [ i ] [ 2 ] ; 
 w h i l e </space/> ( j </space/> < </space/> ( i n t ) v . s i z e ( ) </space/> & & </space/> v [ j ] [ 0 ] </space/> < = </space/> r ) 
 { 
 i n t </space/> l a </space/> = </space/> v [ j ] [ 1 ] , </space/> l r </space/> = </space/> v [ j ] [ 2 ] ; 
 b i t . u p d a t e ( l a , </space/> 1 ) ; 
 b i t . u p d a t e ( l r </space/> + </space/> 1 , </space/> - 1 ) ; 
 + + j ; 
 } 
 a n s </space/> + = </space/> b i t . q u e r y ( y ) ; 
 } 
 
 r e v e r s e ( v . b e g i n ( ) , </space/> v . e n d ( ) ) ; 
 b i t . b i t . a s s i g n ( 1 e 6 </space/> + </space/> 5 , </space/> 0 ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> j </space/> = </space/> 0 ; </space/> i </space/> < </space/> ( i n t ) h [ 1 ] . s i z e ( ) ; </space/> + + i ) 
 { 
 i n t </space/> y </space/> = </space/> h [ 1 ] [ i ] [ 0 ] , </space/> l </space/> = </space/> h [ 1 ] [ i ] [ 1 ] ; 
 w h i l e </space/> ( j </space/> < </space/> ( i n t ) v . s i z e ( ) </space/> & & </space/> v [ j ] [ 0 ] </space/> > = </space/> l ) 
 { 
 i n t </space/> l a </space/> = </space/> v [ j ] [ 1 ] , </space/> l r </space/> = </space/> v [ j ] [ 2 ] ; 
 b i t . u p d a t e ( l a , </space/> 1 ) ; 
 b i t . u p d a t e ( l r </space/> + </space/> 1 , </space/> - 1 ) ; 
 + + j ; 
 } 
 a n s </space/> + = </space/> b i t . q u e r y ( y ) ; 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 / * </space/> s o r r y , </space/> t h i s </space/> i s </space/> t h e </space/> b a r e </space/> m i n i m u m </space/> : ' ( </space/> * / 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 u s i n g </space/> v i </space/> = </space/> v e c t o r < i n t > ; 
 # d e f i n e </space/> a l l ( v ) </space/> b e g i n ( v ) , </space/> e n d ( v ) 
 # d e f i n e </space/> s z ( v ) </space/> ( i n t ) ( v ) . s i z e ( ) 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 6 ; 
 
 i n t </space/> f t [ N ] ; 
 v o i d </space/> u p d a t e ( i n t </space/> p , </space/> i n t </space/> x ) 
 { 
 f o r </space/> ( ; </space/> p </space/> < </space/> N ; </space/> p </space/> + = </space/> p </space/> & </space/> - p ) 
 f t [ p ] </space/> + = </space/> x ; 
 } 
 i n t </space/> s u m ( i n t </space/> l , </space/> i n t </space/> r ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 f o r </space/> ( - - l ; </space/> l </space/> > </space/> 0 ; </space/> l </space/> - = </space/> l </space/> & </space/> - l ) 
 r e t </space/> - = </space/> f t [ l ] ; 
 f o r </space/> ( ; </space/> r </space/> > </space/> 0 ; </space/> r </space/> - = </space/> r </space/> & </space/> - r ) 
 r e t </space/> + = </space/> f t [ r ] ; 
 r e t u r n </space/> r e t ; 
 } 
 
 i n t </space/> m a i n ( i n t </space/> a r g c , </space/> c h a r </space/> c o n s t * </space/> a r g v [ ] ) 
 { 
 # i f d e f </space/> L O C A L 
 f r e o p e n ( "" i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f 
 i n t </space/> n , </space/> m ; 
 s c a n f ( "" % d </space/> % d "" , </space/> & n , </space/> & m ) ; 
 v e c t o r < i i > </space/> e v e n t s ; 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 s c a n f ( "" % d </space/> % d </space/> % d "" , </space/> & y , </space/> & l , </space/> & r ) ; 
 e v e n t s . e m p l a c e _ b a c k ( l , </space/> + y ) ; 
 e v e n t s . e m p l a c e _ b a c k ( r </space/> + </space/> 1 , </space/> - y ) ; 
 i f </space/> ( r </space/> - </space/> l </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 a n s + + ; 
 } 
 s o r t ( a l l ( e v e n t s ) ) ; 
 v e c t o r < i i > </space/> v e r ( N ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> + + i ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 s c a n f ( "" % d </space/> % d </space/> % d "" , </space/> & x , </space/> & l , </space/> & r ) ; 
 i f </space/> ( r </space/> - </space/> l </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 a n s + + ; 
 v e r [ x ] </space/> = </space/> { </space/> l , </space/> r </space/> } ; 
 } 
 i n t </space/> p t r </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < </space/> N ; </space/> + + i ) 
 { 
 w h i l e </space/> ( p t r </space/> < </space/> s z ( e v e n t s ) </space/> a n d </space/> e v e n t s [ p t r ] . f i </space/> < = </space/> i ) 
 { 
 i f </space/> ( e v e n t s [ p t r ] . s e </space/> < </space/> 0 ) 
 { 
 u p d a t e ( - e v e n t s [ p t r ] . s e , </space/> - 1 ) ; 
 } 
 e l s e 
 { 
 u p d a t e ( e v e n t s [ p t r ] . s e , </space/> 1 ) ; 
 } 
 + + p t r ; 
 } 
 a n s </space/> + = </space/> s u m ( m a x ( 1 , </space/> v e r [ i ] . f i ) , </space/> v e r [ i ] . s e ) ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s </space/> + </space/> 1 ) ; 
 r e t u r n </space/> 0 ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 ; 
 
 s t r u c t </space/> F e n w i c k 
 { 
 i n t </space/> n ; 
 v e c t o r < i n t > </space/> a ; 
 F e n w i c k ( i n t </space/> n ) 
 : </space/> n ( n ) 
 , </space/> a ( n </space/> + </space/> 1 ) 
 { 
 } 
 v o i d </space/> a d d ( i n t </space/> x , </space/> i n t </space/> v ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> < = </space/> n ; </space/> i </space/> + = </space/> i </space/> & </space/> - i ) 
 a [ i ] </space/> + = </space/> v ; 
 } 
 i n t </space/> s u m ( i n t </space/> x ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> > </space/> 0 ; </space/> i </space/> - = </space/> i </space/> & </space/> - i ) 
 r e t </space/> + = </space/> a [ i ] ; 
 r e t u r n </space/> r e t ; 
 } 
 i n t </space/> s u m ( i n t </space/> l , </space/> i n t </space/> r ) 
 { 
 r e t u r n </space/> s u m ( r ) </space/> - </space/> s u m ( l </space/> - </space/> 1 ) ; 
 } 
 } ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 
 i n t 6 4 _ t </space/> a n s </space/> = </space/> 1 ; 
 v e c t o r < t u p l e < i n t , </space/> i n t , </space/> i n t > > </space/> a , </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> y </space/> > > </space/> l </space/> > > </space/> r ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> N ) 
 a n s + + ; 
 a . e m p l a c e _ b a c k ( l , </space/> y , </space/> 1 ) ; 
 a . e m p l a c e _ b a c k ( r </space/> + </space/> 1 , </space/> y , </space/> - 1 ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> x </space/> > > </space/> l </space/> > > </space/> r ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> N ) 
 a n s + + ; 
 b . e m p l a c e _ b a c k ( x , </space/> l , </space/> r ) ; 
 } 
 s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) ) ; 
 s o r t ( b . b e g i n ( ) , </space/> b . e n d ( ) ) ; 
 
 i n t </space/> i </space/> = </space/> 0 ; 
 F e n w i c k </space/> f e n ( N </space/> + </space/> 1 ) ; 
 f o r </space/> ( a u t o [ x , </space/> l , </space/> r ] </space/> : </space/> b ) 
 { 
 w h i l e </space/> ( i </space/> < </space/> 2 </space/> * </space/> n </space/> & & </space/> g e t < 0 > ( a [ i ] ) </space/> < = </space/> x ) 
 { 
 a u t o [ e , </space/> y , </space/> v ] </space/> = </space/> a [ i + + ] ; 
 f e n . a d d ( y , </space/> v ) ; 
 } 
 a n s </space/> + = </space/> f e n . s u m ( l , </space/> r ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 
 
 
 
 
 D </space/> P </space/> 
 
 
 
 
 </space/> l </space/> l 
 * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> X </space/> f i r s t 
 # d e f i n e </space/> Y </space/> s e c o n d 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 i n t </space/> l o w b i t ( i n t </space/> x ) 
 { 
 r e t u r n </space/> x </space/> & </space/> - x ; 
 } 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 0 0 ; 
 i n t </space/> n , </space/> m ; 
 v e c t o r < i n t > </space/> a d d [ N </space/> + </space/> 1 ] , </space/> d e l [ N </space/> + </space/> 2 ] ; 
 s t r u c t </space/> b i t r e e 
 { 
 i n t </space/> s u m [ N </space/> + </space/> 2 ] ; 
 b i t r e e ( ) 
 { 
 m e m s e t ( s u m , </space/> 0 , </space/> s i z e o f ( s u m ) ) ; 
 } 
 v o i d </space/> a d d ( i n t </space/> x , </space/> i n t </space/> v ) 
 { 
 w h i l e </space/> ( x </space/> < = </space/> N ) 
 s u m [ x ] </space/> + = </space/> v , </space/> x </space/> + = </space/> l o w b i t ( x ) ; 
 } 
 i n t </space/> S u m ( i n t </space/> x ) 
 { 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 w h i l e </space/> ( x ) 
 r e s </space/> + = </space/> s u m [ x ] , </space/> x </space/> - = </space/> l o w b i t ( x ) ; 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> _ s u m ( i n t </space/> l , </space/> i n t </space/> r ) 
 { 
 r e t u r n </space/> S u m ( r ) </space/> - </space/> S u m ( l </space/> - </space/> 1 ) ; 
 } 
 } </space/> b i t ; 
 p a i r < i n t , </space/> i n t > </space/> l i n e [ N </space/> + </space/> 1 ] ; 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & l , </space/> & r ) ; 
 a n s </space/> + = </space/> l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> N ; 
 a d d [ l ] . p b ( x ) , </space/> d e l [ r </space/> + </space/> 1 ] . p b ( x ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & l , </space/> & r ) ; 
 a n s </space/> + = </space/> l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> N ; 
 l i n e [ x ] </space/> = </space/> m p ( l , </space/> r ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> N ; </space/> i + + ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> a d d [ i ] . s i z e ( ) ; </space/> j + + ) 
 b i t . a d d ( a d d [ i ] [ j ] </space/> + </space/> 1 , </space/> 1 ) ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> d e l [ i ] . s i z e ( ) ; </space/> j + + ) 
 b i t . a d d ( d e l [ i ] [ j ] </space/> + </space/> 1 , </space/> - 1 ) ; 
 i f </space/> ( l i n e [ i ] </space/> ! = </space/> m p ( 0 , </space/> 0 ) ) 
 a n s </space/> + = </space/> b i t . _ s u m ( l i n e [ i ] . X </space/> + </space/> 1 , </space/> l i n e [ i ] . Y </space/> + </space/> 1 ) ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 0 ; 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 1 e 6 ; 
 i n t </space/> n , </space/> m ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 s t r u c t </space/> L i n e 1 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 } </space/> q 1 [ N ] ; 
 s t r u c t </space/> L i n e 2 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> L i n e 2 & </space/> a ) </space/> c o n s t 
 { 
 r e t u r n </space/> x </space/> < </space/> a . x ; 
 } 
 } </space/> q 2 [ N ] ; 
 v e c t o r < i n t > </space/> a d d [ M </space/> + </space/> 1 0 ] , </space/> d e l [ M </space/> + </space/> 1 0 ] ; 
 l l </space/> c [ M </space/> + </space/> 1 0 ] ; 
 v o i d </space/> i n s e r t ( i n t </space/> x , </space/> i n t </space/> v a l ) 
 { 
 w h i l e </space/> ( x </space/> < = </space/> M ) 
 { 
 c [ x ] </space/> + = </space/> v a l ; 
 x </space/> + = </space/> x </space/> & </space/> - x ; 
 } 
 } 
 i n t </space/> q u e r y ( i n t </space/> x ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 i f </space/> ( x </space/> < = </space/> 0 ) 
 r e t u r n </space/> 0 ; 
 w h i l e </space/> ( x ) 
 { 
 r e t </space/> + = </space/> c [ x ] ; 
 x </space/> - = </space/> x </space/> & </space/> - x ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 l l </space/> c n t y </space/> = </space/> 0 , </space/> c n t x </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & q 1 [ i ] . y , </space/> & q 1 [ i ] . l , </space/> & q 1 [ i ] . r ) ; 
 i f </space/> ( q 1 [ i ] . l </space/> = = </space/> 0 </space/> & & </space/> q 1 [ i ] . r </space/> = = </space/> M ) 
 { 
 c n t y + + ; 
 } 
 a d d [ q 1 [ i ] . l ] . p u s h _ b a c k ( q 1 [ i ] . y ) ; 
 d e l [ q 1 [ i ] . r ] . p u s h _ b a c k ( q 1 [ i ] . y ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & q 2 [ i ] . x , </space/> & q 2 [ i ] . l , </space/> & q 2 [ i ] . r ) ; 
 i f </space/> ( q 2 [ i ] . l </space/> = = </space/> 0 </space/> & & </space/> q 2 [ i ] . r </space/> = = </space/> M ) 
 { 
 c n t x + + ; 
 } 
 } 
 s o r t ( q 2 </space/> + </space/> 1 , </space/> q 2 </space/> + </space/> 1 </space/> + </space/> m ) ; 
 l l </space/> a n s </space/> = </space/> ( c n t x </space/> + </space/> 1 ) </space/> * </space/> ( c n t y </space/> + </space/> 1 ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 , </space/> j </space/> = </space/> 1 ; </space/> i </space/> < = </space/> M ; </space/> i + + ) 
 { 
 f o r </space/> ( a u t o </space/> v </space/> : </space/> a d d [ i ] ) 
 { 
 i n s e r t ( v , </space/> 1 ) ; 
 } 
 w h i l e </space/> ( j </space/> < = </space/> m </space/> & & </space/> q 2 [ j ] . x </space/> = = </space/> i ) 
 { 
 a n s </space/> + = </space/> q u e r y ( q 2 [ j ] . r ) </space/> - </space/> q u e r y ( q 2 [ j ] . l </space/> - </space/> 1 ) ; 
 j + + ; 
 } 
 f o r </space/> ( a u t o </space/> v </space/> : </space/> d e l [ i ] ) 
 { 
 i n s e r t ( v , </space/> - 1 ) ; 
 } 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s </space/> - </space/> c n t x </space/> * </space/> c n t y ) ; 
 r e t u r n </space/> 0 ; 
 } 
 / * 
 2 </space/> 1 
 2 </space/> 0 </space/> 1 0 
 3 </space/> 0 </space/> 1 0 
 1 0 </space/> 0 </space/> 1 0 0 0 0 0 0 
 * /",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) ( ( x ) . s i z e ( ) ) 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 
 v o i d </space/> d e b u g ( ) 
 { 
 c e r r </space/> < < </space/> "" \ n "" ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> H e a d , </space/> t y p e n a m e . . . </space/> T a i l > 
 v o i d </space/> d e b u g ( H e a d </space/> a , </space/> T a i l . . . </space/> b ) 
 { 
 c e r r </space/> < < </space/> a </space/> < < </space/> "" </space/> "" ; 
 d e b u g ( b . . . ) ; 
 } 
 
 s t r u c t </space/> B I T 
 { 
 v e c t o r < i n t > </space/> f ; 
 i n t </space/> s z ; 
 
 v o i d </space/> i n i t ( i n t </space/> n ) 
 { 
 s z </space/> = </space/> n ; 
 + + n ; 
 f . a s s i g n ( n , </space/> 0 ) ; 
 } 
 
 v o i d </space/> a d d ( i n t </space/> i , </space/> i n t </space/> v a l ) 
 { 
 i + + ; 
 i f </space/> ( i </space/> < = </space/> 0 ) 
 r e t u r n ; 
 f o r </space/> ( ; </space/> i </space/> < = </space/> s z ; </space/> i </space/> + = </space/> i </space/> & </space/> ( - i ) ) 
 f [ i ] </space/> + = </space/> v a l ; 
 } 
 
 i n t </space/> g e t ( i n t </space/> i ) 
 { 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( ; </space/> i </space/> > </space/> 0 ; </space/> i </space/> - = </space/> i </space/> & </space/> ( - i ) ) 
 r e s </space/> + = </space/> f [ i ] ; 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> g e t ( i n t </space/> l , </space/> i n t </space/> r ) 
 { 
 + + l , </space/> + + r ; 
 r e t u r n </space/> g e t ( r ) </space/> - </space/> g e t ( l </space/> - </space/> 1 ) ; 
 } 
 } </space/> f ; 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> e v e n t s [ N ] ; 
 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f . i n i t ( 1 e 6 </space/> + </space/> 5 ) ; 
 v e c t o r < p a i r < i n t , </space/> p a i r < i n t , </space/> i n t > > > </space/> h ( n ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 c i n </space/> > > </space/> h [ i ] . f </space/> > > </space/> h [ i ] . s . f </space/> > > </space/> h [ i ] . s . s ; 
 } 
 s o r t ( a l l ( h ) ) ; 
 l l </space/> a n s </space/> = </space/> 1 , </space/> c u r </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> + + i ) 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> y </space/> > > </space/> l </space/> > > </space/> r ; 
 e v e n t s [ l ] . p b ( { </space/> y , </space/> 1 </space/> } ) ; 
 e v e n t s [ r </space/> + </space/> 1 ] . p b ( { </space/> y , </space/> - 1 </space/> } ) ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> 1 e 6 ) 
 a n s + + ; 
 } 
 f . a d d ( 0 , </space/> 1 ) ; 
 f . a d d ( 1 e 6 , </space/> 1 ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 a u t o [ x , </space/> v ] </space/> = </space/> h [ i ] ; 
 a u t o [ l , </space/> r ] </space/> = </space/> v ; 
 w h i l e </space/> ( c u r </space/> < = </space/> x ) 
 { 
 f o r </space/> ( p a i r < i n t , </space/> i n t > </space/> p </space/> : </space/> e v e n t s [ c u r ] ) 
 { 
 i f </space/> ( p . s </space/> = = </space/> 1 ) 
 f . a d d ( p . f , </space/> 1 ) ; 
 e l s e 
 f . a d d ( p . f , </space/> - 1 ) ; 
 } 
 c u r + + ; 
 } 
 a n s </space/> + = </space/> f . g e t ( l , </space/> r ) </space/> - </space/> 1 ; 
 } 
 c o u t </space/> < < </space/> a n s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 i n t </space/> t </space/> = </space/> 1 ; 
 / / </space/> c i n </space/> > > </space/> t ; 
 w h i l e </space/> ( t - - ) 
 s o l v e ( ) ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t e x p r </space/> i n t </space/> N </space/> = </space/> 1 e 6 ; 
 
 i n t </space/> f e n [ N </space/> + </space/> 1 ] ; 
 
 v o i d </space/> a d d ( i n t </space/> x , </space/> i n t </space/> v ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> x </space/> + </space/> 1 ; </space/> i </space/> < = </space/> N </space/> + </space/> 1 ; </space/> i </space/> + = </space/> i </space/> & </space/> - i ) 
 f e n [ i </space/> - </space/> 1 ] </space/> + = </space/> v ; 
 } 
 
 i n t </space/> s u m ( i n t </space/> x ) 
 { 
 i n t </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i ; </space/> i </space/> & = </space/> i </space/> - </space/> 1 ) 
 r e s </space/> + = </space/> f e n [ i </space/> - </space/> 1 ] ; 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 i n t </space/> n , </space/> m ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 v e c t o r < t u p l e < i n t , </space/> i n t , </space/> i n t > > </space/> a , </space/> b ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> y </space/> > > </space/> l </space/> > > </space/> r ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> N ) 
 + + a n s ; 
 a . e m p l a c e _ b a c k ( l , </space/> y , </space/> 1 ) ; 
 a . e m p l a c e _ b a c k ( r </space/> + </space/> 1 , </space/> y , </space/> - 1 ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> + + i ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 c i n </space/> > > </space/> x </space/> > > </space/> l </space/> > > </space/> r ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> N ) 
 + + a n s ; 
 b . e m p l a c e _ b a c k ( x , </space/> l , </space/> r ) ; 
 } 
 s o r t ( a . b e g i n ( ) , </space/> a . e n d ( ) ) ; 
 s o r t ( b . b e g i n ( ) , </space/> b . e n d ( ) ) ; 
 i n t </space/> i </space/> = </space/> 0 ; 
 f o r </space/> ( a u t o [ x , </space/> l , </space/> r ] </space/> : </space/> b ) 
 { 
 w h i l e </space/> ( i </space/> < </space/> 2 </space/> * </space/> n </space/> & & </space/> g e t < 0 > ( a [ i ] ) </space/> < = </space/> x ) 
 { 
 a u t o [ t t , </space/> y , </space/> v ] </space/> = </space/> a [ i + + ] ; 
 a d d ( y , </space/> v ) ; 
 } 
 a n s </space/> + = </space/> s u m ( r </space/> + </space/> 1 ) </space/> - </space/> s u m ( l ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 6 </space/> + </space/> 5 ; 
 
 c l a s s </space/> B I T 
 { 
 v e c t o r < l o n g </space/> l o n g > </space/> t r e e ; 
 
 p u b l i c : 
 B I T ( i n t </space/> n ) 
 { 
 t r e e . a s s i g n ( n , </space/> 0 ) ; 
 } 
 l o n g </space/> l o n g </space/> r e a d ( i n t </space/> i d x ) 
 { 
 l o n g </space/> l o n g </space/> v a l </space/> = </space/> 0 ; 
 w h i l e </space/> ( i d x </space/> > </space/> 0 ) 
 { 
 v a l </space/> + = </space/> t r e e [ i d x ] ; 
 i d x </space/> - = </space/> ( i d x </space/> & </space/> ( - i d x ) ) ; 
 } 
 r e t u r n </space/> v a l ; 
 } 
 v o i d </space/> w r i t e ( i n t </space/> i d x , </space/> i n t </space/> v a l ) 
 { 
 w h i l e </space/> ( i d x </space/> < </space/> t r e e . s i z e ( ) ) 
 { 
 t r e e [ i d x ] </space/> + = </space/> v a l ; 
 i d x </space/> + = </space/> ( i d x </space/> & </space/> - i d x ) ; 
 } 
 } 
 } ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 i n t </space/> n , </space/> m , </space/> x , </space/> y , </space/> z ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 v e c t o r < v e c t o r < i n t > > </space/> x s ( M A X N ) , </space/> x e ( M A X N ) ; 
 v e c t o r < v e c t o r < p a i r < i n t , </space/> i n t > > > </space/> x q ( M A X N ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x </space/> > > </space/> y </space/> > > </space/> z ; 
 x + + , </space/> y + + , </space/> z + + ; 
 i f </space/> ( y </space/> = = </space/> 1 </space/> & & </space/> z </space/> = = </space/> M A X N </space/> - </space/> 4 ) 
 { 
 a n s + + ; 
 } 
 x s [ y ] . p u s h _ b a c k ( x ) ; 
 x e [ z ] . p u s h _ b a c k ( x ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> x </space/> > > </space/> y </space/> > > </space/> z ; 
 x + + , </space/> y + + , </space/> z + + ; 
 i f </space/> ( y </space/> = = </space/> 1 </space/> & & </space/> z </space/> = = </space/> M A X N </space/> - </space/> 4 ) 
 { 
 a n s + + ; 
 } 
 x q [ x ] . p u s h _ b a c k ( { </space/> y , </space/> z </space/> } ) ; 
 } 
 B I T </space/> b i t 1 ( M A X N ) , </space/> b i t 2 ( M A X N ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> M A X N ; </space/> i + + ) 
 { 
 / / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" \ n "" ; 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x s [ i ] ) 
 { 
 b i t 1 . w r i t e ( a , </space/> 1 ) ; 
 i f </space/> ( b i t 2 . r e a d ( a ) </space/> - </space/> b i t 2 . r e a d ( a </space/> - </space/> 1 ) </space/> = = </space/> 0 ) 
 { 
 b i t 2 . w r i t e ( a , </space/> 1 ) ; 
 } 
 } 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x q [ i ] ) 
 { 
 a n s </space/> + = </space/> b i t 2 . r e a d ( a . s e c o n d ) </space/> - </space/> b i t 2 . r e a d ( a . f i r s t </space/> - </space/> 1 ) ; 
 / / / </space/> c o u t </space/> < < </space/> i </space/> < < </space/> "" </space/> "" </space/> < < </space/> s t . q u e r y ( 1 , </space/> 0 , </space/> M A X N </space/> - </space/> 1 , </space/> a . f i r s t , </space/> a . s e c o n d ) </space/> < < </space/> e n d l ; 
 } 
 f o r </space/> ( a u t o </space/> a </space/> : </space/> x e [ i ] ) 
 { 
 b i t 1 . w r i t e ( a , </space/> - 1 ) ; 
 i f </space/> ( b i t 1 . r e a d ( a ) </space/> - </space/> b i t 1 . r e a d ( a </space/> - </space/> 1 ) </space/> = = </space/> 0 ) 
 { 
 b i t 2 . w r i t e ( a , </space/> - 1 ) ; 
 } 
 } 
 } 
 c o u t </space/> < < </space/> a n s ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 i n t </space/> n , </space/> m ; 
 v e c t o r < i n t > </space/> S [ 1 0 0 0 0 1 0 ] , </space/> E [ 1 0 0 0 0 1 0 ] , </space/> S x [ 1 0 0 0 0 1 0 ] , </space/> E x [ 1 0 0 0 0 1 0 ] , </space/> p o s [ 1 0 0 0 0 1 0 ] ; 
 v e c t o r < p a i r < i n t , </space/> i n t > </space/> > </space/> v e c x [ 1 0 0 0 0 1 0 ] ; 
 l l </space/> t r [ 1 0 0 0 0 1 0 ] ; 
 i n t </space/> l o w b i t ( i n t </space/> x ) 
 { 
 r e t u r n </space/> x </space/> & </space/> ( - x ) ; 
 } 
 v o i d </space/> a d d ( i n t </space/> x , </space/> i n t </space/> c ) 
 { 
 x </space/> + = </space/> 2 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> < = </space/> 1 0 0 0 0 0 5 ; </space/> i </space/> + = </space/> l o w b i t ( i ) ) 
 t r [ i ] </space/> + = </space/> c ; 
 } 
 l l </space/> s u m ( i n t </space/> x ) 
 { 
 l l </space/> r e t </space/> = </space/> 0 ; 
 x </space/> + = </space/> 2 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> > </space/> 0 ; </space/> i </space/> - = </space/> l o w b i t ( i ) ) 
 r e t </space/> + = </space/> t r [ i ] ; 
 r e t u r n </space/> r e t ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 s c a n f ( "" % d % d % d "" , </space/> & y , </space/> & l , </space/> & r ) ; 
 i f </space/> ( r </space/> - </space/> l </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 + + a n s ; 
 S [ l ] . p u s h _ b a c k ( y ) ; 
 E [ r ] . p u s h _ b a c k ( y ) ; 
 i f </space/> ( r </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 p o s [ y ] . p u s h _ b a c k ( l ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> + + i ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & l , </space/> & r ) ; 
 i f </space/> ( r </space/> - </space/> l </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 + + a n s ; 
 v e c x [ x ] . p u s h _ b a c k ( m a k e _ p a i r ( l , </space/> r ) ) ; 
 S x [ l ] . p u s h _ b a c k ( x ) ; 
 E x [ r ] . p u s h _ b a c k ( x ) ; 
 } 
 / / </space/> v e c x [ 1 0 0 0 0 0 0 ] . p u s h _ b a c k ( m a k e _ p a i r ( 0 , </space/> 1 0 0 0 0 0 0 ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> 1 e 6 ; </space/> + + i ) 
 { 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> S [ i ] . s i z e ( ) ; </space/> + + j ) 
 { 
 a d d ( S [ i ] [ j ] , </space/> 1 ) ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> v e c x [ i ] . s i z e ( ) ; </space/> + + j ) 
 { 
 a n s </space/> + = </space/> s u m ( v e c x [ i ] [ j ] . s e c o n d ) </space/> - </space/> s u m ( v e c x [ i ] [ j ] . f i r s t </space/> - </space/> 1 ) ; 
 } 
 f o r </space/> ( i n t </space/> j </space/> = </space/> 0 ; </space/> j </space/> < </space/> E [ i ] . s i z e ( ) ; </space/> + + j ) 
 { 
 a d d ( E [ i ] [ j ] , </space/> - 1 ) ; 
 } 
 } 
 c o u t </space/> < < </space/> a n s </space/> + </space/> 1 </space/> < < </space/> e n d l ; 
 } 
 
 / * 
 1 </space/> 2 
 1 </space/> 0 </space/> 1 0 0 0 0 0 0 
 3 </space/> 0 </space/> 1 
 5 </space/> 0 </space/> 1 
 
 2 </space/> 1 
 3 </space/> 0 </space/> 1 
 5 </space/> 0 </space/> 1 
 1 </space/> 0 </space/> 1 0 0 0 0 0 0 
 
 2 </space/> 1 
 3 </space/> 0 </space/> 2 
 5 </space/> 0 </space/> 2 
 1 </space/> 0 </space/> 1 0 0 0 0 0 0 
 
 1 </space/> 2 
 3 </space/> 0 </space/> 2 
 2 </space/> 0 </space/> 3 
 5 </space/> 0 </space/> 1 0 0 0 0 0 0 
 
 1 </space/> 1 
 5 0 0 0 0 0 </space/> 1 </space/> 1 0 0 0 0 0 0 
 5 0 0 0 0 0 </space/> 0 </space/> 9 9 9 9 9 9 
 
 2 </space/> 0 
 1 </space/> 0 </space/> 1 0 0 0 0 0 0 
 2 </space/> 0 </space/> 1 0 0 0 0 0 0 
 * / 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < v e c t o r > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 s t r u c t </space/> B I T 
 { 
 i n t </space/> n ; 
 v e c t o r < l o n g </space/> l o n g > </space/> a ; 
 
 B I T ( i n t </space/> n ) 
 { 
 t h i s - > n </space/> = </space/> n ; 
 a . r e s i z e ( n </space/> + </space/> 5 ) ; 
 } 
 
 v o i d </space/> a d d ( i n t </space/> i d x , </space/> i n t </space/> d e l ) 
 { 
 w h i l e </space/> ( i d x </space/> < = </space/> n ) 
 { 
 a [ i d x ] </space/> + = </space/> d e l ; 
 i d x </space/> + = </space/> ( i d x </space/> & </space/> ( - i d x ) ) ; 
 } 
 } 
 
 l o n g </space/> l o n g </space/> p r e f ( i n t </space/> i d x ) 
 { 
 l o n g </space/> l o n g </space/> r e s </space/> = </space/> 0 ; 
 w h i l e </space/> ( i d x ) 
 { 
 r e s </space/> + = </space/> a [ i d x ] ; 
 i d x </space/> - = </space/> ( i d x </space/> & </space/> ( - i d x ) ) ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 } ; 
 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 i n t </space/> n , </space/> m , </space/> l [ 1 0 0 0 0 0 5 ] , </space/> r [ 1 0 0 0 0 0 5 ] ; 
 v e c t o r < i n t > </space/> v e c 1 [ 1 0 0 0 0 0 5 ] , </space/> v e c 2 [ 1 0 0 0 0 0 5 ] ; 
 
 s t r u c t </space/> h o r i z o n t a l 
 { 
 i n t </space/> y , </space/> l e f , </space/> r i g ; 
 } </space/> h [ N ] ; 
 
 s t r u c t </space/> v e r t i c a l 
 { 
 i n t </space/> x , </space/> u p , </space/> d o w n ; 
 } </space/> v [ N ] ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> h [ i ] . y </space/> > > </space/> h [ i ] . l e f </space/> > > </space/> h [ i ] . r i g ; 
 l [ h [ i ] . y ] </space/> = </space/> h [ i ] . l e f ; 
 r [ h [ i ] . y ] </space/> = </space/> h [ i ] . r i g ; 
 } 
 l [ 0 ] </space/> = </space/> l [ 1 0 0 0 0 0 0 ] </space/> = </space/> 0 ; 
 r [ 0 ] </space/> = </space/> r [ 1 0 0 0 0 0 0 ] </space/> = </space/> 1 0 0 0 0 0 0 ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 c i n </space/> > > </space/> v [ i ] . x </space/> > > </space/> v [ i ] . u p </space/> > > </space/> v [ i ] . d o w n ; 
 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( h [ i ] . l e f </space/> = = </space/> 0 </space/> & & </space/> h [ i ] . r i g </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 a n s + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 i f </space/> ( v [ i ] . u p </space/> = = </space/> 0 ) 
 v e c 1 [ v [ i ] . d o w n ] . p u s h _ b a c k ( v [ i ] . x ) ; 
 e l s e 
 v e c 2 [ v [ i ] . u p ] . p u s h _ b a c k ( v [ i ] . x ) ; 
 } 
 
 B I T </space/> B 1 ( 1 0 0 0 0 0 0 ) , </space/> B 2 ( 1 0 0 0 0 0 0 ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> 1 0 0 0 0 0 0 ; </space/> i + + ) 
 { 
 i f </space/> ( l [ i ] </space/> | | </space/> r [ i ] ) 
 { 
 i f </space/> ( ! l [ i ] ) 
 B 1 . a d d ( r [ i ] , </space/> 1 ) ; 
 e l s e 
 B 2 . a d d ( l [ i ] , </space/> 1 ) ; 
 } 
 
 f o r </space/> ( a u t o </space/> j </space/> : </space/> v e c 1 [ i ] ) 
 { 
 a n s </space/> + = </space/> ( B 1 . p r e f ( 1 0 0 0 0 0 0 ) </space/> - </space/> B 1 . p r e f ( j </space/> - </space/> 1 ) ) ; 
 a n s </space/> + = </space/> B 2 . p r e f ( j ) ; 
 } 
 } 
 
 B I T </space/> B 3 ( 1 0 0 0 0 0 0 ) , </space/> B 4 ( 1 0 0 0 0 0 0 ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 9 9 9 9 9 9 ; </space/> i </space/> > = </space/> 0 ; </space/> i - - ) 
 { 
 i f </space/> ( l [ i ] </space/> | | </space/> r [ i ] ) 
 { 
 i f </space/> ( ! l [ i ] ) 
 B 3 . a d d ( r [ i ] , </space/> 1 ) ; 
 e l s e 
 B 4 . a d d ( l [ i ] , </space/> 1 ) ; 
 } 
 
 f o r </space/> ( a u t o </space/> j </space/> : </space/> v e c 2 [ i ] ) 
 { 
 a n s </space/> + = </space/> ( B 3 . p r e f ( 1 0 0 0 0 0 0 ) </space/> - </space/> B 3 . p r e f ( j </space/> - </space/> 1 ) ) ; 
 a n s </space/> + = </space/> B 4 . p r e f ( j ) ; 
 } 
 } 
 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> "" \ n "" ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 , </space/> p </space/> = </space/> 1 e 6 </space/> + </space/> 1 ; 
 s t r u c t </space/> h s e g 
 { </space/> / / 
 i n t </space/> x , </space/> y ; 
 i n t </space/> k ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> h s e g & </space/> r h s ) </space/> c o n s t 
 { 
 r e t u r n </space/> x </space/> < </space/> r h s . x ; 
 } 
 } </space/> a [ m a x n </space/> * </space/> 2 ] ; 
 
 s t r u c t </space/> v s e g 
 { </space/> / / 
 i n t </space/> x , </space/> l y , </space/> r y ; 
 b o o l </space/> o p e r a t o r < ( c o n s t </space/> v s e g & </space/> r h s ) </space/> c o n s t 
 { 
 r e t u r n </space/> x </space/> < </space/> r h s . x ; 
 } 
 } </space/> b [ m a x n ] ; 
 
 l l </space/> C [ m a x n ] ; 
 i n t </space/> l o w b i t ( i n t </space/> x ) 
 { 
 r e t u r n </space/> x </space/> & </space/> ( - x ) ; 
 } 
 v o i d </space/> a d d ( i n t </space/> p o s , </space/> l l </space/> v a l ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p o s ; </space/> i </space/> < = </space/> p ; </space/> i </space/> + = </space/> l o w b i t ( i ) ) 
 C [ i ] </space/> + = </space/> v a l ; 
 } 
 l l </space/> q u e r y ( i n t </space/> p o s ) 
 { 
 l l </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p o s ; </space/> i </space/> > = </space/> 1 ; </space/> i </space/> - = </space/> l o w b i t ( i ) ) 
 r e s </space/> + = </space/> C [ i ] ; 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 l l </space/> a n s </space/> = </space/> 1 ; 
 i n t </space/> x l , </space/> x r , </space/> y , </space/> c n t </space/> = </space/> 0 ; 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & y , </space/> & x l , </space/> & x r ) ; 
 i f </space/> ( x l </space/> = = </space/> 0 </space/> & & </space/> x r </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 + + a n s ; 
 a [ + + c n t ] </space/> = </space/> { </space/> x l </space/> + </space/> 1 , </space/> y </space/> + </space/> 1 , </space/> 1 </space/> } ; 
 a [ + + c n t ] </space/> = </space/> { </space/> x r </space/> + </space/> 2 , </space/> y </space/> + </space/> 1 , </space/> - 1 </space/> } ; </space/> / / 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> + + i ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & b [ i ] . x , </space/> & b [ i ] . l y , </space/> & b [ i ] . r y ) ; 
 i f </space/> ( b [ i ] . l y </space/> = = </space/> 0 </space/> & & </space/> b [ i ] . r y </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 + + a n s ; 
 + + b [ i ] . x ; 
 + + b [ i ] . l y ; 
 + + b [ i ] . r y ; 
 } 
 s o r t ( a </space/> + </space/> 1 , </space/> a </space/> + </space/> 1 </space/> + </space/> c n t ) ; 
 s o r t ( b </space/> + </space/> 1 , </space/> b </space/> + </space/> 1 </space/> + </space/> m ) ; 
 
 i n t </space/> j </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> + + i ) 
 { </space/> / / 
 w h i l e </space/> ( j </space/> < </space/> c n t </space/> & & </space/> a [ j </space/> + </space/> 1 ] . x </space/> < = </space/> b [ i ] . x ) 
 { </space/> / / 
 + + j ; 
 a d d ( a [ j ] . y , </space/> a [ j ] . k ) ; 
 } 
 a n s </space/> + = </space/> ( q u e r y ( b [ i ] . r y ) </space/> - </space/> q u e r y ( b [ i ] . l y </space/> - </space/> 1 ) ) ; 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> r e p ( i , </space/> j , </space/> k ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> j ; </space/> i </space/> < = </space/> k ; </space/> + + i ) 
 # d e f i n e </space/> p e r ( i , </space/> j , </space/> k ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> j ; </space/> i </space/> > = </space/> k ; </space/> - - i ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> M </space/> = </space/> 1 e 6 ; 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 s t r u c t </space/> B I T 
 { 
 v e c t o r < T > </space/> c ; 
 i n t </space/> n ; 
 B I T ( i n t </space/> s z ) 
 { 
 c . r e s i z e ( 1 </space/> + </space/> ( n </space/> = </space/> s z ) ) ; 
 } 
 v o i d </space/> a d d ( i n t </space/> x , </space/> T </space/> y ) 
 { 
 f o r </space/> ( ; </space/> x </space/> < = </space/> n ; </space/> x </space/> + = </space/> x </space/> & </space/> ( - x ) ) 
 c [ x ] </space/> + = </space/> y ; 
 } 
 T </space/> q r y ( i n t </space/> x ) 
 { 
 T </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( ; </space/> x </space/> > = </space/> 1 ; </space/> x </space/> & = </space/> x </space/> - </space/> 1 ) 
 a n s </space/> + = </space/> c [ x ] ; 
 r e t u r n </space/> a n s ; 
 } 
 } ; 
 i n t </space/> n , </space/> m ; 
 v e c t o r < i n t > </space/> l x [ M </space/> + </space/> 5 ] , </space/> r x [ M </space/> + </space/> 5 ] ; 
 v e c t o r < i n t > </space/> a d d [ M </space/> + </space/> 5 ] , </space/> d e l [ M </space/> + </space/> 5 ] ; 
 l l </space/> a n s </space/> = </space/> 1 ; 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 i n t </space/> y , </space/> l , </space/> r ; 
 s c a n f ( "" % d % d % d "" , </space/> & y , </space/> & l , </space/> & r ) ; 
 i f </space/> ( l </space/> = = </space/> 0 ) 
 l x [ y ] . p b ( r ) ; 
 e l s e 
 r x [ y ] . p b ( l ) ; 
 } 
 B I T < i n t > </space/> b i t ( M ) ; 
 r e p ( i , </space/> 1 , </space/> m ) 
 { 
 i n t </space/> x , </space/> l , </space/> r ; 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & l , </space/> & r ) ; 
 i f </space/> ( l </space/> = = </space/> 0 ) 
 d e l [ r </space/> + </space/> 1 ] . p b ( x ) , </space/> b i t . a d d ( x , </space/> 1 ) , </space/> a n s </space/> + = </space/> r </space/> = = </space/> M ; 
 e l s e 
 a d d [ l ] . p b ( x ) ; 
 } 
 r e p ( i , </space/> 1 , </space/> M </space/> - </space/> 1 ) 
 { 
 f o r </space/> ( i n t </space/> u </space/> : </space/> a d d [ i ] ) 
 b i t . a d d ( u , </space/> 1 ) ; 
 f o r </space/> ( i n t </space/> u </space/> : </space/> d e l [ i ] ) 
 b i t . a d d ( u , </space/> - 1 ) ; 
 f o r </space/> ( i n t </space/> u </space/> : </space/> l x [ i ] ) 
 { 
 a n s </space/> + = </space/> ( u </space/> = = </space/> M ) </space/> + </space/> b i t . q r y ( u ) ; 
 } 
 f o r </space/> ( i n t </space/> u </space/> : </space/> r x [ i ] ) 
 { 
 a n s </space/> + = </space/> b i t . q r y ( M ) </space/> - </space/> b i t . q r y ( u </space/> - </space/> 1 ) ; 
 } 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 r e t u r n </space/> 0 ; 
 }",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 1 </space/> * </space/> 1 0 0 1 ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 v e c t o r < i n t > </space/> A [ N ] , </space/> R [ N ] ; 
 v e c t o r < p a i r < i n t , </space/> i n t > > </space/> h e r [ N ] ; 
 l l </space/> n , </space/> m , </space/> d p [ 4 </space/> * </space/> N ] , </space/> a n s </space/> = </space/> 0 ; 
 v o i d </space/> u p d ( i n t </space/> i , </space/> i n t </space/> l , </space/> i n t </space/> r , </space/> i n t </space/> p o s , </space/> i n t </space/> v a l ) 
 { 
 i f </space/> ( l </space/> = = </space/> r ) 
 { 
 d p [ i ] </space/> + = </space/> v a l ; 
 r e t u r n ; 
 } 
 i n t </space/> m </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( p o s </space/> < = </space/> m ) 
 u p d ( i </space/> * </space/> 2 , </space/> l , </space/> m , </space/> p o s , </space/> v a l ) ; 
 e l s e 
 u p d ( i </space/> * </space/> 2 </space/> + </space/> 1 , </space/> m </space/> + </space/> 1 , </space/> r , </space/> p o s , </space/> v a l ) ; 
 d p [ i ] </space/> = </space/> d p [ i </space/> * </space/> 2 ] </space/> + </space/> d p [ i </space/> * </space/> 2 </space/> + </space/> 1 ] ; 
 } 
 l l </space/> g e t ( i n t </space/> i , </space/> i n t </space/> l , </space/> i n t </space/> r , </space/> i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i f </space/> ( x </space/> < = </space/> l </space/> & & </space/> r </space/> < = </space/> y ) 
 r e t u r n </space/> d p [ i ] ; 
 i f </space/> ( r </space/> < </space/> x </space/> | | </space/> l </space/> > </space/> y ) 
 r e t u r n </space/> 0 ; 
 i n t </space/> m </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 r e t u r n </space/> g e t ( i </space/> * </space/> 2 , </space/> l , </space/> m , </space/> x , </space/> y ) </space/> + </space/> g e t ( i </space/> * </space/> 2 </space/> + </space/> 1 , </space/> m </space/> + </space/> 1 , </space/> r , </space/> x , </space/> y ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c o u t . t i e ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 a n s </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> y , </space/> x 1 , </space/> x 2 ; 
 c i n </space/> > > </space/> y </space/> > > </space/> x 1 </space/> > > </space/> x 2 ; 
 A [ x 1 ] . p u s h _ b a c k ( y ) ; 
 R [ x 2 ] . p u s h _ b a c k ( y ) ; 
 i f </space/> ( x 1 </space/> = = </space/> 0 </space/> & & </space/> x 2 </space/> = = </space/> 1 0 0 0 </space/> * </space/> 1 0 0 0 ) 
 a n s + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> y 1 , </space/> y 2 ; 
 c i n </space/> > > </space/> x </space/> > > </space/> y 1 </space/> > > </space/> y 2 ; 
 h e r [ x ] . p u s h _ b a c k ( { </space/> y 1 , </space/> y 2 </space/> } ) ; 
 i f </space/> ( y 1 </space/> = = </space/> 0 </space/> & & </space/> y 2 </space/> = = </space/> 1 0 0 0 </space/> * </space/> 1 0 0 0 ) 
 a n s + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> N ; </space/> i + + ) 
 { 
 f o r </space/> ( a u t o </space/> e l </space/> : </space/> A [ i ] ) 
 u p d ( 1 , </space/> 0 , </space/> N </space/> - </space/> 1 , </space/> e l , </space/> 1 ) ; 
 f o r </space/> ( a u t o </space/> e l </space/> : </space/> h e r [ i ] ) 
 { 
 a n s </space/> + = </space/> g e t ( 1 , </space/> 0 , </space/> N </space/> - </space/> 1 , </space/> e l . f i r s t , </space/> e l . s e c o n d ) ; 
 / / </space/> c o u t < < e l . f i r s t < < ' </space/> ' < < e l . s e c o n d < < e n d l ; 
 / / </space/> c o u t < < g e t ( 1 , 0 , N - 1 , e l . f i r s t , e l . s e c o n d ) < < e n d l ; 
 } 
 f o r </space/> ( a u t o </space/> e l </space/> : </space/> R [ i ] ) 
 u p d ( 1 , </space/> 0 , </space/> N </space/> - </space/> 1 , </space/> e l , </space/> - 1 ) ; 
 } 
 c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 r e t u r n </space/> 0 ; 
 } 
",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 1 ; 
 # d e f i n e </space/> d e b u g ( x ) </space/> p r i n t f ( "" "" </space/> # x </space/> "" </space/> = </space/> % d \ n "" , </space/> ( x ) ) 
 s t r u c t </space/> l i n e 
 { 
 i n t </space/> x ; 
 i n t </space/> l , </space/> r ; 
 v o i d </space/> i n p u t ( ) 
 { 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & l , </space/> & r ) ; 
 i f </space/> ( l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 { 
 a n s + + ; 
 } 
 / / 	 l + + ; r + + ; 
 } 
 } ; 
 l i n e </space/> l [ 2 ] [ 2 0 0 1 0 0 ] ; 
 i n t </space/> c m p x ( l i n e </space/> x , </space/> l i n e </space/> y ) 
 { 
 r e t u r n </space/> x . x </space/> < </space/> y . x ; 
 } 
 i n t </space/> c m p l ( l i n e </space/> x , </space/> l i n e </space/> y ) 
 { 
 i f </space/> ( x . l </space/> ! = </space/> y . l ) 
 r e t u r n </space/> x . l </space/> < </space/> y . l ; 
 r e t u r n </space/> x . r </space/> > </space/> y . r ; 
 } 
 i n t </space/> t r [ 1 0 0 1 0 0 0 ] ; 
 i n t </space/> l b ( i n t </space/> n o w ) 
 { 
 r e t u r n </space/> n o w </space/> & </space/> ( - n o w ) ; 
 } 
 v o i d </space/> a d d ( i n t </space/> n o w , </space/> i n t </space/> v ) 
 { 
 / / 	 p r i n t f ( "" ~ a d d </space/> % d </space/> % d \ n "" , n o w , v ) ; 
 w h i l e </space/> ( n o w </space/> < = </space/> 1 0 0 0 0 0 2 ) 
 { 
 t r [ n o w ] </space/> + = </space/> v ; 
 n o w </space/> + = </space/> l b ( n o w ) ; 
 } 
 } 
 i n t </space/> g e t s u m ( i n t </space/> n o w ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 i n t </space/> t n o w </space/> = </space/> n o w ; 
 w h i l e </space/> ( n o w </space/> > </space/> 0 ) 
 { 
 r e t </space/> + = </space/> t r [ n o w ] ; 
 n o w </space/> - = </space/> l b ( n o w ) ; 
 } 
 / / 	 p r i n t f ( "" g e t s u m </space/> % d </space/> % d \ n "" , t n o w , r e t ) ; 
 r e t u r n </space/> r e t ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n , </space/> m ; 
 s c a n f ( "" % d % d "" , </space/> & n , </space/> & m ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l [ 0 ] [ i ] . i n p u t ( ) ; 
 } 
 s o r t ( l [ 0 ] </space/> + </space/> 1 , </space/> l [ 0 ] </space/> + </space/> 1 </space/> + </space/> n , </space/> c m p x ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m ; </space/> i + + ) 
 { 
 i n t </space/> x , </space/> l l , </space/> r ; 
 s c a n f ( "" % d % d % d "" , </space/> & x , </space/> & l l , </space/> & r ) ; 
 i f </space/> ( l l </space/> = = </space/> 0 </space/> & & </space/> r </space/> = = </space/> 1 0 0 0 0 0 0 ) 
 { 
 a n s + + ; 
 } 
 / / 	 l l + + ; r + + ; 
 l [ 1 ] [ i </space/> * </space/> 2 </space/> - </space/> 1 ] . x </space/> = </space/> x ; 
 l [ 1 ] [ i </space/> * </space/> 2 </space/> - </space/> 1 ] . l </space/> = </space/> l l ; 
 l [ 1 ] [ i </space/> * </space/> 2 </space/> - </space/> 1 ] . r </space/> = </space/> 1 ; 
 l [ 1 ] [ i </space/> * </space/> 2 ] . x </space/> = </space/> x ; 
 l [ 1 ] [ i </space/> * </space/> 2 ] . l </space/> = </space/> r ; 
 l [ 1 ] [ i </space/> * </space/> 2 ] . r </space/> = </space/> - 1 ; 
 } 
 s o r t ( l [ 1 ] </space/> + </space/> 1 , </space/> l [ 1 ] </space/> + </space/> 1 </space/> + </space/> m </space/> * </space/> 2 , </space/> c m p l ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> m </space/> * </space/> 2 ; </space/> i + + ) 
 { 
 / / 	 d e b u g ( l [ 1 ] [ i ] . x ) ; 
 / / 	 d e b u g ( l [ 1 ] [ i ] . l ) ; 
 / / 	 d e b u g ( l [ 1 ] [ i ] . r ) ; 
 } 
 i n t </space/> n i </space/> = </space/> 1 ; 
 i n t </space/> m i </space/> = </space/> 1 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < = </space/> 1 0 0 0 0 0 0 ; </space/> i + + ) 
 { 
 / / 	 p r i n t f ( "" % d ~ i \ n "" , i ) ; 
 / / </space/> d e b u g ( i ) ; 
 w h i l e </space/> ( m i </space/> < = </space/> 2 </space/> * </space/> m </space/> & & </space/> l [ 1 ] [ m i ] . l </space/> = = </space/> i ) 
 { 
 i f </space/> ( l [ 1 ] [ m i ] . r </space/> = = </space/> - 1 ) 
 { 
 b r e a k ; 
 } 
 a n s </space/> - = </space/> g e t s u m ( l [ 1 ] [ m i ] . x </space/> + </space/> 1 ) ; 
 / / 	 d e b u g ( l [ 1 ] [ m i ] . x ) ; 
 / / 	 d e b u g ( l [ 1 ] [ m i ] . l ) ; 
 / / 	 d e b u g ( l [ 1 ] [ m i ] . r ) ; 
 m i + + ; 
 } 
 w h i l e </space/> ( n i </space/> < = </space/> n </space/> & & </space/> l [ 0 ] [ n i ] . x </space/> = = </space/> i ) 
 { 
 a d d ( l [ 0 ] [ n i ] . l </space/> + </space/> 1 , </space/> 1 ) ; 
 a d d ( l [ 0 ] [ n i ] . r </space/> + </space/> 2 , </space/> - 1 ) ; 
 / / 	 d e b u g ( l [ 0 ] [ n i ] . x ) ; 
 n i + + ; 
 } 
 w h i l e </space/> ( m i </space/> < = </space/> 2 </space/> * </space/> m </space/> & & </space/> l [ 1 ] [ m i ] . l </space/> = = </space/> i ) 
 { 
 a n s </space/> + = </space/> g e t s u m ( l [ 1 ] [ m i ] . x </space/> + </space/> 1 ) ; 
 / / 	 d e b u g ( l [ 1 ] [ m i ] . x ) ; 
 / / 	 d e b u g ( l [ 1 ] [ m i ] . l ) ; 
 / / 	 d e b u g ( l [ 1 ] [ m i ] . r ) ; 
 m i + + ; 
 } 
 } 
 p r i n t f ( "" % l l d \ n "" , </space/> a n s ) ; 
 } 
 / * 
 1 </space/> 1 
 1 
 0 </space/> 1 
 1 
 0 </space/> 1 
 * /",1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> 1 3 4 5 F 
 # i n c l u d e </space/> < i o s t r e a m > 
 # i n c l u d e </space/> < a l g o r i t h m > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 c o n s t </space/> i n t </space/> m a x N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 ; 
 c o n s t </space/> l o n g </space/> l o n g </space/> I N F </space/> = </space/> 3 e 1 8 ; 
 
 i n t </space/> n ; 
 l o n g </space/> l o n g </space/> a [ m a x N ] , </space/> b [ m a x N ] , </space/> k , </space/> a n s </space/> = </space/> 0 ; 
 
 l o n g </space/> l o n g </space/> c a l c ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> b ) 
 { 
 r e t u r n </space/> a </space/> - </space/> 3 </space/> * </space/> b </space/> * </space/> b </space/> + </space/> 3 </space/> * </space/> b </space/> - </space/> 1 ; 
 } 
 
 l o n g </space/> l o n g </space/> b i n _ s e a r c h ( l o n g </space/> l o n g </space/> a , </space/> l o n g </space/> l o n g </space/> l i m ) 
 { 
 l o n g </space/> l o n g </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a ; 
 l o n g </space/> l o n g </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l o n g </space/> l o n g </space/> m </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 l o n g </space/> l o n g </space/> t m p </space/> = </space/> c a l c ( a , </space/> m ) ; </space/> / / </space/> a </space/> - </space/> 3 * m * m </space/> + </space/> 3 * m </space/> - </space/> 1 ; 
 i f </space/> ( t m p </space/> > = </space/> l i m ) 
 { 
 a n s </space/> = </space/> m a x ( a n s , </space/> m ) ; 
 l </space/> = </space/> m </space/> + </space/> 1 ; 
 } 
 e l s e 
 r </space/> = </space/> m </space/> - </space/> 1 ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 b o o l </space/> c h e c k ( l o n g </space/> l o n g </space/> l i m ) 
 { 
 a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 a n s </space/> + = </space/> ( b [ i ] </space/> = </space/> b i n _ s e a r c h ( a [ i ] , </space/> l i m ) ) ; 
 r e t u r n </space/> a n s </space/> > = </space/> k ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 l o n g </space/> l o n g </space/> l </space/> = </space/> - I N F , </space/> r </space/> = </space/> I N F ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l o n g </space/> l o n g </space/> m </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m ) ) 
 l </space/> = </space/> m </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m </space/> - </space/> 1 ; 
 / / </space/> c o u t </space/> < < </space/> m </space/> < < </space/> ' </space/> ' </space/> < < </space/> a n s </space/> < < </space/> ' \ n ' ; 
 } 
 c h e c k ( r ) ; 
 / / </space/> c o u t </space/> < < </space/> r </space/> < < </space/> ' \ n ' ; 
 a n s </space/> - = </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( a n s </space/> & & </space/> c a l c ( a [ i ] , </space/> b [ i ] ) </space/> = = </space/> r ) 
 { 
 - - b [ i ] ; 
 - - a n s ; 
 } 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> ' </space/> ' ; 
 } 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> a [ i ] ; 
 s o l v e ( ) ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . H > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 5 </space/> + </space/> 4 0 ; 
 i n t </space/> n , </space/> k , </space/> a [ M A X N ] , </space/> b [ M A X N ] ; 
 i n t </space/> l , </space/> r , </space/> r e s ; 
 i n t </space/> f ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i f </space/> ( x </space/> ! = </space/> y ) 
 r e t u r n </space/> x </space/> - </space/> 3 </space/> * </space/> y </space/> * </space/> y </space/> + </space/> 3 </space/> * </space/> y </space/> - </space/> 1 ; 
 e l s e 
 r e t u r n </space/> L L O N G _ M A X ; 
 } 
 i n t </space/> q u e r y ( i n t </space/> x , </space/> i n t </space/> M ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> a [ x ] ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( f ( a [ x ] , </space/> m i d ) </space/> < = </space/> M ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 r e t u r n </space/> r ; 
 } 
 b o o l </space/> c h e c k ( i n t </space/> M ) 
 { 
 r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 b [ i ] </space/> = </space/> q u e r y ( i , </space/> M ) ; 
 r e s </space/> + = </space/> b [ i ] ; 
 } 
 r e t u r n </space/> r e s </space/> < = </space/> k ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & k ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s c a n f ( "" % l l d "" , </space/> & a [ i ] ) ; 
 l </space/> = </space/> m i n ( l , </space/> f ( a [ i ] , </space/> a [ i ] </space/> - </space/> 1 ) ) ; 
 r </space/> = </space/> m a x ( r , </space/> a [ i ] </space/> - </space/> 1 ) ; 
 } 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c h e c k ( l ) ; 
 k </space/> - = </space/> r e s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( k </space/> & & </space/> b [ i ] </space/> < </space/> a [ i ] </space/> & & </space/> f ( a [ i ] , </space/> b [ i ] ) </space/> = = </space/> r ) 
 { 
 b [ i ] + + ; 
 k - - ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % l l d </space/> "" , </space/> b [ i ] ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> c s </space/> c o n s t 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c s </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 5 0 ; 
 i n t </space/> n ; 
 l l </space/> k , </space/> a [ N ] , </space/> b [ N ] ; 
 l l </space/> F ( l l </space/> a , </space/> l l </space/> x ) 
 { 
 r e t u r n </space/> a </space/> - </space/> x </space/> * </space/> x </space/> * </space/> 3 </space/> + </space/> x </space/> * </space/> 3 </space/> - </space/> 1 ; 
 } 
 l l </space/> c a l c ( l l </space/> x , </space/> l l </space/> l m ) 
 { 
 l l </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> x ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r </space/> + </space/> 1 ) </space/> > > </space/> 1 ; 
 i f </space/> ( F ( x , </space/> m i d ) </space/> > = </space/> l m ) 
 l </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 r e t u r n </space/> l ; 
 } 
 l l </space/> c h k ( l l </space/> l m ) 
 { 
 l l </space/> s m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s m </space/> + = </space/> c a l c ( a [ i ] , </space/> l m ) ; 
 r e t u r n </space/> s m ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 # i f d e f </space/> F S Y o 
 f r e o p e n ( "" 1 . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 l l </space/> l </space/> = </space/> 1 e 1 8 , </space/> r </space/> = </space/> - 1 e 1 8 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s c a n f ( "" % l l d "" , </space/> & a [ i ] ) , </space/> r </space/> = </space/> m a x ( r , </space/> F ( a [ i ] , </space/> 1 ) ) , </space/> l </space/> = </space/> m i n ( l , </space/> F ( a [ i ] , </space/> a [ i ] ) ) ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r </space/> + </space/> 1 ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h k ( m i d ) </space/> > = </space/> k ) 
 l </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 b [ i ] </space/> = </space/> c a l c ( a [ i ] , </space/> l </space/> + </space/> 1 ) , </space/> k </space/> - = </space/> b [ i ] ; 
 / / 	 f o r ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 / / 	 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> "" </space/> "" ; </space/> c o u t </space/> < < </space/> e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> k </space/> > </space/> 0 </space/> & & </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( F ( a [ i ] , </space/> b [ i ] </space/> + </space/> 1 ) </space/> = = </space/> l ) 
 + + b [ i ] , </space/> - - k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> "" </space/> "" ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> p a i r < i n t , </space/> i n t > </space/> p i i ; 
 t y p e d e f </space/> p a i r < i n t , </space/> p i i > </space/> p i p i i ; 
 t y p e d e f </space/> p a i r < p i i , </space/> i n t > </space/> p i i p i ; 
 t y p e d e f </space/> p a i r < p i i , </space/> p i i > </space/> p i i p i i ; 
 t y p e d e f </space/> p a i r < l l , </space/> i n t > </space/> p l i ; 
 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> a l l ( a ) </space/> ( a ) . b e g i n ( ) , </space/> ( a ) . e n d ( ) 
 # d e f i n e </space/> s z ( a ) </space/> ( i n t ) ( a ) . s i z e ( ) 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 
 i n t </space/> n , </space/> a [ 1 0 0 0 0 5 ] , </space/> b [ 1 0 0 0 0 5 ] ; 
 l l </space/> k ; 
 l l </space/> c h e c k ( l l </space/> m i d 1 ) 
 { 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> l o 2 </space/> = </space/> 0 , </space/> h i 2 </space/> = </space/> a [ i ] </space/> - </space/> 1 , </space/> b e s t </space/> = </space/> 0 ; 
 w h i l e </space/> ( l o 2 </space/> < = </space/> h i 2 ) 
 { 
 i n t </space/> m i d 2 </space/> = </space/> ( l o 2 </space/> + </space/> h i 2 ) </space/> / </space/> 2 ; 
 l l </space/> s u m 1 </space/> = </space/> m i d 2 </space/> * </space/> 1 l l </space/> * </space/> ( a [ i ] </space/> - </space/> m i d 2 </space/> * </space/> 1 l l </space/> * </space/> m i d 2 ) ; 
 l l </space/> s u m 2 </space/> = </space/> ( m i d 2 </space/> + </space/> 1 ) </space/> * </space/> 1 l l </space/> * </space/> ( a [ i ] </space/> - </space/> ( m i d 2 </space/> + </space/> 1 ) </space/> * </space/> 1 l l </space/> * </space/> ( m i d 2 </space/> + </space/> 1 ) ) ; 
 i f </space/> ( s u m 2 </space/> - </space/> s u m 1 </space/> > = </space/> m i d 1 ) 
 b e s t </space/> = </space/> m i d 2 </space/> + </space/> 1 , </space/> l o 2 </space/> = </space/> m i d 2 </space/> + </space/> 1 ; 
 e l s e 
 h i 2 </space/> = </space/> m i d 2 </space/> - </space/> 1 ; 
 } 
 b [ i ] </space/> = </space/> b e s t ; 
 s u m </space/> + = </space/> b e s t ; 
 } 
 r e t u r n </space/> s u m ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % l l d "" , </space/> & n , </space/> & k ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 l l </space/> l o 1 </space/> = </space/> - 4 e 1 8 , </space/> h i 1 </space/> = </space/> 1 e 9 , </space/> r e s </space/> = </space/> 1 e 1 8 ; 
 w h i l e </space/> ( l o 1 </space/> < = </space/> h i 1 ) 
 { 
 l l </space/> m i d 1 </space/> = </space/> ( l o 1 </space/> + </space/> h i 1 ) </space/> / </space/> 2 ; 
 l l </space/> s u m </space/> = </space/> c h e c k ( m i d 1 ) ; 
 i f </space/> ( s u m </space/> < = </space/> k ) 
 r e s </space/> = </space/> m i d 1 , </space/> h i 1 </space/> = </space/> m i d 1 </space/> - </space/> 1 ; 
 e l s e 
 l o 1 </space/> = </space/> m i d 1 </space/> + </space/> 1 ; 
 } 
 k </space/> - = </space/> c h e c k ( r e s ) ; 
 p r i o r i t y _ q u e u e < p l i > </space/> p q ; 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> s u m 1 </space/> = </space/> b [ i ] </space/> * </space/> 1 l l </space/> * </space/> ( a [ i ] </space/> - </space/> b [ i ] </space/> * </space/> 1 l l </space/> * </space/> b [ i ] ) ; 
 a n s </space/> + = </space/> s u m 1 ; 
 i f </space/> ( b [ i ] </space/> < </space/> a [ i ] ) 
 { 
 l l </space/> s u m 2 </space/> = </space/> ( b [ i ] </space/> + </space/> 1 ) </space/> * </space/> 1 l l </space/> * </space/> ( a [ i ] </space/> - </space/> ( b [ i ] </space/> + </space/> 1 ) </space/> * </space/> 1 l l </space/> * </space/> ( b [ i ] </space/> + </space/> 1 ) ) ; 
 p q . p u s h ( m p ( s u m 2 </space/> - </space/> s u m 1 , </space/> i ) ) ; 
 } 
 } 
 f o r </space/> ( l l </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> k ; </space/> i + + ) 
 { 
 l l </space/> v a l </space/> = </space/> p q . t o p ( ) . f i ; 
 i n t </space/> i d x </space/> = </space/> p q . t o p ( ) . s e ; 
 p q . p o p ( ) ; 
 a n s </space/> + = </space/> v a l ; 
 b [ i d x ] + + ; 
 i f </space/> ( b [ i d x ] </space/> < </space/> a [ i d x ] ) 
 { 
 l l </space/> s u m 1 </space/> = </space/> b [ i d x ] </space/> * </space/> 1 l l </space/> * </space/> ( a [ i d x ] </space/> - </space/> b [ i d x ] </space/> * </space/> 1 l l </space/> * </space/> b [ i d x ] ) ; 
 l l </space/> s u m 2 </space/> = </space/> ( b [ i d x ] </space/> + </space/> 1 ) </space/> * </space/> 1 l l </space/> * </space/> ( a [ i d x ] </space/> - </space/> ( b [ i d x ] </space/> + </space/> 1 ) </space/> * </space/> 1 l l </space/> * </space/> ( b [ i d x ] </space/> + </space/> 1 ) ) ; 
 p q . p u s h ( m p ( s u m 2 </space/> - </space/> s u m 1 , </space/> i d x ) ) ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % d </space/> "" , </space/> b [ i ] ) ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / / </space/> / / / h t t p s : / / w w w . y o u t u b e . c o m / w a t c h ? v = h Q h 9 g s P T S b M </space/> H o l a </space/> n i o s 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 b o o l </space/> h o m e </space/> = </space/> 1 ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> i n t </space/> l l 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 
 s i g n e d </space/> r e a l M a i n ( ) ; 
 
 m t 1 9 9 3 7 </space/> r n g _ h o m e ( 2 ) ; 
 m t 1 9 9 3 7 </space/> r n g _ o j ( ( l o n g </space/> l o n g ) ( n e w </space/> c h a r ) ) ; 
 
 i n t </space/> r n g ( ) 
 { 
 i f </space/> ( h o m e ) 
 { 
 r e t u r n </space/> r n g _ h o m e ( ) ; 
 } 
 e l s e 
 { 
 r e t u r n </space/> r n g _ o j ( ) ; 
 } 
 } 
 
 u l l </space/> r n g _ u l l ( ) 
 { 
 r e t u r n </space/> ( u l l ) r n g ( ) </space/> * </space/> r n g ( ) </space/> ^ </space/> ( ( u l l ) r n g ( ) </space/> * </space/> r n g ( ) ) ; 
 } 
 
 i n t </space/> r n g _ r a n g e ( i n t </space/> l , </space/> i n t </space/> r ) 
 { 
 r e t u r n </space/> l </space/> + </space/> a b s ( r n g ( ) ) </space/> % </space/> ( r </space/> - </space/> l </space/> + </space/> 1 ) ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 # i f d e f </space/> O N L I N E _ J U D G E 
 h o m e </space/> = </space/> 0 ; 
 # e n d i f 
 i f </space/> ( h o m e ) 
 { 
 f r e o p e n ( "" i n p u t "" , </space/> "" r "" , </space/> s t d i n ) ; 
 } 
 e l s e 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 } 
 r e a l M a i n ( ) ; 
 } 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> ( i n t ) 1 e 5 </space/> + </space/> 7 ; 
 c o n s t </space/> i n t </space/> I N F </space/> = </space/> ( i n t ) 4 e 1 8 </space/> + </space/> 1 2 3 ; 
 i n t </space/> n , </space/> k , </space/> a [ N ] , </space/> b [ N ] ; 
 
 i n t </space/> g r o w ( i n t </space/> a , </space/> i n t </space/> x ) 
 { 
 r e t u r n </space/> a </space/> - </space/> 3 </space/> * </space/> x </space/> * </space/> x </space/> + </space/> 3 </space/> * </space/> x </space/> - </space/> 1 ; 
 } 
 
 i n t </space/> c n t ( i n t </space/> p e s t e ) 
 { </space/> / / / </space/> n u </space/> a n i m a l u l 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> a [ i ] ; 
 b [ i ] </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( g r o w ( a [ i ] , </space/> m i d ) </space/> > = </space/> p e s t e ) 
 { 
 b [ i ] </space/> = </space/> m i d ; 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 e l s e 
 { 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 } 
 } 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 s u m </space/> + = </space/> b [ i ] ; 
 } 
 r e t u r n </space/> s u m ; 
 } 
 
 s i g n e d </space/> r e a l M a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 i n t </space/> z u </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 z u </space/> + = </space/> a [ i ] ; 
 } 
 i n t </space/> l </space/> = </space/> - I N F , </space/> r </space/> = </space/> + I N F , </space/> l a s t </space/> = </space/> - I N F ; 
 i f </space/> ( c n t ( - I N F ) </space/> ! = </space/> z u ) 
 { 
 c o u t </space/> < < </space/> c n t ( - I N F ) </space/> < < </space/> "" \ n "" ; 
 c o u t </space/> < < </space/> z u </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c n t ( m ) </space/> < = </space/> k ) 
 { 
 l a s t </space/> = </space/> m ; 
 r </space/> = </space/> m </space/> - </space/> 1 ; 
 } 
 e l s e 
 { 
 l </space/> = </space/> m </space/> + </space/> 1 ; 
 } 
 } 
 c n t ( l a s t ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 k </space/> - = </space/> b [ i ] ; 
 } 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 w h i l e </space/> ( k </space/> > </space/> 0 </space/> & & </space/> b [ i ] </space/> + </space/> 1 </space/> < = </space/> a [ i ] </space/> & & </space/> g r o w ( a [ i ] , </space/> b [ i ] </space/> + </space/> 1 ) </space/> = = </space/> l a s t </space/> - </space/> 1 ) 
 { 
 b [ i ] + + ; 
 k - - ; 
 } 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 i f </space/> ( k </space/> ! = </space/> 0 ) 
 { 
 c o u t </space/> < < </space/> "" b r o </space/> : </space/> "" </space/> < < </space/> k </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
 r e t u r n </space/> 0 ; 
 c o u t </space/> < < </space/> "" </space/> = </space/> "" </space/> < < </space/> k </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 f o r </space/> ( i n t </space/> j </space/> = </space/> - 4 ; </space/> j </space/> < = </space/> + 4 ; </space/> j + + ) 
 { 
 c o u t </space/> < < </space/> c n t ( j ) </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> "" \ n "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d ; 
 # d e f i n e </space/> f </space/> f i r s t 
 # d e f i n e </space/> s </space/> s e c o n d 
 c o n s t </space/> i n t </space/> M X </space/> = </space/> 2 e 5 </space/> + </space/> 5 ; 
 l o n g </space/> l o n g </space/> g e t ( l o n g </space/> l o n g </space/> y , </space/> l o n g </space/> l o n g </space/> a ) 
 { 
 i f </space/> ( a </space/> - </space/> 1 </space/> < </space/> y ) </space/> / / </space/> e d g e </space/> c a s e 
 r e t u r n </space/> - 1 L L ; 
 i f </space/> ( - 3 </space/> * </space/> 1 L L </space/> * </space/> a </space/> * </space/> 1 L L </space/> * </space/> a </space/> + </space/> 4 </space/> * </space/> 1 L L </space/> * </space/> a </space/> - </space/> 1 </space/> > = </space/> y ) 
 r e t u r n </space/> a </space/> - </space/> 1 ; 
 r e t u r n </space/> ( 
 l o n g </space/> l o n g ) ( c e i l ( s q r t ( ( 4 </space/> * </space/> 1 . 0 </space/> / </space/> 3 </space/> * </space/> a </space/> - </space/> 4 </space/> * </space/> 1 . 0 </space/> / </space/> 3 </space/> * </space/> y </space/> - </space/> 1 . 0 </space/> / </space/> 3 ) ) </space/> - </space/> 1 . 0 </space/> / </space/> 2 ) </space/> * </space/> 1 . 0 </space/> / </space/> 2 ) ; 
 } 
 i n t </space/> a [ 1 0 0 0 0 1 ] ; 
 l o n g </space/> l o n g </space/> c o s t ( i n t </space/> i , </space/> i n t </space/> x ) 
 { 
 / / </space/> t o </space/> j u m p </space/> t o </space/> x + 1 . . . d o n ' t </space/> n e e d </space/> t o </space/> j u m p </space/> i f </space/> x </space/> = a 
 r e t u r n </space/> - 3 </space/> * </space/> 1 L L </space/> * </space/> x </space/> * </space/> 1 L L </space/> * </space/> x </space/> - </space/> 3 </space/> * </space/> 1 L L </space/> * </space/> x </space/> - </space/> 1 </space/> + </space/> a [ i ] ; 
 } 
 s t r u c t </space/> c m p 
 { 
 b o o l </space/> o p e r a t o r ( ) ( c o n s t </space/> p a i r < i n t , </space/> i n t > & </space/> i , </space/> c o n s t </space/> p a i r < i n t , </space/> i n t > & </space/> j ) </space/> c o n s t 
 { 
 l o n g </space/> l o n g </space/> c o s t A </space/> = </space/> c o s t ( i . f , </space/> i . s ) ; 
 l o n g </space/> l o n g </space/> c o s t B </space/> = </space/> c o s t ( j . f , </space/> j . s ) ; 
 i f </space/> ( c o s t A </space/> ! = </space/> c o s t B ) 
 r e t u r n </space/> c o s t A </space/> > </space/> c o s t B ; 
 r e t u r n </space/> i . f </space/> < </space/> j . f ; 
 } 
 } ; 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> n ; 
 l o n g </space/> l o n g </space/> k ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l o n g </space/> l o n g </space/> l o </space/> = </space/> - 4 e 1 8 , </space/> h i </space/> = </space/> 4 e 1 8 ; 
 l o n g </space/> l o n g </space/> m i d </space/> = </space/> 0 L L ; 
 l o n g </space/> l o n g </space/> s u m </space/> = </space/> 0 L L ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> 1 0 0 ; </space/> i + + ) 
 { </space/> / / </space/> c h e c k </space/> t h i s 
 / / [ l o , </space/> h i ) 
 m i d </space/> = </space/> ( l o </space/> + </space/> h i ) </space/> / </space/> 2 ; 
 s u m </space/> = </space/> 0 L L ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 s u m </space/> + = </space/> g e t ( m i d , </space/> a [ i ] ) </space/> + </space/> 1 ; 
 / / </space/> c o u t </space/> < < </space/> m i d </space/> < < </space/> "" </space/> "" </space/> < < </space/> s u m </space/> < < </space/> "" \ n "" ; 
 i f </space/> ( s u m </space/> = = </space/> k ) 
 b r e a k ; 
 i f </space/> ( s u m </space/> > </space/> k ) 
 { 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 e l s e 
 { 
 h i </space/> = </space/> m i d ; 
 } 
 } 
 k </space/> - = </space/> s u m ; 
 / / </space/> c o u t </space/> < < </space/> k </space/> < < </space/> "" </space/> "" </space/> < < </space/> m i d </space/> < < </space/> "" \ n "" ; 
 l o n g </space/> l o n g </space/> b [ n ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 b [ i ] </space/> = </space/> g e t ( m i d , </space/> a [ i ] ) </space/> + </space/> 1 ; 
 } 
 s e t < p a i r < i n t , </space/> i n t > , </space/> c m p > </space/> i n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( b [ i ] </space/> < </space/> a [ i ] ) 
 i n . i n s e r t ( { </space/> i , </space/> b [ i ] </space/> } ) ; 
 } 
 w h i l e </space/> ( k </space/> > </space/> 0 ) 
 { 
 - - k ; 
 a u t o </space/> i t </space/> = </space/> i n . b e g i n ( ) ; 
 p a i r < i n t , </space/> i n t > </space/> c u r r </space/> = </space/> ( * i t ) ; 
 + + b [ c u r r . f ] ; 
 i n . e r a s e ( i t + + ) ; 
 i f </space/> ( b [ c u r r . f ] </space/> < </space/> a [ c u r r . f ] ) 
 i n . i n s e r t ( { </space/> c u r r . f , </space/> b [ c u r r . f ] </space/> } ) ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / * 
 * </space/> a u t h o r : </space/> z h a o y i p i n g 
 * </space/> t i m e : </space/> 2 0 2 1 - 0 2 - 1 0 </space/> 1 4 : 4 7 : 2 9 
 * / 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 l o n g </space/> l o n g </space/> a [ M A X N ] ; 
 i n t </space/> n ; 
 l o n g </space/> l o n g </space/> k ; 
 / / </space/> x ( a i - x * x ) - ( x - 1 ) ( a i - ( x - 1 ) * ( x - 1 ) ) 
 / / </space/> = a i * x - x ^ 3 + ( x - 1 ) * ( x - 1 ) * ( x - 1 ) + a i - a i * x 
 / / </space/> = - 3 x ^ 2 + 3 x - 1 + a i 
 / / </space/> d e c r e a s e 
 l o n g </space/> l o n g </space/> c a l ( l o n g </space/> l o n g </space/> a i , </space/> l o n g </space/> l o n g </space/> x ) 
 { 
 r e t u r n </space/> - 3 </space/> * </space/> x </space/> * </space/> x </space/> + </space/> 3 </space/> * </space/> x </space/> + </space/> a i </space/> - </space/> 1 ; 
 } 
 v e c t o r < i n t > </space/> g e t a l l ( l o n g </space/> l o n g </space/> v a l u e ) 
 { 
 v e c t o r < i n t > </space/> r e t ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l o n g </space/> l o n g </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i f </space/> ( l </space/> + </space/> 1 </space/> = = </space/> r ) 
 { 
 i f </space/> ( c a l ( a [ i ] , </space/> r ) </space/> > = </space/> v a l u e ) 
 l + + ; 
 e l s e 
 r - - ; 
 b r e a k ; 
 } 
 l o n g </space/> l o n g </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c a l ( a [ i ] , </space/> m i d ) </space/> > = </space/> v a l u e ) 
 l </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d ; 
 } 
 r e t . p u s h _ b a c k ( l ) ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 / / </space/> c a l </space/> a i </space/> < = </space/> v a l u e 
 b o o l </space/> j u d g e ( l o n g </space/> l o n g </space/> v a l u e ) 
 { 
 l o n g </space/> l o n g </space/> s u m </space/> = </space/> 0 ; 
 a u t o </space/> t m p </space/> = </space/> g e t a l l ( v a l u e ) ; 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> t m p ) 
 s u m </space/> + = </space/> x ; 
 r e t u r n </space/> s u m </space/> > = </space/> k ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( 0 ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l o n g </space/> l o n g </space/> l </space/> = </space/> - 4 e 1 8 ; 
 l o n g </space/> l o n g </space/> r </space/> = </space/> 4 e 1 8 ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 l o n g </space/> l o n g </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( l </space/> + </space/> 1 </space/> = = </space/> r ) 
 { 
 i f </space/> ( j u d g e ( l ) ) 
 r - - ; 
 e l s e 
 l + + ; 
 b r e a k ; 
 } 
 i f </space/> ( j u d g e ( m i d ) ) 
 { 
 l </space/> = </space/> m i d ; 
 } 
 e l s e 
 { 
 r </space/> = </space/> m i d ; 
 } 
 } 
 a u t o </space/> a n s </space/> = </space/> g e t a l l ( l ) ; 
 l o n g </space/> l o n g </space/> s u m </space/> = </space/> 0 ; 
 l o n g </space/> l o n g </space/> t m p </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( c a l ( a [ i ] , </space/> a n s [ i ] ) </space/> = = </space/> l ) 
 t m p + + ; 
 s u m </space/> + = </space/> a n s [ i ] ; 
 } 
 a s s e r t ( s u m </space/> > = </space/> k </space/> & & </space/> s u m </space/> - </space/> t m p </space/> < = </space/> k ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 i f </space/> ( c a l ( a [ i ] , </space/> a n s [ i ] ) </space/> = = </space/> l ) 
 { 
 i f </space/> ( s u m </space/> > </space/> k ) 
 a n s [ i ] - - , </space/> s u m - - ; 
 } 
 f o r </space/> ( a u t o </space/> x </space/> : </space/> a n s ) 
 c o u t </space/> < < </space/> x </space/> < < </space/> "" </space/> "" ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 
 c o n s t </space/> l l </space/> o o </space/> = </space/> 8 e 1 8 ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 5 ; 
 
 i n t </space/> n ; 
 l l </space/> k ; 
 
 i n t </space/> a [ N ] ; 
 i n t </space/> b [ N ] ; 
 
 l l </space/> f ( i n t </space/> i d , </space/> l l </space/> x ) 
 { 
 r e t u r n </space/> x </space/> * </space/> ( a [ i d ] </space/> - </space/> x </space/> * </space/> x ) ; 
 } 
 l l </space/> f 1 ( i n t </space/> i d , </space/> l l </space/> x ) 
 { 
 r e t u r n </space/> a [ i d ] </space/> - </space/> 3 </space/> * </space/> x </space/> * </space/> x </space/> + </space/> 3 </space/> * </space/> x </space/> - </space/> 1 ; 
 } 
 
 l l </space/> s o l v e ( l l </space/> m ) 
 { 
 l l </space/> a n s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> l o </space/> = </space/> 1 , </space/> h i </space/> = </space/> a [ i ] ; 
 b [ i ] </space/> = </space/> 0 ; 
 w h i l e </space/> ( l o </space/> < = </space/> h i ) 
 { 
 i n t </space/> m i d </space/> = </space/> l o </space/> + </space/> ( h i </space/> - </space/> l o ) </space/> / </space/> 2 ; 
 i f </space/> ( f 1 ( i , </space/> m i d ) </space/> > = </space/> m ) 
 { 
 b [ i ] </space/> = </space/> m i d ; 
 l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 e l s e 
 { 
 h i </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 } 
 a n s </space/> + = </space/> b [ i ] ; 
 } 
 
 r e t u r n </space/> a n s ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 
 s c a n f ( "" % d </space/> % l l d "" , </space/> & n , </space/> & k ) ; 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 s c a n f ( "" % d "" , </space/> a </space/> + </space/> i ) ; 
 
 l l </space/> l o </space/> = </space/> - o o , </space/> h i </space/> = </space/> l l ( 1 e 1 2 ) , </space/> a n s </space/> = </space/> - o o ; 
 w h i l e </space/> ( l o </space/> < = </space/> h i ) 
 { 
 l l </space/> m i d </space/> = </space/> l o </space/> + </space/> ( h i </space/> - </space/> l o ) </space/> / </space/> 2 ; 
 i f </space/> ( s o l v e ( m i d ) </space/> > = </space/> k ) 
 a n s </space/> = </space/> m i d , </space/> l o </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 h i </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 
 l l </space/> e x t r a </space/> = </space/> s o l v e ( a n s ) </space/> - </space/> k ; 
 a s s e r t ( e x t r a </space/> > = </space/> 0 ) ; 
 
 a s s e r t ( e x t r a </space/> < = </space/> n ) ; 
 
 p r i o r i t y _ q u e u e < p a i r < l l , </space/> i n t > > </space/> p q ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 i f </space/> ( b [ i ] ) 
 { 
 l l </space/> v a l </space/> = </space/> - f 1 ( i , </space/> b [ i ] ) ; 
 p q . e m p l a c e ( v a l , </space/> i ) ; 
 } 
 
 w h i l e </space/> ( e x t r a - - ) 
 { 
 i n t </space/> i </space/> = </space/> p q . t o p ( ) . s e c o n d ; 
 p q . p o p ( ) ; 
 b [ i ] - - ; 
 i f </space/> ( b [ i ] </space/> > </space/> 0 ) 
 { 
 l l </space/> v a l </space/> = </space/> - f 1 ( i , </space/> b [ i ] ) ; 
 p q . e m p l a c e ( v a l , </space/> i ) ; 
 } 
 } 
 
 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 p r i n t f ( "" % d % c "" , </space/> b [ i ] , </space/> "" </space/> \ n "" [ i </space/> + </space/> 1 </space/> = = </space/> n ] ) ; 
 } 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f 3 f 3 f 3 f ; 
 i n t </space/> n , </space/> m , </space/> s h u [ m a x n ] , </space/> a n s [ m a x n ] ; 
 i n l i n e </space/> i n t </space/> f ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 r e t u r n </space/> x </space/> = = </space/> y </space/> ? </space/> i n f </space/> : </space/> x </space/> - </space/> 3 </space/> * </space/> y </space/> * </space/> y </space/> + </space/> 3 </space/> * </space/> y </space/> - </space/> 1 ; 
 } 
 i n l i n e </space/> i n t </space/> g e t ( i n t </space/> x , </space/> i n t </space/> l i m ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> s h u [ x ] , </space/> j i e </space/> = </space/> s h u [ x ] ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 f ( s h u [ x ] , </space/> m i d ) </space/> < = </space/> l i m </space/> ? </space/> r </space/> = </space/> m i d </space/> - </space/> 1 , </space/> j i e </space/> = </space/> m i d </space/> : </space/> l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 r e t u r n </space/> j i e ; 
 } 
 i n l i n e </space/> b o o l </space/> c h e c k ( i n t </space/> m i d ) 
 { 
 i n t </space/> n u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 n u m </space/> + = </space/> ( a n s [ i ] </space/> = </space/> g e t ( i , </space/> m i d ) ) ; 
 r e t u r n </space/> n u m </space/> < </space/> m ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> D E B U G 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 # e n d i f 
 / / 	 i n t </space/> l = i n f , r = 0 ; 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> 0 ; 
 c i n </space/> > > </space/> n </space/> > > </space/> m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 c i n </space/> > > </space/> s h u [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 l </space/> = </space/> m i n ( l , </space/> f ( s h u [ i ] , </space/> s h u [ i ] </space/> - </space/> 1 ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 r </space/> = </space/> m a x ( r , </space/> f ( s h u [ i ] , </space/> 0 ) ) ; 
 w h i l e </space/> ( r </space/> - </space/> l </space/> > = </space/> 2 ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 c h e c k ( m i d ) </space/> ? </space/> r </space/> = </space/> m i d </space/> : </space/> l </space/> = </space/> m i d ; 
 } 
 r </space/> = </space/> c h e c k ( l ) </space/> ? </space/> l </space/> : </space/> r ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 m </space/> - = </space/> ( a n s [ i ] </space/> = </space/> g e t ( i , </space/> r ) ) ; 
 f o r </space/> ( r e g i s t e r </space/> i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( m </space/> & & </space/> a n s [ i ] </space/> < </space/> s h u [ i ] </space/> & & </space/> f ( s h u [ i ] , </space/> a n s [ i ] ) </space/> = = </space/> r ) 
 + + a n s [ i ] , </space/> - - m ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 c o u t </space/> < < </space/> a n s [ i ] </space/> < < </space/> "" </space/> "" ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> m k </space/> m a k e _ p a i r 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 6 </space/> + </space/> 1 0 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 1 e 9 </space/> + </space/> 7 ; 
 
 i n t </space/> n ; 
 l l </space/> k ; 
 l l </space/> a [ N ] , </space/> b [ N ] ; 
 
 l l </space/> c a l c ( l l </space/> x , </space/> l l </space/> y ) 
 { 
 r e t u r n </space/> x </space/> - </space/> 3 </space/> * </space/> y </space/> * </space/> y </space/> + </space/> 3 </space/> * </space/> y </space/> - </space/> 1 ; 
 } 
 
 l l </space/> c h e c k ( l l </space/> x ) 
 { 
 l l </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 l l </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 / / </space/> c o u t </space/> < < </space/> l </space/> < < </space/> "" </space/> "" </space/> < < </space/> r </space/> < < </space/> e n d l ; 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 / / </space/> c o u t </space/> < < </space/> c a l c ( a [ i ] , </space/> m i d ) </space/> < < </space/> e n d l ; 
 i f </space/> ( c a l c ( a [ i ] , </space/> m i d ) </space/> > = </space/> x ) 
 a n s </space/> = </space/> m i d , </space/> l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 
 r e s </space/> + = </space/> a n s ; 
 b [ i ] </space/> = </space/> a n s ; 
 } 
 
 r e t u r n </space/> r e s ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c i n </space/> > > </space/> a [ i ] ; 
 l l </space/> l </space/> = </space/> - 3 e 1 8 , </space/> r </space/> = </space/> 3 e 1 8 , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) </space/> > = </space/> k ) 
 { 
 a n s </space/> = </space/> m i d ; 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 e l s e 
 { 
 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 } 
 / / </space/> c o u t </space/> < < </space/> a n s </space/> < < </space/> e n d l ; 
 / / </space/> c o u t </space/> < < </space/> c h e c k ( a n s ) </space/> < < </space/> e n d l ; 
 k </space/> = </space/> c h e c k ( a n s ) </space/> - </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( c a l c ( a [ i ] , </space/> b [ i ] ) </space/> = = </space/> a n s </space/> & & </space/> k ) 
 { 
 b [ i ] - - ; 
 k - - ; 
 } 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> m a x n </space/> 1 0 0 0 0 5 
 # d e f i n e </space/> i n t </space/> _ _ i n t 1 2 8 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 i n t </space/> n , </space/> k , </space/> a [ m a x n ] , </space/> v [ m a x n ] , </space/> s ; 
 
 i n l i n e </space/> i n t </space/> r e a d ( ) 
 { 
 l o n g </space/> l o n g </space/> x </space/> = </space/> 0 ; 
 c h a r </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( c h </space/> < </space/> ' 0 ' </space/> | | </space/> c h </space/> > </space/> ' 9 ' ) 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( c h </space/> > = </space/> ' 0 ' </space/> & & </space/> c h </space/> < = </space/> ' 9 ' ) 
 x </space/> = </space/> ( x </space/> < < </space/> 3 ) </space/> + </space/> ( x </space/> < < </space/> 1 ) </space/> + </space/> c h </space/> - </space/> ' 0 ' , </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 r e t u r n </space/> x ; 
 } 
 
 i n t </space/> c a l ( i n t </space/> x , </space/> i n t </space/> i d ) 
 { 
 r e t u r n </space/> a [ i d ] </space/> - </space/> x </space/> * </space/> x </space/> * </space/> 3 </space/> + </space/> x </space/> * </space/> 3 </space/> + </space/> 1 ; 
 } 
 
 
 b o o l </space/> c h e c k ( i n t </space/> m ) 
 { 
 s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> a [ i ] ; 
 i f </space/> ( c a l ( 1 , </space/> i ) </space/> < </space/> m ) 
 { 
 v [ i ] </space/> = </space/> 0 ; 
 c o n t i n u e ; 
 } 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( ( l </space/> + </space/> r ) </space/> > > </space/> 1 ) </space/> + </space/> 1 ; 
 i f </space/> ( c a l ( m i d , </space/> i ) </space/> > = </space/> m ) 
 l </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 v [ i ] </space/> = </space/> l ; 
 s </space/> + = </space/> l ; 
 } 
 i f </space/> ( s </space/> > </space/> k ) 
 r e t u r n </space/> 1 ; 
 r e t u r n </space/> 0 ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 n </space/> = </space/> r e a d ( ) , </space/> k </space/> = </space/> r e a d ( ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 a [ i ] </space/> = </space/> r e a d ( ) ; 
 i n t </space/> l </space/> = </space/> - 1 e 2 0 , </space/> r </space/> = </space/> 1 e 2 0 ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d ; 
 } 
 / / 
 / / 	 c h e c k ( l - 1 ) ; 
 c h e c k ( l ) ; 
 / / 	 c o u t < < l < < ' </space/> ' < < s < < e n d l ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 w h i l e </space/> ( c a l ( v [ i ] </space/> + </space/> 1 , </space/> i ) </space/> = = </space/> l </space/> - </space/> 1 </space/> & & </space/> s </space/> < </space/> k </space/> & & </space/> v [ i ] </space/> < </space/> a [ i ] ) 
 v [ i ] + + , </space/> s + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> ( l o n g </space/> l o n g ) v [ i ] </space/> < < </space/> ' </space/> ' ; 
 c o u t </space/> < < </space/> e n d l ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> r e p ( i , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> r e p 2 ( i , </space/> x , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 # d e f i n e </space/> r e p 3 ( i , </space/> x , </space/> n ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x ; </space/> i </space/> > = </space/> n ; </space/> i - - ) 
 # d e f i n e </space/> e a c h ( e , </space/> v ) </space/> f o r </space/> ( a u t o & </space/> e </space/> : </space/> v ) 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> e b </space/> e m p l a c e _ b a c k 
 # d e f i n e </space/> a l l ( x ) </space/> x . b e g i n ( ) , </space/> x . e n d ( ) 
 # d e f i n e </space/> r a l l ( x ) </space/> x . r b e g i n ( ) , </space/> x . r e n d ( ) 
 # d e f i n e </space/> s z ( x ) </space/> ( i n t ) </space/> x . s i z e ( ) 
 u s i n g </space/> l l </space/> = </space/> l o n g </space/> l o n g ; 
 u s i n g </space/> p i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 u s i n g </space/> p i l </space/> = </space/> p a i r < i n t , </space/> l l > ; 
 u s i n g </space/> p l i </space/> = </space/> p a i r < l l , </space/> i n t > ; 
 u s i n g </space/> p l l </space/> = </space/> p a i r < l l , </space/> l l > ; 
 c o n s t </space/> i n t </space/> M O D </space/> = </space/> 1 0 0 0 0 0 0 0 0 7 ; 
 / / </space/> c o n s t </space/> i n t </space/> M O D </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> ( 1 </space/> < < </space/> 3 0 ) </space/> - </space/> 1 ; 
 c o n s t </space/> l l </space/> I N F </space/> = </space/> ( 1 L L </space/> < < </space/> 6 0 ) </space/> - </space/> 1 ; 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 b o o l </space/> c h m a x ( T & </space/> x , </space/> c o n s t </space/> T & </space/> y ) 
 { 
 r e t u r n </space/> ( x </space/> < </space/> y ) </space/> ? </space/> ( x </space/> = </space/> y , </space/> t r u e ) </space/> : </space/> f a l s e ; 
 } ; 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 b o o l </space/> c h m i n ( T & </space/> x , </space/> c o n s t </space/> T & </space/> y ) 
 { 
 r e t u r n </space/> ( x </space/> > </space/> y ) </space/> ? </space/> ( x </space/> = </space/> y , </space/> t r u e ) </space/> : </space/> f a l s e ; 
 } ; 
 
 s t r u c t </space/> i o _ s e t u p 
 { 
 i o _ s e t u p ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c o u t </space/> < < </space/> f i x e d </space/> < < </space/> s e t p r e c i s i o n ( 1 5 ) ; 
 } 
 } </space/> i o _ s e t u p ; 
 
 i n t </space/> m a i n ( ) 
 { 
 i n t </space/> N ; 
 l l </space/> K ; 
 c i n </space/> > > </space/> N </space/> > > </space/> K ; 
 
 v e c t o r < l l > </space/> a ( N ) ; 
 r e p ( i , </space/> N ) </space/> c i n </space/> > > </space/> a [ i ] ; 
 
 l l </space/> L </space/> = </space/> - ( 1 L L </space/> < < </space/> 6 2 ) , </space/> R </space/> = </space/> ( 1 L L </space/> < < </space/> 3 0 ) ; </space/> / / [ L , </space/> R ) 
 w h i l e </space/> ( R </space/> - </space/> L </space/> > </space/> 1 ) 
 { 
 l l </space/> M </space/> = </space/> ( L </space/> + </space/> R ) </space/> / </space/> 2 ; 
 l l </space/> c n t </space/> = </space/> 0 ; 
 r e p ( i , </space/> N ) 
 { 
 l l </space/> l </space/> = </space/> - 1 , </space/> r </space/> = </space/> a [ i ] ; </space/> / / ( l , </space/> r ] 
 w h i l e </space/> ( r </space/> - </space/> l </space/> > </space/> 1 ) 
 { 
 l l </space/> m </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( a [ i ] </space/> - </space/> 3 </space/> * </space/> m </space/> * </space/> ( m </space/> + </space/> 1 ) </space/> - </space/> 1 </space/> < </space/> M ) 
 r </space/> = </space/> m ; 
 e l s e 
 l </space/> = </space/> m ; 
 } 
 c n t </space/> + = </space/> r ; 
 } 
 i f </space/> ( c n t </space/> > = </space/> K ) 
 L </space/> = </space/> M ; 
 e l s e 
 R </space/> = </space/> M ; 
 } 
 
 l l </space/> c n t </space/> = </space/> 0 ; 
 v e c t o r < l l > </space/> a n s ( N ) ; 
 v e c t o r < b o o l > </space/> f l a g ( N , </space/> f a l s e ) ; 
 r e p ( i , </space/> N ) 
 { 
 l l </space/> l </space/> = </space/> - 1 , </space/> r </space/> = </space/> a [ i ] ; </space/> / / ( l , </space/> r ] 
 w h i l e </space/> ( r </space/> - </space/> l </space/> > </space/> 1 ) 
 { 
 l l </space/> m </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( a [ i ] </space/> - </space/> 3 </space/> * </space/> m </space/> * </space/> ( m </space/> + </space/> 1 ) </space/> - </space/> 1 </space/> < </space/> L ) 
 r </space/> = </space/> m ; 
 e l s e 
 l </space/> = </space/> m ; 
 } 
 c n t </space/> + = </space/> r ; 
 a n s [ i ] </space/> = </space/> r ; 
 i f </space/> ( r </space/> > </space/> 0 </space/> & & </space/> a [ i ] </space/> - </space/> 3 </space/> * </space/> ( r </space/> - </space/> 1 ) </space/> * </space/> r </space/> - </space/> 1 </space/> = = </space/> L ) 
 f l a g [ i ] </space/> = </space/> t r u e ; 
 } 
 
 c n t </space/> - = </space/> K ; 
 r e p ( i , </space/> N ) 
 { 
 i f </space/> ( c n t </space/> = = </space/> 0 ) 
 b r e a k ; 
 i f </space/> ( ! f l a g [ i ] ) 
 c o n t i n u e ; 
 c n t - - , </space/> a n s [ i ] - - ; 
 } 
 
 r e p ( i , </space/> N ) </space/> c o u t </space/> < < </space/> a n s [ i ] </space/> < < </space/> ' </space/> ' ; 
 c o u t </space/> < < </space/> ' \ n ' ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> u n s i g n e d </space/> u i n t ; 
 # d e f i n e </space/> G </space/> g e t c h a r ( ) 
 l l </space/> r e a d ( ) 
 { 
 l l </space/> x </space/> = </space/> 0 ; 
 b o o l </space/> f l g </space/> = </space/> f a l s e ; 
 c h a r </space/> c h </space/> = </space/> G ; 
 f o r </space/> ( ; </space/> ! i s d i g i t ( c h ) ; </space/> c h </space/> = </space/> G ) 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 f l g </space/> = </space/> t r u e ; 
 f o r </space/> ( ; </space/> i s d i g i t ( c h ) ; </space/> c h </space/> = </space/> G ) 
 x </space/> = </space/> ( x </space/> < < </space/> 3 ) </space/> + </space/> ( x </space/> < < </space/> 1 ) </space/> + </space/> ( c h </space/> ^ </space/> 4 8 ) ; 
 r e t u r n </space/> f l g </space/> ? </space/> - x </space/> : </space/> x ; 
 } 
 # u n d e f </space/> G 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> a l l ( x ) </space/> ( x ) . b e g i n ( ) , </space/> ( x ) . e n d ( ) 
 / / </space/> t y p e d e f </space/> p a i r < i n t , i n t > </space/> P ; 
 / * c o n s t </space/> i n t </space/> m o d = ; 
 i n l i n e </space/> i n t </space/> u p d ( c o n s t </space/> i n t </space/> & x ) { r e t u r n </space/> x + ( x > > 3 1 & m o d ) ; } 
 i n l i n e </space/> v o i d </space/> a d d ( i n t </space/> & x , c o n s t </space/> i n t </space/> & y ) { x = u p d ( x + y - m o d ) ; } 
 i n l i n e </space/> v o i d </space/> i a d d ( i n t </space/> & x , c o n s t </space/> i n t </space/> & y ) { x = u p d ( x - y ) ; } 
 i n t </space/> q p o w ( i n t </space/> x , i n t </space/> y ) { 
 i n t </space/> r e s = 1 ; 
 f o r </space/> ( ; y ; y > > = 1 , x = 1 L L * x * x % m o d ) 
 i f </space/> ( y & 1 ) </space/> r e s = 1 L L * r e s * x % m o d ; 
 r e t u r n </space/> r e s ; 
 } * / 
 # d e f i n e </space/> r e p ( i , </space/> l , </space/> r ) </space/> f o r </space/> ( i n t </space/> i ( l ) ; </space/> i </space/> < = </space/> i n t ( r ) ; </space/> i + + ) 
 # d e f i n e </space/> p e r ( i , </space/> l , </space/> r ) </space/> f o r </space/> ( i n t </space/> i ( r ) ; </space/> i </space/> > = </space/> i n t ( l ) ; </space/> i - - ) 
 
 i n t </space/> n ; 
 l l </space/> S ; 
 l l </space/> a [ 1 0 0 0 1 0 ] ; 
 l l </space/> b [ 1 0 0 0 1 0 ] ; 
 
 v o i d </space/> w o r k ( l l </space/> v ) 
 { 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 l l </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] , </space/> m i d ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> r </space/> + </space/> 1 </space/> > > </space/> 1 ; 
 i f </space/> ( a [ i ] </space/> - </space/> 3 </space/> * </space/> m i d </space/> * </space/> m i d </space/> - </space/> 3 </space/> * </space/> m i d </space/> - </space/> 1 </space/> > = </space/> v ) 
 l </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 b [ i ] </space/> = </space/> l ; 
 } 
 } 
 
 l l </space/> c h e c k ( l l </space/> x ) 
 { 
 w o r k ( x ) ; 
 l l </space/> t o t </space/> = </space/> 0 ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> t o t </space/> + = </space/> b [ i ] ; 
 r e t u r n </space/> t o t ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 n </space/> = </space/> r e a d ( ) , </space/> S </space/> = </space/> r e a d ( ) ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> a [ i ] </space/> = </space/> r e a d ( ) ; 
 l l </space/> l </space/> = </space/> - 4 e 1 8 , </space/> r </space/> = </space/> 4 e 1 8 , </space/> m i d ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 m i d </space/> = </space/> l </space/> + </space/> ( r </space/> - </space/> l </space/> + </space/> 1 </space/> > > </space/> 1 ) ; 
 i f </space/> ( c h e c k ( m i d ) </space/> > = </space/> S ) 
 l </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 / / </space/> p r i n t f ( "" t e s t </space/> % l l d </space/> % l l d \ n "" , l , c h e c k ( l ) ) ; 
 w o r k ( l ) ; 
 s t a t i c </space/> l l </space/> c [ 1 0 0 0 1 0 ] ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c [ i ] </space/> = </space/> b [ i ] ; 
 w o r k ( l </space/> + </space/> 1 ) ; 
 l l </space/> t o t </space/> = </space/> S ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> t o t </space/> - = </space/> b [ i ] ; 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 l l </space/> t </space/> = </space/> m i n ( t o t , </space/> c [ i ] </space/> - </space/> b [ i ] ) ; 
 p r i n t f ( "" % l l d </space/> "" , </space/> b [ i ] </space/> + </space/> t ) ; 
 t o t </space/> - = </space/> t ; 
 } 
 p u t s ( "" "" ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 f o r </space/> ( i n t </space/> T </space/> = </space/> 1 ; </space/> T - - ; ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 u s i n g </space/> p i i </space/> = </space/> p a i r < i n t , </space/> i n t > ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 c o n s t </space/> d o u b l e </space/> e p s </space/> = </space/> 1 ; 
 i n t </space/> n ; 
 i n t 6 4 _ t </space/> k , </space/> b [ N ] , </space/> a n s [ N ] ; 
 p i i </space/> a [ N ] ; 
 d o u b l e </space/> s b [ N ] ; 
 b o o l </space/> c h k ( d o u b l e * </space/> b ) 
 { 
 d o u b l e </space/> s u m </space/> = </space/> 0 . 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s u m </space/> + = </space/> b [ i ] ; 
 i f </space/> ( s u m </space/> > = </space/> k ) 
 r e t u r n </space/> f a l s e ; 
 r e t u r n </space/> t r u e ; 
 } 
 b o o l </space/> c h k 2 ( d o u b l e * </space/> b ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( b [ i ] </space/> > </space/> a [ i ] . f i ) 
 r e t u r n </space/> f a l s e ; 
 r e t u r n </space/> t r u e ; 
 } 
 v o i d </space/> c h e c k ( i n t </space/> p ) 
 { 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> p ; </space/> i + + ) 
 s b [ i ] </space/> = </space/> a [ i ] . f i ; 
 d o u b l e </space/> L </space/> = </space/> - a [ p </space/> + </space/> 1 ] . f i , </space/> R </space/> = </space/> 3 . 0 </space/> * </space/> a [ p </space/> + </space/> 1 ] . f i </space/> * </space/> a [ p </space/> + </space/> 1 ] . f i </space/> - </space/> a [ p </space/> + </space/> 1 ] . f i , </space/> p s </space/> = </space/> 0 ; 
 w h i l e </space/> ( R </space/> - </space/> L </space/> > </space/> e p s ) 
 { 
 d o u b l e </space/> m i d </space/> = </space/> ( L </space/> + </space/> R ) </space/> / </space/> 2 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p </space/> + </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s b [ i ] </space/> = </space/> s q r t ( ( a [ i ] . f i </space/> + </space/> m i d ) </space/> / </space/> 3 ) ; 
 i f </space/> ( ! c h k ( s b ) ) 
 R </space/> = </space/> m i d , </space/> p s </space/> = </space/> m i d ; 
 e l s e 
 L </space/> = </space/> m i d ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p </space/> + </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s b [ i ] </space/> = </space/> s q r t ( ( a [ i ] . f i </space/> + </space/> p s ) </space/> / </space/> 3 ) ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( n u l l p t r ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] . f i ; 
 a [ i ] . s e </space/> = </space/> i ; 
 } 
 s o r t ( a </space/> + </space/> 1 , </space/> a </space/> + </space/> n </space/> + </space/> 1 ) ; 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> n , </space/> p </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 c h e c k ( m i d ) ; 
 i f </space/> ( ! c h k ( s b ) ) 
 p </space/> = </space/> m i d , </space/> r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c h e c k ( p ) ; 
 / / </space/> c o u t </space/> < < </space/> c h k ( s b ) </space/> < < </space/> ' </space/> ' </space/> < < </space/> c h k 2 ( s b ) </space/> < < </space/> ' \ n ' ; 
 / / </space/> f o r ( i n t </space/> i = 1 ; </space/> i < = n ; </space/> i + + ) </space/> c o u t </space/> < < </space/> s b [ i ] </space/> < < </space/> "" </space/> \ n "" [ i = = n ] ; 
 v e c t o r < p a i r < i n t 6 4 _ t , </space/> i n t > > </space/> v e c ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> p ; </space/> i + + ) 
 b [ i ] </space/> = </space/> a [ i ] . f i , </space/> k </space/> - = </space/> b [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> p </space/> + </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 b [ i ] </space/> = </space/> f l o o r ( s b [ i ] ) ; 
 k </space/> - = </space/> b [ i ] ; 
 i f </space/> ( b [ i ] </space/> < </space/> a [ i ] . f i ) 
 v e c . p u s h _ b a c k ( { </space/> - a [ i ] . f i </space/> + </space/> 3 </space/> * </space/> b [ i ] </space/> * </space/> b [ i ] </space/> + </space/> 3 </space/> * </space/> b [ i ] , </space/> i </space/> } ) ; 
 } 
 s o r t ( v e c . b e g i n ( ) , </space/> v e c . e n d ( ) ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> m i n ( k , </space/> ( i n t 6 4 _ t ) v e c . s i z e ( ) ) ; </space/> i + + ) 
 b [ v e c [ i ] . s e ] + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 a n s [ a [ i ] . s e ] </space/> = </space/> b [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 c o u t </space/> < < </space/> a n s [ i ] </space/> < < </space/> "" </space/> \ n "" [ i </space/> = = </space/> n ] ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" / / </space/> 1 3 4 4 D 
 / / </space/> R s u m </space/> R e v i e w 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 # d e f i n e </space/> n l </space/> "" \ n "" 
 # d e f i n e </space/> n f </space/> e n d l 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> _ </space/> < < </space/> ' </space/> ' </space/> < < 
 
 # d e f i n e </space/> I N F </space/> ( l l ) 5 e 1 8 
 # d e f i n e </space/> m o d </space/> 9 9 8 2 4 4 3 5 3 
 # d e f i n e </space/> m a x n </space/> 2 0 0 0 1 0 
 
 l l </space/> i , </space/> i 1 , </space/> j , </space/> k , </space/> k 1 , </space/> t , </space/> n , </space/> m , </space/> r e s , </space/> f l a g [ 1 0 ] , </space/> a [ m a x n ] , </space/> b [ m a x n ] , </space/> t t ; 
 
 l l </space/> f l ( l l </space/> a , </space/> l l </space/> b ) 
 { 
 i f </space/> ( a </space/> > = </space/> 0 ) 
 r e t u r n </space/> a </space/> / </space/> b ; 
 e l s e 
 r e t u r n </space/> ( a </space/> - </space/> b </space/> + </space/> 1 ) </space/> / </space/> b ; 
 } 
 
 l l </space/> b s _ r o w ( l l </space/> r , </space/> l l </space/> x ) 
 { 
 l l </space/> b s l , </space/> b s m , </space/> b s u ; 
 b s l </space/> = </space/> 0 ; 
 b s u </space/> = </space/> a [ r ] ; 
 w h i l e </space/> ( b s l </space/> ! = </space/> b s u ) 
 { 
 b s m </space/> = </space/> f l ( b s l </space/> + </space/> b s u </space/> + </space/> 1 , </space/> 2 ) ; 
 / / </space/> c o u t </space/> < < </space/> b s m </space/> _ </space/> a [ r ] </space/> - </space/> 3 </space/> * </space/> b s m </space/> * </space/> b s m </space/> + </space/> 3 </space/> * </space/> b s m </space/> - </space/> 1 </space/> < < </space/> n l ; 
 i f </space/> ( a [ r ] </space/> - </space/> 3 </space/> * </space/> b s m </space/> * </space/> b s m </space/> + </space/> 3 </space/> * </space/> b s m </space/> - </space/> 1 </space/> > = </space/> x ) 
 { 
 b s l </space/> = </space/> b s m ; 
 } 
 e l s e 
 { 
 b s u </space/> = </space/> b s m </space/> - </space/> 1 ; 
 } 
 } 
 
 / / </space/> c o u t </space/> < < </space/> "" r , </space/> x , </space/> b s l </space/> = </space/> "" </space/> < < </space/> r </space/> _ </space/> x </space/> _ </space/> b s l </space/> < < </space/> n l ; 
 
 r e t u r n </space/> b s l ; 
 } 
 
 l l </space/> b s _ c o l ( ) 
 { 
 l l </space/> b s l , </space/> b s m , </space/> b s u , </space/> t t , </space/> i ; 
 b s l </space/> = </space/> - I N F ; 
 b s u </space/> = </space/> I N F ; 
 w h i l e </space/> ( b s l </space/> ! = </space/> b s u ) 
 { 
 b s m </space/> = </space/> f l ( b s l </space/> + </space/> b s u </space/> + </space/> 1 , </space/> 2 ) ; 
 t t </space/> = </space/> 0 ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 t t </space/> + = </space/> b s _ r o w ( i , </space/> b s m ) ; 
 / / </space/> c o u t </space/> < < </space/> "" b s m , </space/> t t </space/> = </space/> "" </space/> < < </space/> b s m </space/> _ </space/> t t </space/> < < </space/> n l ; 
 i f </space/> ( t t </space/> > = </space/> k ) 
 b s l </space/> = </space/> b s m ; 
 e l s e 
 b s u </space/> = </space/> b s m </space/> - </space/> 1 ; 
 } 
 
 r e t u r n </space/> b s l ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s : : s y n c _ w i t h _ s t d i o ( 0 ) ; 
 c i n . t i e ( 0 ) ; 
 
 # i f </space/> ! O N L I N E _ J U D G E </space/> & & </space/> ! E V A L 
 i f s t r e a m </space/> c i n ( "" i n p u t . t x t "" ) ; 
 o f s t r e a m </space/> c o u t ( "" o u t p u t . t x t "" ) ; 
 # e n d i f 
 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 } 
 
 m </space/> = </space/> b s _ c o l ( ) ; 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 b [ i ] </space/> = </space/> b s _ r o w ( i , </space/> m ) ; 
 t t </space/> + = </space/> b [ i ] ; 
 } 
 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( t t </space/> = = </space/> k ) 
 b r e a k ; 
 i f </space/> ( a [ i ] </space/> - </space/> 3 </space/> * </space/> b [ i ] </space/> * </space/> b [ i ] </space/> + </space/> 3 </space/> * </space/> b [ i ] </space/> - </space/> 1 </space/> = = </space/> m ) 
 { 
 b [ i ] - - ; 
 t t - - ; 
 } 
 } 
 
 f o r </space/> ( i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> ' </space/> ' ; 
 } 
 c o u t </space/> < < </space/> n l ; 
 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # p r a g m a </space/> G C C </space/> o p t i m i z e ( 3 , </space/> "" O f a s t "" , </space/> "" i n l i n e "" ) 
 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 # d e f i n e </space/> s t a r t </space/> \ 
 i o s : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; </space/> \ 
 c i n . t i e ( 0 ) ; </space/> \ 
 c o u t . t i e ( 0 ) ; 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> u l l </space/> u n s i g n e d </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> i n t </space/> l l 
 # d e f i n e </space/> l s </space/> s t </space/> < < </space/> 1 
 # d e f i n e </space/> r s </space/> s t </space/> < < </space/> 1 </space/> | </space/> 1 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> r e p ( z , </space/> x , </space/> y ) </space/> f o r </space/> ( i n t </space/> z </space/> = </space/> x ; </space/> z </space/> < = </space/> y ; </space/> + + z ) 
 # d e f i n e </space/> r e p d ( z , </space/> x , </space/> y ) </space/> f o r </space/> ( i n t </space/> z </space/> = </space/> x ; </space/> z </space/> > = </space/> y ; </space/> - - z ) 
 # d e f i n e </space/> c o m </space/> b o o l </space/> o p e r a t o r < ( c o n s t </space/> n o d e & </space/> b ) </space/> c o n s t 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 m t 1 9 9 3 7 </space/> r n d ( c h r o n o : : h i g h _ r e s o l u t i o n _ c l o c k : : n o w ( ) . t i m e _ s i n c e _ e p o c h ( ) . c o u n t ( ) ) ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> ( l l ) 5 e 6 </space/> + </space/> 5 ; 
 c o n s t </space/> i n t </space/> m o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 ; 
 c o n s t </space/> i n t </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 i n t </space/> T </space/> = </space/> 1 ; 
 i n t </space/> n , </space/> k k , </space/> l , </space/> r ; 
 i n t </space/> a [ m a x n ] ; 
 
 i n t </space/> f ( i n t </space/> x , </space/> i n t </space/> y ) 
 { 
 i f </space/> ( x </space/> = = </space/> y ) 
 r e t u r n </space/> i n f ; 
 r e t u r n </space/> x </space/> - </space/> 3 </space/> * </space/> y </space/> * </space/> y </space/> + </space/> 3 </space/> * </space/> y </space/> - </space/> 1 ; 
 } 
 
 i n t </space/> c a l c ( i n t </space/> x , </space/> i n t </space/> l i m ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> a [ x ] , </space/> r e s </space/> = </space/> a [ x ] ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( f ( a [ x ] , </space/> m i d ) </space/> < = </space/> l i m ) 
 r </space/> = </space/> m i d </space/> - </space/> 1 , </space/> r e s </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 r e t u r n </space/> r e s ; 
 } 
 
 i n t </space/> b [ m a x n ] , </space/> s u m ; 
 
 i n t </space/> c h e c k ( i n t </space/> x ) 
 { 
 s u m </space/> = </space/> 0 ; 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 s u m </space/> + = </space/> ( b [ i ] </space/> = </space/> c a l c ( i , </space/> x ) ) ; 
 } 
 r e t u r n </space/> s u m </space/> < </space/> k k ; 
 } 
 
 v o i d </space/> s o l v e ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> k k ; 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 c i n </space/> > > </space/> a [ i ] ; 
 l </space/> = </space/> m i n ( l , </space/> f ( a [ i ] , </space/> a [ i ] </space/> - </space/> 1 ) ) ; 
 r </space/> = </space/> m a x ( r , </space/> f ( a [ i ] , </space/> 0 ) ) ; 
 } 
 w h i l e </space/> ( r </space/> - </space/> l </space/> > = </space/> 2 ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d ; 
 e l s e 
 l </space/> = </space/> m i d ; 
 } 
 i f </space/> ( c h e c k ( l ) ) 
 { 
 r </space/> = </space/> l ; 
 } 
 c h e c k ( r ) ; 
 k k </space/> - = </space/> s u m ; 
 r e p ( i , </space/> 1 , </space/> n ) 
 { 
 i f </space/> ( k k </space/> & & </space/> b [ i ] </space/> < </space/> a [ i ] </space/> & & </space/> f ( a [ i ] , </space/> b [ i ] ) </space/> = = </space/> r ) 
 { 
 + + b [ i ] ; 
 - - k k ; 
 } 
 } 
 r e p ( i , </space/> 1 , </space/> n ) </space/> c o u t </space/> < < </space/> b [ i ] </space/> < < </space/> ' </space/> ' ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 s t a r t ; 
 w h i l e </space/> ( T - - ) 
 s o l v e ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 5 ; 
 i n t </space/> n , </space/> a [ N ] , </space/> b [ N ] ; 
 l l </space/> k , </space/> L [ N ] , </space/> R [ N ] ; 
 l l </space/> c o u n t ( l l </space/> x ) 
 { 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> p l </space/> = </space/> 1 , </space/> p r </space/> = </space/> a [ i ] , </space/> a n s </space/> = </space/> 0 ; 
 w h i l e </space/> ( p l </space/> < = </space/> p r ) 
 { 
 i n t </space/> m i d </space/> = </space/> ( p l </space/> + </space/> p r ) </space/> / </space/> 2 ; 
 l l </space/> s l o p </space/> = </space/> a [ i ] </space/> - </space/> 3 l l </space/> * </space/> m i d </space/> * </space/> m i d </space/> + </space/> 3 l l </space/> * </space/> m i d </space/> - </space/> 1 ; 
 i f </space/> ( s l o p </space/> > </space/> x ) 
 a n s </space/> = </space/> m i d , </space/> p l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 p r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 L [ i ] </space/> = </space/> R [ i ] </space/> = </space/> a n s ; 
 s u m </space/> + = </space/> a n s ; 
 i f </space/> ( ( + + a n s ) </space/> > </space/> a [ i ] ) 
 c o n t i n u e ; 
 i f </space/> ( a [ i ] </space/> - </space/> 3 l l </space/> * </space/> a n s </space/> * </space/> a n s </space/> + </space/> 3 l l </space/> * </space/> a n s </space/> - </space/> 1 </space/> = = </space/> x ) 
 R [ i ] + + ; 
 } 
 r e t u r n </space/> s u m ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % l l d "" , </space/> & n , </space/> & k ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 l l </space/> l </space/> = </space/> - ( 1 l l </space/> < < </space/> 6 2 ) , </space/> r </space/> = </space/> 1 l l </space/> < < </space/> 6 2 , </space/> a n s </space/> = </space/> - l </space/> - </space/> 1 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> / </space/> 2 ; 
 i f </space/> ( c o u n t ( m i d ) </space/> < = </space/> k ) 
 a n s </space/> = </space/> m i d , </space/> r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 c o u n t ( a n s ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 b [ i ] </space/> = </space/> L [ i ] , </space/> k </space/> - = </space/> L [ i ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 i f </space/> ( L [ i ] </space/> ! = </space/> R [ i ] </space/> & & </space/> k ) 
 b [ i ] + + , </space/> k - - ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % d </space/> "" , </space/> b [ i ] ) ; 
 p u t s ( "" "" ) ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 c o n s t </space/> i n t </space/> M A X N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 ; 
 s t r u c t </space/> e l e m e n t 
 { 
 i n t </space/> v a l , </space/> p o s ; 
 } </space/> p [ M A X N ] ; 
 i n t </space/> c o m p ( e l e m e n t </space/> x , </space/> e l e m e n t </space/> y ) 
 { 
 r e t u r n </space/> x . v a l </space/> > </space/> y . v a l ; 
 } 
 i n t </space/> n , </space/> k , </space/> a [ M A X N ] ; 
 i n l i n e </space/> v o i d </space/> i n i t ( v o i d ) 
 { 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & k ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 s c a n f ( "" % l l d "" , </space/> & a [ i ] ) ; 
 } 
 i n l i n e </space/> i n t </space/> c a l c ( i n t </space/> x , </space/> i n t </space/> a i ) 
 { 
 r e t u r n </space/> - 3 </space/> * </space/> x </space/> * </space/> x </space/> - </space/> 3 </space/> * </space/> x </space/> + </space/> a i </space/> - </space/> 1 ; 
 } 
 i n t </space/> c h e c k ( i n t </space/> M i d ) 
 { 
 i n t </space/> r e t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] , </space/> m i d , </space/> n o w </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 l l ; 
 i f </space/> ( c a l c ( m i d , </space/> a [ i ] ) </space/> - </space/> M i d </space/> > = </space/> 0 ) 
 n o w </space/> = </space/> m i d , </space/> l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 r e t </space/> + = </space/> n o w ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 i n t </space/> a n s , </space/> b [ M A X N ] ; 
 i n l i n e </space/> v o i d </space/> f i n d ( v o i d ) 
 { 
 i n t </space/> l </space/> = </space/> - 4 e 1 8 , </space/> r </space/> = </space/> 1 e 1 8 , </space/> m i d ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 l l ; 
 i f </space/> ( c h e c k ( m i d ) </space/> < = </space/> k ) 
 { 
 a n s </space/> = </space/> m i d ; 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 
 i n l i n e </space/> v o i d </space/> w o r k ( v o i d ) 
 { 
 f i n d ( ) ; 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] , </space/> m i d , </space/> n o w </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 l l ; 
 i f </space/> ( c a l c ( m i d , </space/> a [ i ] ) </space/> - </space/> a n s </space/> > = </space/> 0 ) 
 n o w </space/> = </space/> m i d , </space/> l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 b [ i ] </space/> = </space/> n o w ; 
 s u m </space/> + = </space/> b [ i ] ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 p [ i ] . v a l </space/> = </space/> c a l c ( b [ i ] , </space/> a [ i ] ) ; 
 p [ i ] . p o s </space/> = </space/> i ; 
 } 
 s o r t ( p </space/> + </space/> 1 , </space/> p </space/> + </space/> n </space/> + </space/> 1 , </space/> c o m p ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( s u m </space/> < </space/> k </space/> & & </space/> b [ p [ i ] . p o s ] </space/> < </space/> a [ p [ i ] . p o s ] ) </space/> / / : b 
 + + b [ p [ i ] . p o s ] , </space/> s u m + + ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 p r i n t f ( "" % l l d </space/> "" , </space/> b [ i ] ) ; 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 i n i t ( ) ; 
 w o r k ( ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 i n l i n e </space/> v o i d </space/> r d ( T & </space/> x ) 
 { 
 i n t </space/> s i </space/> = </space/> 1 ; 
 c h a r </space/> c </space/> = </space/> g e t c h a r ( ) ; 
 x </space/> = </space/> 0 ; 
 w h i l e </space/> ( ! i s d i g i t ( c ) ) 
 s i </space/> = </space/> c </space/> = = </space/> ' - ' </space/> ? </space/> - 1 </space/> : </space/> s i , </space/> c </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( i s d i g i t ( c ) ) 
 x </space/> = </space/> x </space/> * </space/> 1 0 </space/> + </space/> c </space/> - </space/> 4 8 , </space/> c </space/> = </space/> g e t c h a r ( ) ; 
 x </space/> * = </space/> s i ; 
 } 
 t e m p l a t e </space/> < t y p e n a m e </space/> T , </space/> t y p e n a m e . . . </space/> A r g s > 
 i n l i n e </space/> v o i d </space/> r d ( T & </space/> x , </space/> A r g s & . . . </space/> a r g s ) 
 { 
 r d ( x ) ; 
 r d ( a r g s . . . ) ; 
 } 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> m k p </space/> s t d : : m a k e _ p a i r 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> d o u b l e </space/> f f ; 
 t y p e d e f </space/> s t d : : p a i r < i n t , </space/> i n t > </space/> p i i ; 
 c o n s t </space/> i n t </space/> k N </space/> = </space/> 5 e 5 </space/> + </space/> 5 , </space/> k I n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f ; 
 c o n s t </space/> l l </space/> k M o d </space/> = </space/> 9 9 8 2 4 4 3 5 3 , </space/> k I n f L L </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f 3 f 3 f 3 f L L ; 
 c o n s t </space/> f f </space/> k E p s </space/> = </space/> 1 e - 5 ; 
 
 i n t </space/> n , </space/> i d x [ k N ] ; 
 l l </space/> k , </space/> A [ k N ] , </space/> B [ k N ] , </space/> d [ k N ] ; 
 
 b o o l </space/> C h e c k ( l l </space/> m i d ) 
 { 
 l l </space/> t </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 l l </space/> x </space/> = </space/> s q r t ( s t d : : m a x ( A [ i ] </space/> / </space/> 3 . 0 </space/> + </space/> m i d , </space/> k E p s ) ) ; 
 t </space/> + = </space/> s t d : : m i n ( x , </space/> A [ i ] ) ; 
 } 
 r e t u r n </space/> t </space/> > = </space/> k ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" a . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 f r e o p e n ( "" a . o u t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # e n d i f 
 i n t </space/> T </space/> = </space/> 1 ; </space/> / / </space/> r d ( T ) ; 
 w h i l e </space/> ( T - - ) 
 { 
 r d ( n , </space/> k ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 r d ( A [ i ] ) ; 
 l l </space/> l </space/> = </space/> - 1 e 1 8 , </space/> r </space/> = </space/> 1 e 1 8 ; 
 w h i l e </space/> ( l </space/> < </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> ( l </space/> + </space/> r </space/> + </space/> 1 ) </space/> > > </space/> 1 ; 
 i f </space/> ( C h e c k ( m i d ) ) 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d ; 
 } 
 l l </space/> s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 B [ i ] </space/> = </space/> s q r t ( s t d : : m a x ( A [ i ] </space/> / </space/> 3 . 0 </space/> + </space/> l , </space/> k E p s ) ) ; 
 B [ i ] </space/> = </space/> s t d : : m i n ( B [ i ] , </space/> A [ i ] ) ; 
 i f </space/> ( B [ i ] </space/> < </space/> A [ i ] ) 
 { 
 d [ i ] </space/> = </space/> - 3 </space/> * </space/> ( B [ i ] </space/> * </space/> B [ i ] </space/> + </space/> B [ i ] ) </space/> + </space/> A [ i ] ; 
 } 
 e l s e 
 d [ i ] </space/> = </space/> - k I n f L L ; 
 s </space/> + = </space/> B [ i ] ; 
 i d x [ i ] </space/> = </space/> i ; 
 } 
 s t d : : s o r t ( i d x </space/> + </space/> 1 , </space/> i d x </space/> + </space/> n </space/> + </space/> 1 , </space/> [ ] ( c o n s t </space/> i n t & </space/> x , </space/> c o n s t </space/> i n t & </space/> y ) 
 { 
 r e t u r n </space/> d [ x ] </space/> > </space/> d [ y ] ; 
 } ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> k </space/> - </space/> s ; </space/> + + i ) 
 + + B [ i d x [ i ] ] ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 p r i n t f ( "" % l l d </space/> "" , </space/> B [ i ] ) ; 
 p r i n t f ( "" \ n "" ) ; 
 } 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> i n t </space/> l o n g </space/> l o n g 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 0 </space/> + </space/> 1 0 ; 
 
 i n t </space/> n , </space/> K , </space/> a [ N ] , </space/> b [ N ] ; 
 s t r u c t </space/> N o d e 
 { 
 i n t </space/> v , </space/> i d ; 
 } </space/> p [ N ] ; 
 b o o l </space/> c m p ( N o d e </space/> x , </space/> N o d e </space/> y ) 
 { 
 r e t u r n </space/> x . v </space/> > </space/> y . v ; 
 } 
 
 i n t </space/> g e t ( i n t </space/> x , </space/> i n t </space/> v ) 
 { 
 r e t u r n </space/> - 3 l l </space/> * </space/> ( x </space/> * </space/> x </space/> + </space/> x ) </space/> + </space/> v </space/> + </space/> 1 ; 
 } 
 i n t </space/> f u n c ( i n t </space/> v , </space/> i n t </space/> y ) 
 { 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> v , </space/> m i d , </space/> r e t </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 l l ; 
 i f </space/> ( g e t ( m i d , </space/> v ) </space/> > = </space/> y ) 
 r e t </space/> = </space/> m i d , </space/> l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 r e t u r n </space/> r e t ; 
 } 
 i n t </space/> c a l c ( i n t </space/> y ) 
 { 
 i n t </space/> s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 s u m </space/> + = </space/> f u n c ( a [ i ] , </space/> y ) ; 
 r e t u r n </space/> s u m ; </space/> / / </space/> 
 } 
 
 i n t </space/> a n s , </space/> s u m ; 
 v o i d </space/> s o l v e ( ) 
 { 
 i n t </space/> l </space/> = </space/> - 4 e 1 8 , </space/> r </space/> = </space/> 1 e 1 8 , </space/> m i d ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 l l ; 
 i f </space/> ( c a l c ( m i d ) </space/> < = </space/> K ) 
 a n s </space/> = </space/> m i d , </space/> r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 } 
 
 s i g n e d </space/> m a i n ( ) 
 { 
 s c a n f ( "" % l l d % l l d "" , </space/> & n , </space/> & K ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 s c a n f ( "" % l l d "" , </space/> & a [ i ] ) ; 
 s o l v e ( ) ; 
 s u m </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 b [ i ] </space/> = </space/> f u n c ( a [ i ] , </space/> a n s ) ; 
 s u m </space/> + = </space/> b [ i ] ; 
 p [ i ] . v </space/> = </space/> g e t ( b [ i ] , </space/> a [ i ] ) ; 
 p [ i ] . i d </space/> = </space/> i ; 
 } 
 s o r t ( p </space/> + </space/> 1 , </space/> p </space/> + </space/> n </space/> + </space/> 1 , </space/> c m p ) ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 i f </space/> ( s u m </space/> < </space/> K </space/> & & </space/> a [ p [ i ] . i d ] </space/> > </space/> b [ p [ i ] . i d ] ) 
 s u m + + , </space/> b [ p [ i ] . i d ] + + ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 p r i n t f ( "" % l l d </space/> "" , </space/> b [ i ] ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> m k p ( x , </space/> y ) </space/> m a k e _ p a i r ( x , </space/> y ) 
 # d e f i n e </space/> p b ( x ) </space/> p u s h _ b a c k ( x ) 
 # d e f i n e </space/> s z ( v ) </space/> ( i n t ) </space/> v . s i z e ( ) 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> L L ; 
 t y p e d e f </space/> d o u b l e </space/> d b ; 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 b o o l </space/> c k m a x ( T & </space/> x , </space/> T </space/> y ) 
 { 
 r e t u r n </space/> x </space/> < </space/> y </space/> ? </space/> x </space/> = </space/> y , </space/> 1 </space/> : </space/> 0 ; 
 } 
 t e m p l a t e </space/> < c l a s s </space/> T > 
 b o o l </space/> c k m i n ( T & </space/> x , </space/> T </space/> y ) 
 { 
 r e t u r n </space/> x </space/> > </space/> y </space/> ? </space/> x </space/> = </space/> y , </space/> 1 </space/> : </space/> 0 ; 
 } 
 # d e f i n e </space/> r e p ( i , </space/> x , </space/> y ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x , </space/> i # # e n d </space/> = </space/> y ; </space/> i </space/> < = </space/> i # # e n d ; </space/> + + i ) 
 # d e f i n e </space/> p e r ( i , </space/> x , </space/> y ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> x , </space/> i # # e n d </space/> = </space/> y ; </space/> i </space/> > = </space/> i # # e n d ; </space/> - - i ) 
 i n l i n e </space/> i n t </space/> r e a d ( ) 
 { 
 i n t </space/> x </space/> = </space/> 0 , </space/> f </space/> = </space/> 1 ; 
 c h a r </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 w h i l e </space/> ( ! i s d i g i t ( c h ) ) 
 { 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 f </space/> = </space/> 0 ; 
 c h </space/> = </space/> g e t c h a r ( ) ; 
 } 
 w h i l e </space/> ( i s d i g i t ( c h ) ) 
 x </space/> = </space/> x </space/> * </space/> 1 0 </space/> + </space/> c h </space/> - </space/> ' 0 ' , </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 r e t u r n </space/> f </space/> ? </space/> x </space/> : </space/> - x ; 
 } 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 0 0 0 0 5 ; 
 i n t </space/> n , </space/> a [ N ] , </space/> b [ N ] ; 
 p a i r < L L , </space/> i n t > </space/> c [ N ] ; 
 L L </space/> k , </space/> s u m ; 
 b o o l </space/> c h e c k ( L L </space/> o ) 
 { 
 L L </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] , </space/> t </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 L L </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( - 3 l l </space/> * </space/> m i d </space/> * </space/> m i d </space/> - </space/> 3 l l </space/> * </space/> m i d </space/> - </space/> 1 l l </space/> + </space/> a [ i ] </space/> > = </space/> o ) 
 l </space/> = </space/> m i d </space/> + </space/> 1 , </space/> t </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 r e s </space/> + = </space/> t ; 
 } 
 r e t u r n </space/> r e s </space/> > = </space/> k ; 
 } 
 s i g n e d </space/> m a i n ( ) 
 { 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> a [ i ] </space/> = </space/> r e a d ( ) ; 
 L L </space/> l </space/> = </space/> - 3 . 5 e 1 8 , </space/> r </space/> = </space/> 3 . 5 e 1 8 , </space/> r e s </space/> = </space/> 1 1 4 5 1 4 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 L L </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 l </space/> = </space/> m i d </space/> + </space/> 1 , </space/> r e s </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i n t </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] , </space/> t </space/> = </space/> 0 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 L L </space/> m i d </space/> = </space/> ( l </space/> + </space/> r ) </space/> > > </space/> 1 ; 
 i f </space/> ( - 3 l l </space/> * </space/> m i d </space/> * </space/> m i d </space/> - </space/> 3 l l </space/> * </space/> m i d </space/> - </space/> 1 l l </space/> + </space/> a [ i ] </space/> > = </space/> r e s ) 
 l </space/> = </space/> m i d </space/> + </space/> 1 , </space/> t </space/> = </space/> m i d ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 b [ i ] </space/> = </space/> t , </space/> s u m </space/> + = </space/> b [ i ] ; 
 i f </space/> ( t </space/> > </space/> 0 ) 
 c [ i ] </space/> = </space/> m k p ( - 3 l l </space/> * </space/> t </space/> * </space/> t </space/> + </space/> 3 l l </space/> * </space/> t </space/> - </space/> 1 l l </space/> + </space/> a [ i ] , </space/> i ) ; 
 e l s e 
 c [ i ] </space/> = </space/> m k p ( 4 e 1 8 , </space/> i ) ; 
 } 
 s o r t ( c </space/> + </space/> 1 , </space/> c </space/> + </space/> n </space/> + </space/> 1 ) ; 
 r e p ( i , </space/> 1 , </space/> s u m </space/> - </space/> k ) - - </space/> b [ c [ i ] . s e ] ; 
 L L </space/> q w q </space/> = </space/> 0 ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> q w q </space/> + = </space/> 1 l l </space/> * </space/> b [ i ] </space/> * </space/> ( a [ i ] </space/> - </space/> 1 l l </space/> * </space/> b [ i ] </space/> * </space/> b [ i ] ) ; 
 c e r r </space/> < < </space/> q w q </space/> < < </space/> ' \ n ' ; 
 r e p ( i , </space/> 1 , </space/> n ) </space/> p r i n t f ( "" % d </space/> "" , </space/> b [ i ] ) ; 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" 
 # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l o ; 
 # d e f i n e </space/> m p </space/> m a k e _ p a i r 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> a </space/> f i r s t 
 # d e f i n e </space/> b </space/> s e c o n d 
 # d e f i n e </space/> e n d l </space/> ' \ n ' 
 
 l l o </space/> n , </space/> k ; 
 l l o </space/> i t [ 1 0 0 0 0 1 ] ; 
 l l o </space/> t t [ 1 0 0 0 0 1 ] ; 
 l l o </space/> c h e c k ( l l o </space/> m i d ) 
 { 
 l l o </space/> s u </space/> = </space/> 0 ; 
 f o r </space/> ( l l o </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 l l o </space/> l o w </space/> = </space/> 0 ; 
 l l o </space/> h i g h </space/> = </space/> i t [ i ] </space/> - </space/> 1 ; 
 i f </space/> ( i t [ i ] </space/> - </space/> 1 </space/> < </space/> m i d ) 
 { 
 t t [ i ] </space/> = </space/> 0 ; 
 c o n t i n u e ; 
 } 
 w h i l e </space/> ( l o w </space/> < </space/> h i g h </space/> - </space/> 1 ) 
 { 
 l l o </space/> m i </space/> = </space/> ( l o w </space/> + </space/> h i g h ) </space/> / </space/> 2 ; 
 i f </space/> ( i t [ i ] </space/> - </space/> ( m i </space/> * </space/> m i </space/> * </space/> 3 </space/> + </space/> m i </space/> * </space/> 3 </space/> + </space/> 1 ) </space/> > = </space/> m i d ) 
 { 
 l o w </space/> = </space/> m i ; 
 } 
 e l s e 
 { 
 h i g h </space/> = </space/> m i ; 
 } 
 } 
 t t [ i ] </space/> = </space/> l o w ; 
 l l o </space/> m i </space/> = </space/> h i g h ; 
 i f </space/> ( i t [ i ] </space/> - </space/> ( m i </space/> * </space/> m i </space/> * </space/> 3 </space/> + </space/> m i </space/> * </space/> 3 </space/> + </space/> 1 ) </space/> > = </space/> m i d ) 
 { 
 t t [ i ] </space/> = </space/> m a x ( t t [ i ] , </space/> h i g h ) ; 
 } 
 t t [ i ] </space/> + = </space/> 1 ; 
 s u </space/> + = </space/> t t [ i ] ; 
 } 
 r e t u r n </space/> s u ; 
 } 
 
 
 i n t </space/> m a i n ( ) 
 { 
 i o s _ b a s e : : s y n c _ w i t h _ s t d i o ( f a l s e ) ; 
 c i n . t i e ( N U L L ) ; 
 c i n </space/> > > </space/> n </space/> > > </space/> k ; 
 f o r </space/> ( l l o </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c i n </space/> > > </space/> i t [ i ] ; 
 } 
 l l o </space/> l o w </space/> = </space/> - 4 e 1 8 ; 
 l l o </space/> h i g h </space/> = </space/> 1 e 9 ; 
 w h i l e </space/> ( l o w </space/> < </space/> h i g h </space/> - </space/> 1 ) 
 { 
 l l o </space/> m i d </space/> = </space/> ( l o w </space/> + </space/> h i g h ) </space/> / </space/> 2 ; 
 i f </space/> ( c h e c k ( m i d ) </space/> < = </space/> k ) 
 { 
 h i g h </space/> = </space/> m i d ; 
 } 
 e l s e 
 { 
 l o w </space/> = </space/> m i d ; 
 } 
 } 
 
 l l o </space/> i n d </space/> = </space/> h i g h ; 
 i f </space/> ( c h e c k ( l o w ) </space/> < = </space/> k ) 
 { 
 i n d </space/> = </space/> m a x ( i n d , </space/> l o w ) ; 
 } 
 / * 	 c o u t < < i n d < < "" : "" < < c h e c k ( i n d ) < < e n d l ; 
 f o r ( i n t </space/> i = 0 ; i < n ; i + + ) { 
 c o u t < < t t [ i ] < < "" : "" ; 
 } 
 c o u t < < e n d l ; * / 
 l l o </space/> l e </space/> = </space/> k </space/> - </space/> c h e c k ( i n d ) ; 
 f o r </space/> ( l l o </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 i f </space/> ( i t [ i ] </space/> - </space/> ( t t [ i ] </space/> * </space/> t t [ i ] </space/> * </space/> 3 </space/> + </space/> t t [ i ] </space/> * </space/> 3 </space/> + </space/> 1 ) </space/> = = </space/> i n d </space/> - </space/> 1 ) 
 { 
 i f </space/> ( l e </space/> > </space/> 0 ) 
 { 
 t t [ i ] </space/> + = </space/> 1 ; 
 l e </space/> - = </space/> 1 ; 
 } 
 } 
 } 
 f o r </space/> ( l l o </space/> i </space/> = </space/> 0 ; </space/> i </space/> < </space/> n ; </space/> i + + ) 
 { 
 c o u t </space/> < < </space/> t t [ i ] </space/> < < </space/> "" </space/> "" ; 
 } 
 c o u t </space/> < < </space/> e n d l ; 
 
 
 r e t u r n </space/> 0 ; 
 }",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 
 t y p e d e f </space/> l o n g </space/> l o n g </space/> l l ; 
 t y p e d e f </space/> d o u b l e </space/> d b ; 
 t y p e d e f </space/> u n s i g n e d </space/> l o n g </space/> l o n g </space/> u l l ; 
 t y p e d e f </space/> l o n g </space/> d o u b l e </space/> l d b ; 
 
 # d e f i n e </space/> i n </space/> r e a d < i n t > ( ) 
 # d e f i n e </space/> l i n </space/> r e a d < l l > ( ) 
 # d e f i n e </space/> p i i </space/> p a i r < i n t , </space/> i n t > 
 # d e f i n e </space/> f i </space/> f i r s t 
 # d e f i n e </space/> s e </space/> s e c o n d 
 # d e f i n e </space/> F I L E ( x ) </space/> \ 
 f r e o p e n ( x </space/> "" . i n "" , </space/> "" r "" , </space/> s t d i n ) ; </space/> \ 
 f r e o p e n ( x </space/> "" . o u t "" , </space/> "" w "" , </space/> s t d o u t ) ; 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> v e c </space/> v e c t o r < i n t > 
 
 t e m p l a t e </space/> < t y p e n a m e </space/> T > 
 T </space/> r e a d ( ) 
 { 
 T </space/> x </space/> = </space/> 0 , </space/> s g n </space/> = </space/> 1 ; 
 c h a r </space/> c h </space/> = </space/> g e t c h a r ( ) ; 
 f o r </space/> ( ; </space/> ! i s d i g i t ( c h ) ; </space/> c h </space/> = </space/> g e t c h a r ( ) ) 
 i f </space/> ( c h </space/> = = </space/> ' - ' ) 
 s g n </space/> = </space/> - 1 ; 
 f o r </space/> ( ; </space/> i s d i g i t ( c h ) ; </space/> c h </space/> = </space/> g e t c h a r ( ) ) 
 x </space/> = </space/> ( x </space/> < < </space/> 1 ) </space/> + </space/> ( x </space/> < < </space/> 3 ) </space/> + </space/> ( c h </space/> ^ </space/> 4 8 ) ; 
 r e t u r n </space/> x </space/> * </space/> s g n ; 
 } 
 
 c o n s t </space/> i n t </space/> N </space/> = </space/> 1 e 5 </space/> + </space/> 1 0 ; 
 c o n s t </space/> l l </space/> i n f </space/> = </space/> 0 x 3 f 3 f 3 f 3 f 3 f 3 f 3 f 3 f ; 
 
 i n t </space/> a [ N ] , </space/> b [ N ] , </space/> n ; 
 l l </space/> k , </space/> s ; 
 
 l l </space/> f ( i n t </space/> x , </space/> l l </space/> y ) 
 { 
 i f </space/> ( x </space/> = = </space/> y ) 
 r e t u r n </space/> i n f ; 
 r e t u r n </space/> x </space/> - </space/> 3 </space/> * </space/> y </space/> * </space/> ( y </space/> - </space/> 1 ) </space/> - </space/> 1 ; 
 } 
 
 i n t </space/> c a l ( i n t </space/> p , </space/> l l </space/> l i m ) 
 { 
 i n t </space/> l </space/> = </space/> 1 , </space/> r </space/> = </space/> a [ p ] </space/> - </space/> 1 , </space/> a n s </space/> = </space/> a [ p ] ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> l </space/> + </space/> r </space/> > > </space/> 1 ; 
 i f </space/> ( f ( a [ p ] , </space/> m i d ) </space/> > </space/> l i m ) 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 , </space/> a n s </space/> = </space/> m i d ; 
 } 
 r e t u r n </space/> a n s ; 
 } 
 
 b o o l </space/> c h e c k ( l l </space/> m i d ) 
 { 
 s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 { 
 i n t </space/> p </space/> = </space/> c a l ( i , </space/> m i d ) ; 
 b [ i ] </space/> = </space/> p ; 
 s </space/> + = </space/> p ; 
 } 
 r e t u r n </space/> s </space/> < </space/> k ; 
 } 
 
 i n t </space/> m a i n ( ) 
 { 
 # i f n d e f </space/> O N L I N E _ J U D G E 
 f r e o p e n ( "" 1 . i n "" , </space/> "" r "" , </space/> s t d i n ) ; 
 # e n d i f 
 n </space/> = </space/> i n ; 
 k </space/> = </space/> l i n ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 a [ i ] </space/> = </space/> i n ; 
 l l </space/> l </space/> = </space/> i n f , </space/> r </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 l </space/> = </space/> m i n ( l , </space/> f ( a [ i ] , </space/> a [ i ] </space/> - </space/> 1 ) ) , </space/> r </space/> = </space/> m a x ( r , </space/> f ( a [ i ] , </space/> 0 ) ) ; 
 l l </space/> a n s </space/> = </space/> r ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 l l </space/> m i d </space/> = </space/> l </space/> + </space/> r </space/> > > </space/> 1 ; 
 i f </space/> ( c h e c k ( m i d ) ) 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 e l s e 
 l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 } 
 a n s </space/> = </space/> l ; 
 c h e c k ( a n s ) ; 
 k </space/> - = </space/> s ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 w h i l e </space/> ( k </space/> > </space/> 0 </space/> & & </space/> b [ i ] </space/> < </space/> a [ i ] </space/> & & </space/> f ( a [ i ] , </space/> b [ i ] ) </space/> = = </space/> a n s ) 
 b [ i ] + + , </space/> k - - ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> i + + ) 
 p r i n t f ( "" % d % c "" , </space/> b [ i ] , </space/> "" </space/> \ n "" [ i </space/> = = </space/> n ] ) ; 
 r e t u r n </space/> 0 ; 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" # i n c l u d e </space/> < b i t s / s t d c + + . h > 
 # d e f i n e </space/> l l </space/> l o n g </space/> l o n g 
 # d e f i n e </space/> p b </space/> p u s h _ b a c k 
 # d e f i n e </space/> l o w b i t ( x ) </space/> ( ( x ) </space/> & </space/> ( - ( x ) ) ) 
 # d e f i n e </space/> m i d </space/> ( ( l </space/> + </space/> r ) </space/> > > </space/> 1 ) 
 # d e f i n e </space/> l s o n </space/> r t </space/> < < </space/> 1 , </space/> l , </space/> m i d 
 # d e f i n e </space/> r s o n </space/> r t </space/> < < </space/> 1 </space/> | </space/> 1 , </space/> m i d </space/> + </space/> 1 , </space/> r 
 # d e f i n e </space/> f o r s ( i , </space/> a , </space/> b ) </space/> f o r </space/> ( i n t </space/> i </space/> = </space/> ( a ) ; </space/> i </space/> < </space/> ( b ) ; </space/> + + i ) 
 u s i n g </space/> n a m e s p a c e </space/> s t d ; 
 c o n s t </space/> i n t </space/> m a x n </space/> = </space/> 1 e 5 </space/> + </space/> 5 ; 
 i n t </space/> a [ m a x n ] ; 
 i n t </space/> b [ m a x n ] ; 
 i n t </space/> n ; 
 l l </space/> k ; 
 l l </space/> d ( i n t </space/> i , </space/> l l </space/> x ) 
 { </space/> / / </space/> a x </space/> - </space/> x ^ 3 </space/> - </space/> a * ( x - 1 ) </space/> + </space/> ( x - 1 ) ^ 3 
 / / </space/> - a </space/> - </space/> x ^ 3 </space/> + </space/> ( x ^ 3 </space/> - </space/> 3 x ^ 2 </space/> + </space/> 3 x </space/> - 1 ) 
 / / </space/> - a </space/> - 3 x ^ 2 </space/> + </space/> 3 x </space/> - 1 
 r e t u r n </space/> a [ i ] </space/> - </space/> 3 L L </space/> * </space/> x </space/> * </space/> x </space/> + </space/> 3 </space/> * </space/> x </space/> - </space/> 1 ; 
 } 
 b o o l </space/> c h e c k ( l l </space/> l i m ) 
 { 
 l l </space/> r e s </space/> = </space/> 0 ; 
 f o r </space/> ( i n t </space/> i </space/> = </space/> 1 ; </space/> i </space/> < = </space/> n ; </space/> + + i ) 
 { 
 i f </space/> ( d ( i , </space/> 1 ) </space/> < </space/> l i m ) 
 { 
 b [ i ] </space/> = </space/> 0 ; 
 c o n t i n u e ; 
 } 
 i f </space/> ( d ( i , </space/> a [ i ] ) </space/> > = </space/> l i m ) 
 { 
 b [ i ] </space/> = </space/> a [ i ] ; 
 r e s </space/> + = </space/> a [ i ] ; 
 c o n t i n u e ; 
 } 
 
 l l </space/> l </space/> = </space/> 0 , </space/> r </space/> = </space/> a [ i ] ; 
 l l </space/> t </space/> = </space/> 1 0 0 8 6 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i f </space/> ( d ( i , </space/> m i d ) </space/> > = </space/> l i m ) 
 t </space/> = </space/> m i d , </space/> l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 a s s e r t ( t </space/> ! = </space/> 1 0 0 8 6 6 ) ; 
 b [ i ] </space/> = </space/> t ; 
 r e s </space/> + = </space/> t ; 
 } 
 r e t u r n </space/> r e s </space/> > = </space/> k ; 
 } 
 i n t </space/> m a i n ( ) 
 { 
 s c a n f ( "" % d % l l d "" , </space/> & n , </space/> & k ) ; 
 f o r s ( i , </space/> 1 , </space/> n </space/> + </space/> 1 ) </space/> s c a n f ( "" % d "" , </space/> & a [ i ] ) ; 
 l l </space/> l </space/> = </space/> - 4 </space/> * </space/> 1 e 1 8 , </space/> r </space/> = </space/> 1 e 9 </space/> + </space/> 1 ; 
 l l </space/> a n s </space/> = </space/> 1 0 0 8 6 ; 
 w h i l e </space/> ( l </space/> < = </space/> r ) 
 { 
 i f </space/> ( c h e c k ( m i d ) ) 
 a n s </space/> = </space/> m i d , </space/> l </space/> = </space/> m i d </space/> + </space/> 1 ; 
 e l s e 
 r </space/> = </space/> m i d </space/> - </space/> 1 ; 
 } 
 / / </space/> c o u t < < a n s < < e n d l ; 
 a s s e r t ( c h e c k ( a n s ) ) ; 
 
 l l </space/> s u m </space/> = </space/> 0 ; 
 f o r s ( i , </space/> 1 , </space/> n </space/> + </space/> 1 ) 
 { 
 s u m </space/> + = </space/> b [ i ] ; 
 / / </space/> c o u t < < "" i : "" < < i < < "" </space/> d : "" < < - 3 L L * b [ i ] * b [ i ] - 3 L L * b [ i ] - 1 </space/> + </space/> a [ i ] < < e n d l ; 
 } 
 / / </space/> c o u t < < s u m < < e n d l ; 
 f o r s ( i , </space/> 1 , </space/> n </space/> + </space/> 1 ) 
 { 
 i f </space/> ( s u m </space/> > </space/> k </space/> & & </space/> b [ i ] </space/> > </space/> 0 </space/> & & </space/> d ( i , </space/> b [ i ] ) </space/> = = </space/> a n s ) 
 s u m - - , </space/> b [ i ] - - ; 
 } 
 f o r s ( i , </space/> 1 , </space/> n </space/> + </space/> 1 ) 
 { 
 p r i n t f ( "" % d </space/> "" , </space/> b [ i ] ) ; 
 } 
 } 
",0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
